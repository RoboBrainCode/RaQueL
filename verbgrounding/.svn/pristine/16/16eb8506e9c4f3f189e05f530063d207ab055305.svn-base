Train Size: 42
Test Size: 1
alpha_0 = 1.0
C = 1.0E-5
initialMultiplier = 10.0
NP init = 10.0
Parser beam  = 200
Start LexPhi: 0
Training, iteration 0
---------------------
DataSet: 0
---------------------
0: ===========
if there exists a mug
(exists $0 (object:t $0 mug:d))
MakeLex parse time: 0.015 sec.
Adding:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
a mug  :- NP : mug:d : 0.0
Lex Size: 123
First parse time: 0.003 sec.
CORRECT:(exists $0 (object:t $0 mug:d))
Using:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.0
a mug  :- NP : mug:d : 22 : 20.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.0
a mug  :- NP : mug:d : 22 : 20.0
]
Scale: 1.0
Update:
{}
1: =========== r:1.0 p:1.0 (epoch:0 file:0 0)
if there exists a cup
(exists $0 (object:t $0 cup:d))
MakeLex parse time: 0.003 sec.
Adding:
if  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
there exists  :- S|NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
if there  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
exists  :- S|NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
if  :- S|NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
there exists  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
if there  :- S|NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
exists  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
if there  :- S/S : (lambda $0 t $0) : 0.0
exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
if  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 0.0
there exists  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
if there  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 0.0
exists  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
if  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
there exists  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 0.0
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
exists  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 0.0
if  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $1 $2)))) : 0.0
there exists  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
if there  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $1 $2)))) : 0.0
exists  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
if  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
there exists  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $1 $2)))) : 0.0
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
exists  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $1 $2)))) : 0.0
if  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 0.0
there exists  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
if there  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 0.0
exists  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
a cup  :- NP : cup:d : 0.0
Lex Size: 155
First parse time: 0.009 sec.
WRONG: null
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.0
if  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 151 : 0.0
if there  :- S/S : (lambda $0 t $0) : 133 : 0.0
if there  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 153 : 0.0
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.0
there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 132 : 0.0
there exists  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 152 : 0.0
exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 134 : 0.0
exists  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 154 : 0.0
a cup  :- NP : cup:d : 20 : 20.0
if  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 135 : 0.0
if  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 139 : 0.0
if  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $1 $2)))) : 143 : 0.0
if  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 147 : 0.0
if there  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 137 : 0.0
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 141 : 0.0
if there  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $1 $2)))) : 145 : 0.0
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 149 : 0.0
there exists  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 136 : 0.0
there exists  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 140 : 0.0
there exists  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 144 : 0.0
there exists  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $1 $2)))) : 148 : 0.0
there exists  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 152 : 0.0
exists  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 138 : 0.0
exists  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 142 : 0.0
exists  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 146 : 0.0
exists  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $1 $2)))) : 150 : 0.0
exists  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 154 : 0.0
a cup  :- NP : cup:d : 20 : 20.0
]
Second parse time: 0.01 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.0
if  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 151 : 0.0
if there  :- S/S : (lambda $0 t $0) : 133 : 0.0
if there  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 153 : 0.0
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.0
there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 132 : 0.0
there exists  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 152 : 0.0
exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 134 : 0.0
exists  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 154 : 0.0
a cup  :- NP : cup:d : 20 : 20.0
]
Scale: 0.9999900000999989
Update:
{LHT:0:object:t:e=0.2857114285831741, LHH:0:object:t:var=0.2857114285831741, LHT:1:object:t:d=0.2857114285831741, LHH:1:object:t:cup:d=0.2857114285831741, LHT:0:object:t:d=-0.2857114285831741, LHH:0:object:t:cup:d=-0.2857114285831741, LHT:1:object:t:e=-0.2857114285831741, LHH:1:object:t:var=-0.2857114285831741, LEX:122=0.011428457142384725, LEX:125=0.02285691428476945, LEX:129=0.011428457142384725, LEX:133=0.02285691428476945, LEX:137=-0.0457138285742501, LEX:141=-0.017142685715932686, LEX:145=-0.005714228573547962, LEX:149=-0.017142685715932686, LEX:153=0.02285691428476945, LEX:124=0.011428457142384725, LEX:128=0.011428457142384725, LEX:132=0.03428537142715419, LEX:136=-0.017142685715932686, LEX:140=-0.017142685715932686, LEX:144=-0.017142685715932686, LEX:148=-0.017142685715932686, LEX:152=0.005714228568836777, LEX:123=0.02285691428476945, LEX:127=0.011428457142384725, LEX:131=0.02285691428476945, LEX:135=-0.0457138285742501, LEX:139=-0.017142685715932686, LEX:143=-0.005714228573547962, LEX:147=-0.017142685715932686, LEX:151=0.02285691428476945, LEX:126=0.011428457142384725, LEX:130=0.011428457142384725, LEX:134=0.03428537142715419, LEX:138=-0.017142685715932686, LEX:142=-0.017142685715932686, LEX:146=-0.017142685715932686, LEX:150=-0.017142685715932686, LEX:154=0.005714228568836777}
2: =========== r:0.5 p:0.5 (epoch:0 file:0 0)
if there exists a cup and there exists a cup
(and (exists $0 (object:t $0 cup:d)))
MakeLex parse time: 0.025 sec.
Adding:
and there exists a cup  :- S\S : (lambda $0 t $0) : 0.0
Lex Size: 156
First parse time: 0.012 sec.
WRONG: (exists $0 (object:t $0 cup:d))
Using:
[LexEntries and scores:
if  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 123 : 0.02285691428476945
if  :- S/S : (lambda $0 t $0) : 131 : 0.02285691428476945
if there  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 125 : 0.02285691428476945
if there  :- S/S : (lambda $0 t $0) : 133 : 0.02285691428476945
there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 132 : 0.03428537142715419
exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 134 : 0.03428537142715419
a cup  :- NP : cup:d : 20 : 20.0
and there exists a cup  :- S\S : (lambda $0 t $0) : 155 : 0.0
]
Second parse time: 0.011 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 0.048352000000000006
]
Scale: 0.9999800003999921
Update:
{LHT:0:object:t:e=0.034460332484787144, LHH:0:object:t:var=0.034460332484787144, LHT:1:object:t:d=0.034460332484787144, LHH:1:object:t:cup:d=0.034460332484787144, LHT:0:object:t:d=-0.034460332484787214, LHH:0:object:t:cup:d=-0.034460332484787214, LHT:1:object:t:e=-0.034460332484787214, LHH:1:object:t:var=-0.034460332484787214, LEX:155=-0.9999800003237966, LEX:122=-0.03562733700445027, LEX:125=-0.07374484481358778, LEX:129=-0.03603683802387293, LEX:133=-0.1118813968826598, LEX:137=-0.039882489764878966, LEX:141=-0.03749686101305557, LEX:145=-0.07315033967174452, LEX:149=-0.03749686101305557, LEX:153=-0.0724867004405186, LEX:124=-0.03645104585270118, LEX:128=-0.03603683802387293, LEX:132=-0.1491751958435464, LEX:136=-0.036577979535155264, LEX:140=-0.03749686101305557, LEX:144=-0.03779056348229394, LEX:148=-0.03749686101305557, LEX:152=-0.11115098685969285, LEX:20=-0.9999800002511976, LEX:123=-0.07374484481358778, LEX:127=-0.03603683802387293, LEX:131=-0.1118813968826598, LEX:135=-0.039882489764878966, LEX:139=-0.03749686101305557, LEX:143=-0.07315033967174452, LEX:147=-0.03749686101305557, LEX:151=-0.0724867004405186, LEX:126=-0.03645104585270118, LEX:130=-0.03603683802387293, LEX:134=-0.1491751958435464, LEX:138=-0.036577979535155264, LEX:142=-0.03749686101305557, LEX:146=-0.03779056348229394, LEX:150=-0.03749686101305557, LEX:154=-0.11115098685969285, LEX:82=0.9999800003999921}
3: =========== r:0.3333333333333333 p:0.3333333333333333 (epoch:0 file:0 0)
if there exists an empty kettle
(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s)))
MakeLex parse time: 0.009 sec.
Adding:
if there exists an empty  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 empty:s)))) : 0.040293333333333334
kettle  :- NP : kettle:d : 0.0
Lex Size: 157
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if there exists an empty  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 empty:s)))) : 156 : 0.040293333333333334
kettle  :- NP : kettle:d : 11 : 10.0
]
Second parse time: 0.007 sec.
Best LexEntries:
[LexEntries and scores:
if there exists an empty  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 empty:s)))) : 156 : 0.040293333333333334
kettle  :- NP : kettle:d : 11 : 10.0
]
Scale: 0.999970000899973
Update:
{}
4: =========== r:0.5 p:0.5 (epoch:0 file:0 0)
if there exists a green glass
(exists $0 (and (object:t $0 glass:d) (state:t $0 green:s)))
MakeLex parse time: 0.007 sec.
Adding:
if there exists a green  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 green:s)))) : 0.040293333333333334
glass  :- NP : glass:d : 0.0
Lex Size: 158
First parse time: 0.006 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (state:t $0 green:s)))
Using:
[LexEntries and scores:
if there exists a green  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 green:s)))) : 157 : 0.040293333333333334
glass  :- NP : glass:d : 9 : 10.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a green  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 green:s)))) : 157 : 0.040293333333333334
glass  :- NP : glass:d : 9 : 10.0
]
Scale: 0.9999600015999359
Update:
{}
5: =========== r:0.6 p:0.6 (epoch:0 file:0 0)
if there exists a cup that contains syrup
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
MakeLex parse time: 0.007 sec.
Adding:
if there exists a cup that contains  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 cup:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.021585714285714284
syrup  :- NP : syrup:q : 0.0
Lex Size: 159
First parse time: 0.007 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
Using:
[LexEntries and scores:
if there exists a cup that contains  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 cup:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 158 : 0.021585714285714284
syrup  :- NP : syrup:q : 33 : 10.0
]
Second parse time: 0.008 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a cup that contains  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 cup:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 158 : 0.021585714285714284
syrup  :- NP : syrup:q : 33 : 10.0
]
Scale: 0.9999500024998749
Update:
{}
6: =========== r:0.6666666666666666 p:0.6666666666666666 (epoch:0 file:0 0)
if there exists a cup that contains coke
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 coke:q)))))
MakeLex parse time: 0.01 sec.
Adding:
if there exists  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 cup:d) ($0 $2 $1))))) : 0.08058666666666667
a cup that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 0.0
if there exists  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 cup:d) ($0 $1 $2))))) : 0.08058666666666667
a cup that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
if there exists  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 cup:d) ($0 $1)))) : 0.08058666666666667
a cup that contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
Lex Size: 165
First parse time: 0.008 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 coke:q)))))
Using:
[LexEntries and scores:
if there exists  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 cup:d) ($0 $2 $1))))) : 159 : 0.08058666666666667
if there exists  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 cup:d) ($0 $1 $2))))) : 161 : 0.08058666666666667
if there exists  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 cup:d) ($0 $1)))) : 163 : 0.08058666666666667
a cup that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 160 : 0.0
a cup that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 162 : 0.0
a cup that contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 164 : 0.0
coke  :- NP : coke:q : 34 : 10.0
]
Second parse time: 0.009 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 cup:d) ($0 $2 $1))))) : 159 : 0.08058666666666667
if there exists  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 cup:d) ($0 $1 $2))))) : 161 : 0.08058666666666667
if there exists  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 cup:d) ($0 $1)))) : 163 : 0.08058666666666667
a cup that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 160 : 0.0
a cup that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 162 : 0.0
a cup that contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 164 : 0.0
coke  :- NP : coke:q : 34 : 10.0
]
Scale: 0.9999400035997841
Update:
{LHT:0:has:t:e=0.21015706537934067, LHH:0:has:t:var=0.21015706537934067, LHT:1:object:t:q=0.21015706537934067, LHH:1:object:t:coke:q=0.21015706537934067, LHT:0:has:t:q=-0.21015706537934065, LHH:0:has:t:coke:q=-0.21015706537934065, LHT:1:object:t:e=-0.21015706537934065, LHH:1:object:t:var=-0.21015706537934065, LEX:158=0.03333748695461687, LEX:160=-0.03468874069687451, LEX:162=-0.03468874069687451, LEX:164=0.03603848816227023, LEX:159=-0.10474109582332135, LEX:161=6.748737326978192E-4, LEX:163=0.07072722885914472}
7: =========== r:0.7142857142857143 p:0.7142857142857143 (epoch:0 file:0 0)
if there is a red glass
(exists $0 (and (object:t $0 glass:d) (state:t $0 red:s)))
MakeLex parse time: 0.001 sec.
Adding:
if there is a red  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 red:s)))) : 0.0
glass  :- NP : glass:d : 0.0
Lex Size: 166
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (state:t $0 red:s)))
Using:
[LexEntries and scores:
if there is a red  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 red:s)))) : 165 : 0.0
glass  :- NP : glass:d : 9 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if there is a red  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 red:s)))) : 165 : 0.0
glass  :- NP : glass:d : 9 : 10.0
]
Scale: 0.999930004899657
Update:
{}
8: =========== r:0.75 p:0.75 (epoch:0 file:0 0)
if there is a yellow bowl
(exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s)))
MakeLex parse time: 0.002 sec.
Adding:
if there is  :- S/S : (lambda $0 t $0) : 0.0
a yellow bowl  :- S : (exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s))) : 0.0
if there is a  :- S/S : (lambda $0 t $0) : 0.0
yellow bowl  :- S : (exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s))) : 0.0
if there is a yellow  :- S/S : (lambda $0 t $0) : 0.0
bowl  :- S : (exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s))) : 0.0
if  :- S : (exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s))) : 0.0
there is a yellow bowl  :- S\S : (lambda $0 t $0) : 0.0
if there  :- S : (exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s))) : 0.0
is a yellow bowl  :- S\S : (lambda $0 t $0) : 0.0
if there is  :- S : (exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s))) : 0.0
a yellow bowl  :- S\S : (lambda $0 t $0) : 0.0
if there is a  :- S : (exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s))) : 0.0
yellow bowl  :- S\S : (lambda $0 t $0) : 0.0
if there is a yellow  :- S : (exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s))) : 0.0
bowl  :- S\S : (lambda $0 t $0) : 0.0
if there is  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 0.0
a yellow bowl  :- S|NP : (lambda $0 e (and (object:t $0 bowl:d) (state:t $0 yellow:s))) : 0.0
if there is a  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 0.0
yellow bowl  :- S|NP : (lambda $0 e (and (object:t $0 bowl:d) (state:t $0 yellow:s))) : 0.0
if there is a yellow  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 0.0
bowl  :- S|NP : (lambda $0 e (and (object:t $0 bowl:d) (state:t $0 yellow:s))) : 0.0
if  :- S|NP : (lambda $0 e (and (object:t $0 bowl:d) (state:t $0 yellow:s))) : 0.0
there is a yellow bowl  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 0.0
if there  :- S|NP : (lambda $0 e (and (object:t $0 bowl:d) (state:t $0 yellow:s))) : 0.0
is a yellow bowl  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 0.0
if there is  :- S|NP : (lambda $0 e (and (object:t $0 bowl:d) (state:t $0 yellow:s))) : 0.0
a yellow bowl  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 0.0
if there is a  :- S|NP : (lambda $0 e (and (object:t $0 bowl:d) (state:t $0 yellow:s))) : 0.0
yellow bowl  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 0.0
if there is a yellow  :- S|NP : (lambda $0 e (and (object:t $0 bowl:d) (state:t $0 yellow:s))) : 0.0
bowl  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 0.0
if  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and ($0 $1) (state:t $1 yellow:s)))) : 0.0
there is a yellow bowl  :- S|NP : (lambda $0 e (object:t $0 bowl:d)) : 0.0
if there  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and ($0 $1) (state:t $1 yellow:s)))) : 0.0
is a yellow bowl  :- S|NP : (lambda $0 e (object:t $0 bowl:d)) : 0.0
if there is  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and ($0 $1) (state:t $1 yellow:s)))) : 0.0
a yellow bowl  :- S|NP : (lambda $0 e (object:t $0 bowl:d)) : 0.0
if there is a  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and ($0 $1) (state:t $1 yellow:s)))) : 0.0
yellow bowl  :- S|NP : (lambda $0 e (object:t $0 bowl:d)) : 0.0
if there is a yellow  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and ($0 $1) (state:t $1 yellow:s)))) : 0.0
bowl  :- S|NP : (lambda $0 e (object:t $0 bowl:d)) : 0.0
if  :- S|NP : (lambda $0 e (object:t $0 bowl:d)) : 0.0
there is a yellow bowl  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 (and ($0 $1) (state:t $1 yellow:s)))) : 0.0
if there  :- S|NP : (lambda $0 e (object:t $0 bowl:d)) : 0.0
is a yellow bowl  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 (and ($0 $1) (state:t $1 yellow:s)))) : 0.0
if there is  :- S|NP : (lambda $0 e (object:t $0 bowl:d)) : 0.0
a yellow bowl  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 (and ($0 $1) (state:t $1 yellow:s)))) : 0.0
if there is a  :- S|NP : (lambda $0 e (object:t $0 bowl:d)) : 0.0
yellow bowl  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 (and ($0 $1) (state:t $1 yellow:s)))) : 0.0
if there is a yellow  :- S|NP : (lambda $0 e (object:t $0 bowl:d)) : 0.0
bowl  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 (and ($0 $1) (state:t $1 yellow:s)))) : 0.0
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 yellow:s)))) : 0.0
there is a yellow bowl  :- NP : bowl:d : 0.0
if there  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 yellow:s)))) : 0.0
is a yellow bowl  :- NP : bowl:d : 0.0
if there is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 yellow:s)))) : 0.0
a yellow bowl  :- NP : bowl:d : 0.0
if there is a  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 yellow:s)))) : 0.0
yellow bowl  :- NP : bowl:d : 0.0
if there is a yellow  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 yellow:s)))) : 0.0
bowl  :- NP : bowl:d : 0.0
if  :- NP : bowl:d : 0.0
there is a yellow bowl  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 yellow:s)))) : 0.0
if there  :- NP : bowl:d : 0.0
is a yellow bowl  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 yellow:s)))) : 0.0
if there is  :- NP : bowl:d : 0.0
a yellow bowl  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 yellow:s)))) : 0.0
if there is a  :- NP : bowl:d : 0.0
yellow bowl  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 yellow:s)))) : 0.0
if there is a yellow  :- NP : bowl:d : 0.0
bowl  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 yellow:s)))) : 0.0
if  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 bowl:d) ($0 $1)))) : 0.0
there is a yellow bowl  :- S|NP : (lambda $0 e (state:t $0 yellow:s)) : 0.0
if there  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 bowl:d) ($0 $1)))) : 0.0
is a yellow bowl  :- S|NP : (lambda $0 e (state:t $0 yellow:s)) : 0.0
if there is  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 bowl:d) ($0 $1)))) : 0.0
a yellow bowl  :- S|NP : (lambda $0 e (state:t $0 yellow:s)) : 0.0
if there is a  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 bowl:d) ($0 $1)))) : 0.0
yellow bowl  :- S|NP : (lambda $0 e (state:t $0 yellow:s)) : 0.0
if there is a yellow  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 bowl:d) ($0 $1)))) : 0.0
bowl  :- S|NP : (lambda $0 e (state:t $0 yellow:s)) : 0.0
if  :- S|NP : (lambda $0 e (state:t $0 yellow:s)) : 0.0
there is a yellow bowl  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 bowl:d) ($0 $1)))) : 0.0
if there  :- S|NP : (lambda $0 e (state:t $0 yellow:s)) : 0.0
is a yellow bowl  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 bowl:d) ($0 $1)))) : 0.0
if there is  :- S|NP : (lambda $0 e (state:t $0 yellow:s)) : 0.0
a yellow bowl  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 bowl:d) ($0 $1)))) : 0.0
if there is a  :- S|NP : (lambda $0 e (state:t $0 yellow:s)) : 0.0
yellow bowl  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 bowl:d) ($0 $1)))) : 0.0
if there is a yellow  :- S|NP : (lambda $0 e (state:t $0 yellow:s)) : 0.0
bowl  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 bowl:d) ($0 $1)))) : 0.0
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 0.0
there is a yellow bowl  :- NP : yellow:s : 0.0
if there  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 0.0
is a yellow bowl  :- NP : yellow:s : 0.0
if there is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 0.0
a yellow bowl  :- NP : yellow:s : 0.0
if there is a  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 0.0
yellow bowl  :- NP : yellow:s : 0.0
if there is a yellow  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 0.0
bowl  :- NP : yellow:s : 0.0
if  :- NP : yellow:s : 0.0
there is a yellow bowl  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 0.0
if there  :- NP : yellow:s : 0.0
is a yellow bowl  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 0.0
if there is  :- NP : yellow:s : 0.0
a yellow bowl  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 0.0
if there is a  :- NP : yellow:s : 0.0
yellow bowl  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 0.0
if there is a yellow  :- NP : yellow:s : 0.0
bowl  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 0.0
Lex Size: 278
First parse time: 0.05 sec.
CORRECT:(exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s)))
Using:
[LexEntries and scores:
if there is a  :- S/S : (lambda $0 t $0) : 168 : 0.0
if there is a  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 264 : 0.0
yellow  :- NP : yellow:s : 50 : 10.0
bowl  :- S\S : (lambda $0 t $0) : 181 : 0.0
bowl  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 277 : 0.0
]
Second parse time: 0.032 sec.
Best LexEntries:
[LexEntries and scores:
if there is a  :- S/S : (lambda $0 t $0) : 168 : 0.0
if there is a  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 264 : 0.0
yellow  :- NP : yellow:s : 50 : 10.0
bowl  :- S\S : (lambda $0 t $0) : 181 : 0.0
bowl  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 277 : 0.0
]
Scale: 0.999920006399488
Update:
{BB:object:t:state:t=-1.5602799988792605E-4, LHT:0:object:t:e=-9.627393581647824E-4, LHH:0:object:t:var=-9.627393581647824E-4, LHT:1:object:t:d=0.4188290332638051, LHH:1:object:t:bowl:d=0.4188290332638051, LHT:0:state:t:e=1.7661777505313984E-4, LHH:0:state:t:var=1.7661777505313984E-4, LHT:1:state:t:s=7.80422396595446E-4, LHH:1:state:t:yellow:s=7.80422396595446E-4, LHT:1:object:t:e=-1.8145844114789527E-4, LHH:1:object:t:var=-1.8145844114789527E-4, BB:exists:state:t=-1.7057126616691588E-4, BB:exists:object:t=-4.457099820214117E-4, LHT:1:state:t:e=-6.038046215415926E-4, LHH:1:state:t:var=-6.038046215415926E-4, BB:state:t:state:t=-1.5512957079698604E-4, BB:object:t:object:t=-6.169366743701768E-4, LHT:1:object:t:s=-0.4196103141808222, LHH:1:object:t:yellow:s=-0.4196103141808222, LEX:186=-2.499780239470951E-5, LEX:196=-3.7838661187998374E-5, LEX:206=-2.499780239470951E-5, LEX:216=-3.7838661187998374E-5, LEX:226=-1.5180533100574537E-5, LEX:246=-1.018860907290584E-4, LEX:266=-5.095527088399572E-5, LEX:189=-2.821477762295523E-5, LEX:199=-3.720357656266089E-5, LEX:209=-2.821477762295523E-5, LEX:229=-1.5020891893034145E-5, LEX:249=-1.102921839906375E-4, LEX:269=-5.032018625865824E-5, LEX:168=6.533970833279822E-4, LEX:184=-2.499780239470951E-5, LEX:194=-3.7838661187998374E-5, LEX:204=-2.499780239470951E-5, LEX:214=-3.7838661187998374E-5, LEX:224=-0.20977272273509606, LEX:244=-1.018860907290584E-4, LEX:264=0.2103504318062443, LEX:191=-2.821477762295523E-5, LEX:201=-3.720357656266089E-5, LEX:211=-2.821477762295523E-5, LEX:231=-1.5020891893034145E-5, LEX:251=-1.102921839906375E-4, LEX:271=-5.032018625865824E-5, LEX:182=-2.499780239470951E-5, LEX:192=-3.7838661187998374E-5, LEX:202=-2.499780239470951E-5, LEX:212=-3.7838661187998374E-5, LEX:222=-1.5180533100574537E-5, LEX:242=-1.018860907290584E-4, LEX:262=-5.095527088399572E-5, LEX:183=-3.7838661187998374E-5, LEX:193=-2.499780239470951E-5, LEX:203=-3.7838661187998374E-5, LEX:213=-2.499780239470951E-5, LEX:233=-1.5180533100574537E-5, LEX:253=-1.018860907290584E-4, LEX:273=-5.095527088399572E-5, LEX:129=-1.4840043718070546E-5, LEX:153=-3.2877156015513846E-5, LEX:190=-3.7838661187998374E-5, LEX:200=-1.1881192698712158E-5, LEX:210=-3.7838661187998374E-5, LEX:220=-1.5180533100574537E-5, LEX:240=-6.761183104182638E-5, LEX:260=-5.095527088399572E-5, LEX:185=-3.7838661187998374E-5, LEX:195=-2.499780239470951E-5, LEX:205=-3.7838661187998374E-5, LEX:215=-2.499780239470951E-5, LEX:235=-1.5180533100574537E-5, LEX:255=-1.018860907290584E-4, LEX:275=-5.095527088399572E-5, LEX:127=-1.4840043718070546E-5, LEX:151=-3.2877156015513846E-5, LEX:188=-3.7838661187998374E-5, LEX:198=-1.1881192698712158E-5, LEX:208=-3.7838661187998374E-5, LEX:218=-1.5180533100574537E-5, LEX:238=-6.761183104182638E-5, LEX:258=-5.095527088399572E-5, LEX:50=0.0012876897502655288, LEX:181=6.533970833279822E-4, LEX:187=-3.7838661187998374E-5, LEX:197=-2.499780239470951E-5, LEX:207=-3.7838661187998374E-5, LEX:217=-2.499780239470951E-5, LEX:237=-0.20977272273509606, LEX:257=-1.018860907290584E-4, LEX:277=0.2103504318062443}
9: =========== r:0.7777777777777778 p:0.7777777777777778 (epoch:0 file:0 0)
if there is an empty cup
(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
MakeLex parse time: 0.003 sec.
Adding:
if there is an empty  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 empty:s)))) : 0.0
cup  :- NP : cup:d : 0.0
Lex Size: 279
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if there is an empty  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 empty:s)))) : 278 : 0.0
cup  :- NP : cup:d : 8 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if there is an empty  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 empty:s)))) : 278 : 0.0
cup  :- NP : cup:d : 8 : 10.0
]
Scale: 0.9999100080992711
Update:
{}
10: =========== r:0.8 p:0.8 (epoch:0 file:0 0)
if the cup contains water
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 water:q)))))
MakeLex parse time: 0.002 sec.
Adding:
if the cup contains  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 cup:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0512659375
water  :- NP : water:q : 0.0
Lex Size: 280
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 water:q)))))
Using:
[LexEntries and scores:
if the cup contains  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 cup:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 279 : 0.0512659375
water  :- NP : water:q : 32 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if the cup contains  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 cup:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 279 : 0.0512659375
water  :- NP : water:q : 32 : 10.0
]
Scale: 0.9999000099990001
Update:
{}
11: =========== r:0.8181818181818182 p:0.8181818181818182 (epoch:0 file:0 0)
if it contains coffee
(exists $0 (and (object:t $0 it:e) (has:t $0 (the $1 (object:t $1 coffee:q)))))
MakeLex parse time: 0.001 sec.
Adding:
if it contains  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 it:e) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
coffee  :- NP : coffee:q : 0.0
Lex Size: 281
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 it:e) (has:t $0 (the $1 (object:t $1 coffee:q)))))
Using:
[LexEntries and scores:
if it contains  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 it:e) (has:t $1 (the $2 (object:t $2 $0)))))) : 280 : 0.0
coffee  :- NP : coffee:q : 35 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if it contains  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 it:e) (has:t $1 (the $2 (object:t $2 $0)))))) : 280 : 0.0
coffee  :- NP : coffee:q : 35 : 10.0
]
Scale: 0.9998900120986691
Update:
{}
12: =========== r:0.8333333333333334 p:0.8333333333333334 (epoch:0 file:0 0)
if the plate contains syrup
(exists $0 (and (object:t $0 plate:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
MakeLex parse time: 0.001 sec.
Adding:
if the plate contains  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 plate:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0512659375
syrup  :- NP : syrup:q : 0.0
Lex Size: 282
First parse time: 0.001 sec.
CORRECT:(exists $0 (and (object:t $0 plate:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
Using:
[LexEntries and scores:
if the plate contains  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 plate:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 281 : 0.0512659375
syrup  :- NP : syrup:q : 33 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if the plate contains  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 plate:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 281 : 0.0512659375
syrup  :- NP : syrup:q : 33 : 10.0
]
Scale: 0.9998800143982723
Update:
{}
13: =========== r:0.8461538461538461 p:0.8461538461538461 (epoch:0 file:0 0)
if the cup is empty
(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
MakeLex parse time: 0.002 sec.
Adding:
if the cup is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
empty  :- NP : empty:s : 0.0
Lex Size: 283
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if the cup is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 282 : 0.0
empty  :- NP : empty:s : 53 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if the cup is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 282 : 0.0
empty  :- NP : empty:s : 53 : 10.0
]
Scale: 0.9998700168978033
Update:
{}
14: =========== r:0.8571428571428571 p:0.8571428571428571 (epoch:0 file:0 0)
if they are used
(exists $0 (and (object:t $0 they:e) (state:t $0 used:s)))
MakeLex parse time: 0.001 sec.
Adding:
if they are  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 they:e) (state:t $1 $0)))) : 0.0
used  :- NP : used:s : 0.0
Lex Size: 284
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 they:e) (state:t $0 used:s)))
Using:
[LexEntries and scores:
if they are  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 they:e) (state:t $1 $0)))) : 283 : 0.0
used  :- NP : used:s : 54 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if they are  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 they:e) (state:t $1 $0)))) : 283 : 0.0
used  :- NP : used:s : 54 : 10.0
]
Scale: 0.9998600195972563
Update:
{}
15: =========== r:0.8666666666666667 p:0.8666666666666667 (epoch:0 file:0 0)
if the kettle is white
(exists $0 (and (object:t $0 kettle:d) (state:t $0 white:s)))
MakeLex parse time: 0.001 sec.
Adding:
if the kettle is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 kettle:d) (state:t $1 $0)))) : 0.0
white  :- NP : white:s : 0.0
Lex Size: 285
First parse time: 0.001 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 white:s)))
Using:
[LexEntries and scores:
if the kettle is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 kettle:d) (state:t $1 $0)))) : 284 : 0.0
white  :- NP : white:s : 52 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if the kettle is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 kettle:d) (state:t $1 $0)))) : 284 : 0.0
white  :- NP : white:s : 52 : 10.0
]
Scale: 0.9998500224966254
Update:
{}
16: =========== r:0.875 p:0.875 (epoch:0 file:0 0)
if the mug is on the stove
(exists $0 (and (object:t $0 mug:d) (On:t $0 (the $1 (object:t $1 stove:f)))))
MakeLex parse time: 0.002 sec.
Adding:
if the mug is on  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 mug:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 0.04101275
the stove  :- NP : stove:f : 0.0
Lex Size: 286
First parse time: 0.001 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (On:t $0 (the $1 (object:t $1 stove:f)))))
Using:
[LexEntries and scores:
if the mug is on  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 mug:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 285 : 0.04101275
the stove  :- NP : stove:f : 76 : 20.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if the mug is on  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 mug:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 285 : 0.04101275
the stove  :- NP : stove:f : 76 : 20.0
]
Scale: 0.9998400255959047
Update:
{}
17: =========== r:0.8823529411764706 p:0.8823529411764706 (epoch:0 file:0 0)
if the mug is red and dry
(exists $0 (and (object:t $0 mug:d) (state:t $0 red:s) (state:t $0 dry:s)))
MakeLex parse time: 0.002 sec.
Adding:
if the mug is red and  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 mug:d) (state:t $1 red:s) (state:t $1 $0)))) : 0.0
dry  :- NP : dry:s : 0.0
Lex Size: 287
First parse time: 0.001 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (state:t $0 red:s) (state:t $0 dry:s)))
Using:
[LexEntries and scores:
if the mug is red and  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 mug:d) (state:t $1 red:s) (state:t $1 $0)))) : 286 : 0.0
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if the mug is red and  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 mug:d) (state:t $1 red:s) (state:t $1 $0)))) : 286 : 0.0
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9998300288950879
Update:
{}
18: =========== r:0.8888888888888888 p:0.8888888888888888 (epoch:0 file:0 0)
if the kettle is empty and cool
(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s) (state:t $0 cool:s)))
MakeLex parse time: 0.002 sec.
Adding:
if the kettle is empty and  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 kettle:d) (state:t $1 empty:s) (state:t $1 $0)))) : 0.0
cool  :- NP : cool:s : 0.0
Lex Size: 288
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s) (state:t $0 cool:s)))
Using:
[LexEntries and scores:
if the kettle is empty and  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 kettle:d) (state:t $1 empty:s) (state:t $1 $0)))) : 287 : 0.0
cool  :- NP : cool:s : 49 : 10.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
if the kettle is empty and  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 kettle:d) (state:t $1 empty:s) (state:t $1 $0)))) : 287 : 0.0
cool  :- NP : cool:s : 49 : 10.0
]
Scale: 0.999820032394169
Update:
{}
19: =========== r:0.8947368421052632 p:0.8947368421052632 (epoch:0 file:0 0)
if the glass is used and on the floor
(exists $0 (and (object:t $0 kettle:d) (state:t $0 used:s) (On:t $0 (the $1 (object:t $1 floor:lo)))))
MakeLex parse time: 0.002 sec.
Adding:
if the glass is used and on  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 kettle:d) (state:t $1 used:s) (On:t $1 (the $2 (object:t $2 $0)))))) : 0.0781087142857143
the floor  :- NP : floor:lo : 0.0
Lex Size: 289
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 used:s) (On:t $0 (the $1 (object:t $1 floor:lo)))))
Using:
[LexEntries and scores:
if the glass is used and on  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 kettle:d) (state:t $1 used:s) (On:t $1 (the $2 (object:t $2 $0)))))) : 288 : 0.0781087142857143
the floor  :- NP : floor:lo : 67 : 20.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if the glass is used and on  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 kettle:d) (state:t $1 used:s) (On:t $1 (the $2 (object:t $2 $0)))))) : 288 : 0.0781087142857143
the floor  :- NP : floor:lo : 67 : 20.0
]
Scale: 0.9998100360931423
Update:
{}
20: =========== r:0.9 p:0.9 (epoch:0 file:0 0)
if the plate is dirty and in the refrigerator
(exists $0 (and (object:t $0 plate:d) (state:t $0 dirty:s) (In:t $0 (the $1 (object:t $1 refrigerator:f)))))
MakeLex parse time: 0.002 sec.
Adding:
if the plate is dirty and in  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 plate:d) (state:t $1 dirty:s) (In:t $1 (the $2 (object:t $2 $0)))))) : 0.0781087142857143
the refrigerator  :- NP : refrigerator:f : 0.0
Lex Size: 290
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 plate:d) (state:t $0 dirty:s) (In:t $0 (the $1 (object:t $1 refrigerator:f)))))
Using:
[LexEntries and scores:
if the plate is dirty and in  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 plate:d) (state:t $1 dirty:s) (In:t $1 (the $2 (object:t $2 $0)))))) : 289 : 0.0781087142857143
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
if the plate is dirty and in  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 plate:d) (state:t $1 dirty:s) (In:t $1 (the $2 (object:t $2 $0)))))) : 289 : 0.0781087142857143
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
]
Scale: 0.9998000399920016
Update:
{}
21: =========== r:0.9047619047619048 p:0.9047619047619048 (epoch:0 file:0 0)
for all mugs that contain water
(forall $0 (and (object:t $0 mugs:d) (has:t $0 (the $1 (object:t $1 water:q)))))
MakeLex parse time: 0.001 sec.
Adding:
for all mugs that contain  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
water  :- NP : water:q : 0.0
Lex Size: 291
First parse time: 0.0 sec.
CORRECT:(forall $0 (and (object:t $0 mugs:d) (has:t $0 (the $1 (object:t $1 water:q)))))
Using:
[LexEntries and scores:
for all mugs that contain  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 290 : 0.0
water  :- NP : water:q : 32 : 10.0
]
Second parse time: 0.0 sec.
Best LexEntries:
[LexEntries and scores:
for all mugs that contain  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 290 : 0.0
water  :- NP : water:q : 32 : 10.0
]
Scale: 0.9997900440907409
Update:
{}
22: =========== r:0.9090909090909091 p:0.9090909090909091 (epoch:0 file:0 0)
for all bowls that are green
(forall $0 (and (object:t $0 bowls:d) (state:t $0 green:s)))
MakeLex parse time: 0.0 sec.
Adding:
for all bowls that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 0.0
green  :- NP : green:s : 0.0
Lex Size: 292
First parse time: 0.0 sec.
CORRECT:(forall $0 (and (object:t $0 bowls:d) (state:t $0 green:s)))
Using:
[LexEntries and scores:
for all bowls that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 291 : 0.0
green  :- NP : green:s : 51 : 10.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
for all bowls that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 291 : 0.0
green  :- NP : green:s : 51 : 10.0
]
Scale: 0.9997800483893542
Update:
{}
23: =========== r:0.9130434782608695 p:0.9130434782608695 (epoch:0 file:0 0)
for all glasses that are empty
(forall $0 (and (object:t $0 glasses:d) (state:t $0 empty:s)))
MakeLex parse time: 0.001 sec.
Adding:
for all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 0.0
empty  :- NP : empty:s : 0.0
Lex Size: 293
First parse time: 0.002 sec.
CORRECT:(forall $0 (and (object:t $0 glasses:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
for all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 292 : 0.0
empty  :- NP : empty:s : 53 : 10.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
for all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 292 : 0.0
empty  :- NP : empty:s : 53 : 10.0
]
Scale: 0.9997700528878358
Update:
{}
24: =========== r:0.9166666666666666 p:0.9166666666666666 (epoch:0 file:0 0)
for every cup that is dry
(forall $0 (and (object:t $0 cup:d) (state:t $0 dry:s)))
MakeLex parse time: 0.001 sec.
Adding:
for every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
dry  :- NP : dry:s : 0.0
Lex Size: 294
First parse time: 0.001 sec.
CORRECT:(forall $0 (and (object:t $0 cup:d) (state:t $0 dry:s)))
Using:
[LexEntries and scores:
for every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 293 : 0.0
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
for every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 293 : 0.0
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9997600575861793
Update:
{}
25: =========== r:0.92 p:0.92 (epoch:0 file:0 0)
for every plate that is on the table
(forall $0 (and (object:t $0 plate:d) (On:t $0 (the $1 (object:t $1 table:f)))))
MakeLex parse time: 0.0 sec.
Adding:
for every plate that is on  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 0.0
the table  :- NP : table:f : 0.0
Lex Size: 295
First parse time: 0.001 sec.
CORRECT:(forall $0 (and (object:t $0 plate:d) (On:t $0 (the $1 (object:t $1 table:f)))))
Using:
[LexEntries and scores:
for every plate that is on  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 294 : 0.0
the table  :- NP : table:f : 73 : 20.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
for every plate that is on  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 294 : 0.0
the table  :- NP : table:f : 73 : 20.0
]
Scale: 0.9997500624843788
Update:
{}
26: =========== r:0.9230769230769231 p:0.9230769230769231 (epoch:0 file:0 0)
for all mugs that are in the sink
(forall $0 (and (object:t $0 mugs:d) (In:t $0 (the $1 (object:t $1 sink:f)))))
MakeLex parse time: 0.0 sec.
Adding:
for all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 0.0
the sink  :- NP : sink:f : 0.0
Lex Size: 296
First parse time: 0.001 sec.
CORRECT:(forall $0 (and (object:t $0 mugs:d) (In:t $0 (the $1 (object:t $1 sink:f)))))
Using:
[LexEntries and scores:
for all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 295 : 0.0
the sink  :- NP : sink:f : 74 : 20.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
for all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 295 : 0.0
the sink  :- NP : sink:f : 74 : 20.0
]
Scale: 0.9997400675824286
Update:
{}
27: =========== r:0.9259259259259259 p:0.9259259259259259 (epoch:0 file:0 0)
if the robot is grasping the mug
(exists $0 (and (object:t $0 robot:p) (IsGrasping:t $0 (the $1 (object:t $1 mug:d)))))
MakeLex parse time: 0.001 sec.
Adding:
if the robot is grasping  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 robot:p) (IsGrasping:t $1 (the $2 (object:t $2 $0)))))) : 0.04101275
the mug  :- NP : mug:d : 0.0
Lex Size: 297
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsGrasping:t $0 (the $1 (object:t $1 mug:d)))))
Using:
[LexEntries and scores:
if the robot is grasping  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 robot:p) (IsGrasping:t $1 (the $2 (object:t $2 $0)))))) : 296 : 0.04101275
the mug  :- NP : mug:d : 16 : 20.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if the robot is grasping  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 robot:p) (IsGrasping:t $1 (the $2 (object:t $2 $0)))))) : 296 : 0.04101275
the mug  :- NP : mug:d : 16 : 20.0
]
Scale: 0.9997300728803223
Update:
{}
28: =========== r:0.9285714285714286 p:0.9285714285714286 (epoch:0 file:0 0)
if the robot is near the refrigerator
(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 refrigerator:f)))))
MakeLex parse time: 0.001 sec.
Adding:
if the robot is near  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 robot:p) (IsNear:t $1 (the $2 (object:t $2 $0)))))) : 0.04101275
the refrigerator  :- NP : refrigerator:f : 0.0
Lex Size: 298
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 refrigerator:f)))))
Using:
[LexEntries and scores:
if the robot is near  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 robot:p) (IsNear:t $1 (the $2 (object:t $2 $0)))))) : 297 : 0.04101275
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
if the robot is near  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 robot:p) (IsNear:t $1 (the $2 (object:t $2 $0)))))) : 297 : 0.04101275
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
]
Scale: 0.9997200783780541
Update:
{}
29: =========== r:0.9310344827586207 p:0.9310344827586207 (epoch:0 file:0 0)
if the robot is close to the stove
(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
MakeLex parse time: 0.001 sec.
Adding:
if the robot is close to  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 robot:p) (IsNear:t $1 (the $2 (object:t $2 $0)))))) : 0.034177291666666665
the stove  :- NP : stove:f : 0.0
Lex Size: 299
First parse time: 0.001 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
Using:
[LexEntries and scores:
if the robot is close to  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 robot:p) (IsNear:t $1 (the $2 (object:t $2 $0)))))) : 298 : 0.034177291666666665
the stove  :- NP : stove:f : 76 : 20.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if the robot is close to  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 robot:p) (IsNear:t $1 (the $2 (object:t $2 $0)))))) : 298 : 0.034177291666666665
the stove  :- NP : stove:f : 76 : 20.0
]
Scale: 0.9997100840756181
Update:
{}
30: =========== r:0.9333333333333333 p:0.9333333333333333 (epoch:0 file:0 0)
if the microwave is on and the robot is close to the microwave
(and (exists $0 (and (object:t $0 microwave:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 microwave:f))))))
MakeLex parse time: 0.002 sec.
Adding:
if the microwave is on and the robot is close to  :- S/NP : (lambda $0 e (and (exists $1 (and (object:t $1 $0) (state:t $1 IsOn:s))) (exists $1 (and (object:t $1 robot:p) (IsNear:t $1 (the $2 (object:t $2 microwave:f))))))) : 0.04307951515151515
the microwave  :- NP : microwave:f : 0.0
if the microwave is on and the robot is close to  :- S/NP : (lambda $0 e (and (exists $1 (and (object:t $1 microwave:f) (state:t $1 IsOn:s))) (exists $1 (and (object:t $1 robot:p) (IsNear:t $1 (the $2 (object:t $2 $0))))))) : 0.04307951515151515
the microwave  :- NP : microwave:f : 0.0
Lex Size: 301
First parse time: 0.002 sec.
CORRECT:(and (exists $0 (and (object:t $0 microwave:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 microwave:f))))))
Using:
[LexEntries and scores:
if the microwave is on and the robot is close to  :- S/NP : (lambda $0 e (and (exists $1 (and (object:t $1 $0) (state:t $1 IsOn:s))) (exists $1 (and (object:t $1 robot:p) (IsNear:t $1 (the $2 (object:t $2 microwave:f))))))) : 299 : 0.04307951515151515
if the microwave is on and the robot is close to  :- S/NP : (lambda $0 e (and (exists $1 (and (object:t $1 microwave:f) (state:t $1 IsOn:s))) (exists $1 (and (object:t $1 robot:p) (IsNear:t $1 (the $2 (object:t $2 $0))))))) : 300 : 0.04307951515151515
the microwave  :- NP : microwave:f : 77 : 20.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if the microwave is on and the robot is close to  :- S/NP : (lambda $0 e (and (exists $1 (and (object:t $1 $0) (state:t $1 IsOn:s))) (exists $1 (and (object:t $1 robot:p) (IsNear:t $1 (the $2 (object:t $2 microwave:f))))))) : 299 : 0.04307951515151515
if the microwave is on and the robot is close to  :- S/NP : (lambda $0 e (and (exists $1 (and (object:t $1 microwave:f) (state:t $1 IsOn:s))) (exists $1 (and (object:t $1 robot:p) (IsNear:t $1 (the $2 (object:t $2 $0))))))) : 300 : 0.04307951515151515
the microwave  :- NP : microwave:f : 77 : 20.0
]
Scale: 0.9997000899730081
Update:
{}
31: =========== r:0.9354838709677419 p:0.9354838709677419 (epoch:0 file:0 0)
if the stove is not on and the mug contains coffee
(and (exists $0 (and (object:t $0 stove:f) (not (state:t $0 IsOn:s)))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coffee:q))))))
MakeLex parse time: 0.003 sec.
Adding:
if the stove is not on and the mug contains  :- S/NP : (lambda $0 e (and (exists $1 (and (object:t $1 stove:f) (not (state:t $1 IsOn:s)))) (exists $1 (and (object:t $1 mug:d) (has:t $1 (the $2 (object:t $2 $0))))))) : 0.10692574999999999
coffee  :- NP : coffee:q : 0.0
Lex Size: 302
First parse time: 0.003 sec.
CORRECT:(and (exists $0 (and (object:t $0 stove:f) (not (state:t $0 IsOn:s)))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coffee:q))))))
Using:
[LexEntries and scores:
if the stove is not on and the mug contains  :- S/NP : (lambda $0 e (and (exists $1 (and (object:t $1 stove:f) (not (state:t $1 IsOn:s)))) (exists $1 (and (object:t $1 mug:d) (has:t $1 (the $2 (object:t $2 $0))))))) : 301 : 0.10692574999999999
coffee  :- NP : coffee:q : 35 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if the stove is not on and the mug contains  :- S/NP : (lambda $0 e (and (exists $1 (and (object:t $1 stove:f) (not (state:t $1 IsOn:s)))) (exists $1 (and (object:t $1 mug:d) (has:t $1 (the $2 (object:t $2 $0))))))) : 301 : 0.10692574999999999
coffee  :- NP : coffee:q : 35 : 10.0
]
Scale: 0.9996900960702182
Update:
{}
32: =========== r:0.9375 p:0.9375 (epoch:0 file:0 0)
if the mug is green and the TV is on
(and (exists $0 (and (object:t $0 mug:d) (state:t $0 green:s))) (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s))))
MakeLex parse time: 0.002 sec.
Adding:
if the mug is green and the TV is  :- S/NP : (lambda $0 e (and (exists $1 (and (object:t $1 mug:d) (state:t $1 green:s))) (exists $1 (and (object:t $1 tv:f) (state:t $1 $0))))) : 0.0
on  :- NP : IsOn:s : 0.0
Lex Size: 303
First parse time: 0.001 sec.
CORRECT:(and (exists $0 (and (object:t $0 mug:d) (state:t $0 green:s))) (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s))))
Using:
[LexEntries and scores:
if the mug is green and the TV is  :- S/NP : (lambda $0 e (and (exists $1 (and (object:t $1 mug:d) (state:t $1 green:s))) (exists $1 (and (object:t $1 tv:f) (state:t $1 $0))))) : 302 : 0.0
on  :- NP : IsOn:s : 57 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if the mug is green and the TV is  :- S/NP : (lambda $0 e (and (exists $1 (and (object:t $1 mug:d) (state:t $1 green:s))) (exists $1 (and (object:t $1 tv:f) (state:t $1 $0))))) : 302 : 0.0
on  :- NP : IsOn:s : 57 : 10.0
]
Scale: 0.9996801023672424
Update:
{}
33: =========== r:0.9393939393939394 p:0.9393939393939394 (epoch:0 file:0 0)
if there exists a mug and the mug contains sugar
(and (exists $0 (object:t $0 mug:d)) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 sugar:q))))))
MakeLex parse time: 0.004 sec.
Adding:
and the mug contains sugar  :- S\S : (lambda $0 t (and $0 (exists $1 (and (object:t $1 mug:d) (has:t $1 (the $2 (object:t $2 sugar:q))))))) : 0.10935220000000001
Lex Size: 304
First parse time: 0.008 sec.
WRONG: (and (exists $0 (and (object:t $0 bowl:d) (object:t $0 mug:d))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 sugar:q))))))
Using:
[LexEntries and scores:
if  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 bowl:d) ($0 $1)))) : 238 : -6.761183104182638E-5
if there  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 bowl:d) ($0 $1)))) : 240 : -6.761183104182638E-5
there exists  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 152 : -0.10543675829085608
exists  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 154 : -0.10543675829085608
a mug  :- NP : mug:d : 22 : 20.0
and the mug contains sugar  :- S\S : (lambda $0 t (and $0 (exists $1 (and (object:t $1 mug:d) (has:t $1 (the $2 (object:t $2 sugar:q))))))) : 303 : 0.10935220000000001
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : -0.024198879862065543
a mug  :- NP : mug:d : 22 : 20.0
and the mug contains sugar  :- S\S : (lambda $0 t (and $0 (exists $1 (and (object:t $1 mug:d) (has:t $1 (the $2 (object:t $2 sugar:q))))))) : 303 : 0.10935220000000001
]
Scale: 0.9996701088640749
Update:
{BB:exists:exists=0.05121004889219842, LHT:0:object:t:e=-0.3396961024312891, LHH:0:object:t:var=-0.3396961024312891, LHT:1:object:t:d=-0.381790990744201, LHH:1:object:t:mug:d=0.06143811587796011, BB:object:t:state:t=-0.14496595859957453, LHT:0:state:t:e=-0.10283821849970995, LHH:0:state:t:var=-0.10283821849970995, LHT:1:state:t:s=-0.13301724912892823, LHH:1:state:t:yellow:s=-0.13301724912892823, BB:object:t:object:t=-0.4011342183092489, LHH:1:object:t:bowl:d=-0.44322910662216153, LHT:0:object:t:d=-0.05232295529867476, LHH:0:object:t:mug:d=-0.05232295529867476, LHT:1:object:t:e=-0.010228066985762181, LHH:1:object:t:var=-0.010228066985762181, BB:exists:object:t=-0.06315875836284486, BB:exists:state:t=-0.051242900679150584, LHT:0:state:t:d=-0.03017903062921828, LHH:0:state:t:mug:d=-0.03017903062921828, LEX:122=0.023499262474154375, LEX:125=0.04271200957576066, LEX:129=0.02291831367233748, LEX:133=0.058901461176188996, LEX:137=0.018957557884837346, LEX:141=0.020532023110117613, LEX:145=0.040056180917665114, LEX:149=0.020532023110117613, LEX:153=0.041232042118033954, LEX:190=-0.010531935024966146, LEX:200=-0.03334376637875852, LEX:210=-0.010515509131490137, LEX:220=-0.018075342871096453, LEX:240=-0.20056710915462445, LEX:250=-0.004557580289642992, LEX:124=0.022314962044912554, LEX:128=-0.02076205364485824, LEX:132=0.07929850870703709, LEX:136=0.019917568873911363, LEX:140=0.020532023110117613, LEX:144=0.020041603514573295, LEX:148=0.020532023110117613, LEX:152=-0.17362426700133124, LEX:123=0.04271200957576066, LEX:127=0.02291831367233748, LEX:131=0.058901461176188996, LEX:135=0.018957557884837346, LEX:139=0.020532023110117613, LEX:143=0.040056180917665114, LEX:147=0.020532023110117613, LEX:151=0.041232042118033954, LEX:188=-0.010531935024966146, LEX:198=-0.03334376637875852, LEX:208=-0.010515509131490137, LEX:218=-0.018075342871096453, LEX:238=-0.20056710915462445, LEX:248=-0.004557580289642992, LEX:126=0.022314962044912554, LEX:130=-0.02076205364485824, LEX:134=0.07929850870703709, LEX:138=0.019917568873911363, LEX:142=0.020532023110117613, LEX:146=0.020041603514573295, LEX:150=0.020532023110117613, LEX:154=-0.17362426700133124}
34: =========== r:0.9117647058823529 p:0.9117647058823529 (epoch:0 file:0 0)
if the television is on
(exists $0 (and (object:t $0 television:f) (state:t $0 IsOn:s)))
MakeLex parse time: 0.001 sec.
Adding:
if the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 0.0
on  :- NP : IsOn:s : 0.0
Lex Size: 305
First parse time: 0.001 sec.
CORRECT:(exists $0 (and (object:t $0 television:f) (state:t $0 IsOn:s)))
Using:
[LexEntries and scores:
if the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 304 : 0.0
on  :- NP : IsOn:s : 57 : 10.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
if the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 304 : 0.0
on  :- NP : IsOn:s : 57 : 10.0
]
Scale: 0.9996601155607093
Update:
{}
35: =========== r:0.9142857142857143 p:0.9142857142857143 (epoch:0 file:0 0)
if you find any cups
(exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d))))
MakeLex parse time: 0.0 sec.
Adding:
if you  :- S/S : (lambda $0 t $0) : 0.0
find any cups  :- S : (exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d)))) : 0.0
if you find  :- S/S : (lambda $0 t $0) : 0.0
any cups  :- S : (exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d)))) : 0.0
if you find any  :- S/S : (lambda $0 t $0) : 0.0
cups  :- S : (exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d)))) : 0.0
if  :- S : (exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d)))) : 0.0
you find any cups  :- S\S : (lambda $0 t $0) : 0.0
if you  :- S : (exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d)))) : 0.0
find any cups  :- S\S : (lambda $0 t $0) : 0.0
if you find  :- S : (exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d)))) : 0.0
any cups  :- S\S : (lambda $0 t $0) : 0.0
if you find any  :- S : (exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d)))) : 0.0
cups  :- S\S : (lambda $0 t $0) : 0.0
if you  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 0.0
find any cups  :- S|NP : (lambda $0 e (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d)))) : 0.0
if you find  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 0.0
any cups  :- S|NP : (lambda $0 e (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d)))) : 0.0
if you find any  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 0.0
cups  :- S|NP : (lambda $0 e (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d)))) : 0.0
if  :- S|NP : (lambda $0 e (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d)))) : 0.0
you find any cups  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 0.0
if you  :- S|NP : (lambda $0 e (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d)))) : 0.0
find any cups  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 0.0
if you find  :- S|NP : (lambda $0 e (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d)))) : 0.0
any cups  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 0.0
if you find any  :- S|NP : (lambda $0 e (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d)))) : 0.0
cups  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 0.0
if  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and ($0 $1) (exists $2 (object:t $2 cups:d))))) : 0.0
you find any cups  :- S|NP : (lambda $0 e (object:t $0 you:p)) : 0.0
if you  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and ($0 $1) (exists $2 (object:t $2 cups:d))))) : 0.0
find any cups  :- S|NP : (lambda $0 e (object:t $0 you:p)) : 0.0
if you find  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and ($0 $1) (exists $2 (object:t $2 cups:d))))) : 0.0
any cups  :- S|NP : (lambda $0 e (object:t $0 you:p)) : 0.0
if you find any  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and ($0 $1) (exists $2 (object:t $2 cups:d))))) : 0.0
cups  :- S|NP : (lambda $0 e (object:t $0 you:p)) : 0.0
if  :- S|NP : (lambda $0 e (object:t $0 you:p)) : 0.0
you find any cups  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 (and ($0 $1) (exists $2 (object:t $2 cups:d))))) : 0.0
if you  :- S|NP : (lambda $0 e (object:t $0 you:p)) : 0.0
find any cups  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 (and ($0 $1) (exists $2 (object:t $2 cups:d))))) : 0.0
if you find  :- S|NP : (lambda $0 e (object:t $0 you:p)) : 0.0
any cups  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 (and ($0 $1) (exists $2 (object:t $2 cups:d))))) : 0.0
if you find any  :- S|NP : (lambda $0 e (object:t $0 you:p)) : 0.0
cups  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 (and ($0 $1) (exists $2 (object:t $2 cups:d))))) : 0.0
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 0.0
you find any cups  :- NP : you:p : 0.0
if you  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 0.0
find any cups  :- NP : you:p : 0.0
if you find  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 0.0
any cups  :- NP : you:p : 0.0
if you find any  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 0.0
cups  :- NP : you:p : 0.0
if  :- NP : you:p : 0.0
you find any cups  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 0.0
if you  :- NP : you:p : 0.0
find any cups  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 0.0
if you find  :- NP : you:p : 0.0
any cups  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 0.0
if you find any  :- NP : you:p : 0.0
cups  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 0.0
if  :- S/S : (lambda $0 t (exists $1 (and (object:t $1 you:p) $0))) : 0.0
you find any cups  :- S : (exists $0 (object:t $0 cups:d)) : 0.0
if you  :- S/S : (lambda $0 t (exists $1 (and (object:t $1 you:p) $0))) : 0.0
find any cups  :- S : (exists $0 (object:t $0 cups:d)) : 0.0
if you find  :- S/S : (lambda $0 t (exists $1 (and (object:t $1 you:p) $0))) : 0.0
any cups  :- S : (exists $0 (object:t $0 cups:d)) : 0.0
if you find any  :- S/S : (lambda $0 t (exists $1 (and (object:t $1 you:p) $0))) : 0.0
cups  :- S : (exists $0 (object:t $0 cups:d)) : 0.0
if  :- S : (exists $0 (object:t $0 cups:d)) : 0.0
you find any cups  :- S\S : (lambda $0 t (exists $1 (and (object:t $1 you:p) $0))) : 0.0
if you  :- S : (exists $0 (object:t $0 cups:d)) : 0.0
find any cups  :- S\S : (lambda $0 t (exists $1 (and (object:t $1 you:p) $0))) : 0.0
if you find  :- S : (exists $0 (object:t $0 cups:d)) : 0.0
any cups  :- S\S : (lambda $0 t (exists $1 (and (object:t $1 you:p) $0))) : 0.0
if you find any  :- S : (exists $0 (object:t $0 cups:d)) : 0.0
cups  :- S\S : (lambda $0 t (exists $1 (and (object:t $1 you:p) $0))) : 0.0
if  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 you:p) (exists $2 ($0 $2))))) : 0.0
you find any cups  :- S|NP : (lambda $0 e (object:t $0 cups:d)) : 0.0
if you  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 you:p) (exists $2 ($0 $2))))) : 0.0
find any cups  :- S|NP : (lambda $0 e (object:t $0 cups:d)) : 0.0
if you find  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 you:p) (exists $2 ($0 $2))))) : 0.0
any cups  :- S|NP : (lambda $0 e (object:t $0 cups:d)) : 0.0
if you find any  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 you:p) (exists $2 ($0 $2))))) : 0.0
cups  :- S|NP : (lambda $0 e (object:t $0 cups:d)) : 0.0
if  :- S|NP : (lambda $0 e (object:t $0 cups:d)) : 0.0
you find any cups  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 you:p) (exists $2 ($0 $2))))) : 0.0
if you  :- S|NP : (lambda $0 e (object:t $0 cups:d)) : 0.0
find any cups  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 you:p) (exists $2 ($0 $2))))) : 0.0
if you find  :- S|NP : (lambda $0 e (object:t $0 cups:d)) : 0.0
any cups  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 you:p) (exists $2 ($0 $2))))) : 0.0
if you find any  :- S|NP : (lambda $0 e (object:t $0 cups:d)) : 0.0
cups  :- S\(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 you:p) (exists $2 ($0 $2))))) : 0.0
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 you:p) (exists $2 (object:t $2 $0))))) : 0.0
you find any cups  :- NP : cups:d : 0.0
if you  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 you:p) (exists $2 (object:t $2 $0))))) : 0.0
find any cups  :- NP : cups:d : 0.0
if you find  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 you:p) (exists $2 (object:t $2 $0))))) : 0.0
any cups  :- NP : cups:d : 0.0
if you find any  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 you:p) (exists $2 (object:t $2 $0))))) : 0.0
cups  :- NP : cups:d : 0.0
if  :- NP : cups:d : 0.0
you find any cups  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 you:p) (exists $2 (object:t $2 $0))))) : 0.0
if you  :- NP : cups:d : 0.0
find any cups  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 you:p) (exists $2 (object:t $2 $0))))) : 0.0
if you find  :- NP : cups:d : 0.0
any cups  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 you:p) (exists $2 (object:t $2 $0))))) : 0.0
if you find any  :- NP : cups:d : 0.0
cups  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 you:p) (exists $2 (object:t $2 $0))))) : 0.0
Lex Size: 413
First parse time: 0.009 sec.
WRONG: (exists $0 (and (object:t $0 cup:d) (exists $1 (object:t $1 cups:d))))
Using:
[LexEntries and scores:
if you find any  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 355 : 0.0
cups  :- NP : cup:d : 25 : 10.0
]
Second parse time: 0.008 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 349 : 0.0
you  :- NP : you:p : 2 : 10.0
find any cups  :- S\S : (lambda $0 t $0) : 314 : 0.0
]
Scale: 0.9996501224571399
Update:
{BB:exists:object:t=-0.2595896437967463, LHT:0:object:t:e=-0.25958359132278386, LHH:0:object:t:var=-0.25958359132278386, LHT:1:object:t:p=-0.4096971309968317, LHH:1:object:t:you:p=-0.4096971309968317, LHT:1:object:t:d=0.15019055323789313, LHH:1:object:t:cups:d=0.4587530185261963, LHT:1:object:t:e=-7.393986349418311E-5, LHH:1:object:t:var=-7.393986349418311E-5, BB:exists:exists=-7.371393877702961E-5, BB:object:t:state:t=-0.08089761852283003, LHH:1:object:t:bowl:d=-6.023392250973933E-5, LHT:0:state:t:e=-0.08090205583114835, LHH:0:state:t:var=-0.08090205583114835, LHT:1:state:t:s=-0.0808905229522078, LHH:1:state:t:yellow:s=-0.0808905229522078, BB:exists:state:t=-1.1395404625552763E-5, LHT:1:state:t:e=-1.1532878940520998E-5, LHH:1:state:t:var=-1.1532878940520998E-5, LHH:1:object:t:cup:d=-0.3085022313657936, LEX:347=1.2839379474839591E-5, LEX:355=-0.18150375877459235, LEX:403=-0.12697778399015316, LEX:411=1.2835937307414508E-5, LEX:312=1.179758586588646E-5, LEX:342=-1.5356415271859082E-5, LEX:374=1.2247504200859164E-5, LEX:398=1.0158710395802881E-5, LEX:345=1.2839379474839591E-5, LEX:401=1.258175456137185E-5, LEX:409=1.2835937307414508E-5, LEX:314=0.3087658449258001, LEX:336=1.2839379474839591E-5, LEX:360=0.3137235915360634, LEX:376=-0.1899969913296779, LEX:400=1.2835937307414508E-5, LEX:408=-0.12449205598212601, LEX:343=1.2839379474839591E-5, LEX:399=1.258175456137185E-5, LEX:407=1.2835937307414508E-5, LEX:338=1.2839379474839591E-5, LEX:402=1.2835937307414508E-5, LEX:410=1.258175456137185E-5, LEX:131=0.3396178866943784, LEX:208=-1.4030456241341025E-5, LEX:218=-0.08086400806416294, LEX:238=-1.0762343110449313E-5, LEX:258=-1.1532878940520996E-5, LEX:341=1.2839379474839591E-5, LEX:349=0.3260237670363022, LEX:365=-0.15039245236419688, LEX:397=-0.12640614229499947, LEX:405=1.2835937307414508E-5, LEX:2=0.3079504414870782, LEX:25=-0.30850223136579363, LEX:340=1.2839379474839591E-5, LEX:404=1.2835937307414508E-5, LEX:412=1.258175456137185E-5, LEX:115=2.3004619199394736E-5, LEX:309=2.3004619199394736E-5, LEX:317=2.3004619199394736E-5, LEX:363=2.3004619199394736E-5, LEX:371=2.3004619199394736E-5, LEX:379=2.3004619199394736E-5, LEX:350=2.3004619199394736E-5, LEX:366=2.3004619199394736E-5, LEX:307=2.3004619199394736E-5, LEX:315=2.3004619199394736E-5, LEX:361=2.3004619199394736E-5, LEX:369=2.3004619199394736E-5, LEX:377=2.3004619199394736E-5, LEX:306=2.3004619199394736E-5, LEX:352=2.3004619199394736E-5, LEX:368=2.3004619199394736E-5, LEX:305=2.3004619199394736E-5, LEX:313=2.3004619199394736E-5, LEX:359=2.3004619199394736E-5, LEX:367=2.3004619199394736E-5, LEX:375=2.3004619199394736E-5, LEX:308=2.3004619199394736E-5, LEX:316=2.3004619199394736E-5, LEX:354=2.3004619199394736E-5, LEX:370=2.3004619199394736E-5, LEX:378=2.3004619199394736E-5, LEX:311=2.3004619199394736E-5, LEX:357=2.3004619199394736E-5, LEX:373=2.3004619199394736E-5, LEX:381=2.3004619199394736E-5, LEX:310=2.3004619199394736E-5, LEX:318=2.3004619199394736E-5, LEX:356=2.3004619199394736E-5, LEX:372=2.3004619199394736E-5, LEX:380=2.3004619199394736E-5}
36: =========== r:0.8888888888888888 p:0.8888888888888888 (epoch:0 file:0 0)
When the water is boiling
(exists $0 (and (object:t $0 water:q) (state:t $0 IsBoiling:s)))
MakeLex parse time: 0.001 sec.
Adding:
When the water is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 water:q) (state:t $1 $0)))) : 0.0
boiling  :- NP : IsBoiling:s : 0.0
Lex Size: 414
First parse time: 0.001 sec.
CORRECT:(exists $0 (and (object:t $0 water:q) (state:t $0 IsBoiling:s)))
Using:
[LexEntries and scores:
When the water is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 water:q) (state:t $1 $0)))) : 413 : 0.0
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
When the water is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 water:q) (state:t $1 $0)))) : 413 : 0.0
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Scale: 0.9996401295533609
Update:
{}
37: =========== r:0.8918918918918919 p:0.8918918918918919 (epoch:0 file:0 0)
when the water in the pot is boiling
(exists $0 (and (object:t $0 water:q) (In:t $0 (the $1 (object:t $1 pot:d))) (state:t $0 IsBoiling:s)))
MakeLex parse time: 0.002 sec.
Adding:
when the water in the pot is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 water:q) (In:t $1 (the $2 (object:t $2 pot:d))) (state:t $1 $0)))) : 0.04687171428571429
boiling  :- NP : IsBoiling:s : 0.0
Lex Size: 415
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 water:q) (In:t $0 (the $1 (object:t $1 pot:d))) (state:t $0 IsBoiling:s)))
Using:
[LexEntries and scores:
when the water in the pot is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 water:q) (In:t $1 (the $2 (object:t $2 pot:d))) (state:t $1 $0)))) : 414 : 0.04687171428571429
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
when the water in the pot is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 water:q) (In:t $1 (the $2 (object:t $2 pot:d))) (state:t $1 $0)))) : 414 : 0.04687171428571429
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Scale: 0.9996301368493657
Update:
{}
38: =========== r:0.8947368421052632 p:0.8947368421052632 (epoch:0 file:0 0)
if there exists a cup and there exists a cup and there exists a cup and there exists a cup and there exists a cup
(and (exists $0 (object:t $0 cup:d)))
MakeLex parse time: 0.015 sec.
Adding:
and there exists a cup and there exists a cup and there exists a cup and there exists a cup  :- S\S : (lambda $0 t $0) : 0.0
Lex Size: 416
First parse time: 0.021 sec.
WRONG: (exists $0 (and (object:t $0 cup:d) (exists $1 (object:t $1 cups:d))))
Using:
[LexEntries and scores:
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 349 : 0.3260237670363022
there exists  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 128 : -0.04537043452634645
a cup  :- NP : cup:d : 20 : 19.0000199997488
and there exists a cup and there exists a cup and there exists a cup and there exists a cup  :- S\S : (lambda $0 t $0) : 415 : 0.0
]
Second parse time: 0.018 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a cup and there exists a cup and there exists a cup and there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 118 : 0.048352000000000006
]
Scale: 0.9996201443451488
Update:
{LHT:0:object:t:e=-0.01988620407650396, LHH:0:object:t:var=-0.01988620407650396, LHT:1:object:t:d=-0.08159008841529579, LHH:1:object:t:cup:d=0.1689842957212623, BB:exists:object:t=-0.1356847353114085, LHT:1:object:t:p=-0.0419733340792646, LHH:1:object:t:you:p=-0.0419733340792646, BB:object:t:state:t=-0.07314449067897172, LHT:0:state:t:e=-0.049655845780197744, LHH:0:state:t:var=-0.049655845780197744, LHT:1:state:t:s=-0.10228868507467005, LHH:1:state:t:yellow:s=-0.10228868507467005, BB:object:t:object:t=-0.05318576448635771, LHH:1:object:t:bowl:d=-0.11375005305872254, LHH:1:object:t:cups:d=-0.13682433107783545, LHT:0:object:t:d=-0.13984010132556376, LHH:0:object:t:cup:d=-0.13984010132556376, LHT:1:object:t:e=-0.03616288290750732, LHH:1:object:t:var=-0.03616288290750732, LHT:0:state:t:d=-0.052632839294472315, LHH:0:state:t:cup:d=-0.052632839294472315, LEX:415=-0.862313306655857, LEX:155=0.5040428175797158, LEX:122=-0.02318949140020468, LEX:125=-0.04516650561889761, LEX:129=-0.022138617787526665, LEX:133=-0.06935526432587702, LEX:137=-0.027595231288932775, LEX:141=-0.025505906641018355, LEX:145=-0.04225729133658334, LEX:149=-0.025505906641018355, LEX:153=-0.034815210361082, LEX:190=-0.011744322449386998, LEX:200=-0.015359702081136696, LEX:210=-0.018537951883844477, LEX:220=-0.009850831483061009, LEX:240=-0.02659302534404035, LEX:250=-0.014572097197849158, LEX:124=-0.02295452968525976, LEX:128=-0.17022176178731588, LEX:132=-0.1350935298693176, LEX:136=-0.02480170633231761, LEX:140=-0.025505906641018355, LEX:144=-0.025261833926754424, LEX:148=-0.025505906641018355, LEX:152=-0.15808761330822732, LEX:20=-0.9996201440316888, LEX:123=-0.04516650561889761, LEX:127=-0.022138617787526665, LEX:131=-0.09740328530435519, LEX:135=-0.027595231288932775, LEX:139=-0.025505906641018355, LEX:143=-0.04225729133658334, LEX:147=-0.025505906641018355, LEX:151=-0.034815210361082, LEX:188=-0.011744322449386998, LEX:198=-0.015359702081136696, LEX:208=-0.018537691789746385, LEX:218=-0.009085610134863344, LEX:238=-0.026592739142317363, LEX:248=-0.014572097197849158, LEX:325=-0.007644994740584938, LEX:333=-0.05269375897893661, LEX:341=-0.005093941842057669, LEX:349=-0.04611158409526492, LEX:365=-0.015478268631324564, LEX:381=-0.008837220378310577, LEX:389=-0.030373993263048956, LEX:397=-0.004918908486986856, LEX:126=-0.02295452968525976, LEX:130=-0.07684382080166831, LEX:134=-0.09156724025951483, LEX:138=-0.02480170633231761, LEX:142=-0.025505906641018355, LEX:146=-0.025261833926754424, LEX:150=-0.025505906641018355, LEX:154=-0.09655692015270312, LEX:118=0.6485300884130185, LEX:82=0.3510900559321303}
39: =========== r:0.8717948717948718 p:0.8717948717948718 (epoch:0 file:0 0)
if the mug is on the table or on the stove
(exists $0 (and (object:t $0 mug:d) (or (On:t $0 (the $1 (object:t $1 table:f))) (On:t $0 (the $1 (object:t $1 stove:f))))))
MakeLex parse time: 0.003 sec.
Adding:
if the mug is on the table or on  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 mug:d) (or (On:t $1 (the $2 (object:t $2 table:f))) (On:t $1 (the $2 (object:t $2 $0))))))) : 0.14155589743589744
the stove  :- NP : stove:f : 0.0
Lex Size: 417
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (or (On:t $0 (the $1 (object:t $1 table:f))) (On:t $0 (the $1 (object:t $1 stove:f))))))
Using:
[LexEntries and scores:
if the mug is on the table or on  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 mug:d) (or (On:t $1 (the $2 (object:t $2 table:f))) (On:t $1 (the $2 (object:t $2 $0))))))) : 416 : 0.14155589743589744
the stove  :- NP : stove:f : 76 : 20.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if the mug is on the table or on  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 mug:d) (or (On:t $1 (the $2 (object:t $2 table:f))) (On:t $1 (the $2 (object:t $2 $0))))))) : 416 : 0.14155589743589744
the stove  :- NP : stove:f : 76 : 20.0
]
Scale: 0.9996101520407042
Update:
{}
40: =========== r:0.875 p:0.875 (epoch:0 file:0 0)
if the glass is empty or dry
(exists $0 (and (object:t $0 glass:d) (or (state:t $0 empty:s) (state:t $0 dry:s))))
MakeLex parse time: 0.002 sec.
Adding:
if the glass is empty or  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 glass:d) (or (state:t $1 empty:s) (state:t $1 $0))))) : 0.18518518518518517
dry  :- NP : dry:s : 0.0
Lex Size: 418
First parse time: 0.001 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (or (state:t $0 empty:s) (state:t $0 dry:s))))
Using:
[LexEntries and scores:
if the glass is empty or  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 glass:d) (or (state:t $1 empty:s) (state:t $1 $0))))) : 417 : 0.18518518518518517
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
if the glass is empty or  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 glass:d) (or (state:t $1 empty:s) (state:t $1 $0))))) : 417 : 0.18518518518518517
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9996001599360256
Update:
{}
41: =========== r:0.8780487804878049 p:0.8780487804878049 (epoch:0 file:0 0)
if the refrigerator is on and the mug contains coke
(and (exists $0 (and (object:t $0 refrigerator:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coke:q))))))
MakeLex parse time: 0.003 sec.
Adding:
if the refrigerator is on and the mug contains  :- S/NP : (lambda $0 e (and (exists $1 (and (object:t $1 refrigerator:f) (state:t $1 IsOn:s))) (exists $1 (and (object:t $1 mug:d) (has:t $1 (the $2 (object:t $2 $0))))))) : 0.05265274074074074
coke  :- NP : coke:q : 0.0
Lex Size: 419
First parse time: 0.002 sec.
CORRECT:(and (exists $0 (and (object:t $0 refrigerator:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coke:q))))))
Using:
[LexEntries and scores:
if the refrigerator is on and the mug contains  :- S/NP : (lambda $0 e (and (exists $1 (and (object:t $1 refrigerator:f) (state:t $1 IsOn:s))) (exists $1 (and (object:t $1 mug:d) (has:t $1 (the $2 (object:t $2 $0))))))) : 418 : 0.05265274074074074
coke  :- NP : coke:q : 34 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if the refrigerator is on and the mug contains  :- S/NP : (lambda $0 e (and (exists $1 (and (object:t $1 refrigerator:f) (state:t $1 IsOn:s))) (exists $1 (and (object:t $1 mug:d) (has:t $1 (the $2 (object:t $2 $0))))))) : 418 : 0.05265274074074074
coke  :- NP : coke:q : 34 : 10.0
]
Scale: 0.9995901680311072
Update:
{}
Testing

File #0: 0
0: ==================(0 -- 0)
if you find any
(dummy:t)
Test parse time: 0.002 sec.
WRONG
1 parses: [(exists $0 (object:t $0 cups:d))]
[LexEntries and scores:
if you find any  :- S : (exists $0 (object:t $0 cups:d)) : 379 : 2.3004619199394736E-5
]
Had correct parse: false
Feats: {RN:true=1.0, LHT:0:object:t:e=1.0, LHH:0:object:t:var=1.0, LHT:1:object:t:d=1.0, LHH:1:object:t:cups:d=1.0, LEX:379=1.0}
-----------------------------
Recall : 0/1 = 0.0
Precision : 0/1 = 0.0
F1: NaN
No Parses : 0
EMPTY Recall : 0/1 = 0.0
EMPTY Precision : 0/1 = 0.0
EMPTY F1: NaN
-----------
Training, iteration 1
---------------------
DataSet: 0
---------------------
0: ===========
if there exists a mug
(exists $0 (object:t $0 mug:d))
MakeLex parse time: 0.003 sec.
Adding:
there  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
exists  :- S|NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
Lex Size: 420
First parse time: 0.005 sec.
WRONG: (exists $0 (and (object:t $0 mug:d) (exists $1 (object:t $1 cups:d))))
Using:
[LexEntries and scores:
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 349 : 0.27991218294103726
there exists  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 128 : -0.21559219631366233
a mug  :- NP : mug:d : 22 : 20.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.21209157996832187
there  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 419 : 0.0
exists  :- S|NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 126 : -0.025662156350663663
a mug  :- NP : mug:d : 22 : 20.0
]
Scale: 0.999580176325943
Update:
{LHT:0:object:t:e=-0.10120929754299024, LHH:0:object:t:var=-0.10120929754299024, LHT:1:object:t:d=-0.12111143481592432, LHH:1:object:t:mug:d=0.11813307707962034, BB:object:t:state:t=-0.05959076785676032, LHT:0:state:t:e=-0.04691429988075397, LHH:0:state:t:var=-0.04691429988075397, LHT:1:state:t:s=-0.0763674447717363, LHH:1:state:t:yellow:s=-0.0763674447717363, BB:object:t:object:t=-0.06760286251492402, LHH:1:object:t:bowl:d=-0.10676984065976089, BB:exists:object:t=-0.1517395121076869, LHH:1:object:t:cups:d=-0.13247467123578388, LHT:1:object:t:p=-0.047721624776136944, LHH:1:object:t:you:p=-0.047721624776136944, LHT:0:object:t:d=-0.1013564001646445, LHH:0:object:t:mug:d=-0.1013564001646445, LHT:1:object:t:e=-0.033732638115573726, LHH:1:object:t:var=-0.033732638115573726, LHT:0:state:t:d=-0.029453144890982327, LHH:0:state:t:mug:d=-0.029453144890982327, LEX:122=0.011376172135320287, LEX:125=0.02049316976771194, LEX:129=0.01006790189323675, LEX:133=0.018576929326054318, LEX:137=0.00434556042647257, LEX:141=0.006955267822245118, LEX:145=0.014178492910751527, LEX:149=0.006955267822245118, LEX:153=0.015328188466757873, LEX:190=-0.006633944769500192, LEX:200=-0.008301915280712828, LEX:210=-0.013863304450003467, LEX:220=-0.005460371071261226, LEX:240=-0.015224882229615832, LEX:250=-0.008779697016578792, LEX:124=0.010766134684776186, LEX:128=-0.07703445951150158, LEX:132=0.02756103575052356, LEX:136=0.006681968412164648, LEX:140=0.006955267822245118, LEX:144=0.0068473127218746065, LEX:148=0.006955267822245118, LEX:152=-0.03543225949176216, LEX:123=0.06106520943199452, LEX:127=0.009170340264272915, LEX:131=0.07773360919762434, LEX:135=0.0021030004746753986, LEX:139=0.006955267822245118, LEX:143=0.02111775745821404, LEX:147=0.006955267822245118, LEX:151=0.05273393594295426, LEX:188=-0.006042523206506155, LEX:198=-0.02856127908176371, LEX:208=-0.012627205718827061, LEX:218=-0.004590734447016194, LEX:238=-0.05237798028530819, LEX:248=-0.007996979898397188, LEX:325=-0.004545774458375448, LEX:333=-0.08444698332901118, LEX:341=-0.00393116885272268, LEX:349=-0.02350207285526146, LEX:365=-0.019328951540657533, LEX:381=-0.016927230178848764, LEX:389=-0.019979840593135786, LEX:397=-0.0029884997455325185, LEX:419=-0.0033131039877036302, LEX:126=0.053394640219125, LEX:130=-0.024669415414106933, LEX:134=0.06681815552830281, LEX:138=0.006681968412164648, LEX:142=0.006955267822245118, LEX:146=0.0068473127218746065, LEX:150=0.006955267822245118, LEX:154=-0.08765963748175111}
1: =========== r:0.0 p:0.0 (epoch:1 file:0 0)
if there exists a cup
(exists $0 (object:t $0 cup:d))
MakeLex parse time: 0.005 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
a cup  :- NP : cup:d : 0.0
there  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
exists  :- S|NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
a cup  :- NP : cup:d : 0.0
Lex Size: 420
First parse time: 0.005 sec.
CORRECT:(exists $0 (object:t $0 cup:d))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.28982518916594624
there  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 419 : -0.0033131039877036302
exists  :- S|NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 126 : 0.02773248386846134
a cup  :- NP : cup:d : 20 : 18.000399855717113
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.28982518916594624
there  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 419 : -0.0033131039877036302
exists  :- S|NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 126 : 0.02773248386846134
a cup  :- NP : cup:d : 20 : 18.000399855717113
]
Scale: 0.9995701848205273
Update:
{LHT:0:object:t:e=-0.061391444562289316, LHH:0:object:t:var=-0.061391444562289316, LHT:1:object:t:d=-0.06413647206069571, LHH:1:object:t:cup:d=0.08377782825231993, BB:object:t:state:t=-0.04438477696086857, LHT:0:state:t:e=-0.037888257913375065, LHH:0:state:t:var=-0.037888257913375065, LHT:1:state:t:s=-0.062313038758810314, LHH:1:state:t:yellow:s=-0.062313038758810314, BB:object:t:object:t=-0.044061683028932964, LHH:1:object:t:bowl:d=-0.06710210120225896, BB:exists:object:t=-0.10110758978567624, LHH:1:object:t:cups:d=-0.08081219911075661, LHT:1:object:t:p=-0.03681211565633014, LHH:1:object:t:you:p=-0.03681211565633014, LHT:0:object:t:d=-0.06584956645437795, LHH:0:object:t:cup:d=-0.06584956645437795, LHT:1:object:t:e=-0.02629242329964146, LHH:1:object:t:var=-0.02629242329964146, LHT:0:state:t:d=-0.02442478084543526, LHH:0:state:t:cup:d=-0.02442478084543526, LEX:122=0.007662752672714706, LEX:125=0.014788464763118656, LEX:129=0.006607629185934494, LEX:133=0.013474373689901535, LEX:137=0.0024400453516531264, LEX:141=0.004303374273311637, LEX:145=0.008802545224972699, LEX:149=0.004303374273311637, LEX:153=0.009495672487100735, LEX:190=-0.003483591459475443, LEX:200=-0.006675091042801405, LEX:210=-0.008868645156201555, LEX:220=-0.004689120856107027, LEX:240=-0.010116505811565934, LEX:250=-0.009612716951003587, LEX:124=0.00770377889299341, LEX:128=-0.05113385850725349, LEX:132=0.019627595313950467, LEX:136=0.004055529001340719, LEX:140=0.004303374273311637, LEX:144=0.004353564571503907, LEX:148=0.004303374273311637, LEX:152=-0.025023027715749768, LEX:123=0.04518015253852014, LEX:127=0.0057063772886896775, LEX:131=0.05867572825120934, LEX:135=7.472113211202633E-4, LEX:139=0.004303374273311637, LEX:143=0.013404223393130093, LEX:147=0.004303374273311637, LEX:151=0.03432877585220259, LEX:188=-0.0030129275880180686, LEX:198=-0.022779602622335256, LEX:208=-0.007675253969630929, LEX:218=-0.0037444433921313795, LEX:238=-0.033945177217367034, LEX:248=-0.008315544846938161, LEX:325=-0.002015486449022391, LEX:333=-0.05179123176993041, LEX:341=-0.0027516991003958976, LEX:349=-0.01525594145981159, LEX:365=-0.016715987993009346, LEX:381=-0.01300954255589998, LEX:389=-0.011749539431992206, LEX:397=-0.002319399558002534, LEX:419=0.00337710913360171, LEX:126=0.03893992365861227, LEX:130=-0.02004644523685311, LEX:134=0.04913143338418419, LEX:138=0.0040890255147200075, LEX:142=0.004303374273311637, LEX:146=0.004299872219318925, LEX:150=0.004303374273311637, LEX:154=-0.06087364098085427}
2: =========== r:0.5 p:0.5 (epoch:1 file:0 0)
if there exists a cup and there exists a cup
(and (exists $0 (object:t $0 cup:d)))
MakeLex parse time: 0.006 sec.
Adding:
if there exists a cup and  :- S/S : (lambda $0 t $0) : 0.0
Lex Size: 421
First parse time: 0.006 sec.
WRONG: (exists $0 (object:t $0 cup:d))
Using:
[LexEntries and scores:
if there exists a cup and  :- S/S : (lambda $0 t $0) : 420 : 0.0
there  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 419 : 6.400514589807987E-5
exists  :- S|NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 126 : 0.06667240752707361
a cup  :- NP : cup:d : 20 : 18.000399855717113
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 1.3994220563321225
]
Scale: 0.9995601935148535
Update:
{LHT:0:object:t:e=-0.03208065165129727, LHH:0:object:t:var=-0.03208065165129727, LHT:1:object:t:d=-0.02769703091111778, LHH:1:object:t:cup:d=0.05501629525694304, BB:exists:object:t=-0.06269492795849325, LHT:1:object:t:p=-0.028306871397990024, LHH:1:object:t:you:p=-0.028306871397990024, BB:object:t:state:t=-0.0259759408853531, LHT:0:state:t:e=-0.02250989884464729, LHH:0:state:t:var=-0.02250989884464729, LHT:1:state:t:s=-0.038346376932831806, LHH:1:state:t:yellow:s=-0.038346376932831806, BB:object:t:object:t=-0.0244020189497469, LHH:1:object:t:bowl:d=-0.03831365090573752, LHH:1:object:t:cups:d=-0.0443996752623235, LHT:0:object:t:d=-0.04264585920946456, LHH:0:object:t:cup:d=-0.04264585920946456, LHT:1:object:t:e=-0.01872260855165367, LHH:1:object:t:var=-0.01872260855165367, LHT:0:state:t:d=-0.015836478088184516, LHH:0:state:t:cup:d=-0.015836478088184516, LEX:420=-0.16078812025094236, LEX:155=-0.8387720715777297, LEX:122=-0.016562587626868745, LEX:125=-0.033635184747208925, LEX:129=-0.013983785340787168, LEX:133=-0.04615350551742112, LEX:137=-0.017540798003050993, LEX:141=-0.017036025043257835, LEX:145=-0.026159961260720573, LEX:149=-0.017036025043257835, LEX:153=-0.019347642248768202, LEX:190=-0.0018849352027006411, LEX:200=-0.003947423241925751, LEX:210=-0.005677109887100708, LEX:220=-0.0028942860297420073, LEX:240=-0.005650749682660717, LEX:250=-0.006724281904729495, LEX:124=-0.01742153824681716, LEX:128=-0.04578704225355951, LEX:132=-0.13123642916517866, LEX:136=-0.01641118242396797, LEX:140=-0.017036025043257835, LEX:144=-0.016972102700587986, LEX:148=-0.017036025043257835, LEX:152=-0.05340877495823498, LEX:20=-0.9995601915752989, LEX:123=-0.10515248010136917, LEX:127=-0.01169626145020812, LEX:131=-0.2081203082963728, LEX:135=-0.01864948433364908, LEX:139=-0.017036025043257835, LEX:143=-0.03612357264715693, LEX:147=-0.017036025043257835, LEX:151=-0.07262250657469717, LEX:188=-0.0015811068380051673, LEX:198=-0.013425617199999358, LEX:208=-0.004768480028184101, LEX:218=-0.0022425723729801684, LEX:238=-0.018751269267086184, LEX:248=-0.005646154142749211, LEX:325=-0.0010206394551307714, LEX:333=-0.02776376403502191, LEX:341=-0.0018199020677453963, LEX:349=-0.008444194593226716, LEX:365=-0.01628388701718256, LEX:381=-0.007785788731545546, LEX:389=-0.007171077178944106, LEX:397=-0.0013966541263857517, LEX:419=-0.4500167709602364, LEX:126=-0.19496496359353369, LEX:130=-0.031164398365060023, LEX:134=-0.22651055492496747, LEX:138=-0.016446665441336866, LEX:142=-0.017036025043257835, LEX:146=-0.016804895154523818, LEX:150=-0.017036025043257835, LEX:154=-0.14772495654763082, LEX:82=0.9995601935148535}
3: =========== r:0.3333333333333333 p:0.3333333333333333 (epoch:1 file:0 0)
if there exists an empty kettle
(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s)))
MakeLex parse time: 0.004 sec.
Adding:
if there exists an  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $1) (state:t $2 $0))))) : 0.06044
empty  :- NP : empty:s : 0.0
Lex Size: 422
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if there exists an  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $1) (state:t $2 $0))))) : 421 : 0.06044
empty  :- NP : empty:s : 53 : 10.0
kettle  :- NP : kettle:d : 11 : 10.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if there exists an  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $1) (state:t $2 $0))))) : 421 : 0.06044
empty  :- NP : empty:s : 53 : 10.0
kettle  :- NP : kettle:d : 11 : 10.0
]
Scale: 0.9995502024089159
Update:
{}
4: =========== r:0.5 p:0.5 (epoch:1 file:0 0)
if there exists a green glass
(exists $0 (and (object:t $0 glass:d) (state:t $0 green:s)))
MakeLex parse time: 0.004 sec.
Adding:
if there exists a  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $1) (state:t $2 $0))))) : 0.06044
green  :- NP : green:s : 0.0
Lex Size: 423
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (state:t $0 green:s)))
Using:
[LexEntries and scores:
if there exists a  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $1) (state:t $2 $0))))) : 422 : 0.06044
green  :- NP : green:s : 51 : 10.0
glass  :- NP : glass:d : 9 : 10.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $1) (state:t $2 $0))))) : 422 : 0.06044
green  :- NP : green:s : 51 : 10.0
glass  :- NP : glass:d : 9 : 10.0
]
Scale: 0.9995402115027089
Update:
{}
5: =========== r:0.6 p:0.6 (epoch:1 file:0 0)
if there exists a cup that contains syrup
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
MakeLex parse time: 0.005 sec.
Adding:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 0.40293333333333337
Lex Size: 425
First parse time: 0.007 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
Using:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 0.0
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.40293333333333337
a cup that contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 164 : 0.03603848816227023
syrup  :- NP : syrup:q : 33 : 10.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 0.0
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.40293333333333337
a cup that contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 164 : 0.03603848816227023
syrup  :- NP : syrup:q : 33 : 10.0
]
Scale: 0.9995302207962258
Update:
{BB:has:t:object:t=0.13969250705363528, LHT:0:object:t:e=0.0628838933105067, LHH:0:object:t:var=0.0628838933105067, LHT:1:object:t:d=0.10331532243161708, LHH:1:object:t:cup:d=0.28725346626802883, LHT:0:has:t:e=0.024773384056306313, LHH:0:has:t:var=0.024773384056306313, LHT:1:object:t:q=0.024773384056306313, LHH:1:object:t:syrup:q=0.024773384056306313, BB:exists:has:t=-0.09739052727542506, LHT:1:object:t:e=-0.0652048131774168, LHH:1:object:t:var=-0.0652048131774168, BB:object:t:state:t=-0.1044436196107895, BB:has:t:state:t=-0.10404772037510002, LHH:1:object:t:bowl:d=-0.1839381438364118, LHT:0:state:t:e=-0.14674559938899992, LHH:0:state:t:var=-0.14674559938899992, LHT:1:state:t:s=-0.08978650123468525, LHH:1:state:t:yellow:s=-0.08978650123468525, LHT:1:state:t:e=-0.05695909815431467, LHH:1:state:t:var=-0.05695909815431467, LHT:0:has:t:q=-0.024773384056306413, LHH:0:has:t:syrup:q=-0.024773384056306413, LEX:158=0.034033645003938164, LEX:160=0.021729563548617152, LEX:162=0.025971174962837348, LEX:164=-0.08173587082753712, LEX:159=0.014244824217688117, LEX:161=0.06133047573460077, LEX:163=0.077705493576342, LEX:129=-0.03411073472922864, LEX:190=-0.020581913532296534, LEX:210=-0.10639713214980058, LEX:220=-0.0063206943918817605, LEX:250=-0.06288389331050695, LEX:260=-0.05695909815431468, LEX:423=0.09993754042331564, LEX:424=-0.18731592584471354}
6: =========== r:0.6666666666666666 p:0.6666666666666666 (epoch:1 file:0 0)
if there exists a cup that contains coke
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 coke:q)))))
MakeLex parse time: 0.01 sec.
Adding:
a  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 0.0
cup that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 0.0
a cup  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 0.0
that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 0.0
a cup that  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 0.0
contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 0.0
cup that contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 0.0
a cup  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 0.0
that contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 0.0
a cup that  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 0.0
contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 0.0
a  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 0.0
cup that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
a cup  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 0.0
that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
a cup that  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 0.0
contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
cup that contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 0.0
a cup  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
that contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 0.0
a cup that  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 0.0
a  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
cup that contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
a cup  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
that contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
a cup that  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
cup that contains  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
a cup  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
that contains  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
a cup that  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
contains  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
a  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
cup that contains  :- S|NP/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
a cup  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
that contains  :- S|NP/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
a cup that  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
contains  :- S|NP/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
a  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 $0))) : 0.0
cup that contains  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
a cup  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 $0))) : 0.0
that contains  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
a cup that  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 $0))) : 0.0
contains  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
a  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $3 $1)))))) : 0.0
cup that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
a cup  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $3 $1)))))) : 0.0
that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
a cup that  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $3 $1)))))) : 0.0
contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
cup that contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $3 $1)))))) : 0.0
a cup  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
that contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $3 $1)))))) : 0.0
a cup that  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $3 $1)))))) : 0.0
a  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $1 $3)))))) : 0.0
cup that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
a cup  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $1 $3)))))) : 0.0
that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
a cup that  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $1 $3)))))) : 0.0
contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
cup that contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $1 $3)))))) : 0.0
a cup  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
that contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $1 $3)))))) : 0.0
a cup that  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $1 $3)))))) : 0.0
a  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (has:t $1 (the $2 ($0 $2))))) : 0.0
cup that contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
a cup  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (has:t $1 (the $2 ($0 $2))))) : 0.0
that contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
a cup that  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (has:t $1 (the $2 ($0 $2))))) : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
Lex Size: 503
First parse time: 0.085 sec.
WRONG: (object:t (the $0 (object:t $0 coke:q)) cup:d)
Using:
[LexEntries and scores:
if  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 123 : -0.0522495447028098
there exists  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 152 : -0.5510127007661615
a cup  :- NP : cup:d : 20 : 17.000839664141814
that contains  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 470 : 0.0
coke  :- NP : coke:q : 34 : 10.0
]
Second parse time: 0.082 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 0.09993754042331564
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.21561740748861982
a  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 425 : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 431 : 0.0
a  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 437 : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 443 : 0.0
a  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 449 : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 0.0
a  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 461 : 0.0
a  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 $0))) : 467 : 0.0
a  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $3 $1)))))) : 473 : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.0
a  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $1 $3)))))) : 485 : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 491 : 0.0
a  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (has:t $1 (the $2 ($0 $2))))) : 497 : 0.0
a cup  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 427 : 0.0
a cup  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 433 : 0.0
a cup  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 439 : 0.0
a cup  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 445 : 0.0
a cup  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 451 : 0.0
a cup  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 457 : 0.0
a cup  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 463 : 0.0
a cup  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 $0))) : 469 : 0.0
a cup  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $3 $1)))))) : 475 : 0.0
a cup  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 481 : 0.0
a cup  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $1 $3)))))) : 487 : 0.0
a cup  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 493 : 0.0
a cup  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (has:t $1 (the $2 ($0 $2))))) : 499 : 0.0
a cup that  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 429 : 0.0
a cup that  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 435 : 0.0
a cup that  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 441 : 0.0
a cup that  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 447 : 0.0
a cup that  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 453 : 0.0
a cup that  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 459 : 0.0
a cup that  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 465 : 0.0
a cup that  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 $0))) : 471 : 0.0
a cup that  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $3 $1)))))) : 477 : 0.0
a cup that  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 483 : 0.0
a cup that  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $1 $3)))))) : 489 : 0.0
a cup that  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 495 : 0.0
a cup that  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (has:t $1 (the $2 ($0 $2))))) : 501 : 0.0
cup that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 426 : 0.0
cup that contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 432 : 0.0
cup that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 438 : 0.0
cup that contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 444 : 0.0
cup that contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 450 : 0.0
cup that contains  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 456 : 0.0
cup that contains  :- S|NP/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 462 : 0.0
cup that contains  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 468 : 0.0
cup that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 474 : 0.0
cup that contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $3 $1)))))) : 480 : 0.0
cup that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 486 : 0.0
cup that contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $1 $3)))))) : 492 : 0.0
cup that contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 498 : 0.0
that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 428 : 0.0
that contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 434 : 0.0
that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 440 : 0.0
that contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 446 : 0.0
that contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 452 : 0.0
that contains  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 458 : 0.0
that contains  :- S|NP/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 464 : 0.0
that contains  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 470 : 0.0
that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 476 : 0.0
that contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $3 $1)))))) : 482 : 0.0
that contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 488 : 0.0
that contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $1 $3)))))) : 494 : 0.0
that contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 500 : 0.0
contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 430 : 0.0
contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 436 : 0.0
contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 442 : 0.0
contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 448 : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 454 : 0.0
contains  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 460 : 0.0
contains  :- S|NP/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 466 : 0.0
contains  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 472 : 0.0
contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 478 : 0.0
contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $3 $1)))))) : 484 : 0.0
contains  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 490 : 0.0
contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $1 $3)))))) : 496 : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 0.0
coke  :- NP : coke:q : 34 : 10.0
]
Scale: 0.999520230289461
Update:
{LHT:0:object:t:e=-0.024047772803924193, LHH:0:object:t:var=0.9754681742091184, LHH:0:object:t:the=-0.9995159470130418, BB:object:t:object:t=-0.024049223207484514, LHT:1:object:t:p=-0.024048679908845794, LHH:1:object:t:you:p=-0.024048679908845794, LEX:125=-0.1633540887853673, LEX:152=-0.18423830957286932, LEX:20=-0.99951594254631, LEX:470=-0.9434205132880219, LEX:123=-0.4965576288015916, LEX:131=-0.3155555450505056, LEX:365=-0.024048679908845797, LEX:419=-0.6519235441880734, LEX:154=-0.8152776329734409, BB:has:t:object:t=0.999520230289461, LHT:0:has:t:e=0.999520230289461, LHH:0:has:t:var=0.999520230289461, LHT:1:has:t:e=0.999520230289461, LHH:1:has:t:the=0.999520230289461, LEX:158=0.0025373188624766623, LEX:160=0.002268870950766861, LEX:162=0.0026538875413087614, LEX:164=0.014215287631104448, LEX:159=0.057432030816444615, LEX:161=0.21402710833074315, LEX:163=0.3470757210444659, LEX:429=0.02675094440163363, LEX:435=0.017178425301994482, LEX:441=0.03971109883684784, LEX:447=0.017178425301994482, LEX:453=0.027082796498753052, LEX:459=0.03511416884804136, LEX:465=0.014879960307591242, LEX:471=0.038538462827192824, LEX:477=0.01755708442402068, LEX:483=0.014879960307591242, LEX:489=0.03511416884804136, LEX:495=0.014879960307591242, LEX:501=0.027082796498753052, LEX:426=0.022154014412827158, LEX:432=0.017178425301994482, LEX:438=0.022154014412827158, LEX:444=0.017178425301994482, LEX:450=0.049236810911580206, LEX:456=0.01755708442402068, LEX:462=0.014879960307591242, LEX:468=0.0560955472512135, LEX:474=0.01755708442402068, LEX:480=0.014879960307591242, LEX:486=0.01755708442402068, LEX:492=0.014879960307591242, LEX:498=0.044639880922773725, LEX:423=0.37844794406166576, LEX:427=0.02675094440163363, LEX:433=0.017178425301994482, LEX:439=0.03971109883684784, LEX:445=0.017178425301994482, LEX:451=0.027082796498753052, LEX:457=0.03511416884804136, LEX:463=0.014879960307591242, LEX:469=0.038538462827192824, LEX:475=0.01755708442402068, LEX:481=0.014879960307591242, LEX:487=0.03511416884804136, LEX:493=0.014879960307591242, LEX:499=0.027082796498753052, LEX:428=0.022154014412827158, LEX:434=0.017178425301994482, LEX:440=0.022154014412827158, LEX:446=0.017178425301994482, LEX:452=0.049236810911580206, LEX:458=0.01755708442402068, LEX:464=0.014879960307591242, LEX:476=0.01755708442402068, LEX:482=0.014879960307591242, LEX:488=0.01755708442402068, LEX:494=0.014879960307591242, LEX:500=0.044639880922773725, LEX:424=0.37844794406166576, LEX:425=0.02675094440163363, LEX:431=0.017178425301994482, LEX:437=0.03971109883684784, LEX:443=0.017178425301994482, LEX:449=0.027082796498753052, LEX:455=0.03511416884804136, LEX:461=0.014879960307591242, LEX:467=0.038538462827192824, LEX:473=0.01755708442402068, LEX:479=0.014879960307591242, LEX:485=0.03511416884804136, LEX:491=0.014879960307591242, LEX:497=0.027082796498753052, LEX:430=0.022154014412827158, LEX:436=0.017178425301994482, LEX:442=0.022154014412827158, LEX:448=0.017178425301994482, LEX:454=0.049236810911580206, LEX:460=0.01755708442402068, LEX:466=0.014879960307591242, LEX:472=0.0560955472512135, LEX:478=0.01755708442402068, LEX:484=0.014879960307591242, LEX:490=0.01755708442402068, LEX:496=0.014879960307591242, LEX:502=0.044639880922773725}
7: =========== r:0.5714285714285714 p:0.5714285714285714 (epoch:1 file:0 0)
if there is a red glass
(exists $0 (and (object:t $0 glass:d) (state:t $0 red:s)))
MakeLex parse time: 0.002 sec.
Adding:
if there is a  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $1) (state:t $2 $0))))) : 0.0
red  :- NP : red:s : 0.0
Lex Size: 504
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (state:t $0 red:s)))
Using:
[LexEntries and scores:
if there is a  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $1) (state:t $2 $0))))) : 503 : 0.0
red  :- NP : red:s : 47 : 10.0
glass  :- NP : glass:d : 9 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if there is a  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $1) (state:t $2 $0))))) : 503 : 0.0
red  :- NP : red:s : 47 : 10.0
glass  :- NP : glass:d : 9 : 10.0
]
Scale: 0.9995102399824085
Update:
{}
8: =========== r:0.625 p:0.625 (epoch:1 file:0 0)
if there is a yellow bowl
(exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s)))
MakeLex parse time: 0.021 sec.
Adding:
if there is a  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 0.0
yellow  :- NP : yellow:s : 0.0
if there is a  :- S/S : (lambda $0 t $0) : 0.0
bowl  :- S\S : (lambda $0 t $0) : 0.0
yellow  :- NP : yellow:s : 0.0
bowl  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 0.0
Lex Size: 504
First parse time: 0.034 sec.
CORRECT:(exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s)))
Using:
[LexEntries and scores:
if there is a  :- S/S : (lambda $0 t $0) : 168 : 6.533970833279822E-4
if there is a  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 264 : 0.2103504318062443
yellow  :- NP : yellow:s : 50 : 10.001287689750265
bowl  :- S\S : (lambda $0 t $0) : 181 : 6.533970833279822E-4
bowl  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 277 : 0.2103504318062443
]
Second parse time: 0.02 sec.
Best LexEntries:
[LexEntries and scores:
if there is a  :- S/S : (lambda $0 t $0) : 168 : 6.533970833279822E-4
if there is a  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 264 : 0.2103504318062443
yellow  :- NP : yellow:s : 50 : 10.001287689750265
bowl  :- S\S : (lambda $0 t $0) : 181 : 6.533970833279822E-4
bowl  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 277 : 0.2103504318062443
]
Scale: 0.9995002498750625
Update:
{BB:object:t:state:t=0.040635277029071076, LHT:0:object:t:e=-0.05632889034046912, LHH:0:object:t:var=-0.05632889034046912, LHT:1:object:t:d=0.29340811805908534, LHH:1:object:t:bowl:d=0.29507520889986466, LHT:0:state:t:e=0.028290392253338813, LHH:0:state:t:var=0.028290392253338813, LHT:1:state:t:s=0.028926400045566195, LHH:1:state:t:yellow:s=0.028926400045566195, LHT:1:object:t:e=-0.10346552739263735, LHH:1:object:t:var=-0.10346552739263735, BB:exists:state:t=-0.006719398866988584, BB:exists:object:t=-0.05061946791312158, LHT:1:state:t:e=-6.3600779222776E-4, LHH:1:state:t:var=-6.3600779222776E-4, BB:state:t:state:t=-2.2375478994499333E-5, BB:object:t:object:t=-0.0012572207705553744, LHT:1:object:t:s=-0.24599995192839585, LHH:1:object:t:yellow:s=-0.24599995192839585, LHT:1:object:t:p=-2.715290785219763E-4, LHH:1:object:t:you:p=-2.715290785219763E-4, LHH:1:object:t:cups:d=-9.901789504023792E-4, BB:exists:exists=-5.333840826397324E-5, LHH:1:object:t:cup:d=-6.769118903771068E-4, LHT:0:has:t:e=-0.04105189175574768, LHH:0:has:t:var=-0.04105189175574768, LHT:1:has:t:e=-0.04105189175574768, LHH:1:has:t:the=-0.030891619756575298, BB:has:t:state:t=-0.002422705734327548, BB:has:t:object:t=-0.01805784494525141, LHH:1:has:t:var=-0.010160271999172386, LEX:186=-1.0080071940257046E-4, LEX:216=-1.2098398552339183E-4, LEX:246=-8.689054361263984E-5, LEX:266=-3.993768874080168E-5, LEX:173=-1.5820366232155225E-4, LEX:189=-3.3685502279119043E-4, LEX:199=-2.1092212904360496E-4, LEX:209=-2.879725604773155E-5, LEX:219=-1.5052589112162247E-4, LEX:229=-2.4247198372209755E-5, LEX:239=-2.9859846324090365E-5, LEX:249=-2.942555925176594E-4, LEX:259=-8.197734127838037E-5, LEX:269=-6.971422003134692E-5, LEX:168=0.06392260826355409, LEX:184=-9.595139743654439E-5, LEX:214=-1.2098398552339183E-4, LEX:224=-0.07606472391690225, LEX:244=-8.263373294444542E-5, LEX:264=0.13992985515221057, LEX:503=-0.0828076627924799, LEX:191=-4.4170029486935653E-4, LEX:201=-2.4557593586949225E-4, LEX:211=-4.239726250382933E-5, LEX:241=-1.9320700166150272E-5, LEX:251=-3.8684966469294737E-4, LEX:271=-8.415590872058695E-5, LEX:182=-0.020864463550717242, LEX:202=-0.002422057660573841, LEX:212=-1.2098398552339183E-4, LEX:242=-0.018310283210133123, LEX:262=-3.993768874080168E-5, LEX:193=-9.595139743654439E-5, LEX:203=-1.2098398552339183E-4, LEX:253=-8.263373294444542E-5, LEX:273=-3.993768874080168E-5, LEX:129=-3.7306058321134074E-5, LEX:153=-9.734612404415148E-5, LEX:210=-1.0269801487411856E-4, LEX:240=-5.847099207263331E-5, LEX:260=-3.772621280187872E-5, LEX:423=-6.769118903771068E-4, LEX:185=-0.0028361337115538794, LEX:195=-0.005192171951822285, LEX:205=-0.02438040837038297, LEX:215=-5.999744338382896E-4, LEX:235=-8.450745480134606E-4, LEX:245=-0.0032363214172000145, LEX:255=-0.004556175843648695, LEX:275=-1.3256653927425416E-4, LEX:127=-3.861941695950409E-5, LEX:151=-1.6349104142167182E-4, LEX:208=-1.1460761710379142E-4, LEX:238=-9.037424238945069E-5, LEX:258=-3.9936980247462E-5, LEX:311=-4.1124496847844444E-5, LEX:325=-8.08230016563888E-5, LEX:333=-2.1641601002051484E-4, LEX:341=-5.0681967586921784E-5, LEX:349=-2.876415129199435E-4, LEX:373=-1.2221867272249463E-4, LEX:381=-5.404511604498745E-5, LEX:389=-2.2756181345406624E-4, LEX:397=-4.18224414065989E-5, LEX:405=-1.4393442781126532E-5, LEX:419=-2.0864147963913166E-4, LEX:449=-3.6653967727612975E-4, LEX:467=-0.010160271999172386, LEX:497=-0.0308916197565753, LEX:50=0.04502726800165782, LEX:181=0.06392260826355409, LEX:197=-0.051412035222802854, LEX:207=-1.2098398552339183E-4, LEX:217=-0.006043330186476217, LEX:227=0.1133561870931455, LEX:237=-0.07606472391690225, LEX:257=-0.045128694730372225, LEX:267=-0.09375213489854727, LEX:277=0.13992985515221057, LEX:88=1.3050068125979181E-5, LEX:170=1.3050068125979181E-5, LEX:180=1.3058597788754855E-5, LEX:236=1.0580584084719173E-5, LEX:178=1.3050068125979181E-5, LEX:234=1.3049870020491709E-5, LEX:175=1.3050068125979181E-5, LEX:221=1.2447098292872534E-5, LEX:166=1.3050068125979181E-5, LEX:176=1.3050068125979181E-5, LEX:232=1.3049870020491709E-5, LEX:167=1.3050068125979181E-5, LEX:177=1.3050068125979181E-5, LEX:223=1.3049870020491709E-5, LEX:174=1.3050068125979181E-5, LEX:230=1.3049872103788882E-5, LEX:169=1.3058597788754855E-5, LEX:179=1.3050068125979181E-5, LEX:225=1.0580584084719173E-5, LEX:172=1.3050068125979181E-5, LEX:228=1.3049872103788882E-5, LEX:171=1.3050068125979181E-5}
9: =========== r:0.6666666666666666 p:0.6666666666666666 (epoch:1 file:0 0)
if there is an empty cup
(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
MakeLex parse time: 0.002 sec.
Adding:
if there is an  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $1) (state:t $2 $0))))) : 0.0
empty  :- NP : empty:s : 0.0
Lex Size: 505
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if there is an  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $1) (state:t $2 $0))))) : 504 : 0.0
empty  :- NP : empty:s : 53 : 10.0
cup  :- NP : cup:d : 8 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if there is an  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $1) (state:t $2 $0))))) : 504 : 0.0
empty  :- NP : empty:s : 53 : 10.0
cup  :- NP : cup:d : 8 : 10.0
]
Scale: 0.9994902599674166
Update:
{}
10: =========== r:0.7 p:0.7 (epoch:1 file:0 0)
if the cup contains water
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 water:q)))))
MakeLex parse time: 0.002 sec.
Adding:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.2734183333333333
cup contains  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 cup:d) (has:t $2 ($0 $1)))))) : 0.0
Lex Size: 507
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 water:q)))))
Using:
[LexEntries and scores:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 505 : 0.2734183333333333
cup contains  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 cup:d) (has:t $2 ($0 $1)))))) : 506 : 0.0
water  :- NP : water:q : 32 : 10.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 505 : 0.2734183333333333
cup contains  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 cup:d) (has:t $2 ($0 $1)))))) : 506 : 0.0
water  :- NP : water:q : 32 : 10.0
]
Scale: 0.999480270259465
Update:
{}
11: =========== r:0.7272727272727273 p:0.7272727272727273 (epoch:1 file:0 0)
if it contains coffee
(exists $0 (and (object:t $0 it:e) (has:t $0 (the $1 (object:t $1 coffee:q)))))
MakeLex parse time: 0.001 sec.
Adding:
if it  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 it:e) (has:t $1 $0)))) : 0.0
Lex Size: 508
First parse time: 0.001 sec.
CORRECT:(exists $0 (and (object:t $0 it:e) (has:t $0 (the $1 (object:t $1 coffee:q)))))
Using:
[LexEntries and scores:
if it  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 it:e) (has:t $1 $0)))) : 507 : 0.0
contains  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 472 : 0.0560955472512135
coffee  :- NP : coffee:q : 35 : 10.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
if it  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 it:e) (has:t $1 $0)))) : 507 : 0.0
contains  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 472 : 0.0560955472512135
coffee  :- NP : coffee:q : 35 : 10.0
]
Scale: 0.9994702807512019
Update:
{}
12: =========== r:0.75 p:0.75 (epoch:1 file:0 0)
if the plate contains syrup
(exists $0 (and (object:t $0 plate:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
MakeLex parse time: 0.001 sec.
Adding:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.2734183333333333
plate contains  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 plate:d) (has:t $2 ($0 $1)))))) : 0.0
Lex Size: 509
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 plate:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
Using:
[LexEntries and scores:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 505 : 0.2734183333333333
plate contains  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 plate:d) (has:t $2 ($0 $1)))))) : 508 : 0.0
syrup  :- NP : syrup:q : 33 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 505 : 0.2734183333333333
plate contains  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 plate:d) (has:t $2 ($0 $1)))))) : 508 : 0.0
syrup  :- NP : syrup:q : 33 : 10.0
]
Scale: 0.999460291442621
Update:
{}
13: =========== r:0.7692307692307693 p:0.7692307692307693 (epoch:1 file:0 0)
if the cup is empty
(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
MakeLex parse time: 0.001 sec.
Adding:
if the  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
cup is  :- S|NP : (lambda $0 e (exists $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
if the cup  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
is  :- S|NP : (lambda $0 e (exists $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
if  :- S|NP : (lambda $0 e (exists $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
the cup is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
if the  :- S|NP : (lambda $0 e (exists $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
cup is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
if the cup  :- S|NP : (lambda $0 e (exists $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
if the  :- S/S : (lambda $0 t $0) : 0.0
cup is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
if the cup  :- S/S : (lambda $0 t $0) : 0.0
is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
if the  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 0.0
cup is  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $0 cup:d) (state:t $0 $1)))) : 0.0
if the cup  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $0 cup:d) (state:t $0 $1)))) : 0.0
if  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $0 cup:d) (state:t $0 $1)))) : 0.0
the cup is  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 0.0
if the  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $0 cup:d) (state:t $0 $1)))) : 0.0
cup is  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 0.0
if the cup  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $0 cup:d) (state:t $0 $1)))) : 0.0
is  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 0.0
if the  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $1 $2)))) : 0.0
cup is  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
if the cup  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $1 $2)))) : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
if  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
the cup is  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $1 $2)))) : 0.0
if the  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
cup is  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $1 $2)))) : 0.0
if the cup  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
is  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $1 $2)))) : 0.0
if the  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 0.0
cup is  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
if the cup  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 ($0 $1))) : 0.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
if  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 0.0
the cup is  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
if the  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 0.0
cup is  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
if the cup  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 0.0
is  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
if  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
the cup is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 0.0
if the  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
cup is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 0.0
if the cup  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 0.0
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the cup is  :- NP : cup:d : 0.0
if the  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
cup is  :- NP : cup:d : 0.0
if the cup  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
is  :- NP : cup:d : 0.0
if  :- NP : cup:d : 0.0
the cup is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
if the  :- NP : cup:d : 0.0
cup is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
if the cup  :- NP : cup:d : 0.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
if  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 cup:d) ($0 $2 $1))))) : 0.0
the cup is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
if the  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 cup:d) ($0 $2 $1))))) : 0.0
cup is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
if the cup  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 cup:d) ($0 $2 $1))))) : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
if  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
the cup is  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 cup:d) ($0 $2 $1))))) : 0.0
if the  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
cup is  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 cup:d) ($0 $2 $1))))) : 0.0
if the cup  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
is  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 cup:d) ($0 $2 $1))))) : 0.0
if  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 cup:d) ($0 $1 $2))))) : 0.0
the cup is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
if the  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 cup:d) ($0 $1 $2))))) : 0.0
cup is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
if the cup  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 cup:d) ($0 $1 $2))))) : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
if  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
the cup is  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 cup:d) ($0 $1 $2))))) : 0.0
if the  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
cup is  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 cup:d) ($0 $1 $2))))) : 0.0
if the cup  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
is  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 cup:d) ($0 $1 $2))))) : 0.0
if  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 cup:d) ($0 $1)))) : 0.0
the cup is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
if the  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 cup:d) ($0 $1)))) : 0.0
cup is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
if the cup  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 cup:d) ($0 $1)))) : 0.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
if the cup is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
empty  :- NP : empty:s : 0.0
Lex Size: 601
First parse time: 0.015 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : 0.0
the cup  :- NP : cup:d : 14 : 20.0
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : 0.0
empty  :- NP : empty:s : 53 : 10.0
]
Second parse time: 0.011 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : 0.0
the cup  :- NP : cup:d : 14 : 20.0
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : 0.0
empty  :- NP : empty:s : 53 : 10.0
]
Scale: 0.9994503023337165
Update:
{LHT:0:object:t:e=-0.10619362868699508, LHH:0:object:t:var=-0.10619362868699508, LHT:0:state:t:e=-0.1600634769206953, LHH:0:state:t:var=-0.1600634769206953, BB:exists:state:t=-0.16006362657664985, BB:exists:object:t=-0.10619365042434008, LHT:1:object:t:p=-0.10619364712529462, LHH:1:object:t:you:p=-0.10619364712529462, LHT:1:state:t:e=-0.16006375864193428, LHH:1:state:t:var=-0.16006375864193428, LEX:123=0.047229645771716934, LEX:131=0.1372496084114274, LEX:365=-0.10619364624999113, LEX:547=-0.08002817951916079, LEX:559=0.001735161001075496, LEX:518=0.08176705061765986, LEX:558=-0.08003181295781926, LEX:570=-0.0017350674639070244}
14: =========== r:0.7857142857142857 p:0.7857142857142857 (epoch:1 file:0 0)
if they are used
(exists $0 (and (object:t $0 they:e) (state:t $0 used:s)))
MakeLex parse time: 0.001 sec.
Adding:
are used  :- NP : used:s : 0.0
Lex Size: 602
First parse time: 0.001 sec.
WRONG: (exists $0 (and (object:t $0 they:p) (state:t $0 used:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : 0.001735161001075496
they  :- NP : they:p : 4 : 10.0
are used  :- NP : used:s : 601 : 0.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : 0.001735161001075496
they  :- NP : they:e : 7 : 10.0
are used  :- NP : used:s : 601 : 0.0
]
Scale: 0.9994403134244824
Update:
{LHT:1:object:t:e=0.3626656746569289, LHH:1:object:t:they:e=0.3626656746569289, LHT:1:object:t:p=-0.36266567465692884, LHH:1:object:t:they:p=-0.36266567465692884, LEX:283=0.18117140751757183, LEX:601=-0.1811796326867481, LEX:559=-0.1811796326867481, LEX:4=-0.3626656746569288, LEX:7=0.1814860419701807, LEX:54=0.18117140751757183}
15: =========== r:0.7333333333333333 p:0.7333333333333333 (epoch:1 file:0 0)
if the kettle is white
(exists $0 (and (object:t $0 kettle:d) (state:t $0 white:s)))
MakeLex parse time: 0.002 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
white  :- NP : white:s : 0.0
the kettle  :- NP : kettle:d : 0.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
white  :- NP : white:s : 0.0
Lex Size: 602
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 white:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.03792532751829539
the kettle  :- NP : kettle:d : 17 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -0.0017350674639070244
white  :- NP : white:s : 52 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.03792532751829539
the kettle  :- NP : kettle:d : 17 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -0.0017350674639070244
white  :- NP : white:s : 52 : 10.0
]
Scale: 0.9994303247149126
Update:
{LHT:0:object:t:e=-0.04882152628893057, LHH:0:object:t:var=-0.04882152628893057, LHT:0:state:t:e=-0.0803925752278881, LHH:0:state:t:var=-0.0803925752278881, BB:exists:object:t=-0.048821526288930724, LHT:1:object:t:p=-0.048821526288930724, LHH:1:object:t:you:p=-0.048821526288930724, BB:exists:state:t=-0.08039257522788802, LHT:1:state:t:e=-0.08039257522788802, LHH:1:state:t:var=-0.08039257522788802, LEX:123=0.022747754586823012, LEX:131=0.07233194143259643, LEX:365=-0.04882152628893071, LEX:547=-0.04375636473765879, LEX:559=-0.002504633158683815, LEX:518=0.03412928922208506, LEX:558=-0.036634058440951855, LEX:570=0.002504769141303662}
16: =========== r:0.75 p:0.75 (epoch:1 file:0 0)
if the mug is on the stove
(exists $0 (and (object:t $0 mug:d) (On:t $0 (the $1 (object:t $1 stove:f)))))
MakeLex parse time: 0.003 sec.
Adding:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.2734183333333333
mug is on  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 mug:d) (On:t $2 ($0 $1)))))) : 0.0
Lex Size: 603
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (On:t $0 (the $1 (object:t $1 stove:f)))))
Using:
[LexEntries and scores:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 505 : 0.2734183333333333
mug is on  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 mug:d) (On:t $2 ($0 $1)))))) : 602 : 0.0
the stove  :- NP : stove:f : 76 : 20.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 505 : 0.2734183333333333
mug is on  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 mug:d) (On:t $2 ($0 $1)))))) : 602 : 0.0
the stove  :- NP : stove:f : 76 : 20.0
]
Scale: 0.999420336205001
Update:
{}
17: =========== r:0.7647058823529411 p:0.7647058823529411 (epoch:1 file:0 0)
if the mug is red and dry
(exists $0 (and (object:t $0 mug:d) (state:t $0 red:s) (state:t $0 dry:s)))
MakeLex parse time: 0.003 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
the mug is red and  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 mug:d) (state:t $1 red:s) (state:t $1 $0)))) : 0.0
Lex Size: 604
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (state:t $0 red:s) (state:t $0 dry:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.03440661391430104
the mug is red and  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 mug:d) (state:t $1 red:s) (state:t $1 $0)))) : 603 : 0.0
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.03440661391430104
the mug is red and  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 mug:d) (state:t $1 red:s) (state:t $1 $0)))) : 603 : 0.0
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.999410347894742
Update:
{LHT:0:object:t:e=-0.0381479946748716, LHH:0:object:t:var=-0.0381479946748716, LHT:0:state:t:e=-0.03028704041014582, LHH:0:state:t:var=-0.03028704041014582, BB:exists:object:t=-0.0381479946748716, LHT:1:object:t:p=-0.0381479946748716, LHH:1:object:t:you:p=-0.0381479946748716, BB:exists:state:t=-0.030287040410145644, LHT:1:state:t:e=-0.030287040410145644, LHH:1:state:t:var=-0.030287040410145644, LEX:286=0.01854827122812821, LEX:603=-0.018549113318339232, LEX:123=0.011490801161915856, LEX:131=0.03839512060476211, LEX:365=-0.0381479946748716, LEX:547=-0.030287040410145637}
18: =========== r:0.7777777777777778 p:0.7777777777777778 (epoch:1 file:0 0)
if the kettle is empty and cool
(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s) (state:t $0 cool:s)))
MakeLex parse time: 0.003 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
the kettle is empty and  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 kettle:d) (state:t $1 empty:s) (state:t $1 $0)))) : 0.0
Lex Size: 605
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s) (state:t $0 cool:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.07280173451906316
the kettle is empty and  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 kettle:d) (state:t $1 empty:s) (state:t $1 $0)))) : 604 : 0.0
cool  :- NP : cool:s : 49 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.07280173451906316
the kettle is empty and  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 kettle:d) (state:t $1 empty:s) (state:t $1 $0)))) : 604 : 0.0
cool  :- NP : cool:s : 49 : 10.0
]
Scale: 0.9994003597841296
Update:
{LHT:0:object:t:e=-0.031168573420277183, LHH:0:object:t:var=-0.031168573420277183, LHT:0:state:t:e=-0.025737827991660127, LHH:0:state:t:var=-0.025737827991660127, BB:exists:object:t=-0.03116857342027731, LHT:1:object:t:p=-0.03116857342027731, LHH:1:object:t:you:p=-0.03116857342027731, BB:exists:state:t=-0.02573782799165988, LHT:1:state:t:e=-0.02573782799165988, LHH:1:state:t:var=-0.02573782799165988, LEX:287=0.015063579579681791, LEX:604=-0.015064263465136582, LEX:123=0.009439857739148377, LEX:131=0.03240228020765213, LEX:365=-0.03116857342027731, LEX:547=-0.025737827991659884}
19: =========== r:0.7894736842105263 p:0.7894736842105263 (epoch:1 file:0 0)
if the glass is used and on the floor
(exists $0 (and (object:t $0 kettle:d) (state:t $0 used:s) (On:t $0 (the $1 (object:t $1 floor:lo)))))
MakeLex parse time: 0.003 sec.
Adding:
if the glass is used  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 kettle:d) (state:t $2 used:s) (On:t $2 ($0 $1)))))) : 0.0
and on  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.6378499999999999
if the glass is used  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 kettle:d) (state:t $1 used:s) (On:t $1 $0)))) : 0.0
and on  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.6378499999999999
Lex Size: 609
First parse time: 0.006 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 used:s) (On:t $0 (the $1 (object:t $1 floor:lo)))))
Using:
[LexEntries and scores:
if the glass is used  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 kettle:d) (state:t $2 used:s) (On:t $2 ($0 $1)))))) : 605 : 0.0
if the glass is used  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 kettle:d) (state:t $1 used:s) (On:t $1 $0)))) : 607 : 0.0
and on  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 606 : 0.6378499999999999
and on  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 608 : 0.6378499999999999
the floor  :- NP : floor:lo : 67 : 20.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if the glass is used  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 kettle:d) (state:t $2 used:s) (On:t $2 ($0 $1)))))) : 605 : 0.0
if the glass is used  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 kettle:d) (state:t $1 used:s) (On:t $1 $0)))) : 607 : 0.0
and on  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 606 : 0.6378499999999999
and on  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 608 : 0.6378499999999999
the floor  :- NP : floor:lo : 67 : 20.0
]
Scale: 0.9993903718731574
Update:
{}
20: =========== r:0.8 p:0.8 (epoch:1 file:0 0)
if the plate is dirty and in the refrigerator
(exists $0 (and (object:t $0 plate:d) (state:t $0 dirty:s) (In:t $0 (the $1 (object:t $1 refrigerator:f)))))
MakeLex parse time: 0.004 sec.
Adding:
if the plate is dirty  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 plate:d) (state:t $2 dirty:s) (In:t $2 ($0 $1)))))) : 0.0
and in  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.6378499999999999
if the plate is dirty  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 plate:d) (state:t $1 dirty:s) (In:t $1 $0)))) : 0.0
and in  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.6378499999999999
Lex Size: 613
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 plate:d) (state:t $0 dirty:s) (In:t $0 (the $1 (object:t $1 refrigerator:f)))))
Using:
[LexEntries and scores:
if the plate is dirty  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 plate:d) (state:t $2 dirty:s) (In:t $2 ($0 $1)))))) : 609 : 0.0
if the plate is dirty  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 plate:d) (state:t $1 dirty:s) (In:t $1 $0)))) : 611 : 0.0
and in  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 610 : 0.6378499999999999
and in  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 612 : 0.6378499999999999
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if the plate is dirty  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 plate:d) (state:t $2 dirty:s) (In:t $2 ($0 $1)))))) : 609 : 0.0
if the plate is dirty  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 plate:d) (state:t $1 dirty:s) (In:t $1 $0)))) : 611 : 0.0
and in  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 610 : 0.6378499999999999
and in  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 612 : 0.6378499999999999
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
]
Scale: 0.9993803841618196
Update:
{}
21: =========== r:0.8095238095238095 p:0.8095238095238095 (epoch:1 file:0 0)
for all mugs that contain water
(forall $0 (and (object:t $0 mugs:d) (has:t $0 (the $1 (object:t $1 water:q)))))
MakeLex parse time: 0.002 sec.
Adding:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
all mugs that contain  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for all  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
mugs that contain  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for all mugs  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
that contain  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for all mugs that  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
contain  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
all mugs that contain  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
for all  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
mugs that contain  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
for all mugs  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
that contain  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
for all mugs that  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
contain  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
for  :- S/S : (lambda $0 t $0) : 0.0
all mugs that contain  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for all  :- S/S : (lambda $0 t $0) : 0.0
mugs that contain  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for all mugs  :- S/S : (lambda $0 t $0) : 0.0
that contain  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for all mugs that  :- S/S : (lambda $0 t $0) : 0.0
contain  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $2 $1)))) : 0.0
all mugs that contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $0 mugs:d) (has:t $0 (the $2 (object:t $2 $1)))))) : 0.0
for all  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $2 $1)))) : 0.0
mugs that contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $0 mugs:d) (has:t $0 (the $2 (object:t $2 $1)))))) : 0.0
for all mugs  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $2 $1)))) : 0.0
that contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $0 mugs:d) (has:t $0 (the $2 (object:t $2 $1)))))) : 0.0
for all mugs that  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $2 $1)))) : 0.0
contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $0 mugs:d) (has:t $0 (the $2 (object:t $2 $1)))))) : 0.0
for  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $0 mugs:d) (has:t $0 (the $2 (object:t $2 $1)))))) : 0.0
all mugs that contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $2 $1)))) : 0.0
for all  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $0 mugs:d) (has:t $0 (the $2 (object:t $2 $1)))))) : 0.0
mugs that contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $2 $1)))) : 0.0
for all mugs  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $0 mugs:d) (has:t $0 (the $2 (object:t $2 $1)))))) : 0.0
that contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $2 $1)))) : 0.0
for all mugs that  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $0 mugs:d) (has:t $0 (the $2 (object:t $2 $1)))))) : 0.0
contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $2 $1)))) : 0.0
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 0.0
all mugs that contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for all  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 0.0
mugs that contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for all mugs  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 0.0
that contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for all mugs that  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 0.0
contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
all mugs that contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 0.0
for all  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
mugs that contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 0.0
for all mugs  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
that contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 0.0
for all mugs that  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 0.0
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 0.0
all mugs that contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for all  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 0.0
mugs that contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for all mugs  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 0.0
that contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for all mugs that  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 0.0
contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (forall $2 (and ($0 $2) (has:t $2 (the $3 (object:t $3 $1))))))) : 0.0
all mugs that contain  :- S|NP : (lambda $0 e (object:t $0 mugs:d)) : 0.0
for all  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (forall $2 (and ($0 $2) (has:t $2 (the $3 (object:t $3 $1))))))) : 0.0
mugs that contain  :- S|NP : (lambda $0 e (object:t $0 mugs:d)) : 0.0
for all mugs  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (forall $2 (and ($0 $2) (has:t $2 (the $3 (object:t $3 $1))))))) : 0.0
that contain  :- S|NP : (lambda $0 e (object:t $0 mugs:d)) : 0.0
for all mugs that  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (forall $2 (and ($0 $2) (has:t $2 (the $3 (object:t $3 $1))))))) : 0.0
contain  :- S|NP : (lambda $0 e (object:t $0 mugs:d)) : 0.0
for  :- S|NP : (lambda $0 e (object:t $0 mugs:d)) : 0.0
all mugs that contain  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (forall $2 (and ($0 $2) (has:t $2 (the $3 (object:t $3 $1))))))) : 0.0
for all  :- S|NP : (lambda $0 e (object:t $0 mugs:d)) : 0.0
mugs that contain  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (forall $2 (and ($0 $2) (has:t $2 (the $3 (object:t $3 $1))))))) : 0.0
for all mugs  :- S|NP : (lambda $0 e (object:t $0 mugs:d)) : 0.0
that contain  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (forall $2 (and ($0 $2) (has:t $2 (the $3 (object:t $3 $1))))))) : 0.0
for all mugs that  :- S|NP : (lambda $0 e (object:t $0 mugs:d)) : 0.0
contain  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (forall $2 (and ($0 $2) (has:t $2 (the $3 (object:t $3 $1))))))) : 0.0
for  :- S/NP/NP : (lambda $0 e (lambda $1 e (forall $2 (and (object:t $2 $0) (has:t $2 (the $3 (object:t $3 $1))))))) : 0.0
all mugs that contain  :- NP : mugs:d : 0.0
for all  :- S/NP/NP : (lambda $0 e (lambda $1 e (forall $2 (and (object:t $2 $0) (has:t $2 (the $3 (object:t $3 $1))))))) : 0.0
mugs that contain  :- NP : mugs:d : 0.0
for all mugs  :- S/NP/NP : (lambda $0 e (lambda $1 e (forall $2 (and (object:t $2 $0) (has:t $2 (the $3 (object:t $3 $1))))))) : 0.0
that contain  :- NP : mugs:d : 0.0
for all mugs that  :- S/NP/NP : (lambda $0 e (lambda $1 e (forall $2 (and (object:t $2 $0) (has:t $2 (the $3 (object:t $3 $1))))))) : 0.0
contain  :- NP : mugs:d : 0.0
for  :- NP : mugs:d : 0.0
all mugs that contain  :- S/NP\NP : (lambda $0 e (lambda $1 e (forall $2 (and (object:t $2 $0) (has:t $2 (the $3 (object:t $3 $1))))))) : 0.0
for all  :- NP : mugs:d : 0.0
mugs that contain  :- S/NP\NP : (lambda $0 e (lambda $1 e (forall $2 (and (object:t $2 $0) (has:t $2 (the $3 (object:t $3 $1))))))) : 0.0
for all mugs  :- NP : mugs:d : 0.0
that contain  :- S/NP\NP : (lambda $0 e (lambda $1 e (forall $2 (and (object:t $2 $0) (has:t $2 (the $3 (object:t $3 $1))))))) : 0.0
for all mugs that  :- NP : mugs:d : 0.0
contain  :- S/NP\NP : (lambda $0 e (lambda $1 e (forall $2 (and (object:t $2 $0) (has:t $2 (the $3 (object:t $3 $1))))))) : 0.0
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) ($0 $2 $1))))) : 0.0
all mugs that contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 0.0
for all  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) ($0 $2 $1))))) : 0.0
mugs that contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 0.0
for all mugs  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) ($0 $2 $1))))) : 0.0
that contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 0.0
for all mugs that  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) ($0 $2 $1))))) : 0.0
contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 0.0
for  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 0.0
all mugs that contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) ($0 $2 $1))))) : 0.0
for all  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 0.0
mugs that contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) ($0 $2 $1))))) : 0.0
for all mugs  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 0.0
that contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) ($0 $2 $1))))) : 0.0
for all mugs that  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $0 (the $2 (object:t $2 $1))))) : 0.0
contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) ($0 $2 $1))))) : 0.0
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) ($0 $1 $2))))) : 0.0
all mugs that contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
for all  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) ($0 $1 $2))))) : 0.0
mugs that contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
for all mugs  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) ($0 $1 $2))))) : 0.0
that contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
for all mugs that  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) ($0 $1 $2))))) : 0.0
contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
for  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
all mugs that contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) ($0 $1 $2))))) : 0.0
for all  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
mugs that contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) ($0 $1 $2))))) : 0.0
for all mugs  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
that contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) ($0 $1 $2))))) : 0.0
for all mugs that  :- S|NP|NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) ($0 $1 $2))))) : 0.0
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 (and (object:t $1 mugs:d) ($0 $1)))) : 0.0
all mugs that contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
for all  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 (and (object:t $1 mugs:d) ($0 $1)))) : 0.0
mugs that contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
for all mugs  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 (and (object:t $1 mugs:d) ($0 $1)))) : 0.0
that contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
for all mugs that  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 (and (object:t $1 mugs:d) ($0 $1)))) : 0.0
contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 0.0
for  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 0.0
all mugs that contain  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
for all  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 0.0
mugs that contain  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
for all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 0.0
that contain  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
for all mugs that  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 0.0
contain  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
for  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
all mugs that contain  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 0.0
for all  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
mugs that contain  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 0.0
for all mugs  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
that contain  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 0.0
for all mugs that  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
contain  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 0.0
for  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 $0)))) : 0.0
all mugs that contain  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
for all  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 $0)))) : 0.0
mugs that contain  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
for all mugs  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 $0)))) : 0.0
that contain  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
for all mugs that  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 $0)))) : 0.0
contain  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 (the $3 ($0 $3 $1))))))) : 0.0
all mugs that contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
for all  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 (the $3 ($0 $3 $1))))))) : 0.0
mugs that contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
for all mugs  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 (the $3 ($0 $3 $1))))))) : 0.0
that contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
for all mugs that  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 (the $3 ($0 $3 $1))))))) : 0.0
contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
for  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
all mugs that contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 (the $3 ($0 $3 $1))))))) : 0.0
for all  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
mugs that contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 (the $3 ($0 $3 $1))))))) : 0.0
for all mugs  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
that contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 (the $3 ($0 $3 $1))))))) : 0.0
for all mugs that  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 (the $3 ($0 $3 $1))))))) : 0.0
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 (the $3 ($0 $1 $3))))))) : 0.0
all mugs that contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
for all  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 (the $3 ($0 $1 $3))))))) : 0.0
mugs that contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
for all mugs  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 (the $3 ($0 $1 $3))))))) : 0.0
that contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
for all mugs that  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 (the $3 ($0 $1 $3))))))) : 0.0
contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
for  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
all mugs that contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 (the $3 ($0 $1 $3))))))) : 0.0
for all  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
mugs that contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 (the $3 ($0 $1 $3))))))) : 0.0
for all mugs  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
that contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 (the $3 ($0 $1 $3))))))) : 0.0
for all mugs that  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
contain  :- S/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 (the $3 ($0 $1 $3))))))) : 0.0
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 ($0 $2)))))) : 0.0
all mugs that contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
for all  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 ($0 $2)))))) : 0.0
mugs that contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
for all mugs  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 ($0 $2)))))) : 0.0
that contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
for all mugs that  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 ($0 $2)))))) : 0.0
contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
for all mugs that contain  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 0.0
water  :- NP : water:q : 0.0
Lex Size: 813
First parse time: 0.011 sec.
WRONG: (forall $0 (and (forall $1 (and (object:t $1 mug:d) (has:t $1 (the $2 (object:t $2 $0))))) (has:t $0 (the $1 (object:t $1 water:q)))))
Using:
[LexEntries and scores:
for all  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (forall $2 (and ($0 $2) (has:t $2 (the $3 (object:t $3 $1))))))) : 679 : 0.0
for all  :- S/NP/NP : (lambda $0 e (lambda $1 e (forall $2 (and (object:t $2 $0) (has:t $2 (the $3 (object:t $3 $1))))))) : 695 : 0.0
mugs  :- NP : mug:d : 27 : 10.0
that contain  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (forall $2 (and ($0 $2) (has:t $2 (the $3 (object:t $3 $1))))))) : 690 : 0.0
that contain  :- S/NP\NP : (lambda $0 e (lambda $1 e (forall $2 (and (object:t $2 $0) (has:t $2 (the $3 (object:t $3 $1))))))) : 706 : 0.0
water  :- NP : water:q : 32 : 10.0
]
Second parse time: 0.01 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/S : (lambda $0 t $0) : 629 : 0.0
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 669 : 0.0
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 (and (object:t $1 mugs:d) ($0 $1)))) : 741 : 0.0
for  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 $0)))) : 765 : 0.0
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 ($0 $2)))))) : 805 : 0.0
for all  :- S/S : (lambda $0 t $0) : 631 : 0.0
for all  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 671 : 0.0
for all  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 (and (object:t $1 mugs:d) ($0 $1)))) : 743 : 0.0
for all  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 $0)))) : 767 : 0.0
for all  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 ($0 $2)))))) : 807 : 0.0
for all mugs  :- S/S : (lambda $0 t $0) : 633 : 0.0
for all mugs  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 673 : 0.0
for all mugs  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 (and (object:t $1 mugs:d) ($0 $1)))) : 745 : 0.0
for all mugs  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 $0)))) : 769 : 0.0
for all mugs  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 ($0 $2)))))) : 809 : 0.0
for all mugs that  :- S/S : (lambda $0 t $0) : 635 : 0.0
for all mugs that  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 675 : 0.0
for all mugs that  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 (and (object:t $1 mugs:d) ($0 $1)))) : 747 : 0.0
for all mugs that  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 $0)))) : 771 : 0.0
for all mugs that  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 ($0 $2)))))) : 811 : 0.0
for all mugs that contain  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 290 : 0.0
all mugs that contain  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 630 : 0.0
all mugs that contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 670 : 0.0
all mugs that contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 742 : 0.0
all mugs that contain  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 766 : 0.0
all mugs that contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 806 : 0.0
mugs that contain  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 632 : 0.0
mugs that contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 672 : 0.0
mugs that contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 744 : 0.0
mugs that contain  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 768 : 0.0
mugs that contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 808 : 0.0
that contain  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 634 : 0.0
that contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 674 : 0.0
that contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 746 : 0.0
that contain  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 770 : 0.0
that contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 810 : 0.0
contain  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 636 : 0.0
contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (has:t $1 (the $2 (object:t $2 $0)))))) : 676 : 0.0
contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 (the $2 (object:t $2 $0))))) : 748 : 0.0
contain  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 772 : 0.0
contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 812 : 0.0
water  :- NP : water:q : 32 : 10.0
]
Scale: 0.9993703966501105
Update:
{BB:has:t:object:t=-0.0033176505407449325, LHT:0:object:t:e=-0.8661352673739415, LHH:0:object:t:var=-0.8661352673739415, LHT:1:object:t:d=-0.003020393480344523, LHH:1:object:t:mugs:d=0.9898768385352968, LHT:0:has:t:e=-0.8433052230054124, LHH:0:has:t:var=-0.8433052230054124, LHT:1:has:t:e=-0.8433895957838684, LHH:1:has:t:the=-0.8432509234197653, LHT:1:object:t:q=9.534483331260716E-5, LHH:1:object:t:water:q=9.534483331260716E-5, BB:object:t:object:t=-4.163163034866491E-5, LHH:1:object:t:mug:d=-0.9928972320156412, LHT:1:object:t:e=-0.863274617644744, LHH:1:object:t:the=-0.025547515210745244, LHT:0:object:t:q=-6.439891783405643E-5, LHH:0:object:t:water:q=-6.439891783405643E-5, BB:forall:has:t=-0.8375111600977926, LHH:1:object:t:var=-0.8377271024339987, LHT:0:has:t:q=-8.528523993893391E-5, LHH:0:has:t:water:q=-8.528523993893391E-5, LHH:1:has:t:var=-1.3867236410286456E-4, LEX:627=0.007070616184691669, LEX:651=0.006976599881056032, LEX:667=0.006976599881056032, LEX:683=0.007054735901241245, LEX:699=0.007053940011920745, LEX:723=0.006991657606164643, LEX:739=0.006991657606164643, LEX:771=0.01413809672988762, LEX:779=0.0068634509362692645, LEX:795=0.013756561320922645, LEX:811=0.013777034659350967, LEX:614=0.007070616184691669, LEX:630=0.021243609120975854, LEX:638=0.006976599881056032, LEX:654=0.006976599881056032, LEX:670=0.020935324821762472, LEX:686=0.007035948093665953, LEX:702=0.007053940011920745, LEX:710=0.006991657606164643, LEX:726=0.006991657606164643, LEX:742=0.02097797616389345, LEX:782=0.0068680439912471615, LEX:798=0.0068680439912471615, LEX:625=0.007070616184691669, LEX:649=0.006976599881056032, LEX:665=0.006976599881056032, LEX:681=0.007054735901241245, LEX:697=0.007053940011920745, LEX:721=0.006991657606164643, LEX:737=0.006991657606164643, LEX:769=0.01413809672988762, LEX:777=0.0068634509362692645, LEX:793=0.013756561320922645, LEX:809=0.013777034659350967, LEX:616=0.007070616184691669, LEX:632=0.021243609120975854, LEX:640=0.006976599881056032, LEX:656=0.006976599881056032, LEX:672=0.020935324821762472, LEX:688=0.007035948093665953, LEX:704=0.007053940011920745, LEX:712=0.006991657606164643, LEX:728=0.006991657606164643, LEX:744=0.02097797616389345, LEX:784=0.0068680439912471615, LEX:800=0.0068680439912471615, LEX:615=-0.018368988847030025, LEX:623=0.007070616184691669, LEX:631=-0.050910903300021446, LEX:647=0.006976599881056032, LEX:663=0.006976599881056032, LEX:679=-0.41153622626490116, LEX:695=-0.4696264854831197, LEX:719=0.006991657606164643, LEX:735=0.006991657606164643, LEX:767=0.01413809672988762, LEX:775=0.0068634509362692645, LEX:791=0.013756561320922645, LEX:807=0.013777034659350967, LEX:618=0.007070616184691669, LEX:626=-0.02545571343054296, LEX:634=0.021243609120975854, LEX:642=0.006976599881056032, LEX:658=0.006976599881056032, LEX:674=0.020935324821762472, LEX:690=-0.41155501407247647, LEX:706=-0.50916286650868, LEX:714=0.006991657606164643, LEX:730=0.006991657606164643, LEX:746=0.02097797616389345, LEX:770=-0.004288025806318963, LEX:786=0.0068680439912471615, LEX:802=0.0068680439912471615, LEX:621=0.007070616184691669, LEX:645=0.006976599881056032, LEX:661=0.006976599881056032, LEX:677=0.007054735901241245, LEX:693=0.007053940011920745, LEX:717=0.006991657606164643, LEX:733=0.006991657606164643, LEX:765=0.01413809672988762, LEX:773=0.0068634509362692645, LEX:789=0.013756561320922645, LEX:805=0.013777034659350967, LEX:27=-0.9928972320156412, LEX:620=0.007070616184691669, LEX:636=0.021243609120975854, LEX:644=0.006976599881056032, LEX:660=0.006976599881056032, LEX:676=0.020935324821762472, LEX:692=0.007035948093665953, LEX:708=0.007053940011920745, LEX:716=0.006991657606164643, LEX:732=0.006991657606164643, LEX:748=0.02097797616389345, LEX:788=0.0068680439912471615, LEX:804=0.0068680439912471615, LEX:290=0.007087731027429926, LEX:619=0.014175462054859853, LEX:635=0.014175462054859853, LEX:643=0.007087731027429926, LEX:659=0.014175462054859853, LEX:675=0.014175462054859853, LEX:691=0.007087731027429926, LEX:707=0.007087731027429926, LEX:715=0.007087731027429926, LEX:731=0.014175462054859853, LEX:747=0.014175462054859853, LEX:755=0.014175462054859853, LEX:763=0.007087731027429926, LEX:787=0.007087731027429926, LEX:803=0.007087731027429926, LEX:622=0.007087731027429926, LEX:646=0.007087731027429926, LEX:662=0.007087731027429926, LEX:678=0.007087731027429926, LEX:694=0.007087731027429926, LEX:718=0.007087731027429926, LEX:734=0.007087731027429926, LEX:750=0.007087731027429926, LEX:758=0.007087731027429926, LEX:766=0.02126319308228978, LEX:774=0.007087731027429926, LEX:790=0.007087731027429926, LEX:806=0.02126319308228978, LEX:617=0.014175462054859853, LEX:633=0.014175462054859853, LEX:641=0.007087731027429926, LEX:657=0.014175462054859853, LEX:673=0.014175462054859853, LEX:689=0.007087731027429926, LEX:705=0.007087731027429926, LEX:713=0.007087731027429926, LEX:729=0.014175462054859853, LEX:745=0.014175462054859853, LEX:753=0.014175462054859853, LEX:761=0.007087731027429926, LEX:785=0.007087731027429926, LEX:801=0.007087731027429926, LEX:624=0.007087731027429926, LEX:648=0.007087731027429926, LEX:664=0.007087731027429926, LEX:680=0.007087731027429926, LEX:696=0.007087731027429926, LEX:720=0.007087731027429926, LEX:736=0.007087731027429926, LEX:752=0.007087731027429926, LEX:760=0.007087731027429926, LEX:768=0.02126319308228978, LEX:776=0.007087731027429926, LEX:792=0.007087731027429926, LEX:808=0.02126319308228978, LEX:639=0.007087731027429926, LEX:655=0.014175462054859853, LEX:671=0.014175462054859853, LEX:687=0.007087731027429926, LEX:703=0.007087731027429926, LEX:711=0.007087731027429926, LEX:727=0.014175462054859853, LEX:743=0.014175462054859853, LEX:751=0.014175462054859853, LEX:759=0.007087731027429926, LEX:783=0.007087731027429926, LEX:799=0.007087731027429926, LEX:650=0.007087731027429926, LEX:666=0.007087731027429926, LEX:682=0.007087731027429926, LEX:698=0.007087731027429926, LEX:722=0.007087731027429926, LEX:738=0.007087731027429926, LEX:754=0.007087731027429926, LEX:762=0.007087731027429926, LEX:778=0.007087731027429926, LEX:794=0.007087731027429926, LEX:810=0.02126319308228978, LEX:613=0.014175462054859853, LEX:629=0.014175462054859853, LEX:637=0.007087731027429926, LEX:653=0.014175462054859853, LEX:669=0.014175462054859853, LEX:685=0.007087731027429926, LEX:701=0.007087731027429926, LEX:709=0.007087731027429926, LEX:725=0.014175462054859853, LEX:741=0.014175462054859853, LEX:749=0.014175462054859853, LEX:757=0.007087731027429926, LEX:781=0.007087731027429926, LEX:797=0.007087731027429926, LEX:628=0.007087731027429926, LEX:652=0.007087731027429926, LEX:668=0.007087731027429926, LEX:684=0.007087731027429926, LEX:700=0.007087731027429926, LEX:724=0.007087731027429926, LEX:740=0.007087731027429926, LEX:756=0.007087731027429926, LEX:764=0.007087731027429926, LEX:772=0.02126319308228978, LEX:780=0.007087731027429926, LEX:796=0.007087731027429926, LEX:812=0.02126319308228978}
22: =========== r:0.7727272727272727 p:0.7727272727272727 (epoch:1 file:0 0)
for all bowls that are green
(forall $0 (and (object:t $0 bowls:d) (state:t $0 green:s)))
MakeLex parse time: 0.001 sec.
Adding:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
all bowls that are  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 0.0
for  :- S/S : (lambda $0 t $0) : 0.0
all bowls that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 0.0
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 0.0
all bowls that are  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 bowls:d) (state:t $1 $0)))) : 0.0
for all  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 0.0
bowls that are  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 bowls:d) (state:t $1 $0)))) : 0.0
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 0.0
all bowls that are  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 bowls:d) (state:t $1 $0)))) : 0.0
for all  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 0.0
bowls that are  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 bowls:d) (state:t $1 $0)))) : 0.0
Lex Size: 819
First parse time: 0.002 sec.
WRONG: (forall $0 (and (object:t green:s bowls:d) (state:t green:s $0)))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $2 $1)))) : 637 : 0.007087731027429926
for all  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $2 $1)))) : 639 : 0.007087731027429926
all bowls that are  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 bowls:d) (state:t $1 $0)))) : 815 : 0.0
all bowls that are  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 bowls:d) (state:t $1 $0)))) : 817 : 0.0
bowls that are  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 bowls:d) (state:t $1 $0)))) : 816 : 0.0
bowls that are  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 bowls:d) (state:t $1 $0)))) : 818 : 0.0
green  :- NP : green:s : 51 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.014175462054859853
for  :- S/S : (lambda $0 t $0) : 629 : 0.014175462054859853
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 653 : 0.014175462054859853
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 669 : 0.014175462054859853
for all  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 655 : 0.014175462054859853
for all  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 671 : 0.014175462054859853
all bowls that are  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 813 : 0.0
all bowls that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 814 : 0.0
all bowls that are  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 bowls:d) (state:t $1 $0)))) : 815 : 0.0
all bowls that are  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 bowls:d) (state:t $1 $0)))) : 817 : 0.0
bowls that are  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 bowls:d) (state:t $1 $0)))) : 816 : 0.0
bowls that are  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 bowls:d) (state:t $1 $0)))) : 818 : 0.0
green  :- NP : green:s : 51 : 10.0
]
Scale: 0.9993604093380237
Update:
{BB:object:t:state:t=-0.9852980849271715, LHT:0:object:t:e=0.5069557960407469, LHH:0:object:t:var=0.5069557960407469, LHT:1:object:t:d=-0.3739727883658752, LHT:0:state:t:e=0.8819360631445248, LHH:0:state:t:var=0.8819360631445248, LHT:1:state:t:s=0.8829435418824276, LHH:1:state:t:green:s=0.8829435418824276, BB:object:t:object:t=-0.6568653899514476, LHH:1:object:t:mugs:d=-0.37397278836587516, BB:has:t:object:t=-0.04554009339015137, LHT:0:has:t:e=-0.0465475721280541, LHH:0:has:t:var=-0.0465475721280541, LHT:1:has:t:e=-0.0465475721280541, LHH:1:has:t:the=-0.0465475721280541, LHT:0:object:t:s=-0.8819360631445249, LHH:0:object:t:green:s=-0.8819360631445249, LHT:0:state:t:s=-0.8819360631445249, LHH:0:state:t:green:s=-0.8819360631445249, LHT:1:state:t:e=-0.8829435418824276, LHH:1:state:t:var=-0.8829435418824276, BB:forall:has:t=-0.001007478737902725, LHT:1:object:t:s=-0.001007478737902725, LHH:1:object:t:green:s=-0.001007478737902725, LEX:291=0.07184288625321388, LEX:813=0.07236480540909374, LEX:814=0.21810189496518392, LEX:815=-0.1555310556568918, LEX:817=-0.025625368487848903, LEX:816=-0.1555310556568918, LEX:818=-0.025625368487848903, LEX:639=-0.28564420907398347, LEX:655=0.14573708955609022, LEX:671=0.14573708955609022, LEX:711=-0.1553238224982789, LEX:727=-0.004446262494791501, LEX:743=-0.004446262494791501, LEX:791=-0.01138490680281984, LEX:807=-0.011385139892255845, LEX:613=0.14573708955609022, LEX:629=0.14573708955609022, LEX:637=-0.28564420907398347, LEX:653=0.14573708955609022, LEX:669=0.14573708955609022, LEX:677=-0.0010074787379027253, LEX:709=-0.1553238224982789, LEX:725=-0.004446262494791501, LEX:741=-0.004446262494791501, LEX:789=-0.01138490680281984, LEX:805=-0.011385139892255845}
23: =========== r:0.7391304347826086 p:0.7391304347826086 (epoch:1 file:0 0)
for all glasses that are empty
(forall $0 (and (object:t $0 glasses:d) (state:t $0 empty:s)))
MakeLex parse time: 0.002 sec.
Adding:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
all glasses that are  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 0.0
for  :- S/S : (lambda $0 t $0) : 0.0
all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 0.0
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 0.0
all glasses that are  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 glasses:d) (state:t $1 $0)))) : 0.0
for all  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 0.0
glasses that are  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 glasses:d) (state:t $1 $0)))) : 0.0
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 0.0
all glasses that are  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 glasses:d) (state:t $1 $0)))) : 0.0
for all  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 0.0
glasses that are  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 glasses:d) (state:t $1 $0)))) : 0.0
Lex Size: 825
First parse time: 0.003 sec.
WRONG: (forall $0 (and (object:t $0 mugs:d) (has:t $0 (the $1 (and (object:t $1 glasses:d) (state:t $1 empty:s))))))
Using:
[LexEntries and scores:
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 ($0 $2)))))) : 805 : 0.002391894767095122
for all  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 ($0 $2)))))) : 807 : 0.002391894767095122
all glasses that are  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 glasses:d) (state:t $1 $0)))) : 823 : 0.0
glasses that are  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 glasses:d) (state:t $1 $0)))) : 824 : 0.0
empty  :- NP : empty:s : 53 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.15991255161095008
for  :- S/S : (lambda $0 t $0) : 629 : 0.15991255161095008
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 653 : 0.15991255161095008
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 669 : 0.15991255161095008
for all  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 655 : 0.15991255161095008
for all  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 671 : 0.15991255161095008
all glasses that are  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 819 : 0.0
all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 820 : 0.0
all glasses that are  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 glasses:d) (state:t $1 $0)))) : 821 : 0.0
all glasses that are  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 glasses:d) (state:t $1 $0)))) : 823 : 0.0
glasses that are  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 glasses:d) (state:t $1 $0)))) : 822 : 0.0
glasses that are  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 glasses:d) (state:t $1 $0)))) : 824 : 0.0
empty  :- NP : empty:s : 53 : 10.0
]
Scale: 0.9993504222255534
Update:
{BB:object:t:state:t=-0.5250484176771512, LHT:0:object:t:e=-0.5371544151576797, LHH:0:object:t:var=-0.5371544151576797, LHT:1:object:t:d=-0.5403188208441994, LHT:0:state:t:e=0.0043834523026230815, LHH:0:state:t:var=0.0043834523026230815, LHT:1:state:t:s=0.00560249891872638, LHH:1:state:t:empty:s=0.00560249891872638, BB:object:t:object:t=-0.35003227845143403, LHH:1:object:t:mugs:d=-0.5403188208441991, BB:has:t:object:t=-0.3653026816184821, LHT:0:has:t:e=-0.36652172823458545, LHH:0:has:t:var=-0.36652172823458545, LHT:1:has:t:e=-0.36652172823458545, LHH:1:has:t:the=-0.36652172823458545, LHT:0:object:t:s=-0.004383452302623028, LHH:0:object:t:empty:s=-0.004383452302623028, LHT:0:state:t:s=-0.004383452302623028, LHH:0:state:t:empty:s=-0.004383452302623028, LHT:1:state:t:e=-0.005602498918726293, LHH:1:state:t:var=-0.005602498918726293, BB:forall:has:t=-0.001219046616103267, LHT:1:object:t:s=-0.001219046616103267, LHH:1:object:t:empty:s=-0.001219046616103267, LEX:292=0.036069496845696145, LEX:819=0.041714722002671276, LEX:820=0.1263632126241171, LEX:821=-0.026066103052389253, LEX:823=-0.07600843146016457, LEX:822=-0.026066103052389253, LEX:824=-0.07600843146016457, LEX:639=-0.0012121053333459717, LEX:655=0.08464849062144585, LEX:671=0.08464849062144585, LEX:711=-9.796208179655417E-4, LEX:727=-0.04326422439744647, LEX:743=-0.04326422439744647, LEX:791=-0.0913247461774664, LEX:807=-0.09132659463177471, LEX:613=0.08464849062144585, LEX:629=0.08464849062144585, LEX:637=-0.0012121053333459717, LEX:653=0.08464849062144585, LEX:669=0.08464849062144585, LEX:677=-0.0012190466161032668, LEX:709=-9.796208179655417E-4, LEX:725=-0.04326422439744647, LEX:741=-0.04326422439744647, LEX:789=-0.0913247461774664, LEX:805=-0.09132659463177471}
24: =========== r:0.7083333333333334 p:0.7083333333333334 (epoch:1 file:0 0)
for every cup that is dry
(forall $0 (and (object:t $0 cup:d) (state:t $0 dry:s)))
MakeLex parse time: 0.002 sec.
Adding:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
every cup that is  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
for  :- S/S : (lambda $0 t $0) : 0.0
every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 0.0
every cup that is  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 0.0
every cup that is  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
Lex Size: 829
First parse time: 0.002 sec.
CORRECT:(forall $0 (and (object:t $0 cup:d) (state:t $0 dry:s)))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.24456104223239594
for  :- S/S : (lambda $0 t $0) : 629 : 0.24456104223239594
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 653 : 0.24456104223239594
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 669 : 0.24456104223239594
every cup that is  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 825 : 0.0
every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 826 : 0.0
every cup that is  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 cup:d) (state:t $1 $0)))) : 827 : 0.0
every cup that is  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 cup:d) (state:t $1 $0)))) : 828 : 0.0
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.24456104223239594
for  :- S/S : (lambda $0 t $0) : 629 : 0.24456104223239594
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 653 : 0.24456104223239594
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 669 : 0.24456104223239594
every cup that is  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 825 : 0.0
every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 826 : 0.0
every cup that is  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 cup:d) (state:t $1 $0)))) : 827 : 0.0
every cup that is  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 cup:d) (state:t $1 $0)))) : 828 : 0.0
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9993404353126936
Update:
{BB:object:t:state:t=-0.08344725148375638, LHT:0:object:t:e=-0.030081823490417443, LHH:0:object:t:var=-0.030081823490417443, LHT:1:object:t:d=-0.04031530513236677, LHT:0:state:t:e=0.010497668332061907, LHH:0:state:t:var=0.010497668332061907, LHT:1:state:t:s=0.01076185502217471, LHH:1:state:t:dry:s=0.01076185502217471, BB:object:t:object:t=-0.05563150098917076, LHH:1:object:t:mugs:d=-0.040315305132366634, BB:has:t:object:t=-0.012499554637781253, LHT:0:has:t:e=-0.012763741327894042, LHH:0:has:t:var=-0.012763741327894042, LHT:1:has:t:e=-0.012763741327894042, LHH:1:has:t:the=-0.012763741327894042, LHT:0:object:t:s=-0.01049766833206199, LHH:0:object:t:dry:s=-0.01049766833206199, LHT:0:state:t:s=-0.01049766833206199, LHH:0:state:t:dry:s=-0.01049766833206199, LHT:1:state:t:e=-0.010761855022174782, LHH:1:state:t:var=-0.010761855022174782, BB:forall:has:t=-2.641866901127893E-4, LHT:1:object:t:s=-2.641866901127893E-4, LHH:1:object:t:dry:s=-2.641866901127893E-4, LEX:293=0.0044735583833634875, LEX:825=0.005580911872895749, LEX:826=0.017006922308800035, LEX:827=-0.009389787262934105, LEX:828=-0.01767180840136158, LEX:613=0.011426010435904299, LEX:629=0.011426010435904299, LEX:637=-0.009598311403737701, LEX:653=0.011426010435904299, LEX:669=0.011426010435904299, LEX:677=-2.6418669011278926E-4, LEX:709=-8.99356928324292E-4, LEX:725=-0.013458196783130542, LEX:741=-0.013458196783130542, LEX:789=-0.006249719846579992, LEX:805=-0.006249834791201259}
25: =========== r:0.72 p:0.72 (epoch:1 file:0 0)
for every plate that is on the table
(forall $0 (and (object:t $0 plate:d) (On:t $0 (the $1 (object:t $1 table:f)))))
MakeLex parse time: 0.007 sec.
Adding:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
every plate that is on  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for  :- S/S : (lambda $0 t $0) : 0.0
every plate that is on  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 0.0
every plate that is on  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 0.0
every plate that is on  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 0.0
Lex Size: 833
First parse time: 0.003 sec.
CORRECT:(forall $0 (and (object:t $0 plate:d) (On:t $0 (the $1 (object:t $1 table:f)))))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.25598705266830024
for  :- S/S : (lambda $0 t $0) : 629 : 0.25598705266830024
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 653 : 0.25598705266830024
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 669 : 0.25598705266830024
every plate that is on  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 829 : 0.0
every plate that is on  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 830 : 0.0
every plate that is on  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 831 : 0.0
every plate that is on  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 832 : 0.0
the table  :- NP : table:f : 73 : 20.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.25598705266830024
for  :- S/S : (lambda $0 t $0) : 629 : 0.25598705266830024
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 653 : 0.25598705266830024
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 669 : 0.25598705266830024
every plate that is on  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 829 : 0.0
every plate that is on  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 830 : 0.0
every plate that is on  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 831 : 0.0
every plate that is on  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 832 : 0.0
the table  :- NP : table:f : 73 : 20.0
]
Scale: 0.9993304485994384
Update:
{BB:On:t:object:t=-0.07994721580782042, LHT:0:object:t:e=0.029725120475703727, LHH:0:object:t:var=0.029725120475703727, LHT:1:object:t:d=-0.03900316388562745, LHT:0:On:t:e=0.06909423884425774, LHH:0:On:t:var=0.06909423884425774, LHT:1:object:t:f=0.06909423884425774, LHH:1:object:t:table:f=0.06909423884425774, BB:object:t:object:t=-0.05329814387188027, LHH:1:object:t:mugs:d=-0.03900316388562787, BB:has:t:object:t=-0.012354091949687732, LHT:0:has:t:e=-0.012720046432614006, LHH:0:has:t:var=-0.012720046432614006, LHT:1:has:t:e=-0.012720046432614006, LHH:1:has:t:the=-0.012720046432614006, LHT:0:object:t:f=-0.06909423884425783, LHH:0:object:t:table:f=-0.06909423884425783, LHT:0:On:t:f=-0.06909423884425783, LHH:0:On:t:table:f=-0.06909423884425783, LHT:1:object:t:e=-0.0694601933271841, LHH:1:object:t:var=-0.0694601933271841, BB:forall:has:t=-3.659544829262735E-4, LEX:294=0.008883289531975327, LEX:829=0.011291887674700154, LEX:830=0.03424161750702669, LEX:831=-0.030877736445851543, LEX:832=-0.02353905828658241, LEX:613=0.022949729832326567, LEX:629=0.022949729832326567, LEX:637=-0.0613130905114592, LEX:653=0.022949729832326567, LEX:669=0.022949729832326567, LEX:677=-3.659544829262735E-4, LEX:709=-0.005034104135796923, LEX:725=-0.010807483900071607, LEX:741=-0.010807483900071607, LEX:773=-0.0027470441970017232, LEX:789=-0.004803479979700175, LEX:805=-0.004803567772985834}
26: =========== r:0.7307692307692307 p:0.7307692307692307 (epoch:1 file:0 0)
for all mugs that are in the sink
(forall $0 (and (object:t $0 mugs:d) (In:t $0 (the $1 (object:t $1 sink:f)))))
MakeLex parse time: 0.003 sec.
Adding:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
all mugs that are in  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for  :- S/S : (lambda $0 t $0) : 0.0
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 0.0
all mugs that are in  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 0.0
all mugs that are in  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 0.0
Lex Size: 837
First parse time: 0.004 sec.
CORRECT:(forall $0 (and (object:t $0 mugs:d) (In:t $0 (the $1 (object:t $1 sink:f)))))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.2789367825006268
for  :- S/S : (lambda $0 t $0) : 629 : 0.2789367825006268
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 653 : 0.2789367825006268
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 669 : 0.2789367825006268
all mugs that are in  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 833 : 0.0
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 834 : 0.0
all mugs that are in  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 835 : 0.0
all mugs that are in  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 836 : 0.0
the sink  :- NP : sink:f : 74 : 20.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.2789367825006268
for  :- S/S : (lambda $0 t $0) : 629 : 0.2789367825006268
for  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 ($0 $1 $2)))) : 653 : 0.2789367825006268
for  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 ($0 $1))) : 669 : 0.2789367825006268
all mugs that are in  :- S|NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 833 : 0.0
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 834 : 0.0
all mugs that are in  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 835 : 0.0
all mugs that are in  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 836 : 0.0
the sink  :- NP : sink:f : 74 : 20.0
]
Scale: 0.9993204620857816
Update:
{BB:In:t:object:t=-0.052772534128239006, LHT:0:object:t:e=0.011010618044931973, LHH:0:object:t:var=0.011010618044931973, LHT:1:object:t:d=-0.03541972861010376, LHH:1:object:t:mugs:d=-0.03541972861010376, LHT:0:In:t:e=0.04675304066125445, LHH:0:In:t:var=0.04675304066125445, LHT:1:object:t:f=0.04675304066125445, LHH:1:object:t:sink:f=0.04675304066125445, BB:object:t:object:t=-0.028150738110535627, BB:has:t:object:t=-0.010797932592400398, LHT:0:has:t:e=-0.011120626598618743, LHH:0:has:t:var=-0.011120626598618743, LHT:1:has:t:e=-0.011120626598618743, LHH:1:has:t:the=-0.011120626598618743, LHT:0:object:t:f=-0.04675304066125439, LHH:0:object:t:sink:f=-0.04675304066125439, LHT:0:In:t:f=-0.04675304066125439, LHH:0:In:t:sink:f=-0.04675304066125439, LHT:1:object:t:e=-0.04707573466747273, LHH:1:object:t:var=-0.04707573466747273, BB:forall:has:t=-3.2269400621834496E-4, LEX:295=0.00666438224852119, LEX:833=0.008647125528131506, LEX:834=0.026264070590612903, LEX:835=-0.022082134380773825, LEX:836=-0.019493444000544608, LEX:613=0.01761694506248137, LEX:629=0.01761694506248137, LEX:637=-0.04138973989617741, LEX:653=0.01761694506248137, LEX:669=0.01761694506248137, LEX:677=-3.2269400621834496E-4, LEX:709=-0.0035289420928322733, LEX:725=-0.010546426962435542, LEX:741=-0.010546426962435542, LEX:773=-0.0018343586722446984, LEX:789=-0.004481746200339111, LEX:805=-0.004481827719816588}
27: =========== r:0.7407407407407407 p:0.7407407407407407 (epoch:1 file:0 0)
if the robot is grasping the mug
(exists $0 (and (object:t $0 robot:p) (IsGrasping:t $0 (the $1 (object:t $1 mug:d)))))
MakeLex parse time: 0.003 sec.
Adding:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.2734183333333333
robot is grasping  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 robot:p) (IsGrasping:t $2 ($0 $1)))))) : 0.0
Lex Size: 838
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsGrasping:t $0 (the $1 (object:t $1 mug:d)))))
Using:
[LexEntries and scores:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 505 : 0.2734183333333333
robot is grasping  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 robot:p) (IsGrasping:t $2 ($0 $1)))))) : 837 : 0.0
the mug  :- NP : mug:d : 16 : 20.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 505 : 0.2734183333333333
robot is grasping  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 robot:p) (IsGrasping:t $2 ($0 $1)))))) : 837 : 0.0
the mug  :- NP : mug:d : 16 : 20.0
]
Scale: 0.9993104757717174
Update:
{}
28: =========== r:0.75 p:0.75 (epoch:1 file:0 0)
if the robot is near the refrigerator
(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 refrigerator:f)))))
MakeLex parse time: 0.002 sec.
Adding:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.2734183333333333
robot is near  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 robot:p) (IsNear:t $2 ($0 $1)))))) : 0.0
Lex Size: 839
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 refrigerator:f)))))
Using:
[LexEntries and scores:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 505 : 0.2734183333333333
robot is near  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 robot:p) (IsNear:t $2 ($0 $1)))))) : 838 : 0.0
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 505 : 0.2734183333333333
robot is near  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 robot:p) (IsNear:t $2 ($0 $1)))))) : 838 : 0.0
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
]
Scale: 0.99930048965724
Update:
{}
29: =========== r:0.7586206896551724 p:0.7586206896551724 (epoch:1 file:0 0)
if the robot is close to the stove
(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
MakeLex parse time: 0.003 sec.
Adding:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.2734183333333333
robot is close to  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 robot:p) (IsNear:t $2 ($0 $1)))))) : 0.0
Lex Size: 840
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
Using:
[LexEntries and scores:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 505 : 0.2734183333333333
robot is close to  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 robot:p) (IsNear:t $2 ($0 $1)))))) : 839 : 0.0
the stove  :- NP : stove:f : 76 : 20.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 505 : 0.2734183333333333
robot is close to  :- S/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (exists $2 (and (object:t $2 robot:p) (IsNear:t $2 ($0 $1)))))) : 839 : 0.0
the stove  :- NP : stove:f : 76 : 20.0
]
Scale: 0.999290503742343
Update:
{}
30: =========== r:0.7666666666666667 p:0.7666666666666667 (epoch:1 file:0 0)
if the microwave is on and the robot is close to the microwave
(and (exists $0 (and (object:t $0 microwave:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 microwave:f))))))
MakeLex parse time: 0.006 sec.
Adding:
and the robot is close to  :- S/NP\S : (lambda $0 t (lambda $1 e (and $0 (exists $2 (and (object:t $2 robot:p) (IsNear:t $2 (the $3 (object:t $3 $1)))))))) : 0.10125203703703704
Lex Size: 841
First parse time: 0.01 sec.
CORRECT:(and (exists $0 (and (object:t $0 microwave:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 microwave:f))))))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.10520401472671528
the microwave  :- NP : microwave:f : 77 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : 7.697016773966375E-4
on  :- NP : IsOn:s : 57 : 10.0
and the robot is close to  :- S/NP\S : (lambda $0 t (lambda $1 e (and $0 (exists $2 (and (object:t $2 robot:p) (IsNear:t $2 (the $3 (object:t $3 $1)))))))) : 840 : 0.10125203703703704
]
Second parse time: 0.01 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.10520401472671528
the microwave  :- NP : microwave:f : 77 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : 7.697016773966375E-4
on  :- NP : IsOn:s : 57 : 10.0
and the robot is close to  :- S/NP\S : (lambda $0 t (lambda $1 e (and $0 (exists $2 (and (object:t $2 robot:p) (IsNear:t $2 (the $3 (object:t $3 $1)))))))) : 840 : 0.10125203703703704
]
Scale: 0.9992805180270204
Update:
{BB:exists:exists=-0.002652207771110333, LHT:0:object:t:e=-0.005304415542220666, LHH:0:object:t:var=-0.005304415542220666, LHT:0:state:t:e=-0.024845491621747123, LHH:0:state:t:var=-0.024845491621747123, LHT:1:object:t:p=-0.005304415542220666, BB:exists:object:t=-0.013261038855551577, LHH:1:object:t:you:p=-0.005304415542220631, BB:exists:state:t=-0.024845491621747318, LHT:1:state:t:e=-0.024845491621747318, LHH:1:state:t:var=-0.024845491621747318, LEX:123=0.005740905617612494, LEX:131=0.02016336372092256, LEX:365=-0.005304415542220631, LEX:547=-0.013163872575701493, LEX:559=-0.007436096890308483, LEX:518=0.004244401821360935, LEX:558=-0.011680903678742372, LEX:570=0.007436501857381079}
31: =========== r:0.7741935483870968 p:0.7741935483870968 (epoch:1 file:0 0)
if the stove is not on and the mug contains coffee
(and (exists $0 (and (object:t $0 stove:f) (not (state:t $0 IsOn:s)))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coffee:q))))))
MakeLex parse time: 0.007 sec.
Adding:
if the stove is not  :- S|NP : (lambda $0 e (not (state:t $0 IsOn:s))) : 0.5
on and the mug contains  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (and (exists $2 (and (object:t $2 stove:f) ($0 $2))) (exists $2 (and (object:t $2 mug:d) (has:t $2 (the $3 (object:t $3 $1)))))))) : 0.08411707692307693
Lex Size: 843
First parse time: 0.007 sec.
CORRECT:(and (exists $0 (and (object:t $0 stove:f) (not (state:t $0 IsOn:s)))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coffee:q))))))
Using:
[LexEntries and scores:
if the stove is not  :- S|NP : (lambda $0 e (not (state:t $0 IsOn:s))) : 841 : 0.5
on and the mug contains  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (and (exists $2 (and (object:t $2 stove:f) ($0 $2))) (exists $2 (and (object:t $2 mug:d) (has:t $2 (the $3 (object:t $3 $1)))))))) : 842 : 0.08411707692307693
coffee  :- NP : coffee:q : 35 : 10.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if the stove is not  :- S|NP : (lambda $0 e (not (state:t $0 IsOn:s))) : 841 : 0.5
on and the mug contains  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (and (exists $2 (and (object:t $2 stove:f) ($0 $2))) (exists $2 (and (object:t $2 mug:d) (has:t $2 (the $3 (object:t $3 $1)))))))) : 842 : 0.08411707692307693
coffee  :- NP : coffee:q : 35 : 10.0
]
Scale: 0.9992705325112669
Update:
{}
32: =========== r:0.78125 p:0.78125 (epoch:1 file:0 0)
if the mug is green and the TV is on
(and (exists $0 (and (object:t $0 mug:d) (state:t $0 green:s))) (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s))))
MakeLex parse time: 0.004 sec.
Adding:
and the TV is  :- S/NP\S : (lambda $0 t (lambda $1 e (and $0 (exists $2 (and (object:t $2 tv:f) (state:t $2 $1)))))) : 0.0
Lex Size: 844
First parse time: 0.004 sec.
CORRECT:(and (exists $0 (and (object:t $0 mug:d) (state:t $0 green:s))) (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s))))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.12536737844763784
the mug  :- NP : mug:d : 16 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : 0.008206203534777717
green  :- NP : green:s : 51 : 10.0
and the TV is  :- S/NP\S : (lambda $0 t (lambda $1 e (and $0 (exists $2 (and (object:t $2 tv:f) (state:t $2 $1)))))) : 843 : 0.0
on  :- NP : IsOn:s : 57 : 10.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.12536737844763784
the mug  :- NP : mug:d : 16 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : 0.008206203534777717
green  :- NP : green:s : 51 : 10.0
and the TV is  :- S/NP\S : (lambda $0 t (lambda $1 e (and $0 (exists $2 (and (object:t $2 tv:f) (state:t $2 $1)))))) : 843 : 0.0
on  :- NP : IsOn:s : 57 : 10.0
]
Scale: 0.9992605471950757
Update:
{BB:exists:exists=-0.014041426297357832, LHT:0:object:t:e=-0.005055877058817558, LHH:0:object:t:var=-0.005055877058817558, LHT:0:state:t:e=-0.033106984028733244, LHH:0:state:t:var=-0.033106984028733244, BB:exists:object:t=-0.012639692647043435, LHT:1:object:t:p=-0.005055877058817374, LHH:1:object:t:you:p=-0.005055877058817374, BB:exists:state:t=-0.06764744733258025, LHT:1:state:t:e=-0.03310698402873291, LHH:1:state:t:var=-0.03310698402873291, LEX:123=0.007213079778072361, LEX:131=0.0257019992682126, LEX:365=-0.005055877058817373, LEX:547=-0.023025707663928762, LEX:559=-0.004833505325964143, LEX:518=0.005246237971260532, LEX:558=-0.010080008492834669, LEX:570=0.004833770521573829}
33: =========== r:0.7878787878787878 p:0.7878787878787878 (epoch:1 file:0 0)
if there exists a mug and the mug contains sugar
(and (exists $0 (object:t $0 mug:d)) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 sugar:q))))))
MakeLex parse time: 0.007 sec.
Adding:
and the mug  :- S\S/(S|NP) : (lambda $0 <e,t> (lambda $1 t (and $1 (exists $2 (and (object:t $2 mug:d) (has:t $2 (the $3 ($0 $3)))))))) : 0.22781708333333334
Lex Size: 845
First parse time: 0.006 sec.
WRONG: (and (object:t mug:d cup:d) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 sugar:q))))))
Using:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 0.4777085725946043
exists  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 130 : -0.19809451434403483
a mug  :- NP : mug:d : 22 : 20.0
and the mug  :- S\S/(S|NP) : (lambda $0 <e,t> (lambda $1 t (and $1 (exists $2 (and (object:t $2 mug:d) (has:t $2 (the $3 ($0 $3)))))))) : 844 : 0.22781708333333334
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 0.044639880922773725
sugar  :- NP : sugar:q : 30 : 10.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : -0.021412771606949602
a mug  :- NP : mug:d : 22 : 20.0
and the mug  :- S\S/(S|NP) : (lambda $0 <e,t> (lambda $1 t (and $1 (exists $2 (and (object:t $2 mug:d) (has:t $2 (the $3 ($0 $3)))))))) : 844 : 0.22781708333333334
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 0.044639880922773725
sugar  :- NP : sugar:q : 30 : 10.0
]
Scale: 0.9992505620784411
Update:
{BB:exists:exists=0.7099507842453772, LHT:0:object:t:e=0.783858845556235, LHH:0:object:t:var=0.783858845556235, LHT:1:object:t:d=0.3158183877484374, LHH:1:object:t:mug:d=0.7918754077713405, LHT:0:has:t:e=-0.2984808764711551, LHH:0:has:t:var=-0.2984808764711551, LHT:1:has:t:e=-0.2984820567145495, LHH:1:has:t:the=-0.29848088476187024, BB:exists:object:t=-0.5233342836480257, LHT:1:object:t:p=-0.011321409490852283, LHH:1:object:t:you:p=-0.011321409490852283, BB:object:t:state:t=-0.1485675489120876, LHT:0:state:t:e=-0.024059449134800376, LHH:0:state:t:var=-0.024059449134800376, LHT:1:state:t:s=-0.3253672239905267, LHH:1:state:t:yellow:s=-0.3253672239905267, BB:object:t:object:t=-0.005693307589624018, LHH:1:object:t:bowl:d=-0.13326396064376586, LHH:1:object:t:cups:d=-0.05162198129252184, LHH:1:object:t:cup:d=-0.2911710780866154, LHT:0:object:t:d=-0.5150606210498487, LHH:0:object:t:mug:d=-0.5150606210498487, LHT:1:object:t:e=-0.03569875375119869, LHH:1:object:t:var=-0.03569875375119869, BB:exists:state:t=-0.3566528354291489, LHT:0:state:t:d=-0.3465166589769899, LHH:0:state:t:mug:d=-0.3465166589769899, LHT:1:state:t:e=-0.045208884121263566, LHH:1:state:t:var=-0.045208884121263566, LEX:122=0.03705201222732251, LEX:125=0.05092340012819424, LEX:129=0.029380791150113255, LEX:133=0.07992172446047471, LEX:137=0.027242220383852888, LEX:141=0.029258358354812143, LEX:145=0.036558212200278925, LEX:149=0.029258358354812143, LEX:153=0.016475292611318887, LEX:190=-0.029719414211350846, LEX:200=-0.00331483393135468, LEX:210=-0.04053457637087132, LEX:220=-0.00613894925721073, LEX:240=-1.5275245341437308E-4, LEX:250=-0.13125671211227163, LEX:423=-0.1793156213162705, LEX:124=0.02366924492977314, LEX:128=-0.31085816784549236, LEX:132=0.12101903595275582, LEX:136=0.02642456087893432, LEX:140=0.006923922941694085, LEX:144=0.02736674456415647, LEX:148=0.0063839096466666335, LEX:152=0.040715732537326445, LEX:123=0.06935590174310444, LEX:127=0.025115525181751856, LEX:131=0.17556274269691577, LEX:135=0.025779385562317184, LEX:139=0.029258358354812143, LEX:143=0.04805876953818703, LEX:147=0.029258358354812143, LEX:151=0.04906104083134958, LEX:188=-0.02508563306704435, LEX:198=-0.009345276497774573, LEX:208=-0.037352949480849454, LEX:218=-0.004720376153432945, LEX:238=-4.1863506023551936E-4, LEX:248=-0.11578602876008692, LEX:325=-7.310329141993255E-4, LEX:333=-6.000918761557409E-4, LEX:341=-0.010105460715721038, LEX:349=-5.059760187230355E-4, LEX:365=-2.812835023534999E-4, LEX:381=-1.3657873395281998E-4, LEX:389=-0.049784880483443726, LEX:397=-6.705362462559914E-5, LEX:527=-0.007449002610248394, LEX:537=-0.007449002610248394, LEX:553=-0.09183430180911795, LEX:559=-5.400132950274486E-4, LEX:571=-0.0017932182431572336, LEX:577=-0.014885432802869667, LEX:583=-0.0020457637142755167, LEX:589=-0.014885432802869667, LEX:595=-0.0012827576646359743, LEX:419=0.11271891621638692, LEX:126=0.07955950592745113, LEX:130=-0.3575844821178618, LEX:134=0.15123469871635561, LEX:138=0.0280738842503868, LEX:142=0.029258358354812143, LEX:146=0.028779478536668523, LEX:150=0.029258358354812143, LEX:154=0.032724612184875525, LEX:454=-0.29848082704979356, LEX:502=0.29847507135507384}
34: =========== r:0.7647058823529411 p:0.7647058823529411 (epoch:1 file:0 0)
if the television is on
(exists $0 (and (object:t $0 television:f) (state:t $0 IsOn:s)))
MakeLex parse time: 0.001 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 0.0
Lex Size: 846
First parse time: 0.002 sec.
WRONG: (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.32663212041276624
the television  :- NP : tv:f : 78 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : 0.013039974056351546
on  :- NP : IsOn:s : 57 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.32663212041276624
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 845 : 0.0
on  :- NP : IsOn:s : 57 : 10.0
]
Scale: 0.9992405771613573
Update:
{LHT:0:object:t:e=-0.017678877036137013, LHH:0:object:t:var=-0.017678877036137013, LHT:0:state:t:e=-0.024657430842305865, LHH:0:state:t:var=-0.024657430842305865, LHH:1:object:t:tv:f=-0.9992405751167249, BB:exists:object:t=-0.017678877036136995, LHT:1:object:t:p=-0.017678877036136995, LHH:1:object:t:you:p=-0.017678877036136995, BB:exists:state:t=-0.024657430842305626, LHT:1:state:t:e=-0.024657430842305626, LHH:1:state:t:var=-0.024657430842305626, LEX:78=-0.9992405751167247, LEX:123=0.003857623199912856, LEX:131=0.015571148870769463, LEX:365=-0.017678877036136992, LEX:547=-0.013130345491675095, LEX:559=-0.21269918023017312, LEX:518=-0.20117209487954263, LEX:558=-0.011527085350630531, LEX:570=-0.7865413948865516, LEX:57=-1.0172737653135079E-5, LEX:114=1.0172737673009369E-5, LHH:1:object:t:television:f=0.9992405771613573, LEX:304=0.22406945839408257, LEX:845=0.7751609460296015}
35: =========== r:0.7428571428571429 p:0.7428571428571429 (epoch:1 file:0 0)
if you find any cups
(exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d))))
MakeLex parse time: 0.004 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
you  :- NP : you:p : 0.0
find any cups  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 0.0
Lex Size: 846
First parse time: 0.004 sec.
WRONG: (exists $0 (and (object:t $0 cup:d) (exists $1 (object:t $1 cups:d))))
Using:
[LexEntries and scores:
if you find any  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 355 : -0.18150375877459235
cups  :- NP : cup:d : 25 : 9.691497768634207
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.3422032692835357
you  :- NP : you:p : 2 : 10.307950441487078
find any cups  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 360 : 0.3137235915360634
]
Scale: 0.9992305924438183
Update:
{BB:exists:object:t=0.12133888030087557, LHT:0:object:t:e=0.11711200017967666, LHH:0:object:t:var=0.11711200017967666, LHT:1:object:t:p=0.3650853187779893, LHH:1:object:t:you:p=0.3650853187779893, LHT:1:object:t:d=-0.24794701859549156, LHH:1:object:t:cups:d=0.2259826506792754, LHT:1:object:t:e=-1.8840734421429063E-5, LHH:1:object:t:var=-1.8840734421429063E-5, BB:exists:exists=-0.004254071511138474, BB:object:t:state:t=-0.13693837656153723, LHH:1:object:t:bowl:d=-1.2164199566188216E-4, LHT:0:state:t:e=-0.13700109215443532, LHH:0:state:t:var=-0.13700109215443532, LHT:1:state:t:s=-0.12246772642971479, LHH:1:state:t:yellow:s=-0.12246772642971479, BB:exists:state:t=-3.37188877396668E-5, BB:object:t:object:t=-4.738500806737197E-5, LHT:1:state:t:e=-0.014533365724720526, LHH:1:state:t:var=-0.014533365724720526, LHH:1:object:t:cup:d=-0.47380802727910504, LEX:309=-5.487772955599159E-5, LEX:323=-6.312316342321421E-5, LEX:339=-2.757596509368236E-5, LEX:347=-1.0775405572964936E-5, LEX:355=-0.4130013295452943, LEX:379=-5.487772955599159E-5, LEX:395=-7.747484197205667E-5, LEX:403=-0.060659542434772146, LEX:411=-2.5743184082207557E-5, LEX:312=-7.088166368566648E-5, LEX:326=-2.245678554412676E-4, LEX:334=-1.8964362100197615E-5, LEX:342=-9.810313536932276E-5, LEX:358=-8.072377757589204E-5, LEX:366=-7.475899955590847E-5, LEX:382=-1.3635494380091935E-4, LEX:390=-1.3644477425714443E-5, LEX:398=-5.2018184878729685E-5, LEX:406=-1.1227131964354252E-5, LEX:307=-5.487772955599159E-5, LEX:321=-6.312316342321421E-5, LEX:337=-2.757596509368236E-5, LEX:345=-1.0775405572964936E-5, LEX:353=-2.712752732741246E-5, LEX:377=-5.487772955599159E-5, LEX:393=-7.747484197205667E-5, LEX:409=-2.5743184082207557E-5, LEX:314=0.17530449903354176, LEX:328=-0.0097603246473326, LEX:336=-1.0775405572964936E-5, LEX:344=-0.004263892320689184, LEX:360=0.34179100798308665, LEX:368=-5.487772955599159E-5, LEX:376=-0.010897043958413438, LEX:384=-7.747484197205667E-5, LEX:392=-5.93025787490783E-4, LEX:400=-2.5743184082207557E-5, LEX:408=-0.01672000783402628, LEX:305=-5.487772955599159E-5, LEX:319=-6.344875323962744E-5, LEX:335=-2.7718202157311017E-5, LEX:343=-1.0775405572964936E-5, LEX:351=-2.712752732741246E-5, LEX:375=-7.304671837966132E-5, LEX:391=-7.747484197205667E-5, LEX:407=-3.3703547335411876E-5, LEX:316=-5.487772955599159E-5, LEX:330=-6.312316342321421E-5, LEX:338=-1.0775405572964936E-5, LEX:346=-2.757596509368236E-5, LEX:362=-2.712752732741246E-5, LEX:370=-5.487772955599159E-5, LEX:386=-7.747484197205667E-5, LEX:402=-2.5743184082207557E-5, LEX:131=0.3302296533514586, LEX:151=-6.119719197093762E-5, LEX:172=-1.6983810782294696E-5, LEX:188=-2.2625704004839296E-5, LEX:198=-2.410716731218572E-5, LEX:208=-4.8141875328510845E-5, LEX:218=-0.1223351174371982, LEX:228=-1.7531788935248394E-5, LEX:238=-1.2792917069959244E-5, LEX:248=-6.889231041725119E-5, LEX:333=-2.1080615186929177E-5, LEX:341=-1.0522427603010392E-5, LEX:349=0.30287239666923005, LEX:365=-0.005205471579317995, LEX:373=-5.487040935868488E-5, LEX:389=-6.876273059482433E-5, LEX:397=-0.016115699733390977, LEX:405=-2.57427740049601E-5, LEX:553=-9.571144906678249E-5, LEX:559=-0.014522708338206564, LEX:565=-3.486135704263323E-5, LEX:595=-3.543878488645802E-5, LEX:2=0.47504871936204235, LEX:25=-0.4736349242011362, LEX:318=-5.487772955599159E-5, LEX:332=-6.295440007022748E-5, LEX:340=-1.0775405572964936E-5, LEX:348=-2.7502239188979948E-5, LEX:364=-2.712752732741246E-5, LEX:372=-5.487772955599159E-5, LEX:388=-7.747484197205667E-5, LEX:404=-2.161707962230011E-5, LEX:350=1.1531931913715652E-5, LEX:313=1.2453097212567129E-5, LEX:359=1.2514989810195304E-5}
36: =========== r:0.7222222222222222 p:0.7222222222222222 (epoch:1 file:0 0)
When the water is boiling
(exists $0 (and (object:t $0 water:q) (state:t $0 IsBoiling:s)))
MakeLex parse time: 0.001 sec.
Adding:
When the  :- S/S : (lambda $0 t $0) : 0.0
When the  :- S/S : (lambda $0 t $0) : 0.0
Lex Size: 847
First parse time: 0.001 sec.
CORRECT:(exists $0 (and (object:t $0 water:q) (state:t $0 IsBoiling:s)))
Using:
[LexEntries and scores:
When the  :- S/S : (lambda $0 t $0) : 846 : 0.0
water  :- NP : water:q : 32 : 10.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -0.7735014208302
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
When the  :- S/S : (lambda $0 t $0) : 846 : 0.0
water  :- NP : water:q : 32 : 10.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -0.7735014208302
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Scale: 0.9992206079258179
Update:
{}
37: =========== r:0.7297297297297297 p:0.7297297297297297 (epoch:1 file:0 0)
when the water in the pot is boiling
(exists $0 (and (object:t $0 water:q) (In:t $0 (the $1 (object:t $1 pot:d))) (state:t $0 IsBoiling:s)))
MakeLex parse time: 0.003 sec.
Adding:
when the  :- NP : (the $0 (object:t $0 pot:d)) : 0.20506375
water in the pot is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 water:q) (In:t $2 $0) (state:t $2 $1))))) : 0.0
Lex Size: 849
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 water:q) (In:t $0 (the $1 (object:t $1 pot:d))) (state:t $0 IsBoiling:s)))
Using:
[LexEntries and scores:
when the  :- NP : (the $0 (object:t $0 pot:d)) : 847 : 0.20506375
water in the pot is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 water:q) (In:t $2 $0) (state:t $2 $1))))) : 848 : 0.0
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
when the  :- NP : (the $0 (object:t $0 pot:d)) : 847 : 0.20506375
water in the pot is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 water:q) (In:t $2 $0) (state:t $2 $1))))) : 848 : 0.0
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Scale: 0.9992106236073501
Update:
{}
38: =========== r:0.7368421052631579 p:0.7368421052631579 (epoch:1 file:0 0)
if there exists a cup and there exists a cup and there exists a cup and there exists a cup and there exists a cup
(and (exists $0 (object:t $0 cup:d)))
MakeLex parse time: 0.024 sec.
Adding:
if there exists a cup and there exists a cup and there exists a cup and there exists a cup and there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
a cup  :- NP : cup:d : 0.0
Lex Size: 850
First parse time: 0.024 sec.
WRONG: (exists $0 (object:t $0 cup:d))
Using:
[LexEntries and scores:
if there exists a cup and there exists a cup and there exists a cup and there exists a cup and there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 849 : 0.0
a cup  :- NP : cup:d : 20 : 16.001323721595504
]
Second parse time: 0.023 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a cup and there exists a cup and there exists a cup and there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 118 : 0.6968820884130185
]
Scale: 0.9992006394884093
Update:
{LHT:0:object:t:e=-0.05416314596717187, LHH:0:object:t:var=-0.05416314596717187, LHT:1:object:t:d=-0.05471570550276698, LHH:1:object:t:cup:d=-0.0038162542230973542, BB:exists:object:t=-0.04878568719900344, LHT:1:object:t:p=-0.022391368832950335, LHH:1:object:t:you:p=-0.022391368832950335, BB:object:t:state:t=-0.02144849151110648, LHT:0:state:t:e=-0.019917737533528414, LHH:0:state:t:var=-0.019917737533528414, LHT:1:state:t:s=-0.03202772176316561, LHH:1:state:t:yellow:s=-0.03202772176316561, BB:object:t:object:t=-0.04886861991979734, LHH:1:object:t:bowl:d=-0.01737336693011364, LHH:1:object:t:cups:d=-0.03352608434955589, LHT:0:object:t:d=-0.026990019804375744, LHH:0:object:t:cup:d=-0.026990019804375744, LHT:1:object:t:e=-0.004046091435830678, LHH:1:object:t:var=-0.004046091435830678, LHT:0:state:t:d=-0.01804077351771197, LHH:0:state:t:cup:d=-0.01804077351771197, LHT:1:state:t:e=-0.005930789288074773, LHH:1:state:t:var=-0.005930789288074773, BB:has:t:object:t=-4.6484151143864064E-5, LHT:1:has:t:e=-4.6484151143864064E-5, LHT:0:has:t:d=-3.86811941029351E-5, LHH:0:has:t:cup:d=-3.86811941029351E-5, LHH:1:has:t:var=-3.760595826302291E-5, LEX:849=-0.058174112128748366, LEX:415=-0.8291063489704994, LEX:420=-0.02269564717834245, LEX:155=0.43181377156750816, LEX:122=-0.027217102439291836, LEX:159=-6.744714818506884E-5, LEX:161=-4.0649492442312734E-5, LEX:125=-0.0425124093757416, LEX:129=-0.014978386707188887, LEX:133=-0.07425661174890803, LEX:137=-0.02440826836738667, LEX:141=-0.025346120850920903, LEX:145=-0.030998863555432615, LEX:149=-0.025346120850920903, LEX:153=-0.012250081796027826, LEX:190=-5.669218069910515E-4, LEX:200=-0.003153014464980293, LEX:210=-0.002738620337405811, LEX:220=-0.003941147123843985, LEX:240=-0.002835880449174581, LEX:250=-0.006120759123296244, LEX:423=-0.005607314312355798, LEX:124=-0.018458595841276706, LEX:128=-0.04957183917937936, LEX:132=-0.1793990893786151, LEX:136=-0.033648300473095964, LEX:140=-0.02733896117593198, LEX:144=-0.034808198494917356, LEX:148=-0.028151055620780362, LEX:152=-0.08279780909927624, LEX:20=-0.9990925214586637, LEX:123=-0.06030885550968717, LEX:127=-0.013359321937469347, LEX:131=-0.25753694778460323, LEX:135=-0.02435636456026191, LEX:139=-0.024786083008721288, LEX:143=-0.04049473557498707, LEX:147=-0.02477314449991628, LEX:151=-0.03916737237659116, LEX:188=-5.037366655199017E-4, LEX:198=-0.009182976643940568, LEX:208=-0.0026526803883215855, LEX:218=-0.002813745438907317, LEX:238=-0.00807552728270071, LEX:248=-0.00574542049568625, LEX:325=-8.394840998486702E-4, LEX:333=-0.015672048237071603, LEX:341=-0.0015421909001070361, LEX:349=-0.01226446102908854, LEX:365=-0.012707291486016214, LEX:381=-0.0054855637113157205, LEX:389=-0.004750090983547082, LEX:397=-0.0018168386356626944, LEX:527=-2.2998563811263753E-4, LEX:537=-2.3010986695447798E-4, LEX:553=-0.0032838686052209264, LEX:559=-8.268538618562499E-4, LEX:571=-0.009609988465414603, LEX:577=-0.002321293026766588, LEX:583=-0.015199824560072487, LEX:589=-0.0023225468943848184, LEX:595=-0.013085786672951447, LEX:419=-0.18446693675677497, LEX:126=-0.10081931294524432, LEX:130=-0.033953149411081775, LEX:134=-0.17134076491816255, LEX:138=-0.024323473059225595, LEX:142=-0.025346120850920903, LEX:146=-0.02502017265928702, LEX:150=-0.025346120850920903, LEX:154=-0.0533783429325071, LEX:467=-3.7605958263022904E-5, LEX:479=-2.623904726505517E-5, LEX:491=-3.5373442218462344E-5, LEX:8=-1.0809664062738159E-4, LEX:118=0.7136010460905997, LEX:82=0.28559959339780966}
39: =========== r:0.717948717948718 p:0.717948717948718 (epoch:1 file:0 0)
if the mug is on the table or on the stove
(exists $0 (and (object:t $0 mug:d) (or (On:t $0 (the $1 (object:t $1 table:f))) (On:t $0 (the $1 (object:t $1 stove:f))))))
MakeLex parse time: 0.004 sec.
Adding:
if the mug is on the table  :- S|NP : (lambda $0 e (On:t $0 (the $1 (object:t $1 table:f)))) : 0.09374342857142857
or on  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and (object:t $2 mug:d) (or ($0 $2) (On:t $2 (the $3 (object:t $3 $1)))))))) : 0.5555555555555556
Lex Size: 852
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (or (On:t $0 (the $1 (object:t $1 table:f))) (On:t $0 (the $1 (object:t $1 stove:f))))))
Using:
[LexEntries and scores:
if the mug is on the table  :- S|NP : (lambda $0 e (On:t $0 (the $1 (object:t $1 table:f)))) : 850 : 0.09374342857142857
or on  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and (object:t $2 mug:d) (or ($0 $2) (On:t $2 (the $3 (object:t $3 $1)))))))) : 851 : 0.5555555555555556
the stove  :- NP : stove:f : 76 : 20.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if the mug is on the table  :- S|NP : (lambda $0 e (On:t $0 (the $1 (object:t $1 table:f)))) : 850 : 0.09374342857142857
or on  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and (object:t $2 mug:d) (or ($0 $2) (On:t $2 (the $3 (object:t $3 $1)))))))) : 851 : 0.5555555555555556
the stove  :- NP : stove:f : 76 : 20.0
]
Scale: 0.9991906555689891
Update:
{}
40: =========== r:0.725 p:0.725 (epoch:1 file:0 0)
if the glass is empty or dry
(exists $0 (and (object:t $0 glass:d) (or (state:t $0 empty:s) (state:t $0 dry:s))))
MakeLex parse time: 0.003 sec.
Adding:
if the glass is empty  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 glass:d) ($0 $2 $1))))) : 0.0
or  :- S|NP|NP : (lambda $0 e (lambda $1 e (or (state:t $0 empty:s) (state:t $0 $1)))) : 2.0
if the glass is empty  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 glass:d) ($0 $1 $2))))) : 0.0
or  :- S|NP|NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 2.0
if the glass is empty  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 glass:d) ($0 $1)))) : 0.0
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 2.0
Lex Size: 858
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (or (state:t $0 empty:s) (state:t $0 dry:s))))
Using:
[LexEntries and scores:
if the glass is empty  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 glass:d) ($0 $2 $1))))) : 852 : 0.0
if the glass is empty  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 glass:d) ($0 $1 $2))))) : 854 : 0.0
if the glass is empty  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 glass:d) ($0 $1)))) : 856 : 0.0
or  :- S|NP|NP : (lambda $0 e (lambda $1 e (or (state:t $0 empty:s) (state:t $0 $1)))) : 853 : 2.0
or  :- S|NP|NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 855 : 2.0
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 857 : 2.0
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if the glass is empty  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 glass:d) ($0 $2 $1))))) : 852 : 0.0
if the glass is empty  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 (and (object:t $2 glass:d) ($0 $1 $2))))) : 854 : 0.0
if the glass is empty  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 glass:d) ($0 $1)))) : 856 : 0.0
or  :- S|NP|NP : (lambda $0 e (lambda $1 e (or (state:t $0 empty:s) (state:t $0 $1)))) : 853 : 2.0
or  :- S|NP|NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 855 : 2.0
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 857 : 2.0
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9991806718490837
Update:
{LHT:0:state:t:e=0.1051893296802455, LHH:0:state:t:var=0.1051893296802455, LHT:1:state:t:null=0.05259466484012275, LHH:1:state:t:dry:s=0.05259466484012275, LHT:0:state:t:null=-0.10518932968024541, LHH:0:state:t:dry:s=-0.10518932968024541, LHT:1:state:t:e=-0.05259466484012271, LHH:1:state:t:var=-0.05259466484012271, LEX:417=0.0016591513657026708, LEX:852=-0.024876021639234632, LEX:854=0.002842621561653542, LEX:856=0.020374176508361052, LEX:853=-0.007344466692527039, LEX:855=-0.007344466692527039, LEX:857=0.013029709815833956}
41: =========== r:0.7317073170731707 p:0.7317073170731707 (epoch:1 file:0 0)
if the refrigerator is on and the mug contains coke
(and (exists $0 (and (object:t $0 refrigerator:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coke:q))))))
MakeLex parse time: 0.005 sec.
Adding:
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 0.5467285714285715
the mug  :- NP : mug:d : 0.0
Lex Size: 859
First parse time: 0.006 sec.
CORRECT:(and (exists $0 (and (object:t $0 refrigerator:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coke:q))))))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.4148959748503911
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -0.7735014208302
on  :- NP : IsOn:s : 57 : 9.999989827262347
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : 0.5467285714285715
the mug  :- NP : mug:d : 16 : 20.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 0.34311495227784755
coke  :- NP : coke:q : 34 : 10.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.4148959748503911
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -0.7735014208302
on  :- NP : IsOn:s : 57 : 9.999989827262347
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : 0.5467285714285715
the mug  :- NP : mug:d : 16 : 20.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 0.34311495227784755
coke  :- NP : coke:q : 34 : 10.0
]
Scale: 0.999170688328687
Update:
{BB:exists:exists=-0.0119267576483997, LHT:0:object:t:e=-0.0357802729452011, LHH:0:object:t:var=-0.0357802729452011, LHT:0:state:t:e=-0.015475235647268392, LHH:0:state:t:var=-0.015475235647268392, LHT:0:has:t:e=-0.06628113828160366, LHH:0:has:t:var=-0.06628113828160366, LHT:1:has:t:e=-0.06628113828160366, LHH:1:has:t:the=-0.06628113828160366, BB:exists:object:t=-0.07156054589039942, LHT:1:state:t:e=-0.015475235647269738, LHH:1:state:t:var=-0.015475235647269738, LHT:1:object:t:p=-0.03578027294519899, LHH:1:object:t:you:p=-0.03578027294519899, BB:exists:state:t=-0.015475235647268356, LEX:123=0.005112418926284779, LEX:131=0.03577400048892402, LEX:365=-0.035780272945199, LEX:547=-0.006099287076867029, LEX:559=9.91989956478144E-4, LEX:518=0.010367659050957342, LEX:558=-0.009375600358297433, LEX:570=-9.92058692659696E-4, LEX:454=-0.06628113828160381, LEX:502=0.06628113828160555}
Testing

File #0: 0
0: ==================(0 -- 0)
if you find any
(dummy:t)
Test parse time: 0.001 sec.
WRONG
1 parses: [(exists $0 (object:t $0 cups:d))]
[LexEntries and scores:
if you find any  :- S : (exists $0 (object:t $0 cups:d)) : 379 : -3.187311035659685E-5
]
Had correct parse: false
Feats: {RN:true=1.0, LHT:0:object:t:e=1.0, LHH:0:object:t:var=1.0, LHT:1:object:t:d=1.0, LHH:1:object:t:cups:d=1.0, LEX:379=1.0}
-----------------------------
Recall : 0/1 = 0.0
Precision : 0/1 = 0.0
F1: NaN
No Parses : 0
EMPTY Recall : 0/1 = 0.0
EMPTY Precision : 0/1 = 0.0
EMPTY F1: NaN
-----------
Training, iteration 2
---------------------
DataSet: 0
---------------------
0: ===========
if there exists a mug
(exists $0 (object:t $0 mug:d))
MakeLex parse time: 0.003 sec.
Adding:
there  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 0.0
exists  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 860
First parse time: 0.003 sec.
CORRECT:(exists $0 (object:t $0 mug:d))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.45066997533931513
there  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 859 : 0.0
exists  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 138 : -0.0605300630327852
a mug  :- NP : mug:d : 22 : 20.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.45066997533931513
there  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 859 : 0.0
exists  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 138 : -0.0605300630327852
a mug  :- NP : mug:d : 22 : 20.0
]
Scale: 0.9991607050077935
Update:
{LHT:0:object:t:e=-0.040962251602313586, LHH:0:object:t:var=-0.040962251602313586, LHT:1:object:t:d=-0.046706364834707484, LHH:1:object:t:mug:d=0.04788656662316413, LHT:0:object:t:d=-0.032822098049691543, LHH:0:object:t:mug:d=-0.032822098049691543, LHT:1:object:t:e=-0.0077351099625126716, LHH:1:object:t:var=-0.0077351099625126716, BB:object:t:state:t=-0.026916649200734458, LHT:0:state:t:e=-0.025764063944542035, LHH:0:state:t:var=-0.025764063944542035, LHT:1:state:t:s=-0.03656341608937281, LHH:1:state:t:yellow:s=-0.03656341608937281, BB:object:t:object:t=-0.04585686288987915, LHH:1:object:t:bowl:d=-0.016867213888492338, BB:exists:object:t=-0.042991073555690755, LHH:1:object:t:cups:d=-0.031249887820730536, LHT:1:object:t:p=-0.019342874854785277, LHH:1:object:t:you:p=-0.019342874854785277, LHH:1:object:t:cup:d=-0.04647582974864882, LHT:0:state:t:d=-0.016216301909729267, LHH:0:state:t:mug:d=-0.016216301909729267, LHT:1:state:t:e=-0.005416949764898489, LHH:1:state:t:var=-0.005416949764898489, LEX:122=0.0066963363964042955, LEX:125=0.00900177908077938, LEX:129=0.0036060351437246637, LEX:133=0.009398448749373156, LEX:137=0.0051599102224023745, LEX:141=0.005486758268756789, LEX:145=0.006775622331251907, LEX:149=0.005486758268756789, LEX:153=0.0029003642146962954, LEX:190=-4.372136719878297E-4, LEX:200=-0.0042192177890386, LEX:210=-0.0031293776837930045, LEX:220=-0.005373071261566408, LEX:240=-0.002735863729120448, LEX:250=-0.0057295942219265815, LEX:423=-0.0064762405894435195, LEX:124=0.004335371306494658, LEX:128=-0.03387956213065006, LEX:132=0.015255811951604786, LEX:136=-0.004252863184787981, LEX:140=0.0031713465989436033, LEX:144=-0.003983310166787304, LEX:148=0.0021203146263652412, LEX:152=-0.032716650268023596, LEX:123=0.019491202947565008, LEX:127=0.0031715340029210854, LEX:131=0.04422483601655477, LEX:135=0.004912959456055396, LEX:139=0.0053585553763661475, LEX:143=0.008666188166401126, LEX:147=0.005350055613841202, LEX:151=0.008383911036070255, LEX:188=-3.8248857276270185E-4, LEX:198=-0.011344082762929324, LEX:208=-0.002984456761701648, LEX:218=-0.003780865870214502, LEX:238=-0.0071978134691267045, LEX:248=-0.00529688193894687, LEX:325=-6.923316048524124E-4, LEX:333=-0.013732947470807482, LEX:341=-0.001661810201364949, LEX:349=-0.01157706143146294, LEX:365=-0.010582247785513515, LEX:381=-0.004721487812688421, LEX:389=-0.005247547313607699, LEX:397=-0.0016849974503659814, LEX:527=-1.6632899265243994E-4, LEX:537=-1.6655401878945E-4, LEX:553=-0.0037426549882914346, LEX:559=-0.0010468262607932059, LEX:571=-0.009504341768440179, LEX:577=-0.0020172568160508426, LEX:583=-0.0145746180349687, LEX:589=-0.002019983676612551, LEX:595=-0.011843057821119664, LEX:419=0.002770279369624901, LEX:859=0.02076986168892717, LEX:126=0.011476087051837945, LEX:130=-0.01753946228499268, LEX:134=0.019696887009894297, LEX:138=0.02906174917028205, LEX:142=0.005486758268756789, LEX:146=0.0029489636123280804, LEX:150=0.005486758268756789, LEX:154=-0.01336250270544623}
1: =========== r:1.0 p:1.0 (epoch:2 file:0 0)
if there exists a cup
(exists $0 (object:t $0 cup:d))
MakeLex parse time: 0.003 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
a cup  :- NP : cup:d : 0.0
there  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 0.0
exists  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
a cup  :- NP : cup:d : 0.0
Lex Size: 860
First parse time: 0.004 sec.
CORRECT:(exists $0 (object:t $0 cup:d))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.4948948113558699
there  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 859 : 0.02076986168892717
exists  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 138 : -0.03146831386250315
a cup  :- NP : cup:d : 20 : 15.00223120013684
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.4948948113558699
there  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 859 : 0.02076986168892717
exists  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 138 : -0.03146831386250315
a cup  :- NP : cup:d : 20 : 15.00223120013684
]
Scale: 0.9991507218863965
Update:
{LHT:0:object:t:e=-0.005554094727412852, LHH:0:object:t:var=-0.005554094727412852, LHT:1:object:t:d=-0.01947460477213731, LHH:1:object:t:cup:d=0.024922135606937616, LHT:0:object:t:d=-0.04222724775524782, LHH:0:object:t:cup:d=-0.04222724775524782, LHT:1:object:t:e=-0.010749991460798409, LHH:1:object:t:var=-0.010749991460798409, BB:object:t:state:t=-0.023315847929563045, LHT:0:state:t:e=-0.021486846615667046, LHH:0:state:t:var=-0.021486846615667046, LHT:1:state:t:s=-0.039304634431646814, LHH:1:state:t:yellow:s=-0.039304634431646814, BB:object:t:object:t=-0.03682770387186064, LHH:1:object:t:bowl:d=-0.017109928064804526, BB:exists:object:t=-0.035469244823552515, LHH:1:object:t:cups:d=-0.027286812314270725, LHT:1:object:t:p=-0.017556746249725, LHH:1:object:t:you:p=-0.017556746249725, LHT:0:state:t:d=-0.026360755440832186, LHH:0:state:t:cup:d=-0.026360755440832186, LHT:1:state:t:e=-0.008542967624852418, LHH:1:state:t:var=-0.008542967624852418, BB:has:t:object:t=-1.379174318951728E-4, LHT:0:has:t:e=-1.3698268578439496E-5, LHH:0:has:t:var=-1.3698268578439496E-5, LHT:1:has:t:e=-1.379174318951728E-4, LHH:1:has:t:the=-1.6147914183794467E-5, LHT:0:has:t:d=-1.2421916331673328E-4, LHH:0:has:t:cup:d=-1.2421916331673328E-4, LHH:1:has:t:var=-1.2176951771137832E-4, LEX:122=0.0064493633748779955, LEX:159=-1.8864544493103804E-4, LEX:161=-9.109972002313675E-5, LEX:125=0.00882440462010828, LEX:129=0.003402124063523479, LEX:133=0.009256856335280396, LEX:137=0.004879816572605651, LEX:141=0.005098753514082189, LEX:145=0.006301086753495437, LEX:149=0.005098753514082189, LEX:153=0.0027458720179041546, LEX:190=-6.866577571574312E-4, LEX:200=-0.0035525262687270778, LEX:210=-0.003989576717932976, LEX:220=-0.004500003092886406, LEX:240=-0.002259394024748306, LEX:250=-0.009160669906195113, LEX:423=-0.007988761049557388, LEX:124=0.004247617984696596, LEX:128=-0.03732705485236342, LEX:132=0.01594096005165759, LEX:136=-0.0028755909174415168, LEX:140=0.0011686740976042714, LEX:144=-0.002562194146501652, LEX:148=2.1015272646106447E-4, LEX:152=-0.025017120548395704, LEX:20=2.7974318684337903E-4, LEX:123=0.019190368513928847, LEX:127=0.0029424185315076357, LEX:131=0.044731436090144745, LEX:135=0.004407637580939408, LEX:139=0.004968473440906564, LEX:143=0.008046446660504823, LEX:147=0.004953321008011191, LEX:151=0.00787550483492639, LEX:188=-5.910067114581653E-4, LEX:198=-0.009358429326954736, LEX:208=-0.0037436966778714837, LEX:218=-0.003120157760058451, LEX:238=-0.005839596175636162, LEX:248=-0.008335183608209432, LEX:325=-7.605334050258177E-4, LEX:333=-0.010900779864016276, LEX:341=-0.002139931385036762, LEX:349=-0.009151650094847991, LEX:365=-0.00932401619115541, LEX:381=-0.003933156917878391, LEX:389=-0.006473848950380636, LEX:397=-0.0013991083506286193, LEX:527=-2.7533723607186817E-4, LEX:537=-2.7599960920853645E-4, LEX:553=-0.0045543564403537, LEX:559=-9.557301670403726E-4, LEX:571=-0.007712406716765301, LEX:577=-0.0035137302472482744, LEX:583=-0.011598369303315524, LEX:589=-0.003522170365283365, LEX:595=-0.009276109918336344, LEX:419=0.005428805331620014, LEX:859=0.021146051510750847, LEX:126=0.01159579989524678, LEX:130=-0.022923544460205832, LEX:134=0.01974861992595513, LEX:138=0.030507738124272318, LEX:142=0.005098753514082189, LEX:146=0.0014769286009098414, LEX:150=0.005098753514082189, LEX:154=-0.010558113698094672, LEX:467=-1.2176951771137832E-4, LEX:479=-6.052450425088417E-5, LEX:491=-8.130322880811782E-5, LEX:8=-2.797451649541748E-4}
2: =========== r:1.0 p:1.0 (epoch:2 file:0 0)
if there exists a cup and there exists a cup
(and (exists $0 (object:t $0 cup:d)))
MakeLex parse time: 0.006 sec.
Adding:
if there exists a cup and there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
a cup  :- NP : cup:d : 0.0
Lex Size: 861
First parse time: 0.006 sec.
WRONG: (exists $0 (object:t $0 cup:d))
Using:
[LexEntries and scores:
if there exists a cup and there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 860 : 0.0
a cup  :- NP : cup:d : 20 : 15.002510943323683
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 2.6845818432447857
]
Scale: 0.9991407389644904
Update:
{LHT:0:object:t:e=-0.005795109180776076, LHH:0:object:t:var=-0.005795109180776076, LHT:1:object:t:d=-0.009694335073575096, LHH:1:object:t:cup:d=0.015052837275598157, LHT:0:object:t:d=-0.026494614320861292, LHH:0:object:t:cup:d=-0.026494614320861292, LHT:1:object:t:e=-0.009396259053643502, LHH:1:object:t:var=-0.009396259053643502, BB:exists:object:t=-0.02346598120689923, LHT:1:object:t:p=-0.01319912937441894, LHH:1:object:t:you:p=-0.01319912937441894, BB:object:t:state:t=-0.01255389164994011, LHT:0:state:t:e=-0.011647194366190885, LHH:0:state:t:var=-0.011647194366190885, LHT:1:state:t:s=-0.020995930180490004, LHH:1:state:t:yellow:s=-0.020995930180490004, BB:object:t:object:t=-0.02224324788338718, LHH:1:object:t:bowl:d=-0.009517888734445873, LHH:1:object:t:cups:d=-0.015229283614727317, LHT:0:state:t:d=-0.014336217077173004, LHH:0:state:t:cup:d=-0.014336217077173004, LHT:1:state:t:e=-0.004987481262873884, LHH:1:state:t:var=-0.004987481262873884, BB:has:t:object:t=-8.623040123699826E-5, LHT:1:has:t:e=-8.623040123699826E-5, LHH:1:has:t:the=-1.0014204774761668E-5, LHT:0:has:t:d=-7.770067382819096E-5, LHH:0:has:t:cup:d=-7.770067382819096E-5, LHH:1:has:t:var=-7.621619646223658E-5, LEX:860=-0.052797007949038854, LEX:420=-0.20622597757008324, LEX:155=-0.7401175173971778, LEX:122=-0.021437181692931056, LEX:159=-1.177643185752774E-4, LEX:161=-5.660218507698983E-5, LEX:125=-0.02985995754651058, LEX:129=-0.011018488445512923, LEX:133=-0.04720648020697361, LEX:137=-0.019968039431988792, LEX:141=-0.019730617924224585, LEX:145=-0.023667504489282315, LEX:149=-0.019730617924224585, LEX:153=-0.008997821988529924, LEX:190=-3.284348879775598E-4, LEX:200=-0.001944077040560058, LEX:210=-0.0021688902050258003, LEX:220=-0.0024300055377825557, LEX:240=-0.0013329684580121312, LEX:250=-0.004903684867252619, LEX:423=-0.004511361692791951, LEX:124=-0.014360658613990825, LEX:128=-0.031218417543130123, LEX:132=-0.16308965313248802, LEX:136=-0.02298652521471968, LEX:140=-0.021357897550939357, LEX:144=-0.023622641074641466, LEX:148=-0.02184973285532807, LEX:152=-0.04650884366476607, LEX:20=-0.9989661298816573, LEX:123=-0.07153299607002304, LEX:127=-0.009389042572397368, LEX:131=-0.25843706092928254, LEX:135=-0.018483919630791042, LEX:139=-0.01914100053759534, LEX:143=-0.02914323166496174, LEX:147=-0.019079148605798204, LEX:151=-0.025708828140546137, LEX:188=-2.786682828907403E-4, LEX:198=-0.005046341865667149, LEX:208=-0.0020066092963523705, LEX:218=-0.0016630867303438093, LEX:238=-0.003402317604187268, LEX:248=-0.004401630968015511, LEX:325=-3.864403311082681E-4, LEX:333=-0.0062497829919257635, LEX:341=-0.001150528511087634, LEX:349=-0.005167597351642161, LEX:365=-0.008559277153662998, LEX:381=-0.0022973823037362798, LEX:389=-0.003425462940051128, LEX:397=-8.055010748237611E-4, LEX:527=-1.4954534897928178E-4, LEX:537=-1.5004876390164548E-4, LEX:553=-0.0025438494844173642, LEX:559=-5.636831918373096E-4, LEX:571=-0.004739510454172906, LEX:577=-0.002058648744844895, LEX:583=-0.007067859929269272, LEX:589=-0.0020655552133107516, LEX:595=-0.005612455335330332, LEX:419=-0.13582137331537902, LEX:859=-0.24611724662765472, LEX:126=-0.0789917213712592, LEX:130=-0.025360865636343412, LEX:134=-0.11926246973114332, LEX:138=-0.2602788799975406, LEX:142=-0.019730617924224585, LEX:146=-0.02398233433513223, LEX:150=-0.019730617924224585, LEX:154=-0.032400063669815696, LEX:467=-7.621619646223658E-5, LEX:479=-3.758206865702512E-5, LEX:491=-5.055403375824385E-5, LEX:8=-1.7436650365226726E-4, LEX:82=0.9991407389644904}
3: =========== r:0.6666666666666666 p:0.6666666666666666 (epoch:2 file:0 0)
if there exists an empty kettle
(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s)))
MakeLex parse time: 0.003 sec.
Adding:
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
exists an  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $3 $1)))))) : 0.1511
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
exists an  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $1 $3)))))) : 0.1511
Lex Size: 865
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 861 : 0.0
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 863 : 0.0
exists an  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $3 $1)))))) : 862 : 0.1511
exists an  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $1 $3)))))) : 864 : 0.1511
empty  :- NP : empty:s : 53 : 10.0
kettle  :- NP : kettle:d : 11 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 861 : 0.0
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 863 : 0.0
exists an  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $3 $1)))))) : 862 : 0.1511
exists an  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $1 $3)))))) : 864 : 0.1511
empty  :- NP : empty:s : 53 : 10.0
kettle  :- NP : kettle:d : 11 : 10.0
]
Scale: 0.9991307562420695
Update:
{BB:object:t:state:t=0.18924534846353347, LHT:0:object:t:e=-0.17843732918071903, LHH:0:object:t:var=-0.17843732918071903, LHT:0:state:t:e=0.2061535171364789, LHH:0:state:t:var=0.2061535171364789, LHT:1:state:t:s=0.2061535171364789, LHH:1:state:t:empty:s=0.2061535171364789, BB:object:t:object:t=-0.18924534846353339, LHT:1:object:t:s=-0.1784373291807191, LHH:1:object:t:empty:s=-0.1784373291807191, LHT:0:object:t:s=-0.010808019282814272, LHH:0:object:t:empty:s=-0.010808019282814272, LHT:1:object:t:e=-0.010808019282814272, LHH:1:object:t:var=-0.010808019282814272, LHT:0:state:t:s=-0.01690816867294538, LHH:0:state:t:empty:s=-0.01690816867294538, LHT:1:state:t:e=-0.01690816867294538, LHH:1:state:t:var=-0.01690816867294538, LEX:421=0.06462821208821688, LEX:141=-0.09462267423176669, LEX:149=-0.09462267423176669, LEX:861=0.06230713032557487, LEX:863=0.06230713032557487, LEX:862=-0.032315543906191804, LEX:864=-0.032315543906191804}
4: =========== r:0.75 p:0.75 (epoch:2 file:0 0)
if there exists a green glass
(exists $0 (and (object:t $0 glass:d) (state:t $0 green:s)))
MakeLex parse time: 0.002 sec.
Adding:
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
exists a  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $3 $1)))))) : 0.1511
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
exists a  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $1 $3)))))) : 0.1511
Lex Size: 867
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (state:t $0 green:s)))
Using:
[LexEntries and scores:
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 861 : 0.06230713032557487
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 863 : 0.06230713032557487
exists a  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $3 $1)))))) : 865 : 0.1511
exists a  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $1 $3)))))) : 866 : 0.1511
green  :- NP : green:s : 51 : 10.0
glass  :- NP : glass:d : 9 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 861 : 0.06230713032557487
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 863 : 0.06230713032557487
exists a  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $3 $1)))))) : 865 : 0.1511
exists a  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $1 $3)))))) : 866 : 0.1511
green  :- NP : green:s : 51 : 10.0
glass  :- NP : glass:d : 9 : 10.0
]
Scale: 0.9991207737191272
Update:
{BB:object:t:state:t=0.026025598969500165, LHT:0:object:t:e=-0.024985345737608095, LHH:0:object:t:var=-0.024985345737608095, LHT:0:state:t:e=0.027894969960633724, LHH:0:state:t:var=0.027894969960633724, LHT:1:state:t:s=0.027894969960633724, LHH:1:state:t:green:s=0.027894969960633724, BB:object:t:object:t=-0.0260255989695001, LHT:1:object:t:s=-0.024985345737608182, LHH:1:object:t:green:s=-0.024985345737608182, LHT:0:object:t:s=-0.0010402532318919146, LHH:0:object:t:green:s=-0.0010402532318919146, LHT:1:object:t:e=-0.0010402532318919146, LHH:1:object:t:var=-0.0010402532318919146, LHT:0:state:t:s=-0.0018693709911335602, LHH:0:state:t:green:s=-0.0018693709911335602, LHT:1:state:t:e=-0.0018693709911335602, LHH:1:state:t:var=-0.0018693709911335602, LEX:422=0.008375313901158334, LEX:141=-0.013012799484750051, LEX:149=-0.013012799484750051, LEX:861=0.008824956198422072, LEX:863=0.008824956198422072, LEX:865=-0.004187843286328011, LEX:866=-0.004187843286328011}
5: =========== r:0.8 p:0.8 (epoch:2 file:0 0)
if there exists a cup that contains syrup
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
MakeLex parse time: 0.01 sec.
Adding:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 0.40293333333333337
syrup  :- NP : syrup:q : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
cup that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
a cup  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
Lex Size: 869
First parse time: 0.017 sec.
WRONG: (object:t (the $0 (object:t $0 syrup:q)) cup:d)
Using:
[LexEntries and scores:
if  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 123 : -0.4597794650980267
there exists  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 152 : -0.881575701382166
a cup  :- NP : cup:d : 20 : 14.003544813442026
that contains  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 470 : -0.9434205132880219
syrup  :- NP : syrup:q : 33 : 10.0
]
Second parse time: 0.01 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 0.2738092736341852
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.5940653515502856
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 0.03511416884804136
a cup  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 457 : 0.03511416884804136
a cup that  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (has:t $2 (the $3 ($0 $1 $3)))))) : 489 : 0.03511416884804136
cup that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 867 : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 0.4093960905594531
syrup  :- NP : syrup:q : 33 : 10.0
]
Scale: 0.9991107913956578
Update:
{BB:has:t:object:t=0.9988137048207154, LHT:0:object:t:e=-0.006029445081470248, LHH:0:object:t:var=0.6966196473832675, LHT:1:object:t:d=0.0010031283745049965, LHH:1:object:t:cup:d=0.0011810562550095562, LHT:0:has:t:e=0.9987521460520704, LHH:0:has:t:var=0.9987542949283003, LHT:1:has:t:e=0.9987949444035222, LHH:1:has:t:the=0.9988481661176555, LHT:1:object:t:q=2.67107361183751E-4, LHH:1:object:t:syrup:q=2.67107361183751E-4, LHH:0:object:t:the=-0.7026490924647371, BB:object:t:object:t=-0.007256469073946469, LHT:1:object:t:p=-0.003956592046015282, LHH:1:object:t:you:p=-0.003956592046015282, LHT:0:has:t:q=-1.224982578915186E-4, LHH:0:has:t:syrup:q=-1.224982578915186E-4, LHT:1:object:t:e=-0.003467450571902548, LHH:1:object:t:var=-1.4425753480031673E-4, LHT:0:object:t:q=-4.731910337982724E-5, LHH:0:object:t:syrup:q=-4.731910337982724E-5, LHH:1:has:t:var=-1.2122832356444981E-4, LHT:1:has:t:q=-1.652966093434433E-4, LHH:1:has:t:syrup:q=-9.728999991228774E-5, BB:exists:object:t=-1.5635976593533776E-5, BB:object:t:state:t=-0.29294502116104804, BB:has:t:state:t=-1.8789861151046735E-4, LHH:1:object:t:bowl:d=-1.779278805047462E-4, LHT:0:state:t:e=-0.29244129754496007, LHH:0:state:t:var=-0.29244129754496007, LHT:1:state:t:s=-4.466471400936333E-4, LHH:1:state:t:yellow:s=-4.466471400936333E-4, LHT:1:state:t:e=-0.2925184708003491, LHH:1:state:t:var=-5.318712028686242E-4, LHH:1:object:t:the=-0.0033231930371022305, LHH:1:state:t:the=-0.29198659959748047, LHT:0:object:t:d=-7.704269738083365E-5, LHH:0:object:t:cup:d=-7.704269738083365E-5, LHT:0:state:t:d=-5.238203954825416E-4, LHH:0:state:t:cup:d=-5.238203954825416E-4, LEX:159=0.03488015554877667, LEX:161=0.1902803194210423, LEX:163=0.3300640234601046, LEX:429=0.020069151005187993, LEX:441=0.029231102221316894, LEX:453=0.01748083397490646, LEX:471=0.035688349437340644, LEX:483=0.012992248561828689, LEX:495=0.012992186069925603, LEX:432=0.014431375746090755, LEX:444=0.014430081573133507, LEX:468=0.051268982344411906, LEX:474=0.014976609970460934, LEX:480=0.013010805394612732, LEX:486=0.015242193297009808, LEX:498=0.04001407553014005, LEX:125=-0.1618098034503416, LEX:129=-1.1552085586188165E-5, LEX:141=-0.0013991197348016023, LEX:149=-0.0013991197348016023, LEX:190=-5.593394403859643E-5, LEX:210=-1.1394312908006724E-4, LEX:250=-3.8585516806298855E-4, LEX:423=0.44189228848331175, LEX:861=-2.619101977412708E-4, LEX:863=-2.619101977412708E-4, LEX:152=-0.4806097802963991, LEX:865=-0.001661029932542873, LEX:866=-0.001661029932542873, LEX:20=-0.9946356252523133, LEX:427=0.020968091643549527, LEX:439=0.03408703876886822, LEX:451=0.025235218460676397, LEX:457=0.09689220940384304, LEX:469=0.013089624403470126, LEX:481=0.012992375349342168, LEX:493=0.012992352348727572, LEX:867=0.07576965707372237, LEX:434=0.014431078059074676, LEX:446=0.014429769321989496, LEX:470=-0.9789516292318089, LEX:476=0.014976609970460934, LEX:482=0.01301230713009983, LEX:488=0.015242193297009808, LEX:500=0.04077985992312495, LEX:123=-0.35540741312021257, LEX:131=-0.18147521703826336, LEX:365=-0.003956592046015282, LEX:547=-0.29198659959748047, LEX:419=-0.3522160415055727, LEX:154=-0.5140258449559142, LEX:424=0.44131209532116583, LEX:425=0.020968091643549527, LEX:437=0.03408703876886822, LEX:449=0.02522597044683137, LEX:455=0.10692657588405109, LEX:467=0.03531926004748909, LEX:479=0.012990633133061657, LEX:491=0.012990013559152748, LEX:8=-0.003322059865085746, LEX:868=0.07576965707372237, LEX:436=0.014431078059074676, LEX:448=0.014429769321989496, LEX:472=0.051638820233844224, LEX:478=0.014975527896319453, LEX:484=0.01301230713009983, LEX:490=0.07635543975108651, LEX:502=0.14915887837302078, LEX:158=0.0014211680232122685, LEX:160=0.0013450661348303236, LEX:162=0.0018410793719665331, LEX:164=0.012253072504265862, LEX:435=0.01449399453659879, LEX:447=0.01449399453659879, LEX:459=0.03116299934231736, LEX:465=0.013026929799642475, LEX:477=0.015015339861725133, LEX:489=0.037893014900043855, LEX:501=0.036263887104760834, LEX:426=0.01811641886335946, LEX:438=0.018277760074494245, LEX:450=0.0440666925755694, LEX:456=0.01528129330317417, LEX:462=0.013026929799642475, LEX:492=0.013024751479137009, LEX:433=0.01449399453659879, LEX:445=0.01449399453659879, LEX:463=0.013026929799642475, LEX:475=0.015015339861725133, LEX:487=0.030982101945608742, LEX:499=0.025180406968283362, LEX:428=0.01811641886335946, LEX:440=0.018277760074494245, LEX:452=0.044075963020294096, LEX:458=0.01528129330317417, LEX:464=0.013026929799642475, LEX:494=0.013026929799642475, LEX:431=0.01449399453659879, LEX:443=0.01449399453659879, LEX:461=0.013026929799642475, LEX:473=0.015015339861725133, LEX:485=0.030982101945608742, LEX:497=0.0244144353749289, LEX:430=0.01811641886335946, LEX:442=0.018277760074494245, LEX:454=0.030604670018426115, LEX:460=0.01528129330317417, LEX:466=0.013026929799642475, LEX:496=0.013026929799642475}
6: =========== r:0.6666666666666666 p:0.6666666666666666 (epoch:2 file:0 0)
if there exists a cup that contains coke
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 coke:q)))))
MakeLex parse time: 0.009 sec.
Adding:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 0.40293333333333337
coke  :- NP : coke:q : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
coke  :- NP : coke:q : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
Lex Size: 870
First parse time: 0.013 sec.
WRONG: (exists $0 (and (object:t $0 cup:d) (state:t $0 (the $1 (object:t $1 coke:q)))))
Using:
[LexEntries and scores:
if  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 547 : -0.527215225064278
there exists  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 152 : -1.3621854816785652
a cup  :- NP : cup:d : 20 : 13.008909188189714
that contains  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 470 : -1.9223721425198308
coke  :- NP : coke:q : 34 : 10.0
]
Second parse time: 0.01 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 0.7157015621174969
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 1.0353774468714514
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 0.14204074473209244
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 0.0
cup that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 867 : 0.07576965707372237
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 0.07576965707372237
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 0.5585549689324738
coke  :- NP : coke:q : 34 : 10.0
]
Scale: 0.9991008092716556
Update:
{BB:has:t:object:t=0.304837794213607, LHT:0:object:t:e=0.1012953977488357, LHH:0:object:t:var=0.2218167381165533, LHT:1:object:t:d=0.10760980637658334, LHH:1:object:t:cup:d=0.23646658246446545, LHT:0:has:t:e=-0.30947709302292714, LHH:0:has:t:var=-0.3092702338188702, LHT:1:has:t:e=-0.28315431839306715, LHH:1:has:t:the=-0.2851361380792851, LHT:1:object:t:q=0.03628216947487051, LHH:1:object:t:coke:q=0.03628216947487051, LHH:0:object:t:the=-0.12052134036771843, BB:object:t:object:t=-0.03636735440213095, LHT:1:object:t:p=-0.0013683610182712133, LHH:1:object:t:you:p=-0.0013683610182712133, LHT:0:has:t:q=-0.00736601417100596, LHH:0:has:t:coke:q=-0.00736601417100596, LHT:1:object:t:e=-0.04419315849346176, LHH:1:object:t:var=-0.017428854309074582, LHT:0:object:t:q=-0.002619475695920859, LHH:0:object:t:coke:q=-0.002619475695920859, LHH:1:has:t:var=-0.005410289506703771, LHT:1:has:t:q=-0.03368878880086421, LHH:1:has:t:coke:q=-0.026296679607943293, BB:exists:has:t=-0.015214657880959614, BB:exists:object:t=-2.1823992434186583E-4, BB:object:t:state:t=-0.12917896634272122, BB:has:t:state:t=-0.14509228618322934, LHH:1:object:t:bowl:d=-0.12885677608788318, LHT:0:state:t:e=-0.19155977056240578, LHH:0:state:t:var=-0.19155977056240578, LHT:1:state:t:s=-0.12252204762364395, LHH:1:state:t:yellow:s=-0.12252204762364395, LHT:1:state:t:e=-0.07079669965822327, LHH:1:state:t:var=-0.004890980218589014, LHH:1:object:t:the=-0.026764304184387192, LHH:0:has:t:the=-2.068592040563203E-4, LHH:1:state:t:the=-0.06590571943963426, LHT:0:object:t:d=-3.4546571319439816E-4, LHH:0:object:t:cup:d=-3.4546571319439816E-4, LHT:0:state:t:d=-0.0017589767194614696, LHH:0:state:t:cup:d=-0.0017589767194614696, LEX:158=4.7851645111964024E-4, LEX:160=4.682580561695577E-4, LEX:162=7.497169968773802E-4, LEX:164=0.007117397649427635, LEX:159=0.010963631330803166, LEX:161=0.06090316685624379, LEX:163=0.11269785821056524, LEX:429=0.009878826680748706, LEX:435=-0.0042496093640705355, LEX:441=0.015050537151678433, LEX:447=-0.004263934847451583, LEX:453=0.009378662219830004, LEX:459=0.018373542404684, LEX:465=0.007672058499992507, LEX:471=0.0119063245871278, LEX:477=-0.005186013555358965, LEX:483=0.007117926804856329, LEX:489=3.8219348940472634E-4, LEX:495=0.0071151831807028665, LEX:501=0.007543993205121584, LEX:426=-0.0036450170857547396, LEX:432=0.007298416948493121, LEX:438=-0.0038949534195067883, LEX:444=0.006365001720234852, LEX:450=-0.013484844836030697, LEX:456=0.009538908880457192, LEX:462=0.007672058499992507, LEX:468=0.03246779015847961, LEX:474=0.007929019508465026, LEX:480=-0.006086676449599305, LEX:486=0.008214606419381485, LEX:492=-0.012279428043367877, LEX:498=0.023034026247846465, LEX:125=-0.0343409332182, LEX:129=-0.0099674847349768, LEX:141=-0.012416272155026952, LEX:149=-0.012416272155026952, LEX:190=-0.026984168414694452, LEX:210=-0.09874060417406115, LEX:220=-0.002333409571197134, LEX:250=-0.0932044696377523, LEX:260=-0.0031320034991275435, LEX:423=0.2623370931623413, LEX:861=-8.794883597307348E-4, LEX:863=-8.794883597307348E-4, LEX:152=-0.10101658287409525, LEX:865=-0.013295760514757686, LEX:866=-0.013295760514757686, LEX:20=-0.1864266250819258, LEX:427=0.010264139234389505, LEX:433=-0.004223263952227054, LEX:439=0.018443512161782517, LEX:445=-0.004225309901611258, LEX:451=0.015010901980443176, LEX:457=0.011654944287577462, LEX:463=0.007672058499992507, LEX:469=-0.007491990707736576, LEX:475=-0.005146011039656528, LEX:481=0.0071223008142336265, LEX:487=-0.01040601287355101, LEX:493=0.007122039369657379, LEX:499=-0.010311867632180352, LEX:867=8.834877229644131E-4, LEX:428=-0.0036450170857547396, LEX:434=0.00730375025631697, LEX:440=-0.0038949534195067883, LEX:446=0.006381298659111563, LEX:452=-0.01429234350482671, LEX:458=0.02852148836086392, LEX:464=0.007672058499992507, LEX:470=-0.2061005860694525, LEX:476=0.007929019508465026, LEX:482=-0.006071234368357157, LEX:488=0.008214606419381485, LEX:494=-0.012190819305710704, LEX:500=0.023543349913469024, LEX:123=-0.058258310117610915, LEX:131=-0.02655330128820943, LEX:365=-0.001368361018271213, LEX:547=-0.06590571943963426, LEX:419=-0.0510691089896306, LEX:154=-0.08541004220783062, LEX:424=0.027974953130531905, LEX:425=0.010264172041401221, LEX:431=-0.004249576968367458, LEX:437=0.018443814615606614, LEX:443=-0.00426388878432298, LEX:449=0.015005806575264333, LEX:455=0.04468607428169617, LEX:461=0.007672058499992507, LEX:467=0.011770617464217117, LEX:473=-0.005145937985214405, LEX:479=0.007117020663374418, LEX:485=-0.010413011078592233, LEX:491=0.007113964136299577, LEX:497=-0.010002007334064771, LEX:8=-0.026591521029515373, LEX:869=0.023986709855234843, LEX:868=0.00308338612091515, LEX:430=-0.0044026685128528585, LEX:436=0.007293390595900411, LEX:442=-0.1485277645509155, LEX:448=0.0063498556827335595, LEX:454=-0.1145391285179463, LEX:460=0.008842905766541106, LEX:466=0.007672058499992507, LEX:472=0.031970877295647994, LEX:478=0.006959788117990456, LEX:484=-0.006099071829428654, LEX:490=0.1070216164789203, LEX:496=-0.012358524745545526, LEX:502=0.19450323002010791}
7: =========== r:0.5714285714285714 p:0.5714285714285714 (epoch:2 file:0 0)
if there is a red glass
(exists $0 (and (object:t $0 glass:d) (state:t $0 red:s)))
MakeLex parse time: 0.003 sec.
Adding:
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
is a  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $3 $1)))))) : 0.0
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
is a  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $1 $3)))))) : 0.0
Lex Size: 872
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (state:t $0 red:s)))
Using:
[LexEntries and scores:
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 861 : 0.06999068796652494
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 863 : 0.06999068796652494
is a  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $3 $1)))))) : 870 : 0.0
is a  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $1 $3)))))) : 871 : 0.0
red  :- NP : red:s : 47 : 10.0
glass  :- NP : glass:d : 9 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 861 : 0.06999068796652494
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 863 : 0.06999068796652494
is a  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $3 $1)))))) : 870 : 0.0
is a  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $1 $3)))))) : 871 : 0.0
red  :- NP : red:s : 47 : 10.0
glass  :- NP : glass:d : 9 : 10.0
]
Scale: 0.9990908273471142
Update:
{BB:object:t:state:t=0.2992115844574652, LHT:0:object:t:e=-0.2886194516236858, LHH:0:object:t:var=-0.2886194516236858, LHT:0:state:t:e=0.3137205890784306, LHH:0:state:t:var=0.3137205890784306, LHT:1:state:t:s=0.3137205890784306, LHH:1:state:t:red:s=0.3137205890784306, BB:object:t:object:t=-0.29921158445746515, LHT:1:object:t:s=-0.28861945162368574, LHH:1:object:t:red:s=-0.28861945162368574, LHT:0:object:t:s=-0.01059213283377936, LHH:0:object:t:red:s=-0.01059213283377936, LHT:1:object:t:e=-0.01059213283377936, LHH:1:object:t:var=-0.01059213283377936, LHT:0:state:t:s=-0.014509004620965289, LHH:0:state:t:red:s=-0.014509004620965289, LHT:1:state:t:e=-0.014509004620965289, LHH:1:state:t:var=-0.014509004620965289, LEX:503=0.09420389883418866, LEX:141=-0.14960579222873255, LEX:149=-0.14960579222873255, LEX:861=0.10250151966464359, LEX:863=0.10250151966464359, LEX:870=-0.04710427256408892, LEX:871=-0.04710427256408892}
8: =========== r:0.625 p:0.625 (epoch:2 file:0 0)
if there is a yellow bowl
(exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s)))
MakeLex parse time: 0.007 sec.
Adding:
if there is a  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 0.0
yellow  :- NP : yellow:s : 0.0
if there is a  :- S/S : (lambda $0 t $0) : 0.0
bowl  :- S\S : (lambda $0 t $0) : 0.0
yellow  :- NP : yellow:s : 0.0
bowl  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 0.0
Lex Size: 872
First parse time: 0.017 sec.
CORRECT:(exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s)))
Using:
[LexEntries and scores:
if there is a  :- S/S : (lambda $0 t $0) : 168 : 0.06457600534688207
if there is a  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 264 : 0.35028028695845487
yellow  :- NP : yellow:s : 50 : 10.046314957751923
bowl  :- S\S : (lambda $0 t $0) : 181 : 0.06457600534688207
bowl  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 277 : 0.35028028695845487
]
Second parse time: 0.007 sec.
Best LexEntries:
[LexEntries and scores:
if there is a  :- S/S : (lambda $0 t $0) : 168 : 0.06457600534688207
if there is a  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 264 : 0.35028028695845487
yellow  :- NP : yellow:s : 50 : 10.046314957751923
bowl  :- S\S : (lambda $0 t $0) : 181 : 0.06457600534688207
bowl  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 bowl:d) (state:t $1 $0)))) : 277 : 0.35028028695845487
]
Scale: 0.9990808456220277
Update:
{BB:object:t:state:t=0.062454211790670046, LHT:0:object:t:e=-0.05607618412935835, LHH:0:object:t:var=-0.05607618412935835, LHT:1:object:t:d=0.25170696668033515, LHH:1:object:t:bowl:d=0.25271724872733686, LHT:0:state:t:e=0.06607464196968059, LHH:0:state:t:var=0.06607464196968059, LHT:1:state:t:s=0.06623749704454493, LHH:1:state:t:yellow:s=0.06623749704454493, LHT:1:object:t:e=-0.05302357548961558, LHH:1:object:t:var=-0.05302357548961558, BB:exists:state:t=-0.01011719852251928, BB:exists:object:t=-0.00549803064476419, LHH:1:object:t:cup:d=-8.906454522968466E-4, LHT:1:state:t:e=-0.015047637351148243, LHH:1:state:t:var=-0.015047637351148243, LHT:0:object:t:d=-6.063471699392393E-5, LHH:0:object:t:bowl:d=-6.063471699392393E-5, BB:object:t:object:t=-0.0604509008798588, LHT:0:object:t:s=-0.008610244562574434, LHH:0:object:t:yellow:s=-0.008610244562574434, LHT:0:state:t:d=-2.7824040949559153E-5, LHH:0:state:t:bowl:d=-2.7824040949559153E-5, LHT:0:state:t:s=-0.014856958235335074, LHH:0:state:t:yellow:s=-0.014856958235335074, BB:state:t:state:t=-1.5860923338798514E-4, LHT:1:object:t:s=-0.26339324093343236, LHH:1:object:t:yellow:s=-0.26339324093343236, LHT:1:object:t:p=-3.72136662138332E-5, LHH:1:object:t:you:p=-3.72136662138332E-5, LHH:1:object:t:cups:d=-1.1963659470378889E-4, LHT:0:has:t:e=-4.859457571133933E-4, LHH:0:has:t:var=-4.859457571133933E-4, LHT:1:has:t:e=-4.859457571133933E-4, LHH:1:has:t:the=-2.0687525361887983E-4, BB:has:t:state:t=-1.0695890885198366E-4, BB:has:t:object:t=-5.9015254115515776E-5, LHH:1:has:t:var=-2.790705034945134E-4, LEX:186=-4.3049000194247586E-5, LEX:206=-1.4128724290535914E-5, LEX:216=-1.968145540602655E-5, LEX:256=-3.51111705005315E-5, LEX:173=-3.4215734061927695E-5, LEX:189=-9.60332849419627E-5, LEX:199=-2.8295001088992787E-5, LEX:209=-3.152475181314828E-5, LEX:219=-1.2771127488726853E-5, LEX:229=-2.6661232035456514E-5, LEX:239=-5.048049770160197E-5, LEX:249=-1.7667765317831402E-5, LEX:168=0.0363440182662484, LEX:184=-4.25445747066558E-5, LEX:204=-1.3963103636624249E-5, LEX:214=-2.0413390995245864E-5, LEX:224=-0.03390456487400511, LEX:254=-3.641692328854012E-5, LEX:264=0.07024326685930829, LEX:503=0.0015524049783704923, LEX:191=-1.0023345906812443E-4, LEX:201=-2.9349196355971026E-5, LEX:211=-3.290654126365401E-5, LEX:241=-5.236363102471885E-5, LEX:251=-1.844072009697711E-5, LEX:182=-4.3134324114117934E-4, LEX:202=-1.309203019296509E-4, LEX:212=-2.0496088175728256E-5, LEX:242=-6.33504819101109E-5, LEX:252=-3.6564452764583926E-5, LEX:177=-1.0240171937480987E-4, LEX:193=-3.626940924419193E-4, LEX:203=-2.016169165462066E-5, LEX:213=-1.0924251117181785E-4, LEX:223=-1.1963601494497046E-4, LEX:233=-1.410641316425997E-5, LEX:243=-3.5967898646751844E-5, LEX:253=-5.4839152617641636E-5, LEX:263=-5.807367209811721E-4, LEX:125=-6.145814913009093E-5, LEX:129=-2.1772675398538662E-5, LEX:133=-5.8635953258943505E-5, LEX:137=-4.688342275688788E-5, LEX:141=-0.030183544356739117, LEX:145=-7.521978649030348E-5, LEX:149=-0.030183544356739117, LEX:153=-1.3044041058460365E-4, LEX:200=-4.084324952894936E-5, LEX:210=-4.18399819803275E-5, LEX:250=-8.257195918601048E-5, LEX:423=-4.069325850882298E-4, LEX:861=-0.005742786135895616, LEX:863=-0.005742786135895616, LEX:870=-0.03583573918718775, LEX:871=-0.03583573918718775, LEX:185=-2.2673882276142418E-5, LEX:195=-2.271857394784257E-4, LEX:205=-1.0730675028012236E-4, LEX:215=-7.489822693763376E-5, LEX:245=-2.1152917059745173E-4, LEX:255=-4.182162145657317E-5, LEX:123=-4.9831246240403614E-5, LEX:131=-1.2841254363532396E-4, LEX:151=-1.0571994534606636E-4, LEX:198=-3.0480326444902353E-5, LEX:208=-1.848793888936549E-5, LEX:248=-3.0513188120999468E-5, LEX:333=-2.88025601777551E-5, LEX:341=-1.0636968285663233E-5, LEX:349=-1.2560795501624151E-5, LEX:373=-2.7099728793316283E-5, LEX:389=-3.5652286068992086E-5, LEX:553=-3.464198876621621E-5, LEX:595=-3.383422684345111E-5, LEX:419=-1.747732337278853E-4, LEX:859=-1.6677187888358933E-4, LEX:512=-1.4507574619837115E-5, LEX:518=-3.905864978149849E-4, LEX:522=-3.0144344340134085E-5, LEX:526=-3.717473855206112E-5, LEX:532=-6.731574125449054E-5, LEX:536=-1.7566243373772586E-5, LEX:542=-6.731574125449054E-5, LEX:546=-6.0830647474932026E-5, LEX:552=-1.8116138853810492E-4, LEX:558=-3.60280828691003E-5, LEX:564=-1.5075676252941776E-5, LEX:576=-1.0838790258714468E-4, LEX:582=-2.3275564192560106E-5, LEX:588=-5.363874055356213E-5, LEX:594=-2.3275564192560106E-5, LEX:600=-1.6505884579732271E-4, LEX:449=-9.487621956047067E-5, LEX:467=-2.790705034945134E-4, LEX:497=-2.0687525361887983E-4, LEX:50=0.0025646732642759552, LEX:181=0.0363440182662484, LEX:197=-0.029136660214830044, LEX:207=-2.049601183317345E-5, LEX:217=-0.010005510481375438, LEX:227=0.11811420688386712, LEX:237=-0.033904566502848586, LEX:247=-3.656431657158382E-5, LEX:257=-0.00539401536852633, LEX:267=-0.14376294358728767, LEX:277=0.07024326320655878, LEX:260=1.1780298325526648E-5}
9: =========== r:0.6666666666666666 p:0.6666666666666666 (epoch:2 file:0 0)
if there is an empty cup
(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
MakeLex parse time: 0.002 sec.
Adding:
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
is an  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $3 $1)))))) : 0.0
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
is an  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $1 $3)))))) : 0.0
Lex Size: 874
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 861 : 0.1667494214952729
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 863 : 0.1667494214952729
is an  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $3 $1)))))) : 872 : 0.0
is an  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $1 $3)))))) : 873 : 0.0
empty  :- NP : empty:s : 53 : 10.0
cup  :- NP : cup:d : 8 : 9.969524210796164
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 861 : 0.1667494214952729
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 863 : 0.1667494214952729
is an  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $3 $1)))))) : 872 : 0.0
is an  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $2) ($0 $1 $3)))))) : 873 : 0.0
empty  :- NP : empty:s : 53 : 10.0
cup  :- NP : cup:d : 8 : 9.969524210796164
]
Scale: 0.9990708640963902
Update:
{BB:object:t:state:t=0.022013104532651685, LHT:0:object:t:e=-0.019492570128453554, LHH:0:object:t:var=-0.019492570128453554, LHT:0:state:t:e=0.02680790136697377, LHH:0:state:t:var=0.02680790136697377, LHT:1:state:t:s=0.02680790136697377, LHH:1:state:t:empty:s=0.02680790136697377, BB:object:t:object:t=-0.022013104532651758, LHT:1:object:t:s=-0.019492570128453315, LHH:1:object:t:empty:s=-0.019492570128453315, LHT:0:object:t:s=-0.0025205344041984413, LHH:0:object:t:empty:s=-0.0025205344041984413, LHT:1:object:t:e=-0.0025205344041984413, LHH:1:object:t:var=-0.0025205344041984413, LHT:0:state:t:s=-0.004794796834321968, LHH:0:state:t:empty:s=-0.004794796834321968, LHT:1:state:t:e=-0.004794796834321968, LHH:1:state:t:var=-0.004794796834321968, LEX:504=0.007971515366732743, LEX:141=-0.011006552266325879, LEX:149=-0.011006552266325879, LEX:861=0.007020613621371155, LEX:863=0.007020613621371155, LEX:872=-0.003985938644954742, LEX:873=-0.003985938644954742}
10: =========== r:0.7 p:0.7 (epoch:2 file:0 0)
if the cup contains water
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 water:q)))))
MakeLex parse time: 0.002 sec.
Adding:
cup  :- NP : cup:d : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 875
First parse time: 0.002 sec.
WRONG: (exists $0 (and (object:t $0 cup:d) (state:t $0 (the $1 (object:t $1 water:q)))))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -0.42438171244908524
the cup  :- NP : cup:d : 14 : 20.0
contains  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 472 : 0.1397052447807057
water  :- NP : water:q : 32 : 10.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 505 : 0.2734183333333333
cup  :- NP : cup:d : 8 : 9.969524210796164
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 0.0
water  :- NP : water:q : 32 : 10.0
]
Scale: 0.9990608827701961
Update:
{BB:has:t:object:t=0.9985319428758752, LHT:0:has:t:e=0.9985317488856674, LHH:0:has:t:var=0.9985317488856674, LHT:1:has:t:e=0.9985317469917971, LHH:1:has:t:the=0.9985317469917971, BB:object:t:state:t=-0.9985313767129843, LHT:0:state:t:e=-0.9985313767129843, LHH:0:state:t:var=-0.9985313767129843, LHT:1:state:t:e=-0.9985313767129843, LHH:1:state:t:the=-0.9985313767129843, LEX:505=0.9983542493181923, LEX:561=-6.721385913926161E-5, LEX:14=-0.998464162853845, LEX:559=-0.9984641628538452, LEX:8=0.9982403098477142, LEX:472=-0.9985313767129844, LEX:874=0.9983075237068534, LEX:279=3.7437378031996556E-5, LEX:575=3.686532639612349E-5, LEX:587=5.577620419839779E-5, LEX:599=4.77076254643109E-5, LEX:506=4.6750362690667794E-5, LEX:430=3.686532639612349E-5, LEX:442=3.192239146624233E-5, LEX:454=7.156143819646634E-5}
11: =========== r:0.6363636363636364 p:0.6363636363636364 (epoch:2 file:0 0)
if it contains coffee
(exists $0 (and (object:t $0 it:e) (has:t $0 (the $1 (object:t $1 coffee:q)))))
MakeLex parse time: 0.002 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
Lex Size: 876
First parse time: 0.001 sec.
CORRECT:(exists $0 (and (object:t $0 it:e) (has:t $0 (the $1 (object:t $1 coffee:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0
it  :- NP : it:e : 5 : 10.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 0.9983075237068534
coffee  :- NP : coffee:q : 35 : 10.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0
it  :- NP : it:e : 5 : 10.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 0.9983075237068534
coffee  :- NP : coffee:q : 35 : 10.0
]
Scale: 0.9990509016434387
Update:
{}
12: =========== r:0.6666666666666666 p:0.6666666666666666 (epoch:2 file:0 0)
if the plate contains syrup
(exists $0 (and (object:t $0 plate:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
MakeLex parse time: 0.002 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
syrup  :- NP : syrup:q : 0.0
the plate  :- NP : plate:d : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 876
First parse time: 0.001 sec.
CORRECT:(exists $0 (and (object:t $0 plate:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0
the plate  :- NP : plate:d : 18 : 20.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 0.9983075237068534
syrup  :- NP : syrup:q : 33 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0
the plate  :- NP : plate:d : 18 : 20.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 0.9983075237068534
syrup  :- NP : syrup:q : 33 : 10.0
]
Scale: 0.9990409207161125
Update:
{}
13: =========== r:0.6923076923076923 p:0.6923076923076923 (epoch:2 file:0 0)
if the cup is empty
(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
MakeLex parse time: 0.004 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
empty  :- NP : empty:s : 0.0
the cup  :- NP : cup:d : 0.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
empty  :- NP : empty:s : 0.0
Lex Size: 876
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.07303225564662397
the cup  :- NP : cup:d : 14 : 19.001535837146154
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -0.7744934795228597
empty  :- NP : empty:s : 53 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.07303225564662397
the cup  :- NP : cup:d : 14 : 19.001535837146154
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -0.7744934795228597
empty  :- NP : empty:s : 53 : 10.0
]
Scale: 0.9990309399882116
Update:
{LHT:0:object:t:e=-0.029913476384687457, LHH:0:object:t:var=-0.029913476384687457, LHT:0:state:t:e=-5.699232517202825E-4, LHH:0:state:t:var=-5.699232517202825E-4, BB:exists:state:t=-5.700533000499151E-4, BB:exists:object:t=-0.02991377177471417, LHT:1:object:t:p=-0.02991377383281717, LHH:1:object:t:you:p=-0.02991377383281717, LHT:1:state:t:e=-5.700506242424602E-4, LHH:1:state:t:var=-5.700506242424602E-4, LEX:14=-1.5346508181763206E-5, LEX:123=0.004158745930657032, LEX:131=0.02143209226751935, LEX:365=-0.029913765729527156, LEX:547=-3.1519911147016014E-4, LEX:559=0.004622772130457959, LEX:8=1.5726983478521943E-5, LEX:518=0.004883643114630815, LEX:558=-2.546673877423004E-4, LEX:570=-0.004628611606771023}
14: =========== r:0.7142857142857143 p:0.7142857142857143 (epoch:2 file:0 0)
if they are used
(exists $0 (and (object:t $0 they:e) (state:t $0 used:s)))
MakeLex parse time: 0.001 sec.
Adding:
if they are  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 they:e) (state:t $1 $0)))) : 0.0
used  :- NP : used:s : 0.0
Lex Size: 876
First parse time: 0.001 sec.
CORRECT:(exists $0 (and (object:t $0 they:e) (state:t $0 used:s)))
Using:
[LexEntries and scores:
if they are  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 they:e) (state:t $1 $0)))) : 283 : 0.18117140751757183
used  :- NP : used:s : 54 : 10.181171407517573
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
if they are  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 they:e) (state:t $1 $0)))) : 283 : 0.18117140751757183
used  :- NP : used:s : 54 : 10.181171407517573
]
Scale: 0.9990209594597295
Update:
{LHT:1:object:t:e=0.07139549170623244, LHH:1:object:t:they:e=0.07139549170623244, LHT:1:object:t:p=-0.0713954917062324, LHH:1:object:t:they:p=-0.0713954917062324, LEX:283=0.061093534035944606, LEX:601=-0.06109546461212715, LEX:559=-0.06109546461212715, LEX:4=-0.0713954917062324, LEX:7=0.010300027094105239, LEX:54=0.061093534035944606}
15: =========== r:0.7333333333333333 p:0.7333333333333333 (epoch:2 file:0 0)
if the kettle is white
(exists $0 (and (object:t $0 kettle:d) (state:t $0 white:s)))
MakeLex parse time: 0.001 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
white  :- NP : white:s : 0.0
the kettle  :- NP : kettle:d : 0.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
white  :- NP : white:s : 0.0
Lex Size: 876
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 white:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.09446434791414332
the kettle  :- NP : kettle:d : 17 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -0.7791220911296307
white  :- NP : white:s : 52 : 10.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.09446434791414332
the kettle  :- NP : kettle:d : 17 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -0.7791220911296307
white  :- NP : white:s : 52 : 10.0
]
Scale: 0.9990109791306606
Update:
{LHT:0:object:t:e=-0.023939528787889124, LHH:0:object:t:var=-0.023939528787889124, LHT:0:state:t:e=-5.543034565902117E-4, LHH:0:state:t:var=-5.543034565902117E-4, BB:exists:object:t=-0.023939528787889, LHT:1:object:t:p=-0.023939528787889, LHH:1:object:t:you:p=-0.023939528787889, BB:exists:state:t=-5.543034565903079E-4, LHT:1:state:t:e=-5.543034565903079E-4, LHH:1:state:t:var=-5.543034565903079E-4, LEX:123=0.0033288177404136956, LEX:131=0.01745393300170783, LEX:365=-0.023939528787889, LEX:547=-3.138071627846534E-4, LEX:559=0.0034688381872819197, LEX:518=0.0037099999968770014, LEX:558=-2.404705042371512E-4, LEX:570=-0.003469529528312487}
16: =========== r:0.75 p:0.75 (epoch:2 file:0 0)
if the mug is on the stove
(exists $0 (and (object:t $0 mug:d) (On:t $0 (the $1 (object:t $1 stove:f)))))
MakeLex parse time: 0.002 sec.
Adding:
mug  :- NP : mug:d : 0.0
is on  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (On:t $3 ($1 $2))))))) : 0.0
Lex Size: 877
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (On:t $0 (the $1 (object:t $1 stove:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0
the mug  :- NP : mug:d : 16 : 20.0
is on  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (On:t $3 ($1 $2))))))) : 876 : 0.0
the stove  :- NP : stove:f : 76 : 20.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0
the mug  :- NP : mug:d : 16 : 20.0
is on  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (On:t $3 ($1 $2))))))) : 876 : 0.0
the stove  :- NP : stove:f : 76 : 20.0
]
Scale: 0.9990009990009991
Update:
{}
17: =========== r:0.7647058823529411 p:0.7647058823529411 (epoch:2 file:0 0)
if the mug is red and dry
(exists $0 (and (object:t $0 mug:d) (state:t $0 red:s) (state:t $0 dry:s)))
MakeLex parse time: 0.003 sec.
Adding:
the mug  :- NP : mug:d : 0.0
is red and  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 red:s) (state:t $2 $1))))) : 0.0
Lex Size: 878
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (state:t $0 red:s) (state:t $0 dry:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.11191828091585115
the mug  :- NP : mug:d : 16 : 20.0
is red and  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 red:s) (state:t $2 $1))))) : 877 : 0.0
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.11191828091585115
the mug  :- NP : mug:d : 16 : 20.0
is red and  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 red:s) (state:t $2 $1))))) : 877 : 0.0
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9989910190707386
Update:
{LHT:0:object:t:e=-0.024639058981717962, LHH:0:object:t:var=-0.024639058981717962, LHT:0:state:t:e=-3.631548853188478E-4, LHH:0:state:t:var=-3.631548853188478E-4, BB:exists:object:t=-0.024639058981717837, LHT:1:object:t:p=-0.024639058981717837, LHH:1:object:t:you:p=-0.024639058981717837, BB:exists:state:t=-3.631548853188592E-4, LHT:1:state:t:e=-3.631548853188592E-4, LHH:1:state:t:var=-3.631548853188592E-4, LEX:123=0.003957177186573669, LEX:131=0.021043755321277866, LEX:365=-0.024639058981717837, LEX:547=-3.6312503330071576E-4}
18: =========== r:0.7777777777777778 p:0.7777777777777778 (epoch:2 file:0 0)
if the kettle is empty and cool
(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s) (state:t $0 cool:s)))
MakeLex parse time: 0.003 sec.
Adding:
the kettle  :- NP : kettle:d : 0.0
is empty and  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 empty:s) (state:t $2 $1))))) : 0.0
Lex Size: 879
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s) (state:t $0 cool:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.13296203623712902
the kettle  :- NP : kettle:d : 17 : 20.0
is empty and  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 empty:s) (state:t $2 $1))))) : 878 : 0.0
cool  :- NP : cool:s : 49 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.13296203623712902
the kettle  :- NP : kettle:d : 17 : 20.0
is empty and  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 empty:s) (state:t $2 $1))))) : 878 : 0.0
cool  :- NP : cool:s : 49 : 10.0
]
Scale: 0.9989810393398733
Update:
{LHT:0:object:t:e=-0.021456721642697175, LHH:0:object:t:var=-0.021456721642697175, LHT:0:state:t:e=-3.570636356778416E-4, LHH:0:state:t:var=-3.570636356778416E-4, BB:exists:object:t=-0.02145672164269713, LHT:1:object:t:p=-0.02145672164269713, LHH:1:object:t:you:p=-0.02145672164269713, BB:exists:state:t=-3.5706363567788394E-4, LHT:1:state:t:e=-3.5706363567788394E-4, LHH:1:state:t:var=-3.5706363567788394E-4, LEX:123=0.0034031727268172586, LEX:131=0.018409514934675048, LEX:365=-0.02145672164269713, LEX:547=-3.5703427371272447E-4}
19: =========== r:0.7894736842105263 p:0.7894736842105263 (epoch:2 file:0 0)
if the glass is used and on the floor
(exists $0 (and (object:t $0 kettle:d) (state:t $0 used:s) (On:t $0 (the $1 (object:t $1 floor:lo)))))
MakeLex parse time: 0.004 sec.
Adding:
if the glass is  :- S/NP/(NP|NP)/NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (On:t $3 ($1 $2)) (object:t $3 kettle:d) (state:t $3 $0)))))) : 0.0
used  :- NP : used:s : 0.0
if the glass is  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 kettle:d) (state:t $2 $0) (On:t $2 $1))))) : 0.0
used  :- NP : used:s : 0.0
Lex Size: 881
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 used:s) (On:t $0 (the $1 (object:t $1 floor:lo)))))
Using:
[LexEntries and scores:
if the glass is  :- S/NP/(NP|NP)/NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (On:t $3 ($1 $2)) (object:t $3 kettle:d) (state:t $3 $0)))))) : 879 : 0.0
if the glass is  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 kettle:d) (state:t $2 $0) (On:t $2 $1))))) : 880 : 0.0
used  :- NP : used:s : 54 : 10.242264941553517
and on  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 606 : 0.6378499999999999
and on  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 608 : 0.6378499999999999
the floor  :- NP : floor:lo : 67 : 20.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if the glass is  :- S/NP/(NP|NP)/NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (On:t $3 ($1 $2)) (object:t $3 kettle:d) (state:t $3 $0)))))) : 879 : 0.0
if the glass is  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 kettle:d) (state:t $2 $0) (On:t $2 $1))))) : 880 : 0.0
used  :- NP : used:s : 54 : 10.242264941553517
and on  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 606 : 0.6378499999999999
and on  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 608 : 0.6378499999999999
the floor  :- NP : floor:lo : 67 : 20.0
]
Scale: 0.9989710598083973
Update:
{}
20: =========== r:0.8 p:0.8 (epoch:2 file:0 0)
if the plate is dirty and in the refrigerator
(exists $0 (and (object:t $0 plate:d) (state:t $0 dirty:s) (In:t $0 (the $1 (object:t $1 refrigerator:f)))))
MakeLex parse time: 0.004 sec.
Adding:
if the plate is  :- S/NP/(NP|NP)/NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (In:t $3 ($1 $2)) (object:t $3 plate:d) (state:t $3 $0)))))) : 0.0
dirty  :- NP : dirty:s : 0.0
if the plate is  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 plate:d) (state:t $2 $0) (In:t $2 $1))))) : 0.0
dirty  :- NP : dirty:s : 0.0
Lex Size: 883
First parse time: 0.007 sec.
CORRECT:(exists $0 (and (object:t $0 plate:d) (state:t $0 dirty:s) (In:t $0 (the $1 (object:t $1 refrigerator:f)))))
Using:
[LexEntries and scores:
if the plate is  :- S/NP/(NP|NP)/NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (In:t $3 ($1 $2)) (object:t $3 plate:d) (state:t $3 $0)))))) : 881 : 0.0
if the plate is  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 plate:d) (state:t $2 $0) (In:t $2 $1))))) : 882 : 0.0
dirty  :- NP : dirty:s : 55 : 10.0
and in  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 610 : 0.6378499999999999
and in  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 612 : 0.6378499999999999
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if the plate is  :- S/NP/(NP|NP)/NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (In:t $3 ($1 $2)) (object:t $3 plate:d) (state:t $3 $0)))))) : 881 : 0.0
if the plate is  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 plate:d) (state:t $2 $0) (In:t $2 $1))))) : 882 : 0.0
dirty  :- NP : dirty:s : 55 : 10.0
and in  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 610 : 0.6378499999999999
and in  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 612 : 0.6378499999999999
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
]
Scale: 0.9989610804763047
Update:
{}
21: =========== r:0.8095238095238095 p:0.8095238095238095 (epoch:2 file:0 0)
for all mugs that contain water
(forall $0 (and (object:t $0 mugs:d) (has:t $0 (the $1 (object:t $1 water:q)))))
MakeLex parse time: 0.014 sec.
Adding:
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 0.0
Lex Size: 884
First parse time: 0.01 sec.
WRONG: (forall $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 water:q)))))
Using:
[LexEntries and scores:
for all  :- S/NP/NP : (lambda $0 e (lambda $1 e (forall $2 (and (object:t $2 $0) (has:t $2 (the $3 (object:t $3 $1))))))) : 695 : -0.4696264854831197
mugs  :- NP : mug:d : 27 : 9.007102767984358
that contain  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 626 : -0.02545571343054296
water  :- NP : water:q : 32 : 10.0
]
Second parse time: 0.009 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.29655372756310816
for  :- S/S : (lambda $0 t $0) : 629 : 0.29655372756310816
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 883 : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 0.07885304319463751
contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 812 : 0.02126319308228978
water  :- NP : water:q : 32 : 10.0
]
Scale: 0.9989511013435892
Update:
{BB:has:t:object:t=-0.04716024135837655, LHT:0:object:t:e=-0.2779188399495163, LHH:0:object:t:var=-0.2779188399495163, LHT:1:object:t:d=-0.04612598929418005, LHH:1:object:t:mugs:d=0.7164760571456696, LHT:0:has:t:e=-0.43807020121807944, LHH:0:has:t:var=-0.43807020121807944, LHT:1:has:t:e=-0.4382965914516542, LHH:1:has:t:the=-0.4350357273652495, LHT:1:object:t:q=3.805263417178565E-4, LHH:1:object:t:water:q=3.805263417178565E-4, LHT:0:object:t:q=-2.0738836375984137E-4, LHH:0:object:t:water:q=-2.0738836375984137E-4, LHT:0:has:t:q=-2.591628690044284E-4, LHH:0:has:t:water:q=-2.591628690044284E-4, LHT:1:object:t:e=-0.23238076536081367, LHH:1:object:t:var=-0.21253320472619192, BB:object:t:object:t=-2.2903320690027603E-4, LHH:1:object:t:mug:d=-0.7626020464398501, LHH:1:object:t:the=-0.019847560634621765, BB:forall:has:t=-0.21461873999311643, LHT:1:has:t:q=-3.277263542960637E-5, LHH:1:has:t:water:q=-3.277263542960637E-5, LHH:1:has:t:var=-0.003260864086404439, LEX:290=0.005382815311317331, LEX:619=0.010994839629701943, LEX:627=0.005396108104757816, LEX:635=0.011074997055686348, LEX:643=0.0053170655018255995, LEX:651=0.004705663330209188, LEX:659=0.010787191253778193, LEX:667=0.004705663330209188, LEX:675=0.010863861884538044, LEX:683=0.005370763730018525, LEX:691=0.005418609757216452, LEX:699=0.005368560951081561, LEX:707=0.00542091960231051, LEX:715=0.005411824393820476, LEX:723=0.0028139902496297927, LEX:731=0.010978007169123642, LEX:739=0.0028139902496297927, LEX:747=0.011055167055689112, LEX:755=0.01099726956659839, LEX:763=0.005421102783783792, LEX:771=0.010175100748998833, LEX:779=0.002171240755960004, LEX:787=0.005416407934256526, LEX:795=0.004457916605132012, LEX:803=0.005416407934256526, LEX:811=0.004524750624082255, LEX:614=0.007216095754268436, LEX:622=0.005410538416501776, LEX:630=0.022007648168293998, LEX:638=0.0029264338555910576, LEX:646=0.005317437862847806, LEX:654=0.006600169923698935, LEX:662=0.005317437862847806, LEX:670=0.020085710103441512, LEX:678=0.005400761196649012, LEX:686=0.00450448006558432, LEX:694=0.00542091960231051, LEX:702=0.005371355359121796, LEX:710=0.002030870859812037, LEX:718=0.005411929085204578, LEX:726=0.0026501027263532073, LEX:734=0.005411929085204578, LEX:742=0.008070350398407691, LEX:750=0.005459662591536361, LEX:758=0.005421102783783792, LEX:766=0.016612407103949033, LEX:774=0.005392212485821517, LEX:782=0.002180515240428648, LEX:790=0.004844938158407962, LEX:798=0.002180515240428648, LEX:806=0.014746575649504042, LEX:617=0.010994839629701943, LEX:625=0.0052310466234082335, LEX:633=0.011074997055686348, LEX:641=0.005317469000864443, LEX:649=0.004705663330209188, LEX:657=0.010787597622868756, LEX:665=0.004705663330209188, LEX:673=0.010863861884538044, LEX:681=0.005370763730018525, LEX:689=0.0035646145815296897, LEX:697=0.005368560951081561, LEX:705=0.0032350638430606476, LEX:713=0.005411937839832118, LEX:721=0.0028139902496297927, LEX:729=0.010978121422066377, LEX:737=0.0028139902496297927, LEX:745=0.011055167055689112, LEX:753=0.02050894682655818, LEX:761=0.005421102783783792, LEX:769=0.010200871482976142, LEX:777=0.0021812799497020995, LEX:785=0.005416407934256526, LEX:793=0.004468025239199706, LEX:801=0.005416407934256526, LEX:809=0.004524750624082255, LEX:616=0.005268365495915074, LEX:624=0.005410538416501776, LEX:632=0.015720688784951056, LEX:640=0.0033553171112757946, LEX:648=0.005317817278682063, LEX:656=0.00622320964439768, LEX:664=0.005317817278682063, LEX:672=0.01893898475701553, LEX:680=0.0035646663637347313, LEX:688=0.00450448006558432, LEX:696=0.0033655286183776954, LEX:704=0.005370869256076466, LEX:712=0.002055034268487115, LEX:720=0.005412035760088548, LEX:728=0.00279990642277029, LEX:736=0.005412035760088548, LEX:744=0.008526150767820855, LEX:752=0.005459662591536361, LEX:760=0.005421102783783792, LEX:768=0.016612407103949033, LEX:776=0.005416870501779016, LEX:784=0.0021899552791830833, LEX:792=0.0049209026192782515, LEX:800=0.0021899552791830833, LEX:808=0.014977759247025156, LEX:615=-0.13269690832751188, LEX:623=0.005396108104757816, LEX:631=-0.26712331494786606, LEX:639=0.003991093443544718, LEX:647=0.004705663330209188, LEX:655=0.01358199495764155, LEX:663=0.004705663330209188, LEX:671=0.013678529829034954, LEX:679=-0.08167243040617628, LEX:687=0.005418609757216452, LEX:695=-0.25322264988760096, LEX:703=0.00542091960231051, LEX:711=0.004628731326100216, LEX:719=0.0028139902496297927, LEX:727=0.01046653930939476, LEX:735=0.0028139902496297927, LEX:743=0.01054010429923348, LEX:751=0.01099726956659839, LEX:759=0.005421102783783792, LEX:767=0.010175100748998833, LEX:775=0.002171240755960004, LEX:783=0.005416407934256526, LEX:791=0.004022774646103875, LEX:799=0.005416407934256526, LEX:807=0.004083076426602092, LEX:883=0.07796626606176772, LEX:618=0.005434666784714515, LEX:626=-0.14283000518895322, LEX:634=0.0165872377631386, LEX:642=0.004705642580608271, LEX:650=0.005317437862847806, LEX:658=0.004739300053521405, LEX:666=0.005317437862847806, LEX:674=0.014424752132453467, LEX:682=0.005418695867553702, LEX:690=-0.08567698366735167, LEX:698=0.00542091960231051, LEX:706=-0.5028426648415562, LEX:714=0.0028139734071080374, LEX:722=0.005411929085204578, LEX:730=0.0028345369534421546, LEX:738=0.005411929085204578, LEX:746=0.008631577866772612, LEX:754=0.03437418710887822, LEX:762=0.005421102783783792, LEX:770=0.024933219880361557, LEX:778=0.005416368861152397, LEX:786=0.002180515240428648, LEX:794=0.0054538616345811055, LEX:802=0.002180515240428648, LEX:810=0.01659955150766519, LEX:613=0.07538368007008639, LEX:621=0.005396108104757816, LEX:629=0.06908977530107233, LEX:637=0.003567139797646639, LEX:645=0.004705663330209188, LEX:653=0.014306839373137136, LEX:661=0.004705663330209188, LEX:669=0.01440852612116194, LEX:677=-0.03188268419017951, LEX:685=0.005418609757216452, LEX:693=0.005368560951081561, LEX:701=0.00542091960231051, LEX:709=0.004585138973654624, LEX:717=0.0028139902496297927, LEX:725=0.010108446167952975, LEX:733=0.0028139902496297927, LEX:741=0.010179494268729057, LEX:749=0.01099726956659839, LEX:757=0.005421102783783792, LEX:765=0.010175100748998833, LEX:773=0.0021613161789327735, LEX:781=0.005416407934256526, LEX:789=0.003960763972438441, LEX:797=0.005416407934256526, LEX:805=0.0040201350641956655, LEX:27=-0.7626020464398501, LEX:868=0.030115655329610032, LEX:620=0.005434666784714515, LEX:628=0.005410538416501776, LEX:636=0.0165872377631386, LEX:644=0.001982107108256625, LEX:652=0.005317437862847806, LEX:660=-0.008619581196029995, LEX:668=0.005317437862847806, LEX:676=8.780903949469298E-4, LEX:684=0.005418695867553702, LEX:692=0.00450448006558432, LEX:700=0.00542091960231051, LEX:708=0.004895549545445111, LEX:716=-0.006754229264386229, LEX:724=0.005411929085204578, LEX:732=-0.04468037196574605, LEX:740=0.005411929085204578, LEX:748=-0.03955255881178499, LEX:756=0.005459662591536361, LEX:764=0.005421102783783792, LEX:772=0.016612407103949033, LEX:780=0.005279334814512363, LEX:788=0.002180515240428648, LEX:796=0.08767785311730242, LEX:804=0.002180515240428648, LEX:812=0.09999740643335375}
22: =========== r:0.7727272727272727 p:0.7727272727272727 (epoch:2 file:0 0)
for all bowls that are green
(forall $0 (and (object:t $0 bowls:d) (state:t $0 green:s)))
MakeLex parse time: 0.002 sec.
Adding:
green  :- NP : green:s : 0.0
Lex Size: 884
First parse time: 0.002 sec.
WRONG: (forall $0 (and (object:t $0 mugs:d) (has:t $0 (the $1 (and (object:t $1 bowls:d) (state:t $1 green:s))))))
Using:
[LexEntries and scores:
for all  :- S/(S|NP) : (lambda $0 <e,t> (forall $1 (and (object:t $1 mugs:d) (has:t $1 (the $2 ($0 $2)))))) : 807 : -0.08485162343807749
bowls that are  :- S|NP/NP : (lambda $0 e (lambda $1 e (and (object:t $1 bowls:d) (state:t $1 $0)))) : 818 : -0.025625368487848903
green  :- NP : green:s : 51 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.37193740763319455
all bowls that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 814 : 0.21810189496518392
green  :- NP : green:s : 51 : 10.0
]
Scale: 0.9989411224102451
Update:
{BB:object:t:state:t=-0.1276380905163175, LHT:0:object:t:e=-0.6630505702901189, LHH:0:object:t:var=-0.6630505702901189, LHT:1:object:t:d=-0.6631618425874588, LHT:0:state:t:e=2.0997652687977262E-4, LHH:0:state:t:var=2.0997652687977262E-4, LHT:1:state:t:s=3.086807564196629E-4, LHH:1:state:t:green:s=3.086807564196629E-4, BB:object:t:object:t=-0.08509206034421168, LHH:1:object:t:mugs:d=-0.663161842587459, BB:has:t:object:t=-0.6206158124153532, LHT:0:has:t:e=-0.620714516644893, LHH:0:has:t:var=-0.620714516644893, LHT:1:has:t:e=-0.620714516644893, LHH:1:has:t:the=-0.620714516644893, LHT:0:object:t:s=-2.0997652687990826E-4, LHH:0:object:t:green:s=-2.0997652687990826E-4, LHT:0:state:t:s=-2.0997652687990826E-4, LHH:0:state:t:green:s=-2.0997652687990826E-4, LHT:1:state:t:e=-3.0868075641969606E-4, LHH:1:state:t:var=-3.0868075641969606E-4, BB:forall:has:t=-9.87042295397878E-5, LHT:1:object:t:s=-9.87042295397878E-5, LHH:1:object:t:green:s=-9.87042295397878E-5, LEX:291=0.03943586290923508, LEX:813=0.057187483858824405, LEX:814=0.19775425456555001, LEX:815=-0.03161888854921872, LEX:817=-0.10791132967557605, LEX:816=-0.035089509402389904, LEX:818=-0.11975953997713415, LEX:639=-8.048404111463426E-5, LEX:655=0.08697778160759435, LEX:671=0.09262824588566984, LEX:711=-2.893103124070231E-5, LEX:727=-0.010468961814609098, LEX:743=-0.011148816135279148, LEX:791=-0.15144607473674987, LEX:807=-0.16128180911379475, LEX:613=0.12344593004014273, LEX:629=0.13159451261377145, LEX:637=-7.19041385079178E-5, LEX:653=0.09168604915405693, LEX:669=0.09764288651544177, LEX:677=-9.87042295397878E-5, LEX:709=-2.8657316016653882E-5, LEX:725=-0.01010716583679757, LEX:741=-0.010763498038162659, LEX:789=-0.14910230223870652, LEX:805=-0.15878562632610213}
23: =========== r:0.7391304347826086 p:0.7391304347826086 (epoch:2 file:0 0)
for all glasses that are empty
(forall $0 (and (object:t $0 glasses:d) (state:t $0 empty:s)))
MakeLex parse time: 0.002 sec.
Adding:
for  :- S/S : (lambda $0 t $0) : 0.0
all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 0.0
for  :- S/S : (lambda $0 t $0) : 0.0
empty  :- NP : empty:s : 0.0
all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 0.0
empty  :- NP : empty:s : 0.0
Lex Size: 884
First parse time: 0.002 sec.
CORRECT:(forall $0 (and (object:t $0 glasses:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
for  :- S/S : (lambda $0 t $0) : 629 : 0.4972380154779519
all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 820 : 0.1263632126241171
empty  :- NP : empty:s : 53 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/S : (lambda $0 t $0) : 629 : 0.4972380154779519
all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 820 : 0.1263632126241171
empty  :- NP : empty:s : 53 : 10.0
]
Scale: 0.9989311436762665
Update:
{BB:object:t:state:t=-0.025187876788732712, LHT:0:object:t:e=0.001275855492030402, LHH:0:object:t:var=0.001275855492030402, LHT:1:object:t:d=-0.016764767295436345, LHT:0:state:t:e=0.01804973046801881, LHH:0:state:t:var=0.01804973046801881, LHT:1:state:t:s=0.018058838148570986, LHH:1:state:t:empty:s=0.018058838148570986, BB:object:t:object:t=-0.016791917859155178, LHH:1:object:t:mugs:d=-0.016764767295436283, BB:has:t:object:t=-0.008368808365858694, LHT:0:has:t:e=-0.008377916046410807, LHH:0:has:t:var=-0.008377916046410807, LHT:1:has:t:e=-0.008377916046410807, LHH:1:has:t:the=-0.008377916046410807, LHT:0:object:t:s=-0.018049730468018735, LHH:0:object:t:empty:s=-0.018049730468018735, LHT:0:state:t:s=-0.018049730468018735, LHH:0:state:t:empty:s=-0.018049730468018735, LHT:1:state:t:e=-0.018058838148570847, LHH:1:state:t:var=-0.018058838148570847, LEX:292=0.0018463017264720497, LEX:819=0.003042808305135193, LEX:820=0.009956585039177316, LEX:821=-0.003870532173655938, LEX:823=-0.002679173807600742, LEX:822=-0.00457402447944927, LEX:824=-0.0037220454625078022, LEX:639=-0.009285620421146558, LEX:655=0.00478103740790073, LEX:671=0.004688541914632327, LEX:711=-2.352631947756248E-4, LEX:727=-0.00204249442555949, LEX:743=-0.0019902945002558342, LEX:791=-0.0021428814523651815, LEX:807=-0.0020690952703874897, LEX:613=0.006363509057544653, LEX:629=0.0066449919673199345, LEX:637=-0.008295809408354175, LEX:653=0.00506362865200224, LEX:669=0.00496721322718793, LEX:709=-2.3303744374237898E-4, LEX:725=-0.0019726215886017493, LEX:741=-0.00192224777664251, LEX:789=-0.0021146688163384084, LEX:805=-0.002042162826767614}
24: =========== r:0.75 p:0.75 (epoch:2 file:0 0)
for every cup that is dry
(forall $0 (and (object:t $0 cup:d) (state:t $0 dry:s)))
MakeLex parse time: 0.002 sec.
Adding:
for  :- S/S : (lambda $0 t $0) : 0.0
every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
for  :- S/S : (lambda $0 t $0) : 0.0
dry  :- NP : dry:s : 0.0
every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 0.0
dry  :- NP : dry:s : 0.0
Lex Size: 884
First parse time: 0.002 sec.
CORRECT:(forall $0 (and (object:t $0 cup:d) (state:t $0 dry:s)))
Using:
[LexEntries and scores:
for  :- S/S : (lambda $0 t $0) : 629 : 0.5038830074452718
every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 826 : 0.017006922308800035
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/S : (lambda $0 t $0) : 629 : 0.5038830074452718
every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 826 : 0.017006922308800035
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9989211651416471
Update:
{BB:object:t:state:t=-0.017915558054220675, LHT:0:object:t:e=2.7625493742701934E-4, LHH:0:object:t:var=2.7625493742701934E-4, LHT:1:object:t:d=-0.011800762633185458, LHT:0:state:t:e=0.012093160032196869, LHH:0:state:t:var=0.012093160032196869, LHT:1:state:t:s=0.012109302493781149, LHH:1:state:t:dry:s=0.012109302493781149, BB:object:t:object:t=-0.011943705369480393, LHH:1:object:t:mugs:d=-0.011800762633185425, BB:has:t:object:t=-0.005828909948445228, LHT:0:has:t:e=-0.00584505241002951, LHH:0:has:t:var=-0.00584505241002951, LHT:1:has:t:e=-0.00584505241002951, LHH:1:has:t:the=-0.00584505241002951, LHT:0:object:t:s=-0.012093160032196881, LHH:0:object:t:dry:s=-0.012093160032196881, LHT:0:state:t:s=-0.012093160032196881, LHH:0:state:t:dry:s=-0.012093160032196881, LHT:1:state:t:e=-0.012109302493781162, LHH:1:state:t:var=-0.012109302493781162, BB:forall:has:t=-1.6142461584282338E-5, LHT:1:object:t:s=-1.6142461584282338E-5, LHH:1:object:t:dry:s=-1.6142461584282338E-5, LEX:293=0.001735744549170777, LEX:825=0.0028619135391591073, LEX:826=0.008713054110369036, LEX:827=-0.006392953267790439, LEX:828=-0.006917837381848034, LEX:613=0.005772857324149524, LEX:629=0.005818252786962829, LEX:637=-0.011770018914939867, LEX:653=0.005125346330181204, LEX:669=0.005134644568305555, LEX:677=-1.6142461584282338E-5, LEX:709=-3.2314111725701295E-4, LEX:725=-0.0028309711116601024, LEX:741=-0.0028177404558230807, LEX:789=-0.002934393796094298, LEX:805=-0.002894516152350931}
25: =========== r:0.76 p:0.76 (epoch:2 file:0 0)
for every plate that is on the table
(forall $0 (and (object:t $0 plate:d) (On:t $0 (the $1 (object:t $1 table:f)))))
MakeLex parse time: 0.003 sec.
Adding:
for  :- S/S : (lambda $0 t $0) : 0.0
every plate that is on  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for  :- S/S : (lambda $0 t $0) : 0.0
the table  :- NP : table:f : 0.0
every plate that is on  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 0.0
the table  :- NP : table:f : 0.0
Lex Size: 884
First parse time: 0.004 sec.
CORRECT:(forall $0 (and (object:t $0 plate:d) (On:t $0 (the $1 (object:t $1 table:f)))))
Using:
[LexEntries and scores:
for  :- S/S : (lambda $0 t $0) : 629 : 0.5097012602322346
every plate that is on  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 830 : 0.03424161750702669
the table  :- NP : table:f : 73 : 20.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/S : (lambda $0 t $0) : 629 : 0.5097012602322346
every plate that is on  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 830 : 0.03424161750702669
the table  :- NP : table:f : 73 : 20.0
]
Scale: 0.998911186806381
Update:
{BB:On:t:object:t=-0.01758320752953945, LHT:0:object:t:e=0.007198750610107422, LHH:0:object:t:var=0.007198750610107422, LHT:1:object:t:d=-0.01197327922436208, LHT:0:On:t:e=0.019337620352216957, LHH:0:On:t:var=0.019337620352216957, LHT:1:object:t:f=0.019337620352216957, LHH:1:object:t:table:f=0.019337620352216957, BB:object:t:object:t=-0.011722138353026362, LHH:1:object:t:mugs:d=-0.011973279224361947, BB:has:t:object:t=-0.0061122100478487665, LHT:0:has:t:e=-0.006277800565596496, LHH:0:has:t:var=-0.006277800565596496, LHT:1:has:t:e=-0.006277800565596496, LHH:1:has:t:the=-0.006277800565596496, LHT:0:object:t:f=-0.019337620352216724, LHH:0:object:t:table:f=-0.019337620352216724, LHT:0:On:t:f=-0.019337620352216724, LHH:0:On:t:table:f=-0.019337620352216724, LHT:1:object:t:e=-0.019503210869964455, LHH:1:object:t:var=-0.019503210869964455, BB:forall:has:t=-1.6559051774772937E-4, LEX:294=0.002219867815424641, LEX:829=0.0036146160531591856, LEX:830=0.011279600258035052, LEX:831=-0.009096919316219094, LEX:832=-0.008017164815039123, LEX:613=0.007478736301031891, LEX:629=0.007581070527910022, LEX:637=-0.01814434008854689, LEX:653=0.006470448773086857, LEX:669=0.0065330864085637475, LEX:677=-1.6559051774772937E-4, LEX:709=-4.923993767940256E-4, LEX:725=-0.0026801192527563943, LEX:741=-0.0026885505469627616, LEX:773=-7.0088088687581E-4, LEX:789=-0.0027135527267296675, LEX:805=-0.0026977764342432883}
26: =========== r:0.7692307692307693 p:0.7692307692307693 (epoch:2 file:0 0)
for all mugs that are in the sink
(forall $0 (and (object:t $0 mugs:d) (In:t $0 (the $1 (object:t $1 sink:f)))))
MakeLex parse time: 0.003 sec.
Adding:
for  :- S/S : (lambda $0 t $0) : 0.0
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 0.0
the sink  :- NP : sink:f : 0.0
Lex Size: 884
First parse time: 0.003 sec.
CORRECT:(forall $0 (and (object:t $0 mugs:d) (In:t $0 (the $1 (object:t $1 sink:f)))))
Using:
[LexEntries and scores:
for  :- S/S : (lambda $0 t $0) : 629 : 0.5172823307601446
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 834 : 0.026264070590612903
the sink  :- NP : sink:f : 74 : 20.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/S : (lambda $0 t $0) : 629 : 0.5172823307601446
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 834 : 0.026264070590612903
the sink  :- NP : sink:f : 74 : 20.0
]
Scale: 0.9989012086704624
Update:
{BB:In:t:object:t=-0.012130014492376238, LHT:0:object:t:e=0.007929263396271879, LHH:0:object:t:var=0.007929263396271879, LHT:1:object:t:d=-0.01172804309172028, LHH:1:object:t:mugs:d=-0.01172804309172028, LHT:0:In:t:e=0.019813135597840807, LHH:0:In:t:var=0.019813135597840807, LHT:1:object:t:f=0.019813135597840807, LHH:1:object:t:sink:f=0.019813135597840807, BB:object:t:object:t=-0.006319418003625358, BB:has:t:object:t=-0.0059174466029694745, LHT:0:has:t:e=-0.006073275712817715, LHH:0:has:t:var=-0.006073275712817715, LHT:1:has:t:e=-0.006073275712817715, LHH:1:has:t:the=-0.006073275712817715, LHT:0:object:t:f=-0.019813135597841192, LHH:0:object:t:sink:f=-0.019813135597841192, LHT:0:In:t:f=-0.019813135597841192, LHH:0:In:t:sink:f=-0.019813135597841192, LHT:1:object:t:e=-0.01996896470768943, LHH:1:object:t:var=-0.01996896470768943, BB:forall:has:t=-1.558291098482403E-4, LEX:295=0.0022176639822784157, LEX:833=0.0036417001467002373, LEX:834=0.011293783287248844, LEX:835=-0.009246478173144803, LEX:836=-0.007906669247728183, LEX:613=0.007503953480973703, LEX:629=0.007587359062823625, LEX:637=-0.018598165665842055, LEX:653=0.006562399203056934, LEX:669=0.0066106621336324565, LEX:677=-1.558291098482403E-4, LEX:709=-5.088215148745537E-4, LEX:725=-0.002649875647741847, LEX:741=-0.0026518993261344043, LEX:773=-7.06148417124582E-4, LEX:789=-0.0026163115814074028, LEX:805=-0.0025949866044374906}
27: =========== r:0.7777777777777778 p:0.7777777777777778 (epoch:2 file:0 0)
if the robot is grasping the mug
(exists $0 (and (object:t $0 robot:p) (IsGrasping:t $0 (the $1 (object:t $1 mug:d)))))
MakeLex parse time: 0.002 sec.
Adding:
robot  :- NP : robot:p : 0.0
is grasping  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (IsGrasping:t $3 ($1 $2))))))) : 0.0
Lex Size: 885
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsGrasping:t $0 (the $1 (object:t $1 mug:d)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0
the robot  :- NP : robot:p : 1 : 20.0
is grasping  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (IsGrasping:t $3 ($1 $2))))))) : 884 : 0.0
the mug  :- NP : mug:d : 16 : 20.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0
the robot  :- NP : robot:p : 1 : 20.0
is grasping  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (IsGrasping:t $3 ($1 $2))))))) : 884 : 0.0
the mug  :- NP : mug:d : 16 : 20.0
]
Scale: 0.9988912307338854
Update:
{}
28: =========== r:0.7857142857142857 p:0.7857142857142857 (epoch:2 file:0 0)
if the robot is near the refrigerator
(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 refrigerator:f)))))
MakeLex parse time: 0.002 sec.
Adding:
robot  :- NP : robot:p : 0.0
is near  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (IsNear:t $3 ($1 $2))))))) : 0.0
Lex Size: 886
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 refrigerator:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0
the robot  :- NP : robot:p : 1 : 20.0
is near  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (IsNear:t $3 ($1 $2))))))) : 885 : 0.0
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0
the robot  :- NP : robot:p : 1 : 20.0
is near  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (IsNear:t $3 ($1 $2))))))) : 885 : 0.0
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
]
Scale: 0.9988812529966438
Update:
{}
29: =========== r:0.7931034482758621 p:0.7931034482758621 (epoch:2 file:0 0)
if the robot is close to the stove
(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
MakeLex parse time: 0.002 sec.
Adding:
robot  :- NP : robot:p : 0.0
is close to  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (IsNear:t $3 ($1 $2))))))) : 0.0
Lex Size: 887
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0
the robot  :- NP : robot:p : 1 : 20.0
is close to  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (IsNear:t $3 ($1 $2))))))) : 886 : 0.0
the stove  :- NP : stove:f : 76 : 20.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0
the robot  :- NP : robot:p : 1 : 20.0
is close to  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (IsNear:t $3 ($1 $2))))))) : 886 : 0.0
the stove  :- NP : stove:f : 76 : 20.0
]
Scale: 0.9988712754587316
Update:
{}
30: =========== r:0.8 p:0.8 (epoch:2 file:0 0)
if the microwave is on and the robot is close to the microwave
(and (exists $0 (and (object:t $0 microwave:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 microwave:f))))))
MakeLex parse time: 0.007 sec.
Adding:
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 1.2756999999999998
the robot is close to  :- S/NP\S\(NP|NP) : (lambda $0 <e,e> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 robot:p) (IsNear:t $3 ($0 $2)))))))) : 0.0
Lex Size: 889
First parse time: 0.007 sec.
CORRECT:(and (exists $0 (and (object:t $0 microwave:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 microwave:f))))))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.15137155117180406
the microwave  :- NP : microwave:f : 77 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -0.7825916206579432
on  :- NP : IsOn:s : 57 : 9.999989827262347
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 1.2756999999999998
the robot is close to  :- S/NP\S\(NP|NP) : (lambda $0 <e,e> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 robot:p) (IsNear:t $3 ($0 $2)))))))) : 888 : 0.0
]
Second parse time: 0.007 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.15137155117180406
the microwave  :- NP : microwave:f : 77 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -0.7825916206579432
on  :- NP : IsOn:s : 57 : 9.999989827262347
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 1.2756999999999998
the robot is close to  :- S/NP\S\(NP|NP) : (lambda $0 <e,e> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 robot:p) (IsNear:t $3 ($0 $2)))))))) : 888 : 0.0
]
Scale: 0.9988612981201431
Update:
{BB:exists:exists=-0.001401368493779456, LHT:0:object:t:e=-0.0028027369875597992, LHH:0:object:t:var=-0.0028027369875597992, LHT:0:state:t:e=-2.915953491139604E-4, LHH:0:state:t:var=-2.915953491139604E-4, LHT:1:object:t:p=-0.002802736987558912, BB:exists:object:t=-0.007006842468897315, LHH:1:object:t:you:p=-0.002802736987558926, BB:exists:state:t=-2.915953491138102E-4, LHT:1:state:t:e=-2.915953491138102E-4, LHH:1:state:t:var=-2.915953491138102E-4, LEX:123=4.3898351667638933E-4, LEX:131=0.0024105921523314947, LEX:365=-0.0028027369875589254, LEX:547=-1.6452656711574422E-4, LEX:559=1.1753697698262235E-4, LEX:518=2.446155665811058E-4, LEX:558=-1.270552467473225E-4, LEX:570=-1.1756031983392895E-4}
31: =========== r:0.8064516129032258 p:0.8064516129032258 (epoch:2 file:0 0)
if the stove is not on and the mug contains coffee
(and (exists $0 (and (object:t $0 stove:f) (not (state:t $0 IsOn:s)))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coffee:q))))))
MakeLex parse time: 0.005 sec.
Adding:
if the stove is not on  :- S/S : (lambda $0 t (and (exists $1 (and (object:t $1 stove:f) (not (state:t $1 IsOn:s)))) $0)) : 0.18518518518518517
Lex Size: 890
First parse time: 0.005 sec.
CORRECT:(and (exists $0 (and (object:t $0 stove:f) (not (state:t $0 IsOn:s)))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coffee:q))))))
Using:
[LexEntries and scores:
if the stove is not on  :- S/S : (lambda $0 t (and (exists $1 (and (object:t $1 stove:f) (not (state:t $1 IsOn:s)))) $0)) : 889 : 0.18518518518518517
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 1.2756999999999998
the mug  :- NP : mug:d : 16 : 20.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 0.9983075237068534
coffee  :- NP : coffee:q : 35 : 10.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if the stove is not on  :- S/S : (lambda $0 t (and (exists $1 (and (object:t $1 stove:f) (not (state:t $1 IsOn:s)))) $0)) : 889 : 0.18518518518518517
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 1.2756999999999998
the mug  :- NP : mug:d : 16 : 20.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 0.9983075237068534
coffee  :- NP : coffee:q : 35 : 10.0
]
Scale: 0.998851320980872
Update:
{}
32: =========== r:0.8125 p:0.8125 (epoch:2 file:0 0)
if the mug is green and the TV is on
(and (exists $0 (and (object:t $0 mug:d) (state:t $0 green:s))) (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s))))
MakeLex parse time: 0.005 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
green  :- NP : green:s : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
and the TV is  :- S/NP\S : (lambda $0 t (lambda $1 e (and $0 (exists $2 (and (object:t $2 tv:f) (state:t $2 $1)))))) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
on  :- NP : IsOn:s : 0.0
the mug  :- NP : mug:d : 0.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
green  :- NP : green:s : 0.0
and the TV is  :- S/NP\S : (lambda $0 t (lambda $1 e (and $0 (exists $2 (and (object:t $2 tv:f) (state:t $2 $1)))))) : 0.0
on  :- NP : IsOn:s : 0.0
and  :- S/NP\S/(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 0.0
the TV is  :- S|NP|S : (lambda $0 t (lambda $1 e (and $0 (exists $2 (and (object:t $2 tv:f) (state:t $2 $1)))))) : 0.0
and the  :- S/NP\S/(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 0.0
TV is  :- S|NP|S : (lambda $0 t (lambda $1 e (and $0 (exists $2 (and (object:t $2 tv:f) (state:t $2 $1)))))) : 0.0
and the TV  :- S/NP\S/(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 0.0
is  :- S|NP|S : (lambda $0 t (lambda $1 e (and $0 (exists $2 (and (object:t $2 tv:f) (state:t $2 $1)))))) : 0.0
and  :- S|NP|S : (lambda $0 t (lambda $1 e (and $0 (exists $2 (and (object:t $2 tv:f) (state:t $2 $1)))))) : 0.0
the TV is  :- S/NP\S\(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 0.0
and the  :- S|NP|S : (lambda $0 t (lambda $1 e (and $0 (exists $2 (and (object:t $2 tv:f) (state:t $2 $1)))))) : 0.0
TV is  :- S/NP\S\(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 0.0
and the TV  :- S|NP|S : (lambda $0 t (lambda $1 e (and $0 (exists $2 (and (object:t $2 tv:f) (state:t $2 $1)))))) : 0.0
is  :- S/NP\S\(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 0.0
and  :- S|NP\S : (lambda $0 t (lambda $1 e (and $0 (exists $2 (and (object:t $2 tv:f) (state:t $2 $1)))))) : 0.0
the TV is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
and the  :- S|NP\S : (lambda $0 t (lambda $1 e (and $0 (exists $2 (and (object:t $2 tv:f) (state:t $2 $1)))))) : 0.0
TV is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
and  :- S/NP\S/(S|S|NP) : (lambda $0 <e,<t,t>> (lambda $1 t (lambda $2 e ($0 $2 $1)))) : 0.0
the TV is  :- S|S|NP : (lambda $0 e (lambda $1 t (and $1 (exists $2 (and (object:t $2 tv:f) (state:t $2 $0)))))) : 0.0
and the  :- S/NP\S/(S|S|NP) : (lambda $0 <e,<t,t>> (lambda $1 t (lambda $2 e ($0 $2 $1)))) : 0.0
TV is  :- S|S|NP : (lambda $0 e (lambda $1 t (and $1 (exists $2 (and (object:t $2 tv:f) (state:t $2 $0)))))) : 0.0
and the TV  :- S/NP\S/(S|S|NP) : (lambda $0 <e,<t,t>> (lambda $1 t (lambda $2 e ($0 $2 $1)))) : 0.0
is  :- S|S|NP : (lambda $0 e (lambda $1 t (and $1 (exists $2 (and (object:t $2 tv:f) (state:t $2 $0)))))) : 0.0
and  :- S|S|NP : (lambda $0 e (lambda $1 t (and $1 (exists $2 (and (object:t $2 tv:f) (state:t $2 $0)))))) : 0.0
the TV is  :- S/NP\S\(S|S|NP) : (lambda $0 <e,<t,t>> (lambda $1 t (lambda $2 e ($0 $2 $1)))) : 0.0
and the  :- S|S|NP : (lambda $0 e (lambda $1 t (and $1 (exists $2 (and (object:t $2 tv:f) (state:t $2 $0)))))) : 0.0
TV is  :- S/NP\S\(S|S|NP) : (lambda $0 <e,<t,t>> (lambda $1 t (lambda $2 e ($0 $2 $1)))) : 0.0
and the TV  :- S|S|NP : (lambda $0 e (lambda $1 t (and $1 (exists $2 (and (object:t $2 tv:f) (state:t $2 $0)))))) : 0.0
is  :- S/NP\S\(S|S|NP) : (lambda $0 <e,<t,t>> (lambda $1 t (lambda $2 e ($0 $2 $1)))) : 0.0
and  :- S/NP\S/(S|NP) : (lambda $0 <e,t> (lambda $1 t (lambda $2 e (and $1 ($0 $2))))) : 0.0
the TV is  :- S|NP : (lambda $0 e (exists $1 (and (object:t $1 tv:f) (state:t $1 $0)))) : 0.0
and the  :- S/NP\S/(S|NP) : (lambda $0 <e,t> (lambda $1 t (lambda $2 e (and $1 ($0 $2))))) : 0.0
TV is  :- S|NP : (lambda $0 e (exists $1 (and (object:t $1 tv:f) (state:t $1 $0)))) : 0.0
and the TV  :- S/NP\S/(S|NP) : (lambda $0 <e,t> (lambda $1 t (lambda $2 e (and $1 ($0 $2))))) : 0.0
is  :- S|NP : (lambda $0 e (exists $1 (and (object:t $1 tv:f) (state:t $1 $0)))) : 0.0
and  :- S|NP : (lambda $0 e (exists $1 (and (object:t $1 tv:f) (state:t $1 $0)))) : 0.0
the TV is  :- S/NP\S\(S|NP) : (lambda $0 <e,t> (lambda $1 t (lambda $2 e (and $1 ($0 $2))))) : 0.0
and the  :- S|NP : (lambda $0 e (exists $1 (and (object:t $1 tv:f) (state:t $1 $0)))) : 0.0
TV is  :- S/NP\S\(S|NP) : (lambda $0 <e,t> (lambda $1 t (lambda $2 e (and $1 ($0 $2))))) : 0.0
and the TV  :- S|NP : (lambda $0 e (exists $1 (and (object:t $1 tv:f) (state:t $1 $0)))) : 0.0
is  :- S/NP\S\(S|NP) : (lambda $0 <e,t> (lambda $1 t (lambda $2 e (and $1 ($0 $2))))) : 0.0
and  :- S/NP\S/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 ($0 $3 $2)))))) : 0.0
the TV is  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $0 tv:f) (state:t $0 $1)))) : 0.0
and the  :- S/NP\S/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 ($0 $3 $2)))))) : 0.0
TV is  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $0 tv:f) (state:t $0 $1)))) : 0.0
and the TV  :- S/NP\S/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 ($0 $3 $2)))))) : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $0 tv:f) (state:t $0 $1)))) : 0.0
and  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $0 tv:f) (state:t $0 $1)))) : 0.0
the TV is  :- S/NP\S\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 ($0 $3 $2)))))) : 0.0
and the  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $0 tv:f) (state:t $0 $1)))) : 0.0
TV is  :- S/NP\S\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 ($0 $3 $2)))))) : 0.0
and the TV  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $0 tv:f) (state:t $0 $1)))) : 0.0
is  :- S/NP\S\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 ($0 $3 $2)))))) : 0.0
and  :- S/NP\S/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 ($0 $2 $3)))))) : 0.0
the TV is  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 tv:f) (state:t $1 $0)))) : 0.0
and the  :- S/NP\S/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 ($0 $2 $3)))))) : 0.0
TV is  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 tv:f) (state:t $1 $0)))) : 0.0
and the TV  :- S/NP\S/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 ($0 $2 $3)))))) : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 tv:f) (state:t $1 $0)))) : 0.0
and  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 tv:f) (state:t $1 $0)))) : 0.0
the TV is  :- S/NP\S\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 ($0 $2 $3)))))) : 0.0
and the  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 tv:f) (state:t $1 $0)))) : 0.0
TV is  :- S/NP\S\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 ($0 $2 $3)))))) : 0.0
and the TV  :- S|NP|NP : (lambda $0 e (lambda $1 e (and (object:t $1 tv:f) (state:t $1 $0)))) : 0.0
is  :- S/NP\S\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 ($0 $2 $3)))))) : 0.0
and  :- S/NP\S/(S|NP) : (lambda $0 <e,t> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and ($0 $3) (state:t $3 $2))))))) : 0.0
the TV is  :- S|NP : (lambda $0 e (object:t $0 tv:f)) : 0.0
and the  :- S/NP\S/(S|NP) : (lambda $0 <e,t> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and ($0 $3) (state:t $3 $2))))))) : 0.0
TV is  :- S|NP : (lambda $0 e (object:t $0 tv:f)) : 0.0
and the TV  :- S/NP\S/(S|NP) : (lambda $0 <e,t> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and ($0 $3) (state:t $3 $2))))))) : 0.0
is  :- S|NP : (lambda $0 e (object:t $0 tv:f)) : 0.0
and  :- S|NP : (lambda $0 e (object:t $0 tv:f)) : 0.0
the TV is  :- S/NP\S\(S|NP) : (lambda $0 <e,t> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and ($0 $3) (state:t $3 $2))))))) : 0.0
and the  :- S|NP : (lambda $0 e (object:t $0 tv:f)) : 0.0
TV is  :- S/NP\S\(S|NP) : (lambda $0 <e,t> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and ($0 $3) (state:t $3 $2))))))) : 0.0
and the TV  :- S|NP : (lambda $0 e (object:t $0 tv:f)) : 0.0
is  :- S/NP\S\(S|NP) : (lambda $0 <e,t> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and ($0 $3) (state:t $3 $2))))))) : 0.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 0.0
the TV is  :- NP : tv:f : 0.0
and the  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 0.0
TV is  :- NP : tv:f : 0.0
and the TV  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 0.0
is  :- NP : tv:f : 0.0
and  :- NP : tv:f : 0.0
the TV is  :- S/NP\S\NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 0.0
and the  :- NP : tv:f : 0.0
TV is  :- S/NP\S\NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 0.0
and the TV  :- NP : tv:f : 0.0
is  :- S/NP\S\NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 0.0
and  :- S/NP\S/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 tv:f) ($0 $3 $2))))))) : 0.0
the TV is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
and the  :- S/NP\S/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 tv:f) ($0 $3 $2))))))) : 0.0
TV is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
and  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
the TV is  :- S/NP\S\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 tv:f) ($0 $3 $2))))))) : 0.0
and the  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
TV is  :- S/NP\S\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 tv:f) ($0 $3 $2))))))) : 0.0
and the TV  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
is  :- S/NP\S\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 tv:f) ($0 $3 $2))))))) : 0.0
and  :- S/NP\S/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 tv:f) ($0 $2 $3))))))) : 0.0
the TV is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
and the  :- S/NP\S/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 tv:f) ($0 $2 $3))))))) : 0.0
TV is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
and  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
the TV is  :- S/NP\S\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 tv:f) ($0 $2 $3))))))) : 0.0
and the  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
TV is  :- S/NP\S\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 tv:f) ($0 $2 $3))))))) : 0.0
and the TV  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
is  :- S/NP\S\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 tv:f) ($0 $2 $3))))))) : 0.0
Lex Size: 998
First parse time: 0.02 sec.
WRONG: (and (exists $0 (and (object:t $0 mug:d) (state:t $0 green:s))) (exists $0 (and (object:t $0 tv:f) (has:t $0 (the $1 (state:t $1 IsOn:s))))))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.15378214332413556
the mug  :- NP : mug:d : 16 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -0.7827091809777771
green  :- NP : green:s : 51 : 10.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : 0.5467285714285715
the TV  :- NP : tv:f : 79 : 20.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -1.6505884579732271E-4
on  :- NP : IsOn:s : 57 : 9.999989827262347
]
Second parse time: 0.012 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.15378214332413556
the mug  :- NP : mug:d : 16 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -0.7827091809777771
green  :- NP : green:s : 51 : 10.0
and  :- S/NP\S/(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 890 : 0.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 966 : 0.0
the TV  :- NP : tv:f : 79 : 20.0
is  :- S/NP\S\(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 901 : 0.0
is  :- S/NP\S\NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 977 : 0.0
on  :- NP : IsOn:s : 57 : 9.999989827262347
]
Scale: 0.9988413440409125
Update:
{BB:exists:exists=-0.059548249006376695, BB:object:t:state:t=0.3850366311173341, LHT:0:object:t:e=-0.023307599903153578, LHH:0:object:t:var=-0.023307599903153578, LHT:1:object:t:d=-0.020459470409204955, LHT:0:state:t:e=-0.0015848987799800865, LHH:0:state:t:var=-0.0015848987799800865, LHT:1:state:t:s=-5.910295609860403E-4, BB:has:t:object:t=-0.39444846805328054, LHT:0:has:t:e=-0.39444846805328054, LHH:0:has:t:var=-0.39444846805328054, LHT:1:has:t:e=-0.39444846805328054, LHH:1:has:t:the=-0.39444846805328054, LHH:1:object:t:cup:d=-0.009037099271063085, BB:exists:object:t=-0.006626232617730249, BB:exists:state:t=-0.002701051515594018, LHT:1:state:t:e=-9.938726872113196E-4, LHH:1:state:t:var=-9.938726872113196E-4, LHH:1:state:t:yellow:s=-5.910951766322903E-4, LHH:1:object:t:bowl:d=-4.760124750581563E-4, LHH:1:object:t:cups:d=-0.010946358663083623, LHT:1:object:t:p=-0.002847428685113411, LHH:1:object:t:you:p=-0.002847428685113411, LEX:123=0.022380207262412473, LEX:131=0.00400611385661479, LEX:172=-4.7600297674691013E-4, LEX:218=-1.1504146675572284E-4, LEX:311=-8.859291860783884E-5, LEX:349=-8.675270662389353E-5, LEX:365=-0.002743633662770078, LEX:373=-0.010770996848118362, LEX:397=-1.519541892120726E-5, LEX:547=-2.9277898257336116E-4, LEX:559=-0.011796568767522246, LEX:518=0.17300862497041283, LEX:522=-2.1698986927975916E-4, LEX:546=-0.00882007986925274, LEX:558=-5.906735502513305E-4, LEX:570=0.06151543248848492, LEX:600=-0.3856284052711583, LEX:901=0.08614290711502723, LEX:929=-0.0013251961770559533, LEX:977=0.07591694016332177, LEX:858=-0.3944484680532805, LEX:890=0.08614290711502723, LEX:918=0.03938158119446548, LEX:954=-1.0708642223586296E-4, LEX:966=0.26903221539076916}
33: =========== r:0.7878787878787878 p:0.7878787878787878 (epoch:2 file:0 0)
if there exists a mug and the mug contains sugar
(and (exists $0 (object:t $0 mug:d)) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 sugar:q))))))
MakeLex parse time: 0.017 sec.
Adding:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
a mug  :- NP : mug:d : 0.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 0.5467285714285715
the mug  :- NP : mug:d : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
sugar  :- NP : sugar:q : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
sugar  :- NP : sugar:q : 0.0
Lex Size: 998
First parse time: 0.012 sec.
WRONG: (and (object:t mug:d cup:d) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 sugar:q))))))
Using:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 0.9776317226947498
exists  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 130 : -0.6554560182545204
a mug  :- NP : mug:d : 22 : 20.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : 0.15228010337529096
the mug  :- NP : mug:d : 16 : 20.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 0.7530581989525817
sugar  :- NP : sugar:q : 30 : 10.0
]
Second parse time: 0.01 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : -0.01986934374056769
a mug  :- NP : mug:d : 22 : 20.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : 0.15228010337529096
the mug  :- NP : mug:d : 16 : 20.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 0.7530581989525817
sugar  :- NP : sugar:q : 30 : 10.0
]
Scale: 0.9988313673002588
Update:
{BB:exists:exists=0.5464848590057015, LHT:0:object:t:e=0.6242837307933332, LHH:0:object:t:var=0.6242837307933332, LHT:1:object:t:d=0.31882633210183875, LHH:1:object:t:mug:d=0.6270708168513753, BB:has:t:object:t=0.0021859791364769706, LHT:0:has:t:e=-0.06764073744522582, LHH:0:has:t:var=-0.06764073744522582, LHT:1:has:t:e=-0.0676421604291704, LHH:1:has:t:the=-0.06764073951146424, LHT:0:object:t:d=-0.3696356939107962, LHH:0:object:t:mug:d=-0.3696356939107962, LHT:1:object:t:e=-0.046528171144953605, LHH:1:object:t:var=-0.046528171144953605, BB:object:t:state:t=-0.025264684846047828, LHT:0:state:t:e=-0.00419704077744469, LHH:0:state:t:var=-0.00419704077744469, LHT:1:state:t:e=-0.03535484351792669, LHH:1:state:t:the=-0.002187415565321062, BB:exists:object:t=-0.3350261773871296, LHT:1:object:t:p=-0.01765012407434773, LHH:1:object:t:you:p=-0.01765012407434773, LHT:1:state:t:s=-0.23720359936953725, LHH:1:state:t:yellow:s=-0.23720359936953725, BB:object:t:object:t=-0.0013818966581574611, LHH:1:object:t:bowl:d=-0.06830329486733688, LHH:1:object:t:cups:d=-0.0441799036710847, LHH:1:object:t:cup:d=-0.1957612862111146, BB:exists:state:t=-0.2453413732551579, LHT:0:state:t:d=-0.2683614021100193, LHH:0:state:t:mug:d=-0.2683614021100193, LHH:1:state:t:var=-0.03316742795260562, LEX:122=0.03274269237924506, LEX:125=0.03367124692258847, LEX:129=0.016414819827925635, LEX:133=0.062329117094201074, LEX:137=0.018762458551094343, LEX:141=0.018321475922301104, LEX:145=0.02844596307325035, LEX:149=0.018321475922301104, LEX:153=0.007396511293999555, LEX:190=-0.005432109396226509, LEX:200=-2.8050684368444953E-4, LEX:210=-0.02877658395655849, LEX:220=-6.412381484131954E-4, LEX:240=-5.008589743791167E-5, LEX:250=-0.11364031318774978, LEX:423=-0.15162431914490143, LEX:861=-0.009030581302282646, LEX:863=-0.009030581302282646, LEX:124=0.014119268587808032, LEX:128=-0.23463850062599403, LEX:132=0.08425822850538323, LEX:136=0.02259877331423117, LEX:140=0.01670017488270564, LEX:144=0.02349434254233457, LEX:148=0.016630421188512316, LEX:152=0.020036903982894438, LEX:123=0.04622432140785714, LEX:127=0.014068327219417582, LEX:131=0.1677329110603118, LEX:135=0.02213702770852567, LEX:139=0.024279213491941627, LEX:143=0.031535218475997655, LEX:147=0.02415757379084268, LEX:151=0.01841626006149302, LEX:188=-0.004707906655465958, LEX:198=-6.431914383378468E-4, LEX:208=-0.029223564803385553, LEX:218=-4.376022815323157E-4, LEX:238=-1.1304415826243732E-4, LEX:248=-0.11142073141812721, LEX:325=-3.8131972050618046E-4, LEX:333=-1.836555363536535E-4, LEX:341=-0.01673659640892686, LEX:349=-3.065677030272929E-4, LEX:365=-3.9930053187320325E-4, LEX:381=-7.7807203019026E-5, LEX:389=-0.043308360711197556, LEX:397=-5.510021002246111E-5, LEX:527=-3.9308451374166095E-4, LEX:537=-3.946015879505261E-4, LEX:553=-0.04212907793322022, LEX:571=-4.6779019842999736E-4, LEX:577=-0.007142028219181805, LEX:583=-5.34922394381004E-4, LEX:589=-0.0071694645270105285, LEX:595=-2.1598388043423558E-4, LEX:419=0.04423165890622642, LEX:859=0.07467079339774192, LEX:126=0.03956686770002576, LEX:130=-0.28369974400592374, LEX:134=0.09694306362565226, LEX:138=0.11140701465573229, LEX:142=0.009290894620018461, LEX:146=0.0093112204669428, LEX:150=0.009290894620018461, LEX:154=0.011948990049626695, LEX:858=0.0021874155604567663, LEX:966=-0.0021873396844676366, LEX:454=-0.06982813956564766, LEX:472=-0.0021874155653210615, LEX:502=0.07201555513096666}
34: =========== r:0.7647058823529411 p:0.7647058823529411 (epoch:2 file:0 0)
if the television is on
(exists $0 (and (object:t $0 television:f) (state:t $0 IsOn:s)))
MakeLex parse time: 0.002 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
on  :- NP : IsOn:s : 0.0
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 0.0
on  :- NP : IsOn:s : 0.0
Lex Size: 998
First parse time: 0.002 sec.
WRONG: (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.32552116824106214
the television  :- NP : tv:f : 78 : 19.000759424883274
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -0.7211937484892922
on  :- NP : IsOn:s : 57 : 9.999989827262347
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.32552116824106214
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 845 : 0.7751609460296015
on  :- NP : IsOn:s : 57 : 9.999989827262347
]
Scale: 0.9988213907589045
Update:
{BB:object:t:state:t=-0.0015275067899778224, LHT:0:object:t:e=-0.06754201052933449, LHH:0:object:t:var=-0.06754201052933449, LHT:0:state:t:e=-0.001915625809062626, LHH:0:state:t:var=-0.001915625809062626, LHT:1:state:t:s=-0.0015275067899778224, LHH:1:object:t:tv:f=-0.9988212150325328, BB:exists:object:t=-0.008067147834310224, LHT:1:object:t:p=-0.008067147834310224, LHH:1:object:t:you:p=-0.008067147834310224, BB:exists:exists=-0.05947486269502413, LHT:1:object:t:d=-0.05947486269502413, LHH:1:object:t:bowl:d=-0.0015275067899780108, LHH:1:state:t:yellow:s=-0.0015275067899780108, LHH:1:object:t:cups:d=-0.05794735590504611, BB:exists:state:t=-3.8811901908464915E-4, LHT:1:state:t:e=-3.8811901908464915E-4, LHH:1:state:t:var=-3.8811901908464915E-4, LEX:78=-0.9988212150325331, LEX:123=0.006317947790540659, LEX:131=0.03853883296348606, LEX:172=-0.0015275067899780108, LEX:311=-0.001498426402187977, LEX:365=-0.006568721432122246, LEX:373=-0.056448929502858146, LEX:547=-2.259794105110544E-4, LEX:559=-0.13008237265300912, LEX:518=-0.1299202330444355, LEX:558=-1.621396085735948E-4, LEX:570=-0.8092639796844998, LEX:977=-0.059474862695024125, LHH:1:object:t:television:f=0.9988213907589045, LEX:304=0.15148968478306174, LEX:845=0.8473262088592359}
35: =========== r:0.7428571428571429 p:0.7428571428571429 (epoch:2 file:0 0)
if you find any cups
(exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d))))
MakeLex parse time: 0.004 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
you  :- NP : you:p : 0.0
find any cups  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 0.0
Lex Size: 998
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d))))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.3640600012045482
you  :- NP : you:p : 2 : 10.782999160849121
find any cups  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 360 : 0.65551459951915
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.3640600012045482
you  :- NP : you:p : 2 : 10.782999160849121
find any cups  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 360 : 0.65551459951915
]
Scale: 0.998811414416844
Update:
{BB:exists:object:t=0.08322306469314568, LHT:0:object:t:e=0.0832135628082755, LHH:0:object:t:var=0.0832135628082755, LHT:1:object:t:p=-0.0597491777317169, LHH:1:object:t:you:p=-0.0597491777317169, LHT:1:object:t:d=0.1429730453608589, LHH:1:object:t:cups:d=0.21045134562685447, BB:exists:exists=-4.569205443812153E-5, BB:object:t:state:t=-0.08961564849390845, LHH:1:object:t:bowl:d=-1.0211443232198529E-4, LHT:0:state:t:e=-0.0896684969108186, LHH:0:state:t:var=-0.0896684969108186, LHT:1:state:t:s=-0.08907295907381245, LHH:1:state:t:yellow:s=-0.08907295907381245, BB:object:t:object:t=-1.642918226885709E-5, LHT:1:state:t:e=-5.955378370061476E-4, LHH:1:state:t:var=-5.955378370061476E-4, LHH:1:object:t:cup:d=-0.06737618583367407, LEX:309=-1.26431889078821E-4, LEX:323=-1.6158586611152986E-4, LEX:339=-1.2968547004977194E-5, LEX:347=-3.835273054431784E-5, LEX:355=-0.04728593982311269, LEX:379=-1.26431889078821E-4, LEX:395=-1.363446053798169E-4, LEX:403=-0.019978194444040573, LEX:411=-1.2714197687629869E-5, LEX:312=-1.2184095661069831E-4, LEX:326=-3.59209633351132E-4, LEX:334=-4.21517639469009E-5, LEX:342=-2.883159979312656E-5, LEX:358=-2.9989972150423052E-5, LEX:366=-1.79334162520439E-4, LEX:382=-1.4984456135430654E-4, LEX:398=-2.267741676160984E-5, LEX:307=-1.26431889078821E-4, LEX:321=-1.6158586611152986E-4, LEX:337=-1.2968547004977194E-5, LEX:345=-3.835272446953307E-5, LEX:353=-1.3047351469866263E-5, LEX:377=-1.26431889078821E-4, LEX:393=-1.363445837838544E-4, LEX:409=-1.2714197687629869E-5, LEX:314=-0.009544063319223786, LEX:328=-6.994083638384329E-4, LEX:336=-3.8352712749645194E-5, LEX:344=-5.644044169505521E-5, LEX:360=0.13328136336663896, LEX:368=-1.26431889078821E-4, LEX:376=-0.005678848544530729, LEX:384=-1.3634454211945487E-4, LEX:392=-1.5933398846118172E-5, LEX:400=-1.2714197687629869E-5, LEX:408=-0.047654514210298524, LEX:305=-1.26431889078821E-4, LEX:319=-1.6185442128612278E-4, LEX:335=-1.2990103068941688E-5, LEX:343=-3.800485465987215E-5, LEX:351=-1.3044329576857187E-5, LEX:375=-2.0291341809523954E-4, LEX:391=-1.351079007302981E-4, LEX:407=-2.153698500505077E-5, LEX:316=-1.26431889078821E-4, LEX:330=-1.6158586611152986E-4, LEX:338=-3.835272446953307E-5, LEX:346=-1.2968547004977194E-5, LEX:362=-1.3047351469866263E-5, LEX:370=-1.26431889078821E-4, LEX:386=-1.363445837838544E-4, LEX:402=-1.2714197687629869E-5, LEX:131=0.08875948284442511, LEX:151=-1.5717350599814652E-4, LEX:208=-8.028030064680115E-5, LEX:218=-0.08900704243310295, LEX:248=-5.30963347844202E-5, LEX:341=-3.658646457436335E-5, LEX:349=0.12687638796700437, LEX:365=-0.003290990070887487, LEX:373=-1.1819167272275411E-4, LEX:389=-1.1358066869085264E-4, LEX:397=-0.05291450523489618, LEX:405=-1.2713416424855372E-5, LEX:553=-1.0073074471533671E-4, LEX:559=-5.951963673398677E-4, LEX:565=-1.0893974862334794E-5, LEX:595=-1.04777582183119E-5, LEX:2=0.07003102908225384, LEX:25=-0.06725389198442569, LEX:318=-1.26431889078821E-4, LEX:332=-1.6143596920804954E-4, LEX:340=-3.835272446953307E-5, LEX:348=-1.2956515358553488E-5, LEX:364=-1.3047351469866263E-5, LEX:372=-1.26431889078821E-4, LEX:388=-1.363445837838544E-4}
36: =========== r:0.75 p:0.75 (epoch:2 file:0 0)
When the water is boiling
(exists $0 (and (object:t $0 water:q) (state:t $0 IsBoiling:s)))
MakeLex parse time: 0.002 sec.
Adding:
When the  :- S/S : (lambda $0 t $0) : 0.0
When the  :- S/S : (lambda $0 t $0) : 0.0
boiling  :- NP : IsBoiling:s : 0.0
water  :- NP : water:q : 0.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
boiling  :- NP : IsBoiling:s : 0.0
Lex Size: 998
First parse time: 0.001 sec.
CORRECT:(exists $0 (and (object:t $0 water:q) (state:t $0 IsBoiling:s)))
Using:
[LexEntries and scores:
When the  :- S/S : (lambda $0 t $0) : 846 : 0.0
water  :- NP : water:q : 32 : 10.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -1.530457728173792
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
When the  :- S/S : (lambda $0 t $0) : 846 : 0.0
water  :- NP : water:q : 32 : 10.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -1.530457728173792
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Scale: 0.998801438274071
Update:
{}
37: =========== r:0.7567567567567568 p:0.7567567567567568 (epoch:2 file:0 0)
when the water in the pot is boiling
(exists $0 (and (object:t $0 water:q) (In:t $0 (the $1 (object:t $1 pot:d))) (state:t $0 IsBoiling:s)))
MakeLex parse time: 0.003 sec.
Adding:
water  :- NP : water:q : 0.0
in the pot is  :- S/NP\NP\NP : (lambda $0 e (lambda $1 e (lambda $2 e (exists $3 (and (In:t $3 $1) (object:t $3 $0) (state:t $3 $2)))))) : 0.0
Lex Size: 999
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 water:q) (In:t $0 (the $1 (object:t $1 pot:d))) (state:t $0 IsBoiling:s)))
Using:
[LexEntries and scores:
when the  :- NP : (the $0 (object:t $0 pot:d)) : 847 : 0.20506375
water  :- NP : water:q : 32 : 10.0
in the pot is  :- S/NP\NP\NP : (lambda $0 e (lambda $1 e (lambda $2 e (exists $3 (and (In:t $3 $1) (object:t $3 $0) (state:t $3 $2)))))) : 998 : 0.0
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
when the  :- NP : (the $0 (object:t $0 pot:d)) : 847 : 0.20506375
water  :- NP : water:q : 32 : 10.0
in the pot is  :- S/NP\NP\NP : (lambda $0 e (lambda $1 e (lambda $2 e (exists $3 (and (In:t $3 $1) (object:t $3 $0) (state:t $3 $2)))))) : 998 : 0.0
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Scale: 0.99879146233058
Update:
{}
38: =========== r:0.7631578947368421 p:0.7631578947368421 (epoch:2 file:0 0)
if there exists a cup and there exists a cup and there exists a cup and there exists a cup and there exists a cup
(and (exists $0 (object:t $0 cup:d)))
MakeLex parse time: 0.045 sec.
Adding:
and there exists a cup and there exists a cup and there exists a cup  :- S\S : (lambda $0 t $0) : 0.0
Lex Size: 1000
First parse time: 1.616 sec.
WRONG: (and (exists $0 (object:t $0 cup:d)) (exists $0 (object:t $0 cup:d)) (exists $0 (object:t $0 cup:d)) (exists $0 (object:t $0 cup:d)) (exists $0 (object:t $0 cup:d)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.4528194840489733
there  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 859 : -0.12969731190911837
exists  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 138 : -0.14983244108003918
a cup  :- NP : cup:d : 20 : 12.822482563107787
and  :- S/NP\S/(S|NP) : (lambda $0 <e,t> (lambda $1 t (lambda $2 e (and $1 ($0 $2))))) : 918 : 0.03938158119446548
there exists  :- S|NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 124 : -0.011061532666206332
]
Second parse time: 0.036 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 3.683722582209276
and there exists a cup and there exists a cup and there exists a cup  :- S\S : (lambda $0 t $0) : 999 : 0.0
]
Scale: 0.9987814865863647
Update:
{BB:exists:exists=-10.118616422081773, LHT:0:object:t:e=-3.898436589321692, LHH:0:object:t:var=-3.898436589321692, LHT:1:object:t:d=-3.8684879566338317, LHH:1:object:t:cup:d=-3.8676757315413144, LHT:0:object:t:d=-0.12470762901820122, LHH:0:object:t:cup:d=-0.12470762901820122, LHT:1:object:t:e=-0.12470762959486469, LHH:1:object:t:var=-0.12470762959486469, BB:object:t:object:t=-0.030319569282949006, LHT:1:object:t:f=-0.02927255047692166, LHH:1:object:t:tv:f=-0.02927255047692166, BB:exists:object:t=-0.04646094926842131, BB:object:t:state:t=-3.340220702156008E-4, LHT:0:state:t:e=-1.72289851339239E-4, LHH:0:state:t:var=-1.72289851339239E-4, LHT:1:state:t:e=-0.0031481925950460265, LHH:1:state:t:var=-0.0031481925950460265, BB:exists:state:t=-8.197209596420038E-4, LHT:1:state:t:s=-1.5882189456476042E-4, LHH:1:state:t:yellow:s=-1.5882189456476042E-4, LHH:1:object:t:bowl:d=-3.280805761790294E-4, LHH:1:object:t:cups:d=-4.8414451633875213E-4, LHT:1:object:t:p=-6.760816342892614E-4, LHH:1:object:t:you:p=-6.760816342892614E-4, LHT:0:state:t:d=-0.0031347246382715482, LHH:0:state:t:cup:d=-0.0031347246382715482, LEX:122=-0.02202234596095842, LEX:125=-0.054170792866748495, LEX:129=-0.008178713119665844, LEX:133=-0.11307561458722154, LEX:137=-0.019087594556983264, LEX:141=-0.015599006483243834, LEX:145=-0.023142056791428098, LEX:149=-0.015599006483243834, LEX:153=-0.006425796620879644, LEX:200=-4.206974693995773E-5, LEX:240=-8.78981025213551E-5, LEX:861=-8.708757169153949E-4, LEX:863=-8.708757169153949E-4, LEX:124=-0.5123282259511782, LEX:128=-0.007344788161502531, LEX:132=-0.8076155519676385, LEX:136=-0.5246601828315816, LEX:140=-0.021634583294420973, LEX:144=-0.5247893324020864, LEX:148=-0.021548708314092533, LEX:152=-0.1508444458668121, LEX:20=-4.99390681253089, LEX:123=-0.0984516735698164, LEX:127=-0.0073447881615025315, LEX:131=-0.5048459152189768, LEX:135=-0.020554685338870123, LEX:139=-0.020929530577569758, LEX:143=-0.026154884411246505, LEX:147=-0.020860775871669988, LEX:151=-0.01716361013519013, LEX:198=-1.1675156079252351E-4, LEX:238=-2.4018080050550904E-4, LEX:333=-4.841445163387525E-4, LEX:365=-5.723263204733121E-4, LEX:381=-1.0375531381594911E-4, LEX:577=-6.951359351759388E-4, LEX:589=-6.978358499267648E-4, LEX:595=-3.9269002908825905E-4, LEX:419=-0.734442684336657, LEX:859=-1.4095256626512547, LEX:126=-0.28242713603889613, LEX:130=-0.008178713119665842, LEX:134=-0.6047699260348012, LEX:138=-1.2864267060728503, LEX:142=-0.016469882200159224, LEX:146=-0.1469567454807205, LEX:150=-0.016469882200159224, LEX:154=-0.039419656633365864, LEX:918=-2.845536641337012, LEX:930=-0.5029165252630613, LEX:942=-0.6173861995974079, LEX:954=-1.3467956774478499E-5, LEX:978=-0.01290638028348456, LEX:988=-0.0163661701934371, LEX:118=0.09086623382494255, LEX:999=0.8823845112517487, LEX:82=0.9079152527614222, LEX:155=0.07659222452902026}
39: =========== r:0.7435897435897436 p:0.7435897435897436 (epoch:2 file:0 0)
if the mug is on the table or on the stove
(exists $0 (and (object:t $0 mug:d) (or (On:t $0 (the $1 (object:t $1 table:f))) (On:t $0 (the $1 (object:t $1 stove:f))))))
MakeLex parse time: 0.006 sec.
Adding:
if the mug is on  :- S|NP/NP : (lambda $0 e (lambda $1 e (On:t $1 (the $2 (object:t $2 $0))))) : 0.0820255
the table  :- NP : table:f : 0.0
Lex Size: 1001
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (or (On:t $0 (the $1 (object:t $1 table:f))) (On:t $0 (the $1 (object:t $1 stove:f))))))
Using:
[LexEntries and scores:
if the mug is on  :- S|NP/NP : (lambda $0 e (lambda $1 e (On:t $1 (the $2 (object:t $2 $0))))) : 1000 : 0.0820255
the table  :- NP : table:f : 73 : 20.0
or on  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and (object:t $2 mug:d) (or ($0 $2) (On:t $2 (the $3 (object:t $3 $1)))))))) : 851 : 0.5555555555555556
the stove  :- NP : stove:f : 76 : 20.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if the mug is on  :- S|NP/NP : (lambda $0 e (lambda $1 e (On:t $1 (the $2 (object:t $2 $0))))) : 1000 : 0.0820255
the table  :- NP : table:f : 73 : 20.0
or on  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and (object:t $2 mug:d) (or ($0 $2) (On:t $2 (the $3 (object:t $3 $1)))))))) : 851 : 0.5555555555555556
the stove  :- NP : stove:f : 76 : 20.0
]
Scale: 0.998771511041419
Update:
{}
40: =========== r:0.75 p:0.75 (epoch:2 file:0 0)
if the glass is empty or dry
(exists $0 (and (object:t $0 glass:d) (or (state:t $0 empty:s) (state:t $0 dry:s))))
MakeLex parse time: 0.003 sec.
Adding:
if the glass is empty  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 glass:d) ($0 $1)))) : 0.0
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 2.0
if the glass is empty  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 glass:d) ($0 $1)))) : 0.0
dry  :- NP : dry:s : 0.0
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 2.0
dry  :- NP : dry:s : 0.0
Lex Size: 1001
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (or (state:t $0 empty:s) (state:t $0 dry:s))))
Using:
[LexEntries and scores:
if the glass is empty  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 glass:d) ($0 $1)))) : 856 : 0.020374176508361052
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 857 : 2.013029709815834
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if the glass is empty  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 glass:d) ($0 $1)))) : 856 : 0.020374176508361052
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 857 : 2.013029709815834
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9987615356957373
Update:
{LHT:0:state:t:e=0.2962616945925742, LHH:0:state:t:var=0.2962616945925742, LHT:1:state:t:null=0.1481308472962872, LHH:1:state:t:dry:s=0.1481308472962871, LHT:0:state:t:null=-0.2962616945925743, LHH:0:state:t:dry:s=-0.2962616945925743, LHT:1:state:t:e=-0.14813084729628714, LHH:1:state:t:var=-0.14813084729628714, LEX:417=0.004637573085756294, LEX:852=-0.0706509646421854, LEX:854=0.007227531819566221, LEX:856=0.05878565825194044, LEX:853=-0.022428138639735567, LEX:855=-0.020288842974473687, LEX:857=0.03807920704353058}
41: =========== r:0.7560975609756098 p:0.7560975609756098 (epoch:2 file:0 0)
if the refrigerator is on and the mug contains coke
(and (exists $0 (and (object:t $0 refrigerator:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coke:q))))))
MakeLex parse time: 0.007 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
on  :- NP : IsOn:s : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
the refrigerator  :- NP : refrigerator:f : 0.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
on  :- NP : IsOn:s : 0.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 0.5467285714285715
the mug  :- NP : mug:d : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
coke  :- NP : coke:q : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
coke  :- NP : coke:q : 0.0
Lex Size: 1001
First parse time: 0.011 sec.
CORRECT:(and (exists $0 (and (object:t $0 refrigerator:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coke:q))))))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.052026431170003495
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -1.530457728173792
on  :- NP : IsOn:s : 57 : 9.999989827262347
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : 0.15446751893574773
the mug  :- NP : mug:d : 16 : 20.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 0.8250737540835484
coke  :- NP : coke:q : 34 : 10.0
]
Second parse time: 0.016 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.052026431170003495
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -1.530457728173792
on  :- NP : IsOn:s : 57 : 9.999989827262347
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : 0.15446751893574773
the mug  :- NP : mug:d : 16 : 20.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 0.8250737540835484
coke  :- NP : coke:q : 34 : 10.0
]
Scale: 0.9987515605493134
Update:
{BB:object:t:state:t=-0.004419876483774468, LHT:0:state:t:e=-0.005002697388844776, LHH:0:state:t:var=-0.005002697388844776, BB:has:t:object:t=0.004419839042442647, LHT:0:has:t:e=-0.042821470491067486, LHH:0:has:t:var=-0.042821470491067486, LHT:1:has:t:e=-0.042821470491067486, LHH:1:has:t:the=-0.042821470491067486, LHT:1:state:t:e=-0.005002659947512899, LHH:1:state:t:the=-0.004419839042442734, LHH:1:state:t:var=-5.828209050701655E-4, BB:exists:state:t=-5.849707986566885E-4, LEX:123=-2.387562113307979E-4, LEX:131=3.833566412806351E-4, LEX:547=-2.4177869085148762E-4, LEX:559=1.0190609365952845E-4, LEX:518=4.429517384715244E-4, LEX:558=-3.41022310004418E-4, LEX:570=-1.0067524643488657E-4, LEX:858=0.004419839032639529, LEX:966=-0.004419685383698714, LEX:454=-0.04724130953350985, LEX:472=-0.004419839042442736, LEX:502=0.05166114857595244}
Testing

File #0: 0
0: ==================(0 -- 0)
if you find any
(dummy:t)
Test parse time: 0.003 sec.
WRONG
1 parses: [(exists $0 (object:t $0 cups:d))]
[LexEntries and scores:
if you find any  :- S : (exists $0 (object:t $0 cups:d)) : 379 : -1.5830499943541784E-4
]
Had correct parse: false
Feats: {RN:true=1.0, LHT:0:object:t:e=1.0, LHH:0:object:t:var=1.0, LHT:1:object:t:d=1.0, LHH:1:object:t:cups:d=1.0, LEX:379=1.0}
-----------------------------
Recall : 0/1 = 0.0
Precision : 0/1 = 0.0
F1: NaN
No Parses : 0
EMPTY Recall : 0/1 = 0.0
EMPTY Precision : 0/1 = 0.0
EMPTY F1: NaN
-----------
Training, iteration 3
---------------------
DataSet: 0
---------------------
0: ===========
if there exists a mug
(exists $0 (object:t $0 mug:d))
MakeLex parse time: 0.006 sec.
Adding:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
a mug  :- NP : mug:d : 0.0
Lex Size: 1001
First parse time: 0.008 sec.
WRONG: (state:t mug:d yellow:s)
Using:
[LexEntries and scores:
if  :- S|NP : (lambda $0 e (state:t $0 yellow:s)) : 248 : -0.29222673539797156
there exists  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 128 : -1.0943858869244887
a mug  :- NP : mug:d : 22 : 20.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : -0.009148997322281048
a mug  :- NP : mug:d : 22 : 20.0
]
Scale: 0.9987415856021412
Update:
{LHT:0:object:t:e=0.9985023320688509, LHH:0:object:t:var=0.9985023320688509, LHT:1:object:t:d=0.9839074411531378, LHH:1:object:t:mug:d=0.998502443255083, LHT:0:object:t:d=-0.18431880130794306, LHH:0:object:t:mug:d=-0.18431880130794306, LHT:1:object:t:e=-0.10679248815679769, LHH:1:object:t:var=-0.10679248815679769, BB:object:t:state:t=-3.954454561105726E-4, LHT:1:state:t:s=-0.6398705754938278, LHH:1:state:t:yellow:s=-0.6398705754938278, LHH:1:object:t:bowl:d=-0.007665096915185877, LHH:1:object:t:cups:d=-0.0065542655236775545, LHT:1:object:t:p=-0.0629314222354322, LHH:1:object:t:you:p=-0.0629314222354322, LHH:1:object:t:cup:d=-3.756396630819182E-4, LHT:0:state:t:d=-0.8145776389090423, LHH:0:state:t:mug:d=-0.8145776389090423, LHT:1:state:t:e=-0.1747085118964627, LHH:1:state:t:var=-0.1747085118964627, LEX:122=0.09597652188262554, LEX:125=0.06693357806315706, LEX:133=0.06896910689807575, LEX:137=0.005249334977902682, LEX:141=0.04940595130962493, LEX:145=0.07737316655538967, LEX:149=0.04940595130962493, LEX:190=-2.0562459422632915E-4, LEX:210=-0.003518272731221459, LEX:250=-0.31456882902576927, LEX:423=-2.826386939631444E-4, LEX:861=-0.04864321267543152, LEX:863=-0.04864321267543152, LEX:128=-0.3661811561149671, LEX:132=0.06965570465483512, LEX:136=0.03770535431906066, LEX:140=0.026835673253012855, LEX:144=0.039608477096988524, LEX:148=0.026730804570871288, LEX:152=0.053004119106918345, LEX:123=0.04507336428528837, LEX:131=0.0774964010130149, LEX:135=0.03447013420496634, LEX:139=0.0656803577947251, LEX:143=0.05831247798323956, LEX:147=0.06530820657475872, LEX:151=0.043076405617826365, LEX:188=-1.8746409849221098E-4, LEX:208=-0.0037537354841072476, LEX:248=-0.3249072166486886, LEX:341=-0.06293131146558445, LEX:389=-0.006554190538543769, LEX:553=-9.209230356072235E-5, LEX:577=-0.038637269404935226, LEX:589=-0.03878390150392371, LEX:419=0.03126031337758556, LEX:859=0.003437080555325637, LEX:126=0.05540663270340625, LEX:130=-0.28272931001090845, LEX:134=0.10621577012210431, LEX:138=0.029961689337176058, LEX:142=7.627386341934217E-4, LEX:146=0.04924285780470837, LEX:150=7.627386341934217E-4, LEX:154=0.03328415725131008, LEX:129=0.035855023885312455, LEX:153=0.0208937476656638, LEX:124=0.023762881969048327, LEX:127=0.03225289135159934}
1: =========== r:0.0 p:0.0 (epoch:3 file:0 0)
if there exists a cup
(exists $0 (object:t $0 cup:d))
MakeLex parse time: 0.007 sec.
Adding:
a  :- NP/NP : (lambda $0 e $0) : 0.0
cup  :- NP : cup:d : 0.0
Lex Size: 1002
First parse time: 0.01 sec.
WRONG: (object:t cup:d you:p)
Using:
[LexEntries and scores:
if  :- S|NP : (lambda $0 e (object:t $0 you:p)) : 341 : -0.10996012989932549
there exists  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 128 : -1.4605670430394557
a  :- NP/NP : (lambda $0 e $0) : 1001 : 0.0
cup  :- NP : cup:d : 8 : 10.967780247627358
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.08682752456034448
a  :- NP/NP : (lambda $0 e $0) : 1001 : 0.0
cup  :- NP : cup:d : 8 : 10.967780247627358
]
Scale: 0.998731610854215
Update:
{LHT:0:object:t:e=0.9984063108660051, LHH:0:object:t:var=0.9984063108660051, LHT:1:object:t:d=0.9112875606439639, LHH:1:object:t:cup:d=0.9959990513125616, LHT:0:object:t:d=-0.5246414846902819, LHH:0:object:t:cup:d=-0.5246414846902819, LHT:1:object:t:e=-0.32005741476995436, LHH:1:object:t:var=-0.32005741476995436, BB:object:t:state:t=-5.210076144081459E-4, LHT:1:state:t:s=-0.2085441107315173, LHH:1:state:t:yellow:s=-0.2085441107315173, LHH:1:object:t:bowl:d=-0.045700584616270905, LHH:1:object:t:cups:d=-0.03901090605232691, LHT:1:object:t:p=-0.11746531969828644, LHH:1:object:t:you:p=-0.11746531969828644, LHT:0:state:t:d=-0.47428915296994933, LHH:0:state:t:cup:d=-0.47428915296994933, LHT:1:state:t:e=-0.2657453622139584, LHH:1:state:t:var=-0.2657453622139584, LEX:122=0.08848541962303302, LEX:125=0.07780004560348165, LEX:133=0.08566941413798729, LEX:137=-0.027086947131172576, LEX:141=0.021199460001426904, LEX:145=0.06987152847881127, LEX:149=0.021199460001426904, LEX:190=-2.808334963573261E-4, LEX:210=-0.02280566438373102, LEX:250=-0.10720871069987696, LEX:423=-0.0018514663924235363, LEX:861=-0.07280820647668902, LEX:863=-0.07280820647668902, LEX:128=-0.2611200792074819, LEX:132=0.08651549903501607, LEX:136=0.015141839655790348, LEX:140=-0.030785338230210242, LEX:144=0.019221474902706374, LEX:148=-0.03072071714378256, LEX:152=0.05471672542977811, LEX:20=-0.0015814642842174862, LEX:123=0.042910824262433055, LEX:131=0.07891952834562464, LEX:135=0.0014452308312031196, LEX:139=0.029553267503815744, LEX:143=0.04425579369109251, LEX:147=0.029069626382771708, LEX:151=0.0492822298830993, LEX:188=-2.355359304352685E-4, LEX:208=-0.022378550644236633, LEX:248=-0.1008187165085196, LEX:341=-0.11746172537302121, LEX:389=-0.039007988738546454, LEX:553=-5.550698381851626E-4, LEX:577=-0.05994981155569377, LEX:589=-0.06017481361359912, LEX:419=0.04305377887108168, LEX:859=-0.023153046832781552, LEX:126=0.056600170543433546, LEX:130=-0.10869066242503118, LEX:134=0.14402002900189398, LEX:138=0.021416990045581893, LEX:142=-0.051608746475262146, LEX:146=-0.0018386347467478803, LEX:150=-0.051608746475262146, LEX:154=0.02894574437315146, LEX:1001=0.0015889163095327485, LEX:8=0.0015807794573986231, LEX:129=0.02346342266301101, LEX:153=0.022996817265011942, LEX:124=0.021323171540338998, LEX:127=0.01934652366050616}
2: =========== r:0.0 p:0.0 (epoch:3 file:0 0)
if there exists a cup and there exists a cup
(and (exists $0 (object:t $0 cup:d)))
MakeLex parse time: 0.015 sec.
Adding:
if there exists a cup and there exists a  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
cup  :- NP : cup:d : 0.0
Lex Size: 1003
First parse time: 0.04 sec.
WRONG: (and (object:t cup:d bowl:d) (exists $0 (object:t cup:d $0)))
Using:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 bowl:d)) : 210 : -0.3705581390061644
exists  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 130 : -1.3387544478160496
a  :- NP/NP : (lambda $0 e $0) : 1001 : 0.0015889163095327485
cup  :- NP : cup:d : 8 : 10.969361027084757
and  :- S/NP\S/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 ($0 $3 $2)))))) : 930 : -0.5029165252630613
there exists  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 144 : -0.5459993421963654
]
Second parse time: 0.016 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 4.591637834970698
]
Scale: 0.998721636305529
Update:
{LHT:0:object:t:e=0.7292409929873868, LHH:0:object:t:var=0.7292409929873868, LHT:1:object:t:d=0.5998347752755617, LHH:1:object:t:cup:d=0.7009804451315749, LHT:0:object:t:d=-1.374357746822471, LHH:0:object:t:cup:d=-1.374357746822471, LHT:1:object:t:e=-1.2413967722455812, LHH:1:object:t:var=-1.2413967722455812, BB:exists:exists=-0.8490162347601315, BB:object:t:object:t=-0.0013830784359013068, LHT:1:object:t:f=-0.0013793537160395695, LHH:1:object:t:tv:f=-0.0013793537160395695, BB:exists:object:t=-0.12619855471987135, BB:object:t:state:t=-0.001086045809599764, LHT:0:state:t:e=-6.375843723597005E-5, LHH:0:state:t:var=-6.375843723597005E-5, LHT:1:state:t:e=-0.3272398290382197, LHH:1:state:t:var=-0.3272398290382197, BB:exists:state:t=-0.0011092074790413319, LHT:1:state:t:s=-0.00430115965063734, LHH:1:state:t:yellow:s=-0.00430115965063734, LHH:1:object:t:bowl:d=-0.0987897309629997, LHH:1:object:t:cups:d=-0.0023559388930135877, LHT:1:object:t:p=-0.002175403149025996, LHH:1:object:t:you:p=-0.002175403149025996, LHT:0:state:t:d=-0.33147723025162096, LHH:0:state:t:cup:d=-0.33147723025162096, BB:has:t:object:t=-0.002424876864241361, LHT:1:has:t:e=-0.002424876864241361, LHT:0:has:t:d=-0.0024248504222034927, LHH:0:has:t:cup:d=-0.0024248504222034927, LHH:1:has:t:var=-0.0024247738571009487, LEX:420=-7.838786426085905E-4, LEX:155=-0.023288220696434436, LEX:122=-0.009076560091761846, LEX:159=-0.0024253455247767006, LEX:125=-0.01322505633567621, LEX:129=-0.0020223776692269257, LEX:133=-0.019982033471133094, LEX:137=-0.05056387373216897, LEX:141=-0.04031316004200352, LEX:145=-0.02290224152304548, LEX:149=-0.04031316004200352, LEX:153=-0.002290614626269503, LEX:190=-2.95431491790021E-4, LEX:200=-1.5974401746715722E-5, LEX:210=-0.05332941423640494, LEX:250=-0.002058473401824784, LEX:423=-0.023587570022819658, LEX:861=-0.08828966775215134, LEX:863=-0.08828966775215134, LEX:124=-0.007443884837211274, LEX:128=-0.058839095355744955, LEX:132=-0.02325637352851042, LEX:136=-0.37706526316577865, LEX:140=-0.13292920838291356, LEX:144=-0.4062831145571005, LEX:148=-0.13248446631391544, LEX:152=-0.23229886743642217, LEX:20=-0.0405272802425452, LEX:123=-0.029765192343239686, LEX:127=-0.0014258920085649161, LEX:131=-0.08880992470106047, LEX:135=-0.051322207356220874, LEX:139=-0.05731762076956674, LEX:143=-0.03953786055508354, LEX:147=-0.05743665843471295, LEX:151=-0.005216470081346281, LEX:188=-2.1275778756554666E-4, LEX:198=-3.2094014205053124E-5, LEX:208=-0.04495130237462832, LEX:248=-0.0016727546099598153, LEX:325=-3.142613626651172E-5, LEX:341=-0.0021371259422846554, LEX:389=-0.0023228081540883684, LEX:553=-0.0060796525675605876, LEX:577=-0.07519228066454739, LEX:589=-0.07545263436304617, LEX:419=-0.025591783799095682, LEX:859=-0.11818728092600263, LEX:126=-0.009400498405450678, LEX:130=-0.08130227192290658, LEX:134=-0.037080200512918354, LEX:138=-0.020301481411530098, LEX:142=-0.12860282779415486, LEX:146=-0.1423639325209073, LEX:150=-0.12860282779415486, LEX:154=-0.04361302289943228, LEX:467=-0.0024247738571009487, LEX:1001=-1.9304166166882681, LEX:8=-1.9328429186482503, LEX:918=-0.04279561606359866, LEX:930=-0.5699922132921147, LEX:942=-0.36048080071353994, LEX:978=-8.0527346008563E-4, LEX:988=-5.7408025595394E-4, LEX:82=0.998721636305529}
3: =========== r:0.0 p:0.0 (epoch:3 file:0 0)
if there exists an empty kettle
(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s)))
MakeLex parse time: 0.005 sec.
Adding:
if there exists an  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $1) (state:t $2 $0))))) : 0.06044
empty  :- NP : empty:s : 0.0
kettle  :- NP : kettle:d : 0.0
Lex Size: 1003
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if there exists an  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $1) (state:t $2 $0))))) : 421 : 0.1250682120882169
empty  :- NP : empty:s : 53 : 10.0
kettle  :- NP : kettle:d : 11 : 10.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if there exists an  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $1) (state:t $2 $0))))) : 421 : 0.1250682120882169
empty  :- NP : empty:s : 53 : 10.0
kettle  :- NP : kettle:d : 11 : 10.0
]
Scale: 0.9987116619560766
Update:
{BB:object:t:state:t=0.012554454815969387, LHT:0:object:t:e=-0.011954511969138881, LHH:0:object:t:var=-0.011954511969138881, LHT:0:state:t:e=0.015383882584644697, LHH:0:state:t:var=0.015383882584644697, LHT:1:state:t:s=0.015383882584644697, LHH:1:state:t:empty:s=0.015383882584644697, BB:object:t:object:t=-0.012554454815969196, LHT:1:object:t:s=-0.011954511969139018, LHH:1:object:t:empty:s=-0.011954511969139018, LHT:0:object:t:s=-5.999428468301783E-4, LHH:0:object:t:empty:s=-5.999428468301783E-4, LHT:1:object:t:e=-5.999428468301783E-4, LHH:1:object:t:var=-5.999428468301783E-4, LHT:0:state:t:s=-0.002829427768675405, LHH:0:state:t:empty:s=-0.002829427768675405, LHT:1:state:t:e=-0.002829427768675405, LHH:1:state:t:var=-0.002829427768675405, LEX:421=0.005307710410906422, LEX:141=-0.006277227407984599, LEX:149=-0.006277227407984599, LEX:861=0.003623261505841819, LEX:863=0.003623261505841819, LEX:862=-0.002653965902142874, LEX:864=-0.002653965902142874}
4: =========== r:0.25 p:0.25 (epoch:3 file:0 0)
if there exists a green glass
(exists $0 (and (object:t $0 glass:d) (state:t $0 green:s)))
MakeLex parse time: 0.006 sec.
Adding:
exists  :- S/NP/NP\(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($0 $4 $3) ($1 $4 $2))))))) : 0.40293333333333337
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
exists  :- S/NP/NP\(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($0 $4 $3) ($1 $2 $4))))))) : 0.40293333333333337
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1005
First parse time: 0.009 sec.
WRONG: (exists $0 (and (has:t glass:d $0) (state:t $0 green:s)))
Using:
[LexEntries and scores:
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 861 : -0.04224924730098406
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 863 : -0.04224924730098406
exists  :- S/NP/NP\(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($0 $4 $3) ($1 $4 $2))))))) : 1003 : 0.40293333333333337
exists  :- S/NP/NP\(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($0 $4 $3) ($1 $2 $4))))))) : 1004 : 0.40293333333333337
a  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 $0))) : 467 : 0.07252863230669454
green  :- NP : green:s : 51 : 10.0
glass  :- NP : glass:d : 9 : 10.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 861 : -0.04224924730098406
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 863 : -0.04224924730098406
exists  :- S/NP/NP\(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($0 $4 $3) ($1 $4 $2))))))) : 1003 : 0.40293333333333337
exists  :- S/NP/NP\(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($0 $4 $3) ($1 $2 $4))))))) : 1004 : 0.40293333333333337
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.034863268483854355
green  :- NP : green:s : 51 : 10.0
glass  :- NP : glass:d : 9 : 10.0
]
Scale: 0.9987016878058523
Update:
{BB:object:t:state:t=0.9894818363098946, LHT:0:object:t:e=0.9784278816787584, LHH:0:object:t:var=0.9784278816787584, LHT:1:object:t:d=0.9887420160454361, LHH:1:object:t:glass:d=0.9887420160454361, LHT:0:state:t:e=0.011613861496428747, LHH:0:state:t:var=0.011613861496428747, LHT:1:state:t:s=0.011613861496428747, LHH:1:state:t:green:s=0.011613861496428747, LHT:0:object:t:d=-0.001118363085102574, LHH:0:object:t:glass:d=-0.001118363085102574, LHT:1:object:t:s=-0.011413167007249592, LHH:1:object:t:green:s=-0.011413167007249592, BB:object:t:object:t=-8.141907130026908E-5, LHT:0:object:t:s=-1.9294691520084587E-4, LHH:0:object:t:green:s=-1.9294691520084587E-4, LHT:1:object:t:e=-2.1218408315833344E-4, LHH:1:object:t:var=-2.1218408315833344E-4, BB:has:t:object:t=-0.010421553599758559, LHT:0:has:t:e=-6.736230268692241E-4, LHH:0:has:t:var=-6.736230268692241E-4, LHT:1:has:t:e=-0.9882972759872027, LHH:1:has:t:the=-6.777316376889522E-4, LHT:0:has:t:d=-0.9876236529603336, LHH:0:has:t:glass:d=-0.9876236529603336, LHH:1:has:t:var=-0.9876195443495138, BB:has:t:state:t=-0.9778757223874442, LEX:422=0.17016038418143772, LEX:125=-4.710387555033942E-4, LEX:141=-0.005251439697242812, LEX:149=-0.005251439697242812, LEX:861=-0.07928088931902888, LEX:863=-0.07928088931902888, LEX:152=-4.409315228979102E-4, LEX:865=0.17373384271890896, LEX:866=0.17373384271890896, LEX:123=-5.079485114083053E-4, LEX:131=-1.2415398447991092E-4, LEX:419=-1.9126424956351023E-4, LEX:154=-6.623030050669043E-4, LEX:1003=-0.2582661717351806, LEX:1004=-0.2582661717351806, LEX:431=-6.73623026869224E-4, LEX:467=-0.9876195443495139, LEX:479=0.47178006107397913, LEX:491=-1.5128557137759372E-5, LEX:1001=-0.0011032345279648147}
5: =========== r:0.2 p:0.2 (epoch:3 file:0 0)
if there exists a cup that contains syrup
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
MakeLex parse time: 0.031 sec.
Adding:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 0.40293333333333337
syrup  :- NP : syrup:q : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
syrup  :- NP : syrup:q : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
Lex Size: 1005
First parse time: 0.028 sec.
WRONG: (exists $0 (and (object:t $0 bowl:d) (has:t $0 syrup:q)))
Using:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 bowl:d)) : 210 : -0.4238875532425693
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 1.0633524000019834
a cup that  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 $0))) : 471 : 0.08613313685166127
contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 448 : 0.03795805030671754
syrup  :- NP : syrup:q : 33 : 10.0
]
Second parse time: 0.023 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 0.800285728440642
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 1.0633524000019834
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 0.18672681901378863
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 0.023986709855234843
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 0.10896869852424754
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 0.8767349026595008
syrup  :- NP : syrup:q : 33 : 10.0
]
Scale: 0.9986917138548502
Update:
{BB:has:t:object:t=0.6680110356660767, LHT:0:object:t:e=0.3051540065503578, LHH:0:object:t:var=0.34005293272688053, LHT:1:object:t:d=0.10517251522935168, LHH:1:object:t:cup:d=0.5392815228799397, LHT:0:has:t:e=0.6420460623268041, LHH:0:has:t:var=0.6684551061470968, LHT:1:has:t:e=0.8152912214657602, LHH:1:has:t:the=0.8379145952236141, LHT:1:object:t:q=0.2129477420489774, LHH:1:object:t:syrup:q=0.2129477420489774, LHT:1:object:t:e=-0.014121656305688417, LHH:1:object:t:the=-0.011625574572905934, LHH:0:object:t:the=-0.03489892617652374, LHH:1:object:t:var=-0.0024960817327824873, LHT:0:object:t:q=-0.001217733114310399, LHH:0:object:t:syrup:q=-0.001217733114310399, LHT:0:has:t:q=-0.04225155589782666, LHH:0:has:t:syrup:q=-0.04225155589782666, BB:object:t:state:t=-0.08107315823041308, LHT:0:state:t:e=-0.10356932472002568, LHH:0:state:t:var=-0.1033174007723714, LHT:1:state:t:s=-0.10295066806844558, LHH:1:state:t:yellow:s=-0.10295066806844558, BB:has:t:state:t=-0.040180931899148696, BB:object:t:object:t=-0.5334545647932787, LHH:1:object:t:bowl:d=-0.4339043686927991, BB:exists:object:t=-0.0011071561285778298, LHH:1:object:t:cups:d=-2.0463895778930584E-4, BB:exists:has:t=-5.521459816086734E-4, LHT:1:object:t:p=-6.70957995999864E-5, LHH:1:object:t:you:p=-6.70957995999864E-5, LHH:1:has:t:var=-0.06864134738157758, LHT:1:has:t:q=-0.21549671503678286, LHH:1:has:t:syrup:q=-0.16947874141305927, LHH:0:state:t:the=-2.519239476542854E-4, LHT:1:state:t:e=-7.652593272273479E-4, LHH:1:state:t:the=-2.8196873134471017E-4, LHH:1:state:t:var=-4.832905958826378E-4, LHH:0:has:t:the=-0.02640904382029277, LHT:0:state:t:d=-1.4660267564721717E-4, LHH:0:state:t:cup:d=-1.4660267564721717E-4, LEX:158=4.385680442132176E-4, LEX:160=4.3344366870596494E-4, LEX:162=7.308768447366066E-4, LEX:164=0.0073503889570484615, LEX:122=-1.4130452216153564E-4, LEX:159=-0.005861144447306396, LEX:161=0.09595283432482754, LEX:163=0.15628947461178172, LEX:429=-0.01532651188115116, LEX:435=0.008350365112666961, LEX:441=-0.06624754255207396, LEX:447=0.008343550345921743, LEX:453=-0.08790758854216334, LEX:459=0.013017784698042783, LEX:465=0.00798865774056367, LEX:471=-0.0785004195042794, LEX:477=0.008657198229464955, LEX:483=-0.013580984254638098, LEX:489=0.031781504799572244, LEX:495=-0.013611399585968159, LEX:501=0.0364130394362193, LEX:426=0.009909255484098168, LEX:432=-0.029446101274988864, LEX:438=0.010186007812057887, LEX:444=-0.041874132464840466, LEX:450=0.02688295060480977, LEX:456=0.010277797808178541, LEX:462=-5.660155024736153E-4, LEX:468=0.018181714373764552, LEX:474=-0.01453581913905124, LEX:480=0.008916195427417476, LEX:486=-0.015033650132668757, LEX:492=0.006205089457870135, LEX:498=-0.04560326656201877, LEX:125=-0.014360738695180586, LEX:129=-0.001256445502617303, LEX:133=-1.6086751704744414E-4, LEX:137=-2.4718190827643837E-5, LEX:141=-0.01827459379645706, LEX:145=-1.1000936506775429E-4, LEX:149=-0.01827459379645706, LEX:153=-0.001611313590320473, LEX:190=-0.005980124540245527, LEX:200=-1.5161379091685016E-5, LEX:210=-0.427549796757663, LEX:220=-1.1839040867083895E-5, LEX:240=-3.4794150143878226E-5, LEX:250=-0.09684329828604184, LEX:260=-2.4514305652025974E-4, LEX:423=0.36373240979582894, LEX:861=-1.360446439763114E-4, LEX:863=-1.360446439763114E-4, LEX:124=-3.228813672410172E-5, LEX:128=-2.1086987455488473E-4, LEX:132=-1.5495813027823882E-4, LEX:136=-4.1922288862220726E-5, LEX:140=-1.4995048862778863E-4, LEX:144=-4.570926884200999E-5, LEX:148=-1.4934587639408016E-4, LEX:152=-0.01637190176724534, LEX:865=-0.0020670889060982883, LEX:866=-0.0020670889060982883, LEX:20=-0.017302288427788838, LEX:427=-0.01337012775703459, LEX:433=0.008350723768253281, LEX:439=-0.028727509060799166, LEX:445=0.008344187050862348, LEX:451=-0.029156360796177644, LEX:457=0.08719728485063923, LEX:463=0.00798865774056367, LEX:469=-0.08134776392764474, LEX:475=0.008670862189907643, LEX:481=-0.01358031848951689, LEX:487=0.018490096201468416, LEX:493=-0.0136096072875696, LEX:499=0.016311827989300393, LEX:867=0.07686282023769551, LEX:428=0.009909254893418307, LEX:434=-0.022120840666902317, LEX:440=0.010186004469316626, LEX:446=-0.07476437983828538, LEX:452=0.026864965831005765, LEX:458=0.03149134138003862, LEX:464=0.00798865774056367, LEX:470=-0.06548332737127811, LEX:476=-0.014535818760022318, LEX:482=-0.0016785390068316238, LEX:488=-0.01503358012715951, LEX:494=0.0043272398563561475, LEX:500=-0.045172037539893815, LEX:123=-0.01583732627377103, LEX:127=-2.1090678768964923E-5, LEX:131=-0.005170933270776918, LEX:135=-4.172109802647737E-5, LEX:139=-9.139294678565661E-5, LEX:143=-7.522737917220004E-5, LEX:147=-9.099308786800306E-5, LEX:151=-0.003323875713462996, LEX:198=-2.751152120765823E-5, LEX:208=-3.1956881560083054E-5, LEX:238=-6.216149785332451E-5, LEX:248=-7.251595212109385E-5, LEX:333=-1.3895248657652836E-4, LEX:341=-1.1887324471732782E-5, LEX:365=-2.2396050407501975E-5, LEX:381=-3.18435180587321E-5, LEX:389=-6.338159975939672E-5, LEX:547=-1.3080090028213387E-4, LEX:571=-1.1702530397058472E-5, LEX:577=-5.8292959887415704E-5, LEX:589=-5.8205182530722175E-5, LEX:419=-0.007927312468251591, LEX:859=-3.062534361761196E-4, LEX:126=-9.55751168182897E-5, LEX:130=-1.8032720935366904E-4, LEX:134=-2.5832599631196723E-4, LEX:138=-4.692944152850975E-5, LEX:142=-1.2743601985483013E-4, LEX:146=-9.149489141557261E-5, LEX:150=-1.2743601985483013E-4, LEX:154=-0.024058843346032834, LEX:424=-0.16797391017877258, LEX:1003=-0.016216113514480254, LEX:1004=-0.016216113514480254, LEX:425=-0.013367961446234252, LEX:431=0.008139380636415146, LEX:437=-0.028688359080534527, LEX:443=0.008337968979631103, LEX:449=-0.029071427848196982, LEX:455=0.3256167885951077, LEX:461=0.00798865774056367, LEX:467=-0.04957872909903026, LEX:473=0.00867086753933642, LEX:479=-0.027609418509969834, LEX:485=0.01847762796288325, LEX:491=-0.013624741870258243, LEX:497=0.015784730939973204, LEX:1001=-0.033531820771472244, LEX:8=-0.05409977830452513, LEX:869=0.2271463181306922, LEX:868=0.27932726301030447, LEX:430=0.009881981382143218, LEX:436=-0.02251044276141772, LEX:442=0.008041914127007638, LEX:448=-0.07741029183368485, LEX:454=0.014174684805981264, LEX:460=0.009273991825734818, LEX:466=0.00798865774056367, LEX:472=0.012571611027495096, LEX:478=-0.014525899849168923, LEX:484=-0.002085303275461751, LEX:490=0.10328786181657608, LEX:496=0.004179331829080231, LEX:502=0.14269964045532876}
6: =========== r:0.16666666666666666 p:0.16666666666666666 (epoch:3 file:0 0)
if there exists a cup that contains coke
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 coke:q)))))
MakeLex parse time: 0.022 sec.
Adding:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 0.40293333333333337
coke  :- NP : coke:q : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
coke  :- NP : coke:q : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
Lex Size: 1005
First parse time: 0.028 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 coke:q)))))
Using:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 1.164018138236471
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.8953784898232108
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 0.5123436076088963
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 0.251133027985927
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 0.38829596153455204
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.0194345431148295
coke  :- NP : coke:q : 34 : 10.0
]
Second parse time: 0.022 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 1.164018138236471
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.8953784898232108
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 0.5123436076088963
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 0.251133027985927
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 0.38829596153455204
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.0194345431148295
coke  :- NP : coke:q : 34 : 10.0
]
Scale: 0.998681740103064
Update:
{BB:has:t:object:t=0.12252633519317732, LHT:0:object:t:e=0.07036262446308797, LHH:0:object:t:var=0.07578400688593252, LHT:1:object:t:d=0.024912983518541133, LHH:1:object:t:cup:d=0.17919968270317965, LHT:0:has:t:e=-0.143766753572718, LHH:0:has:t:var=-0.12154970931059843, LHT:1:has:t:e=-0.09489307411350673, LHH:1:has:t:the=-0.07584189284142874, LHT:1:object:t:q=0.05240636475305598, LHH:1:object:t:coke:q=0.05240636475305598, LHT:1:object:t:e=-0.007146092134265781, LHH:1:object:t:the=-0.005974746721357566, LHH:0:object:t:the=-0.00542138242284473, LHH:1:object:t:var=-0.001171345412908216, LHT:0:object:t:q=-2.0413042358091192E-4, LHH:0:object:t:coke:q=-2.0413042358091192E-4, LHT:0:has:t:q=-0.006450796932911932, LHH:0:has:t:coke:q=-0.006450796932911932, BB:object:t:state:t=-0.007048066297923592, LHT:0:state:t:e=-0.0253869947799849, LHH:0:state:t:var=-0.025373072643705075, LHT:1:state:t:s=-0.02524950325493595, LHH:1:state:t:yellow:s=-0.02524950325493595, BB:has:t:state:t=-0.024773088782421644, BB:object:t:object:t=-0.0941859868556794, LHH:1:object:t:bowl:d=-0.15424039796132244, BB:exists:object:t=-1.2605755729783332E-4, LHH:1:object:t:cups:d=-4.630122331689263E-5, BB:exists:has:t=-9.512361187711015E-4, LHT:1:object:t:p=-1.575275231067998E-5, LHH:1:object:t:you:p=-1.575275231067998E-5, LHH:1:has:t:var=-0.0286241760047717, LHT:1:has:t:q=-0.0553244763921243, LHH:1:has:t:coke:q=-0.04575148165943072, LHH:0:state:t:the=-1.3922136279819069E-5, LHT:1:state:t:e=-1.6108172991976356E-4, LHH:1:state:t:the=-2.1100743302094338E-5, LHH:1:state:t:var=-1.3998098661766923E-4, LHH:0:has:t:the=-0.022217044262119744, LHT:0:state:t:d=-2.359020487081128E-5, LHH:0:state:t:cup:d=-2.359020487081128E-5, LEX:158=1.3069709826294212E-4, LEX:160=1.2840445605187843E-4, LEX:162=2.3980790049512525E-4, LEX:164=0.002206918804990846, LEX:122=-1.878044423805558E-5, LEX:159=-0.0011425511464484641, LEX:161=0.0341257240983291, LEX:163=0.05245015220854824, LEX:429=-0.0013945053221137576, LEX:435=-0.0014767375295530532, LEX:441=-0.009983979784073498, LEX:447=-0.001596744999674723, LEX:453=-0.013483525288763357, LEX:459=0.004006789998374526, LEX:465=0.002419337604258981, LEX:471=-0.019176918884533413, LEX:477=-0.0017208887645238156, LEX:483=-0.0010022411258711634, LEX:489=0.004590501948133779, LEX:495=-8.354323894841587E-4, LEX:501=0.008087995785180766, LEX:426=-0.0013408289729693282, LEX:432=-0.0030730585040673482, LEX:438=-0.0014627087487800567, LEX:444=-0.004614219263277042, LEX:450=-0.004936135213924772, LEX:456=0.0043245725038495875, LEX:462=0.0011040463979947821, LEX:468=0.007230418731821707, LEX:474=-0.001161256793084627, LEX:480=-0.0010757435930627485, LEX:486=-0.0011224733206927605, LEX:492=-0.005822367258008815, LEX:498=-0.003155713580728246, LEX:125=-0.002225089846950211, LEX:129=-9.167269995018763E-4, LEX:133=-2.137457425992487E-5, LEX:141=-0.013976547289623173, LEX:145=-1.4556197680451209E-5, LEX:149=-0.013976547289623173, LEX:153=-2.1294582829379426E-4, LEX:190=-0.002144412886426724, LEX:210=-0.15196562677555855, LEX:250=-0.02309174902943609, LEX:260=-1.1049811946564588E-4, LEX:423=0.126983861044357, LEX:861=-1.5590371916778907E-5, LEX:863=-1.5590371916778907E-5, LEX:128=-1.8404741443375275E-5, LEX:132=-2.0527873786236378E-5, LEX:140=-1.5705954625605663E-5, LEX:148=-1.5640704473899943E-5, LEX:152=-0.0025021071606589227, LEX:865=-8.71769102552687E-4, LEX:866=-8.71769102552687E-4, LEX:20=-0.002782107934569992, LEX:427=-7.433661937736728E-4, LEX:433=-0.001476787248685659, LEX:439=-0.0016264893359165331, LEX:445=-0.001591302750515199, LEX:451=-0.0017428989251762675, LEX:457=0.01909266839455975, LEX:463=0.002419337604258981, LEX:469=-0.02016587811303334, LEX:475=-0.0017147210807843068, LEX:481=-0.0010024519659792945, LEX:487=-0.0037202828071162654, LEX:493=-8.421767690347027E-4, LEX:499=-0.003751863780679213, LEX:867=0.016084004135461537, LEX:428=-0.0013408459576180597, LEX:434=-0.0017848663535748252, LEX:440=-0.0014629050537123196, LEX:446=-0.009070033095686601, LEX:452=-0.0051984995086091675, LEX:458=0.014971776451302137, LEX:464=0.002419337604258981, LEX:470=-0.031210707894180376, LEX:476=-0.0011612395605933796, LEX:482=-0.0035922736674743427, LEX:488=-0.001122278231516223, LEX:494=-0.01126945465308007, LEX:500=-0.0030138538113971152, LEX:123=-0.002464613505824628, LEX:131=-7.734888528524248E-4, LEX:139=-1.2132262357709715E-5, LEX:147=-1.2079102677534297E-5, LEX:151=-4.405891663169202E-4, LEX:238=-1.1344645733303402E-5, LEX:333=-3.912565715760978E-5, LEX:547=-1.2236731030800517E-5, LEX:419=-0.0012175938179659854, LEX:859=-2.1828996350418933E-5, LEX:126=-1.2530076487477576E-5, LEX:130=-1.650234420012474E-5, LEX:134=-3.4151798083257506E-5, LEX:142=-1.2228534709509116E-5, LEX:146=-1.2139028497432599E-5, LEX:150=-1.2228534709509116E-5, LEX:154=-0.0036592707690559735, LEX:424=-0.05123441078414578, LEX:1003=-0.01310814002427776, LEX:1004=-0.01310814002427776, LEX:425=-7.426924299883191E-4, LEX:431=-0.0031984539311137703, LEX:437=-0.0016178141176925692, LEX:443=-0.001549589214473957, LEX:449=-0.0017270376550681725, LEX:455=0.10333156713836997, LEX:461=0.0023987292361980933, LEX:467=-0.027845019165254357, LEX:473=-0.001714715088738269, LEX:479=-0.003879003685471224, LEX:485=-0.0037289109625647655, LEX:491=-9.443660191635677E-4, LEX:497=-0.003647946376127707, LEX:1001=-0.004882373618175003, LEX:8=-0.030587618078616593, LEX:869=0.07811791746371592, LEX:868=0.08071782221053499, LEX:430=-0.001368772252512635, LEX:436=-0.0018273703295009075, LEX:442=-0.08583360951484273, LEX:448=-0.009424170744055695, LEX:454=-0.05980683414841108, LEX:460=0.0028517657705631715, LEX:466=0.002419337604258981, LEX:472=0.0037063802620935725, LEX:478=-0.001219765227427252, LEX:484=-0.0036803626329115096, LEX:490=0.07689664904183552, LEX:496=-0.011707527256930613, LEX:502=0.1542297570211947}
7: =========== r:0.2857142857142857 p:0.2857142857142857 (epoch:3 file:0 0)
if there is a red glass
(exists $0 (and (object:t $0 glass:d) (state:t $0 red:s)))
MakeLex parse time: 0.005 sec.
Adding:
if there is  :- S/NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and ($0 $3 $2) (state:t $3 $1)))))) : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1006
First parse time: 0.007 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (state:t $0 red:s)))
Using:
[LexEntries and scores:
if there is  :- S/NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and ($0 $3 $2) (state:t $3 $1)))))) : 1005 : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.47515490736239246
red  :- NP : red:s : 47 : 10.0
glass  :- NP : glass:d : 9 : 10.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if there is  :- S/NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and ($0 $3 $2) (state:t $3 $1)))))) : 1005 : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.47515490736239246
red  :- NP : red:s : 47 : 10.0
glass  :- NP : glass:d : 9 : 10.0
]
Scale: 0.9986717665504878
Update:
{BB:object:t:state:t=0.29802268148562167, LHT:0:object:t:e=-0.001976965890823859, LHH:0:object:t:var=-0.001976965890823859, LHT:1:object:t:d=0.08758217893701419, LHH:1:object:t:glass:d=0.08779320190333292, LHT:0:state:t:e=0.17558262119309626, LHH:0:state:t:var=0.17558262119309626, LHT:1:state:t:s=0.09144664014936658, LHH:1:state:t:red:s=0.09144664014936658, LHT:0:object:t:d=-2.153531344794288E-4, LHH:0:object:t:glass:d=-2.153531344794288E-4, LHH:1:object:t:cup:d=-2.1102296631874358E-4, LHT:0:state:t:d=-0.08413598104372992, LHH:0:state:t:glass:d=-0.08413598104372992, BB:object:t:object:t=-0.08991002109672053, LHT:1:object:t:p=-1.861874391004022E-4, LHH:1:object:t:you:p=-1.861874391004022E-4, LHT:1:object:t:s=-0.08957970796072956, LHH:1:object:t:red:s=-0.08957970796072956, LHT:0:object:t:s=-3.293791758658783E-4, LHH:0:object:t:red:s=-3.293791758658783E-4, LHT:1:object:t:e=-3.3798173835344805E-4, LHH:1:object:t:var=-3.3798173835344805E-4, LHT:0:state:t:s=-0.0015375530127711562, LHH:0:state:t:red:s=-0.0015375530127711562, LHT:1:state:t:e=-0.0015375530127711562, LHH:1:state:t:var=-0.0015375530127711562, BB:has:t:state:t=-0.12437575767084062, LHT:0:has:t:e=-0.1207228669793982, LHH:0:has:t:var=-0.1207228669793982, LHT:1:has:t:e=-0.12437575767084062, LHH:1:has:t:the=-0.12072713937372509, LHT:0:has:t:d=-0.003652890691442413, LHH:0:has:t:glass:d=-0.003652890691442413, LHH:1:has:t:var=-0.0036486182971155285, LEX:503=0.07147824612132214, LEX:1005=-0.01090317334585742, LEX:125=-0.05976279765713919, LEX:141=-0.044954543568297714, LEX:149=-0.044954543568297714, LEX:861=0.056733395950463, LEX:863=0.056733395950463, LEX:870=0.0117788523821653, LEX:871=0.0117788523821653, LEX:123=-0.008408977928557451, LEX:131=-0.01577801801893288, LEX:365=-1.8618743910040215E-4, LEX:419=-0.024373183386590738, LEX:546=-2.1102296631874353E-4, LEX:600=-0.0839249580774112, LEX:431=-0.12072286697939819, LEX:467=-0.0036486182971155285, LEX:479=0.1134769144931439, LEX:1001=-0.08413598104372995, LEX:165=1.0665004674886065E-5}
8: =========== r:0.375 p:0.375 (epoch:3 file:0 0)
if there is a yellow bowl
(exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s)))
MakeLex parse time: 0.01 sec.
Adding:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 0.0
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 0.0
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
Lex Size: 1010
First parse time: 0.026 sec.
WRONG: (object:t yellow:s cup:d)
Using:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 1.291001999280828
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -0.013438440351496113
a  :- NP/NP : (lambda $0 e $0) : 1001 : -2.0524811103400773
yellow  :- NP : yellow:s : 50 : 10.048879631016199
bowl  :- S\S : (lambda $0 t $0) : 181 : 0.10092002361313046
]
Second parse time: 0.01 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.0
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1008 : 0.0
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.0
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 1009 : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.5886318218555364
yellow  :- NP : yellow:s : 50 : 10.048879631016199
bowl  :- NP : bowl:d : 227 : 0.23147039397701263
]
Scale: 0.998661793197116
Update:
{BB:object:t:state:t=0.9200738627082476, LHT:0:object:t:e=0.7869657420715833, LHH:0:object:t:var=0.7869657420715833, LHT:1:object:t:d=0.5267088343770483, LHH:1:object:t:bowl:d=0.8891644974633365, LHT:0:state:t:e=0.6846321674406166, LHH:0:state:t:var=0.6846321674406166, LHT:1:state:t:s=0.6435851533156712, LHH:1:state:t:yellow:s=0.6435851533156712, LHT:1:object:t:e=-7.15588222539345E-4, LHH:1:object:t:var=-7.15588222539345E-4, BB:exists:state:t=-6.92208519530904E-4, LHH:1:object:t:cup:d=-0.36179562038598917, LHT:1:state:t:e=-0.011875533108865348, LHH:1:state:t:var=-0.011875533108865348, LHT:0:object:t:d=-2.9245997047228998E-5, LHH:0:object:t:bowl:d=-2.9245997047228998E-5, BB:object:t:object:t=-0.015484590233572975, LHT:0:object:t:s=-0.5216728742277581, LHH:0:object:t:yellow:s=-0.5216728742277581, LHT:1:object:t:f=-0.12835973086215394, LHH:1:object:t:tv:f=-0.12835973086215394, LHT:0:state:t:s=-0.04549480054954365, LHH:0:state:t:yellow:s=-0.04549480054954365, BB:exists:object:t=-7.672039168996617E-4, LHT:0:state:t:d=-0.007427746684267067, LHH:0:state:t:bowl:d=-0.007427746684267067, BB:state:t:state:t=-6.304788109968138E-4, LHT:1:object:t:s=-0.1313642493100717, LHH:1:object:t:yellow:s=-0.1313642493100717, LHT:1:object:t:p=-0.0010056441355052485, LHH:1:object:t:you:p=-0.0010056441355052485, LHH:1:object:t:cups:d=-6.600427002988118E-4, LHT:0:has:t:e=-0.016113534301018185, LHH:0:has:t:var=-0.016113534301018185, LHT:1:has:t:e=-0.02806929568583825, LHH:1:has:t:the=-0.006199394640492142, BB:has:t:state:t=-0.028060205646592777, BB:has:t:object:t=-4.4272558061531616E-5, LHH:1:has:t:var=-0.021869901045346102, LHT:0:has:t:d=-0.004443884356635682, LHH:0:has:t:bowl:d=-0.004443884356635682, LHT:0:has:t:s=-0.007511877028184378, LHH:0:has:t:yellow:s=-0.007511877028184378, LEX:186=-1.622154413745578E-5, LEX:216=-1.2805426507654334E-5, LEX:173=-4.640003271453612E-5, LEX:189=-6.415160029650622E-5, LEX:199=-1.6630757128101135E-5, LEX:168=0.10170177505235098, LEX:184=-1.5891864626770934E-5, LEX:214=-1.3780000136871405E-5, LEX:224=-0.0011759967419665803, LEX:264=0.10287872504041745, LEX:503=0.08249695976290755, LEX:191=-3.4005239668815695E-5, LEX:201=-1.6834353505746324E-5, LEX:166=0.011808877521572888, LEX:182=-7.746170606379147E-5, LEX:212=-1.3847686291570612E-5, LEX:222=-4.1601490115884165E-4, LEX:262=0.01735280675289076, LEX:1005=0.12607339347140534, LEX:177=-2.5384215685819885E-5, LEX:193=-1.2304914163635121E-4, LEX:203=-1.3565877572818532E-5, LEX:223=-3.5094822145735286E-5, LEX:263=-1.0950372577331705E-4, LEX:125=-0.15241512530426304, LEX:129=-0.04307919171775613, LEX:133=-0.0028100168510708312, LEX:137=-0.019057572422998683, LEX:141=-0.03544082880203673, LEX:145=-0.04220573394751188, LEX:149=-0.03544082880203673, LEX:153=-0.03144324993192608, LEX:190=-0.0013962892707010627, LEX:200=-2.2146574675912037E-4, LEX:210=-0.04033192650823604, LEX:220=-3.8206277888682235E-4, LEX:230=0.003758433494977934, LEX:240=0.020720633588922226, LEX:250=-0.009101080951647892, LEX:260=0.016119314729133336, LEX:270=-9.018973971485044E-5, LEX:423=-0.2668406435524827, LEX:861=0.046288218893051854, LEX:863=0.046288218893051854, LEX:1007=0.1082764197216542, LEX:1009=0.10639775344242708, LEX:870=0.05931505282702537, LEX:871=0.05931505282702537, LEX:195=-3.8852993481593514E-5, LEX:205=-5.281770745974503E-5, LEX:245=-1.200517875945692E-5, LEX:265=-3.217082029741715E-5, LEX:123=-0.026583988730715262, LEX:131=-0.0819594296680145, LEX:135=-0.018001067825187882, LEX:143=-0.021742096865565566, LEX:151=-0.007373405594908668, LEX:198=-4.768340659952496E-5, LEX:208=-1.1299910201940028E-5, LEX:238=0.004207010510666759, LEX:333=-5.659294069290872E-4, LEX:365=-8.924621652709606E-4, LEX:373=-4.5123556658400874E-5, LEX:381=-1.0430625534806944E-4, LEX:389=-4.0344022097110266E-5, LEX:547=-1.8205343420420712E-4, LEX:571=-5.011696023895412E-4, LEX:583=-5.317323850686232E-4, LEX:595=-1.2677593463651153E-4, LEX:1006=0.12676354984205596, LEX:1008=0.13413595059234745, LEX:419=-0.08857524079938356, LEX:859=-0.019585681089058594, LEX:512=-5.383211484996048E-4, LEX:518=-0.3488435285741658, LEX:522=-0.002404520919152148, LEX:526=-8.652907197675723E-4, LEX:532=-0.04727407562066681, LEX:536=-5.790945704952602E-4, LEX:542=-0.04727407562066681, LEX:546=-0.00507050134457503, LEX:552=-0.0819432442435879, LEX:558=0.003874700550034856, LEX:570=0.0036606660730858303, LEX:576=-0.03370680561205609, LEX:582=-0.001193587115343444, LEX:588=-0.022022699147623715, LEX:594=-0.001193587115343444, LEX:600=-0.06008047433473968, LEX:923=-8.231945258050636E-4, LEX:935=-0.0013232226372498516, LEX:947=-8.855474836467207E-4, LEX:959=-0.12532755379241262, LEX:431=-0.006161063898037355, LEX:443=-2.367492464014024E-5, LEX:449=-1.7177161839382843E-5, LEX:467=-0.021869901045346106, LEX:479=0.41506650282059476, LEX:491=-5.518934414291901E-5, LEX:497=-1.4655817814645654E-5, LEX:1001=-0.7910247200097494, LEX:50=5.172364713388018E-4, LEX:181=-0.6668391173100869, LEX:197=-0.039652582319023334, LEX:207=-1.385186827020357E-5, LEX:217=-4.0641712040758143E-4, LEX:227=0.6128576372571526, LEX:237=-0.0013125023707504138, LEX:257=0.02638106052773591, LEX:267=-0.04533549079470929, LEX:277=0.1148214672640627}
9: =========== r:0.3333333333333333 p:0.3333333333333333 (epoch:3 file:0 0)
if there is an empty cup
(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
MakeLex parse time: 0.004 sec.
Adding:
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1011
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1008 : 0.13413595059234745
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 1009 : 0.10639775344242708
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1010 : 0.0
empty  :- NP : empty:s : 53 : 10.0
cup  :- NP : cup:d : 8 : 8.951830712053365
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1008 : 0.13413595059234745
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 1009 : 0.10639775344242708
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1010 : 0.0
empty  :- NP : empty:s : 53 : 10.0
cup  :- NP : cup:d : 8 : 8.951830712053365
]
Scale: 0.9986518200429421
Update:
{BB:object:t:state:t=0.025402357091715348, LHT:0:object:t:e=-0.03134675658843338, LHH:0:object:t:var=-0.03134675658843338, LHT:1:object:t:d=-0.001986452772884015, LHH:1:object:t:cup:d=-0.001986452772884015, LHT:0:state:t:e=0.0296796836788569, LHH:0:state:t:var=0.0296796836788569, LHT:1:state:t:s=0.0296796836788569, LHH:1:state:t:empty:s=0.0296796836788569, BB:object:t:object:t=-0.03136203379455937, LHT:1:object:t:s=-0.029360463007645506, LHH:1:object:t:empty:s=-0.029360463007645506, LHT:0:object:t:s=-1.5118014029934817E-5, LHH:0:object:t:empty:s=-1.5118014029934817E-5, LHT:1:object:t:e=-1.4958821933841379E-5, LHH:1:object:t:var=-1.4958821933841379E-5, LHT:0:state:t:s=-3.0426184927756625E-4, LHH:0:state:t:empty:s=-3.0426184927756625E-4, LHT:1:state:t:e=-3.0426184927756625E-4, LHH:1:state:t:var=-3.0426184927756625E-4, LEX:504=0.004778900757564406, LEX:1005=0.005319659288453888, LEX:141=-0.014687710914789674, LEX:149=-0.014687710914789674, LEX:861=0.004569441972958653, LEX:863=0.004569441972958653, LEX:1007=0.0059119239025127585, LEX:1009=0.005945745643015086, LEX:872=-0.01011826894183103, LEX:873=-0.01011826894183103, LEX:1006=0.005908765161122659, LEX:1008=0.004228997409527753, LEX:419=-0.0017199069748773976, LEX:546=-0.0019864527728839293, LEX:600=2.665457980065308E-4, LEX:1010=0.015457421859104273}
10: =========== r:0.4 p:0.4 (epoch:3 file:0 0)
if the cup contains water
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 water:q)))))
MakeLex parse time: 0.002 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
water  :- NP : water:q : 0.0
the cup  :- NP : cup:d : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1011
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 water:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0
the cup  :- NP : cup:d : 14 : 19.001520490637972
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 0.9983075237068534
water  :- NP : water:q : 32 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0
the cup  :- NP : cup:d : 14 : 19.001520490637972
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 0.9983075237068534
water  :- NP : water:q : 32 : 10.0
]
Scale: 0.9986418470879603
Update:
{BB:has:t:object:t=9.060101257151602E-4, LHT:0:has:t:e=9.059552615561089E-4, LHH:0:has:t:var=9.059552615561089E-4, LHT:1:has:t:e=9.059552537574064E-4, LHH:1:has:t:the=9.059552537574064E-4, BB:object:t:state:t=-9.054383154055766E-4, LHT:0:state:t:e=-9.054383154055766E-4, LHH:0:state:t:var=-9.054383154055766E-4, LHT:1:state:t:e=-9.054383154055766E-4, LHH:1:state:t:the=-9.054383154055766E-4, LEX:559=-9.052410985276664E-4, LEX:875=9.058705178378258E-4, LEX:472=-9.054383154055765E-4, LEX:874=9.06010111314835E-4}
11: =========== r:0.45454545454545453 p:0.45454545454545453 (epoch:3 file:0 0)
if it contains coffee
(exists $0 (and (object:t $0 it:e) (has:t $0 (the $1 (object:t $1 coffee:q)))))
MakeLex parse time: 0.001 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
coffee  :- NP : coffee:q : 0.0
it  :- NP : it:e : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1011
First parse time: 0.001 sec.
CORRECT:(exists $0 (and (object:t $0 it:e) (has:t $0 (the $1 (object:t $1 coffee:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 9.058705178378258E-4
it  :- NP : it:e : 5 : 10.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 0.9992135338181682
coffee  :- NP : coffee:q : 35 : 10.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 9.058705178378258E-4
it  :- NP : it:e : 5 : 10.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 0.9992135338181682
coffee  :- NP : coffee:q : 35 : 10.0
]
Scale: 0.9986318743321648
Update:
{BB:has:t:object:t=8.955667714080388E-4, LHT:0:has:t:e=8.955667714080388E-4, LHH:0:has:t:var=8.955667714080388E-4, LHT:1:has:t:e=8.955667714080388E-4, LHH:1:has:t:the=8.955667714080388E-4, BB:object:t:state:t=-8.955667714080775E-4, LHT:0:state:t:e=-8.955667714080775E-4, LHH:0:state:t:var=-8.955667714080775E-4, LHT:1:state:t:e=-8.955667714080775E-4, LHH:1:state:t:the=-8.955667714080775E-4, LEX:559=-8.955667714080775E-4, LEX:875=8.955390320825882E-4, LEX:472=-8.955539880007289E-4, LEX:874=8.955390320825882E-4}
12: =========== r:0.5 p:0.5 (epoch:3 file:0 0)
if the plate contains syrup
(exists $0 (and (object:t $0 plate:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
MakeLex parse time: 0.002 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
syrup  :- NP : syrup:q : 0.0
the plate  :- NP : plate:d : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1011
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 plate:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.001801409549920414
the plate  :- NP : plate:d : 18 : 20.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.0001090728502509
syrup  :- NP : syrup:q : 33 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.001801409549920414
the plate  :- NP : plate:d : 18 : 20.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.0001090728502509
syrup  :- NP : syrup:q : 33 : 10.0
]
Scale: 0.9986219017755498
Update:
{BB:has:t:object:t=8.860808807883728E-4, LHT:0:has:t:e=8.860808807883728E-4, LHH:0:has:t:var=8.860808807883728E-4, LHT:1:has:t:e=8.860808807883728E-4, LHH:1:has:t:the=8.860808807883728E-4, BB:object:t:state:t=-8.860808807883503E-4, LHT:0:state:t:e=-8.860808807883503E-4, LHH:0:state:t:var=-8.860808807883503E-4, LHT:1:state:t:e=-8.860808807883503E-4, LHH:1:state:t:the=-8.860808807883503E-4, LEX:559=-8.85877684553789E-4, LEX:875=8.859376589615295E-4, LEX:472=-8.860808807883503E-4, LEX:874=8.860808776907954E-4}
13: =========== r:0.5384615384615384 p:0.5384615384615384 (epoch:3 file:0 0)
if the cup is empty
(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
MakeLex parse time: 0.004 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
empty  :- NP : empty:s : 0.0
the cup  :- NP : cup:d : 0.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
empty  :- NP : empty:s : 0.0
Lex Size: 1011
First parse time: 0.004 sec.
WRONG: (and (exists $0 (object:t $0 cups:d)) (exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s))))
Using:
[LexEntries and scores:
if  :- S : (exists $0 (object:t $0 cups:d)) : 373 : -0.06756442577203275
the cup  :- NP : cup:d : 14 : 19.001520490637972
is  :- S/NP\S\NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 977 : 0.01644207746829765
empty  :- NP : empty:s : 53 : 10.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.08784309366620043
the cup  :- NP : cup:d : 14 : 19.001520490637972
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -1.5268977373471413
empty  :- NP : empty:s : 53 : 10.0
]
Scale: 0.9986119294181088
Update:
{BB:object:t:state:t=-0.05901401501174952, LHT:0:object:t:e=-0.7588923890580797, LHH:0:object:t:var=-0.7588923890580797, LHT:1:object:t:d=-0.6830609830258242, LHT:0:state:t:e=-0.059266146166823866, LHH:0:state:t:var=-0.059266146166823866, LHT:1:state:t:s=-0.05901443585762309, LHH:1:state:t:yellow:s=-0.05901445901068187, LHH:1:object:t:bowl:d=-0.05901452239994071, BB:exists:state:t=-2.517535335365276E-4, LHH:1:object:t:cups:d=-0.6240470465580924, BB:exists:object:t=-0.07583138721860389, LHT:1:object:t:p=-0.07583138284835148, LHH:1:object:t:you:p=-0.07583138284835148, LHT:1:state:t:e=-2.517108740821336E-4, LHH:1:state:t:var=-2.517108740821336E-4, BB:exists:exists=-0.6830614027073979, LEX:561=3.334375851795565E-5, LEX:14=-6.43180567668059E-5, LEX:123=0.10023081645182239, LEX:131=0.44157139359256325, LEX:172=-0.059014449435080725, LEX:311=-0.06451910410235581, LEX:365=-0.01131226728071339, LEX:373=-0.5595278491699615, LEX:547=-1.0436605846844529E-4, LEX:559=0.15261150750834473, LEX:8=6.456982783264232E-5, LEX:518=0.15279218580845993, LEX:558=-1.4734023552676734E-4, LEX:570=0.5304168119717702, LEX:977=-0.6830614027073979, LEX:509=1.4988534139038417E-5, LEX:519=2.9959217210554927E-5}
14: =========== r:0.5 p:0.5 (epoch:3 file:0 0)
if they are used
(exists $0 (and (object:t $0 they:e) (state:t $0 used:s)))
MakeLex parse time: 0.001 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
they are  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 they:e) (state:t $1 $0)))) : 0.0
Lex Size: 1012
First parse time: 0.001 sec.
CORRECT:(exists $0 (and (object:t $0 they:e) (state:t $0 used:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.35372829992636284
they are  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 they:e) (state:t $1 $0)))) : 1011 : 0.0
used  :- NP : used:s : 54 : 10.242264941553517
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.35372829992636284
they are  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 they:e) (state:t $1 $0)))) : 1011 : 0.0
used  :- NP : used:s : 54 : 10.242264941553517
]
Scale: 0.9986019572598361
Update:
{LHT:0:object:t:e=-0.003889293013083995, LHH:0:object:t:var=-0.003889293013083995, LHT:1:object:t:e=0.06859395719357184, LHH:1:object:t:they:e=0.06859395719357184, LHT:0:state:t:e=-1.710318084805444E-4, LHH:0:state:t:var=-1.710318084805444E-4, BB:exists:object:t=-0.00388929301308419, LHT:1:object:t:p=-0.07248325020665636, LHH:1:object:t:you:p=-0.00388929301308419, LHH:1:object:t:they:p=-0.06859395719357217, BB:exists:state:t=-1.7103180848015257E-4, LHT:1:state:t:e=-1.7103180848015257E-4, LHH:1:state:t:var=-1.7103180848015257E-4, LEX:283=0.019470540353153577, LEX:1011=0.0464962360210773, LEX:601=-0.06596732088256455, LEX:123=0.007023829010756911, LEX:131=0.04353273183188475, LEX:365=-0.00388929301308419, LEX:547=-1.7103180848015257E-4, LEX:559=-0.06596732088256455, LEX:4=-0.06859395719357217, LEX:7=0.002626636311007632, LEX:54=0.06596677637423098}
15: =========== r:0.5333333333333333 p:0.5333333333333333 (epoch:3 file:0 0)
if the kettle is white
(exists $0 (and (object:t $0 kettle:d) (state:t $0 white:s)))
MakeLex parse time: 0.002 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
white  :- NP : white:s : 0.0
the kettle  :- NP : kettle:d : 0.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
white  :- NP : white:s : 0.0
Lex Size: 1012
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 white:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.39726103175824756
the kettle  :- NP : kettle:d : 17 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -0.9964809253753711
white  :- NP : white:s : 52 : 10.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.39726103175824756
the kettle  :- NP : kettle:d : 17 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -0.9964809253753711
white  :- NP : white:s : 52 : 10.0
]
Scale: 0.998591985300726
Update:
{BB:object:t:state:t=-0.003196960224458682, LHT:0:object:t:e=-0.021864577274142403, LHH:0:object:t:var=-0.021864577274142403, LHT:1:object:t:d=-0.01686551635439839, LHT:0:state:t:e=-0.0036144880792210302, LHH:0:state:t:var=-0.0036144880792210302, LHT:1:state:t:s=-0.003196960224458682, BB:exists:object:t=-0.004999060919744204, LHT:1:object:t:p=-0.004999060919744204, LHH:1:object:t:you:p=-0.004999060919744204, BB:exists:exists=-0.016865516354398136, LHH:1:object:t:bowl:d=-0.003196960224458788, LHH:1:state:t:yellow:s=-0.003196960224458788, LHH:1:object:t:cups:d=-0.01366855612993935, BB:exists:state:t=-4.1752785476220617E-4, LHT:1:state:t:e=-4.1752785476220617E-4, LHH:1:state:t:var=-4.1752785476220617E-4, LEX:123=0.0025849446013293215, LEX:131=0.01661685560876767, LEX:172=-0.003196960224458788, LEX:311=-4.335044902837561E-4, LEX:365=-0.004565556429460447, LEX:373=-0.013235051639655588, LEX:547=-2.190604715482435E-4, LEX:559=0.0024470752451583007, LEX:518=0.0026460397596267055, LEX:558=-1.984493340609505E-4, LEX:570=0.014417925897651415, LEX:977=-0.016865516354398133}
16: =========== r:0.5625 p:0.5625 (epoch:3 file:0 0)
if the mug is on the stove
(exists $0 (and (object:t $0 mug:d) (On:t $0 (the $1 (object:t $1 stove:f)))))
MakeLex parse time: 0.003 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
the stove  :- NP : stove:f : 0.0
the mug  :- NP : mug:d : 0.0
is on  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (On:t $3 ($1 $2))))))) : 0.0
is  :- S/NP\(NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $4 $1) (On:t $4 ($2 $3)))))))) : 0.0
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
on  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $4 $1) (On:t $4 ($2 $3)))))))) : 0.0
is  :- S/NP\(NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (On:t $4 ($2 $3)))))))) : 0.0
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
on  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (On:t $4 ($2 $3)))))))) : 0.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
on  :- S/NP\(NP|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,e> (lambda $2 e (exists $3 (and ($0 $3) (On:t $3 ($1 $2))))))) : 0.0
Lex Size: 1022
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (On:t $0 (the $1 (object:t $1 stove:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0026873472088819435
the mug  :- NP : mug:d : 16 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : 0.0
is on  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (On:t $3 ($1 $2))))))) : 876 : 0.0
on  :- S/NP\(NP|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,e> (lambda $2 e (exists $3 (and ($0 $3) (On:t $3 ($1 $2))))))) : 1021 : 0.0
the stove  :- NP : stove:f : 76 : 20.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0026873472088819435
the mug  :- NP : mug:d : 16 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : 0.0
is on  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (On:t $3 ($1 $2))))))) : 876 : 0.0
on  :- S/NP\(NP|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,e> (lambda $2 e (exists $3 (and ($0 $3) (On:t $3 ($1 $2))))))) : 1021 : 0.0
the stove  :- NP : stove:f : 76 : 20.0
]
Scale: 0.9985820135407721
Update:
{BB:On:t:object:t=2.543088324971421E-4, LHT:0:object:t:e=3.917630843808726E-5, LHH:0:object:t:var=3.917630843808726E-5, LHT:1:object:t:d=3.916420050932856E-5, LHH:1:object:t:mug:d=3.917630843808726E-5, BB:object:t:state:t=-2.2154456685393172E-4, BB:On:t:state:t=-3.29070397729295E-5, LHT:0:state:t:d=-3.287848494697749E-5, LHH:0:state:t:mug:d=-3.287848494697749E-5, LHT:1:state:t:e=-2.543659421490052E-4, LHH:1:state:t:var=-2.543659421490052E-4, BB:On:t:exists=-2.2148745720202773E-4, LHT:0:state:t:e=-2.2148745720202773E-4, LHH:0:state:t:var=-2.2148745720202773E-4, LEX:876=3.258297066644735E-5, LEX:570=-2.2148745720202773E-4, LEX:576=-1.2533635223690733E-5, LEX:588=-1.268163271916295E-5, LEX:1012=3.1323405968216825E-5, LEX:1014=3.1323405968216825E-5, LEX:1016=3.1323405968216825E-5, LEX:1018=3.1323405968216825E-5, LEX:1020=9.648934730111154E-5, LEX:1013=3.1323405968216825E-5, LEX:1017=3.1323405968216825E-5, LEX:1019=-2.2468688658333798E-5, LEX:1021=-8.249236346843917E-5}
17: =========== r:0.5882352941176471 p:0.5882352941176471 (epoch:3 file:0 0)
if the mug is red and dry
(exists $0 (and (object:t $0 mug:d) (state:t $0 red:s) (state:t $0 dry:s)))
MakeLex parse time: 0.003 sec.
Adding:
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 0.0
Lex Size: 1023
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (state:t $0 red:s) (state:t $0 dry:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.41387788736701525
the mug  :- NP : mug:d : 16 : 20.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.5295323507310999
red  :- NP : red:s : 47 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : 0.0
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.41387788736701525
the mug  :- NP : mug:d : 16 : 20.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.5295323507310999
red  :- NP : red:s : 47 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : 0.0
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9985720419799686
Update:
{BB:object:t:state:t=-0.08577104025647626, BB:state:t:state:t=0.00466729537323821, LHT:0:object:t:e=-0.029845564691343737, LHH:0:object:t:var=-0.029845564691343737, LHT:1:object:t:d=-0.022611511018399897, LHT:0:state:t:e=-2.528611079805955E-4, LHH:0:state:t:var=-2.528611079805955E-4, LHT:1:state:t:s=1.9188411793134466E-5, LHH:1:state:t:dry:s=2.078800348958679E-5, BB:object:t:object:t=-0.045219167814856964, LHH:1:object:t:cup:d=-0.0226097996801093, BB:exists:exists=-0.0023447891704101885, LHT:1:object:t:s=-2.0788003489464944E-5, LHH:1:object:t:dry:s=-2.0788003489464944E-5, LHT:1:state:t:e=-2.720495197732421E-4, LHH:1:state:t:var=-2.720495197732421E-4, BB:exists:state:t=-2.706338773450202E-4, BB:exists:object:t=-0.004904824313845561, LHT:1:object:t:p=-0.004900405986324783, LHH:1:object:t:you:p=-0.004900405986324783, LHT:1:object:t:f=-0.002312859683129583, LHH:1:object:t:tv:f=-0.002312859683129583, LEX:123=-0.0013134600102749667, LEX:131=0.0064855802153164, LEX:151=-1.699142508874384E-5, LEX:365=-0.004900136845548491, LEX:547=-2.5124081114564795E-4, LEX:546=-0.02260958390742848, LEX:570=-0.002333647686619048, LEX:600=0.024941308735229074, LEX:902=-0.002312859683129583, LEX:966=-2.0788003489464948E-5, LEX:1022=0.0023317248278005684}
18: =========== r:0.6111111111111112 p:0.6111111111111112 (epoch:3 file:0 0)
if the kettle is empty and cool
(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s) (state:t $0 cool:s)))
MakeLex parse time: 0.003 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
cool  :- NP : cool:s : 0.0
the kettle  :- NP : kettle:d : 0.0
cool  :- NP : cool:s : 0.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
empty  :- NP : empty:s : 0.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 0.0
Lex Size: 1023
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s) (state:t $0 cool:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.4203634675823317
the kettle  :- NP : kettle:d : 17 : 20.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.5045910419958709
empty  :- NP : empty:s : 53 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : 0.0023317248278005684
cool  :- NP : cool:s : 49 : 10.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.4203634675823317
the kettle  :- NP : kettle:d : 17 : 20.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.5045910419958709
empty  :- NP : empty:s : 53 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : 0.0023317248278005684
cool  :- NP : cool:s : 49 : 10.0
]
Scale: 0.9985620706183095
Update:
{BB:object:t:state:t=-0.07367979602704404, BB:state:t:state:t=0.004235933772664158, LHT:0:object:t:e=-0.02612596055007429, LHH:0:object:t:var=-0.02612596055007429, LHT:1:object:t:d=-0.019480953339642993, LHT:0:state:t:e=-2.5115998459784064E-4, LHH:0:state:t:var=-2.5115998459784064E-4, LHT:1:state:t:s=2.1703348780685426E-5, LHH:1:state:t:cool:s=2.3528361013100208E-5, BB:object:t:object:t=-0.03895786489985296, LHH:1:object:t:cup:d=-0.019479154219265018, BB:exists:exists=-0.0021291879706120233, LHT:1:object:t:s=-2.352836101345336E-5, LHH:1:object:t:cool:s=-2.352836101345336E-5, LHT:1:state:t:e=-2.728633333788661E-4, LHH:1:state:t:var=-2.728633333788661E-4, BB:exists:state:t=-2.6838392546394324E-4, BB:exists:object:t=-0.00453166500202285, LHT:1:object:t:p=-0.004527040324098792, LHH:1:object:t:you:p=-0.004527040324098792, LHT:1:object:t:f=-0.0020944385253189816, LHH:1:object:t:tv:f=-0.0020944385253189816, LEX:123=-0.0011801868464242262, LEX:131=0.005979741205288872, LEX:151=-1.9395025878382756E-5, LEX:365=-0.004526753729849579, LEX:547=-2.493144208213078E-4, LEX:546=-0.019478932449926472, LEX:570=-0.002117966886332435, LEX:600=0.02159527923389327, LEX:902=-0.0020944385253189816, LEX:966=-2.3528361013453356E-5, LEX:1022=0.0021163467839667204}
19: =========== r:0.631578947368421 p:0.631578947368421 (epoch:3 file:0 0)
if the glass is used and on the floor
(exists $0 (and (object:t $0 kettle:d) (state:t $0 used:s) (On:t $0 (the $1 (object:t $1 floor:lo)))))
MakeLex parse time: 0.005 sec.
Adding:
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1.9135499999999999
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 1.9135499999999999
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
and  :- NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1.9135499999999999
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
and  :- NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 1.9135499999999999
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
Lex Size: 1027
First parse time: 0.008 sec.
WRONG: (and (object:t used:s glass:d) (exists $0 (object:t $0 floor:lo)))
Using:
[LexEntries and scores:
if  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 123 : -0.7702139913398749
the glass  :- NP : glass:d : 15 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : 9.648934730111154E-5
used  :- NP : used:s : 54 : 10.308231717927747
and  :- S/NP\S/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 ($0 $2 $3)))))) : 942 : -0.9778670003109479
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1017 : 3.1323405968216825E-5
the floor  :- NP : floor:lo : 67 : 20.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if the glass is  :- S/NP/(NP|NP)/NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (On:t $3 ($1 $2)) (object:t $3 kettle:d) (state:t $3 $0)))))) : 879 : 0.0
if the glass is  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 kettle:d) (state:t $2 $0) (On:t $2 $1))))) : 880 : 0.0
used  :- NP : used:s : 54 : 10.308231717927747
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1023 : 1.9135499999999999
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 1024 : 1.9135499999999999
and  :- NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1025 : 1.9135499999999999
and  :- NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 1026 : 1.9135499999999999
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 3.1323405968216825E-5
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1017 : 3.1323405968216825E-5
the floor  :- NP : floor:lo : 67 : 20.0
]
Scale: 0.9985520994557892
Update:
{BB:object:t:state:t=1.145395254623888, LHT:0:object:t:e=0.0829861590018877, LHH:0:object:t:var=0.0829861590018877, LHT:1:object:t:d=-0.004815262756771072, LHT:0:state:t:e=0.14987863867681922, LHH:0:state:t:var=0.14987863867681922, LHT:1:state:t:s=0.15158448247625234, LHH:1:state:t:used:s=0.15249997161515894, LHT:0:On:t:e=0.9969993718842197, LHH:0:On:t:var=0.9969993718842197, LHT:1:On:t:e=0.9969993718842197, LHH:1:On:t:the=0.9969993718842197, LHT:1:object:t:lo=0.0021260512262777074, LHH:1:object:t:floor:lo=0.0021260512262777074, BB:exists:exists=-0.8698600244009744, LHH:1:object:t:glass:d=-0.9985520752430429, LHT:0:object:t:lo=-0.0021260512262774012, LHH:0:object:t:floor:lo=-0.0021260512262774012, LHT:1:object:t:e=-0.0021260512262774012, LHH:1:object:t:var=-0.0021260512262774012, BB:object:t:object:t=-0.06397427429160633, LHT:1:object:t:f=-0.06393267778213747, LHH:1:object:t:tv:f=-0.06393267778213747, BB:exists:object:t=-0.1595737967039999, LHT:1:object:t:p=-0.002891923300640697, LHH:1:object:t:you:p=-0.002891923300640697, BB:On:t:exists=-0.0015866972048517167, BB:state:t:state:t=-0.003082744153627492, LHH:1:object:t:cup:d=-2.646389573917271E-5, LHT:1:state:t:e=-0.0017058437994331144, LHH:1:state:t:var=-0.0017058437994331144, LHT:0:object:t:s=-0.15249997161515877, LHH:0:object:t:used:s=-0.15249997161515877, LHH:1:object:t:bowl:d=-9.154891389066246E-4, LHH:1:state:t:yellow:s=-9.154891389066246E-4, LHH:1:object:t:cups:d=-0.003873309722125583, BB:exists:state:t=-1.531404406098756E-4, LEX:509=-2.339578518937466E-5, LEX:519=-1.6881676373956958E-5, LEX:549=-1.1328525350409309E-5, LEX:15=-0.9984909981348676, LEX:123=-0.2385482574486191, LEX:131=-0.5695159366503583, LEX:172=-9.154891389066247E-4, LEX:311=-1.03988775173721E-4, LEX:365=-0.002787934525466976, LEX:373=-0.003769320946951863, LEX:547=-0.13739408849291787, LEX:559=-0.043903529541476256, LEX:875=-0.0015524526149968325, LEX:9=-6.107710817538054E-5, LEX:518=-0.043840221661079266, LEX:546=-2.6463895739172706E-5, LEX:558=-7.252825783221305E-5, LEX:570=-0.6584843779356361, LEX:600=-0.0015149081810745734, LEX:977=-0.004788798861032209, LEX:1020=-0.2898247764506494, LEX:54=-3.371306722873273E-5, LEX:902=-1.133128200949272E-5, LEX:930=-0.4443853468659556, LEX:942=-0.4886926785181362, LEX:978=-0.03201226726743218, LEX:988=-0.03190907923269579, LEX:1022=-0.0015413720768137464, LEX:1013=-0.01972946115551064, LEX:1017=-0.06374507853250527, LEX:1019=-7.707091681109412E-4, LEX:1021=-7.819941907122978E-4, BB:On:t:object:t=1.9971041989115783, BB:On:t:state:t=1.9971041989115783, LHH:1:object:t:kettle:d=0.9985520994557892, LEX:605=2.173260421478785E-5, LEX:607=1.157534646862139E-5, LEX:879=0.6515082569568725, LEX:880=0.3470101294308704, LEX:606=0.02125670999679539, LEX:608=0.06377012999038617, LEX:1023=0.15225414239187413, LEX:1024=0.15225414239187413, LEX:1025=0.3045082847837482, LEX:1026=0.3045082847837482}
20: =========== r:0.6 p:0.6 (epoch:3 file:0 0)
if the plate is dirty and in the refrigerator
(exists $0 (and (object:t $0 plate:d) (state:t $0 dirty:s) (In:t $0 (the $1 (object:t $1 refrigerator:f)))))
MakeLex parse time: 0.004 sec.
Adding:
if  :- S/NP/(NP|NP)/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and (In:t $4 ($2 $3)) ($0 $4) (state:t $4 $1))))))) : 0.0
if  :- S/NP/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (state:t $3 $1) ($0 $3) (In:t $3 $2)))))) : 0.0
Lex Size: 1029
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 plate:d) (state:t $0 dirty:s) (In:t $0 (the $1 (object:t $1 refrigerator:f)))))
Using:
[LexEntries and scores:
if  :- S/NP/(NP|NP)/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and (In:t $4 ($2 $3)) ($0 $4) (state:t $4 $1))))))) : 1027 : 0.0
if  :- S/NP/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (state:t $3 $1) ($0 $3) (In:t $3 $2)))))) : 1028 : 0.0
the plate  :- NP : plate:d : 18 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -0.2897282871033483
dirty  :- NP : dirty:s : 55 : 10.0
and in  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 610 : 0.6378499999999999
and in  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 612 : 0.6378499999999999
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/(NP|NP)/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and (In:t $4 ($2 $3)) ($0 $4) (state:t $4 $1))))))) : 1027 : 0.0
if  :- S/NP/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (state:t $3 $1) ($0 $3) (In:t $3 $2)))))) : 1028 : 0.0
the plate  :- NP : plate:d : 18 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -0.2897282871033483
dirty  :- NP : dirty:s : 55 : 10.0
and in  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 610 : 0.6378499999999999
and in  :- NP/NP : (lambda $0 e (the $1 (object:t $1 $0))) : 612 : 0.6378499999999999
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
]
Scale: 0.9985421284924011
Update:
{BB:object:t:state:t=5.449735395565539E-4, BB:In:t:object:t=0.0010899470791126643, LHT:0:state:t:e=-5.449735395565539E-4, LHH:0:state:t:var=-5.449735395565539E-4, BB:exists:state:t=-0.0010899470791128183, BB:In:t:exists=-0.0010899470791128183, LHT:1:state:t:e=-5.449735395564091E-4, LHH:1:state:t:var=-5.449735395564091E-4, LEX:570=-5.449735395564092E-4, LEX:1020=5.449735380555035E-4}
21: =========== r:0.6190476190476191 p:0.6190476190476191 (epoch:3 file:0 0)
for all mugs that contain water
(forall $0 (and (object:t $0 mugs:d) (has:t $0 (the $1 (object:t $1 water:q)))))
MakeLex parse time: 0.008 sec.
Adding:
for  :- S/S : (lambda $0 t $0) : 0.0
for  :- S/S : (lambda $0 t $0) : 0.0
water  :- NP : water:q : 0.0
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 0.0
water  :- NP : water:q : 0.0
Lex Size: 1029
First parse time: 0.01 sec.
WRONG: (forall $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 water:q)))))
Using:
[LexEntries and scores:
for all  :- S/NP/NP : (lambda $0 e (lambda $1 e (forall $2 (and (object:t $2 $0) (has:t $2 (the $3 (object:t $3 $1))))))) : 695 : -0.7228491353707207
mugs  :- NP : mug:d : 27 : 8.244500721544508
that contain  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 626 : -0.16828571861949618
water  :- NP : water:q : 32 : 10.0
]
Second parse time: 0.008 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/S : (lambda $0 t $0) : 629 : 0.5248696898229682
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 883 : 0.07796626606176772
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 0.469013783745087
contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 812 : 0.12126059951564352
water  :- NP : water:q : 32 : 10.0
]
Scale: 0.9985321577281395
Update:
{BB:has:t:object:t=0.09686597391472737, LHT:0:object:t:e=0.1021138972004832, LHH:0:object:t:var=0.1021138972004832, LHT:1:object:t:d=0.0788942117324724, LHH:1:object:t:mugs:d=0.9590665818633222, LHT:0:has:t:e=0.0718550241637305, LHH:0:has:t:var=0.0718550241637305, LHT:1:has:t:e=0.07306511124795213, LHH:1:has:t:the=0.07309875196835854, LHT:1:object:t:q=0.014413322448425166, LHH:1:object:t:water:q=0.014413322448425166, LHT:0:object:t:q=-0.013195170588674579, LHH:0:object:t:water:q=-0.013195170588674579, LHT:1:object:t:e=-0.004388807569088343, LHH:1:object:t:var=-6.891103149981001E-5, BB:object:t:object:t=-0.005241183497908686, LHH:1:object:t:mug:d=-0.8801723701308499, LHH:1:object:t:the=-0.004319896537588533, BB:forall:has:t=-5.180531064058814E-5, LHT:1:has:t:q=-0.0012147841441815254, LHH:1:has:t:water:q=-0.0012147841441815254, LHH:1:has:t:var=-3.36407204064971E-5, LEX:290=0.004368554707062354, LEX:619=0.007484261135435464, LEX:627=0.00442347609523216, LEX:635=0.009190682176989179, LEX:643=0.0019079330450993055, LEX:651=0.004408836546981254, LEX:659=0.003562400512397719, LEX:667=0.004408836546981254, LEX:675=0.0036037464566975423, LEX:683=0.004423326019991746, LEX:691=0.0028486759159471347, LEX:699=0.004423128622343131, LEX:707=0.004421238310520111, LEX:715=0.004181549700727898, LEX:723=0.003649994238100755, LEX:731=0.008186473154473623, LEX:739=0.003649994238100755, LEX:747=0.008264054744777895, LEX:755=0.009075452798998015, LEX:763=0.004423712806862675, LEX:771=0.008856349208200344, LEX:779=0.004374078011763374, LEX:787=0.002454743002523898, LEX:795=0.00972465635638493, LEX:803=0.002454743002523898, LEX:811=0.009854657819352327, LEX:614=0.007379827763996555, LEX:622=0.002535943337149376, LEX:630=0.02282613785002069, LEX:638=0.0027816464797665885, LEX:646=0.001915167519922434, LEX:654=0.006685274139930496, LEX:662=0.0019151675199224345, LEX:670=0.020697962356783693, LEX:678=0.0016304138663476046, LEX:686=0.004410074806210938, LEX:694=0.004423330101349481, LEX:702=0.004423131307014086, LEX:710=0.003233131332176722, LEX:718=0.004223761695732135, LEX:726=0.002898993522367294, LEX:734=0.004223761695732135, LEX:742=0.008849962910544589, LEX:750=0.004480263235641418, LEX:758=0.004423712806862675, LEX:766=0.01377767263937592, LEX:774=0.0031058751584406856, LEX:782=0.004374543832448163, LEX:790=5.2412365190589E-4, LEX:798=0.004374543832448163, LEX:806=0.0015153880166173985, LEX:617=0.007484261135435464, LEX:625=0.0036912937946861654, LEX:633=0.009190682176989179, LEX:641=0.0019131175500276337, LEX:649=0.004408836546981254, LEX:657=0.00392739482799757, LEX:665=0.004408836546981254, LEX:673=0.003976102965874327, LEX:681=0.004423326019991746, LEX:689=0.001343641007373389, LEX:697=0.004423128622343131, LEX:705=0.0015845159097074733, LEX:713=0.004223553147606116, LEX:721=0.003649994238100755, LEX:729=0.008639901998509504, LEX:737=0.003649994238100755, LEX:745=0.008725198275147563, LEX:753=0.04082000175740925, LEX:761=0.004423712806862675, LEX:769=0.008755829786477543, LEX:777=0.004374440937985377, LEX:785=0.002454743002523898, LEX:793=0.008943568016925663, LEX:801=0.002454743002523898, LEX:809=0.009057759689202794, LEX:616=0.0037555478248908424, LEX:624=0.002535943337149376, LEX:632=0.010363732693105008, LEX:640=0.003268057685835269, LEX:648=0.001915214106147163, LEX:656=0.00619346595535645, LEX:664=0.001915214106147163, LEX:672=0.01915509939587579, LEX:680=0.0013316052610810396, LEX:688=0.004410074806210938, LEX:696=0.0021160810183136025, LEX:704=0.004423128676922598, LEX:712=0.003193297809303178, LEX:720=0.004223766810913649, LEX:728=0.003156198756009696, LEX:736=0.004223766810913649, LEX:744=0.00964122298707933, LEX:752=0.004480263235641418, LEX:760=0.004423712806862675, LEX:768=0.01377767263937592, LEX:776=0.002936083061477352, LEX:784=0.004374587051831652, LEX:792=7.8545006614315E-4, LEX:800=0.004374587051831652, LEX:808=0.0023209011877852615, LEX:615=-0.21241417023864761, LEX:623=0.00442347609523216, LEX:631=-0.3636039494013189, LEX:639=0.0014166936359511456, LEX:647=0.004408838193509032, LEX:655=0.005478710681888989, LEX:663=0.004408838193509032, LEX:671=0.005599728368630207, LEX:679=0.0026551435501897336, LEX:687=0.0028486759159471347, LEX:695=-0.2892425238277932, LEX:703=0.004423340311756233, LEX:711=0.0036057661476447535, LEX:719=0.003649994141910337, LEX:727=0.008130516497809001, LEX:735=0.003649994141910337, LEX:743=0.008205476302064679, LEX:751=0.009075452798998015, LEX:759=0.004423712806862675, LEX:767=0.008856349208200344, LEX:775=0.004374424493461851, LEX:783=0.002454783925528349, LEX:791=0.006910875568618683, LEX:799=0.002454783925528349, LEX:807=0.006927373573962528, LEX:883=0.31567355455957996, LEX:618=0.004480059979501398, LEX:626=-0.28490998868856937, LEX:634=0.013785651127419554, LEX:642=0.004408835803974781, LEX:650=0.001915167519922434, LEX:658=0.004464712259117332, LEX:666=0.0019151675199224345, LEX:674=0.013715432108771745, LEX:682=0.002832558225495436, LEX:690=0.0026362885050900506, LEX:698=0.004423330101349481, LEX:706=-0.5872294187432634, LEX:714=0.00364999227039085, LEX:722=0.004223761695732135, LEX:730=0.00369673133716403, LEX:738=0.004223761695732135, LEX:746=0.011312694468034106, LEX:754=0.037486692230990847, LEX:762=0.004423712806862675, LEX:770=0.04142036471259456, LEX:778=0.0024546993945217155, LEX:786=0.004374543832448163, LEX:794=0.002470794062633942, LEX:802=0.004374543832448163, LEX:810=0.0076072184887853375, LEX:613=0.1839397836251401, LEX:621=0.00442347609523216, LEX:629=0.1593241606278767, LEX:637=0.001205779712502386, LEX:645=0.004408836546981254, LEX:653=0.005922460797925522, LEX:661=0.004408836546981254, LEX:669=0.00606185352823146, LEX:677=0.004245989786928042, LEX:685=0.0028486759159471347, LEX:693=0.004423128622343131, LEX:701=0.004423342461955951, LEX:709=0.0035668505527801024, LEX:717=0.003649994238100755, LEX:725=0.007786662341750511, LEX:733=0.003649994238100755, LEX:741=0.00785740111825065, LEX:749=0.009075452798998015, LEX:757=0.004423712806862675, LEX:765=0.008856349208200344, LEX:773=0.004348157713794627, LEX:781=0.002454743002523898, LEX:789=0.0067629080677819265, LEX:797=0.002454743002523898, LEX:805=0.006780072580574306, LEX:27=-0.8801723701308499, LEX:868=0.2822924558834239, LEX:620=0.004480059979501398, LEX:628=0.002535943337149376, LEX:636=0.013785651127419554, LEX:644=0.004396773196437034, LEX:652=0.001915167519922434, LEX:660=0.004315166961855372, LEX:668=0.0019151675199224345, LEX:676=0.013438445134914864, LEX:684=0.002832558225495436, LEX:692=0.004410074806210938, LEX:700=0.004423330101349481, LEX:708=0.0044209274906898115, LEX:716=0.0036150516715552734, LEX:724=0.004223761695732135, LEX:732=0.0026687977776131363, LEX:740=0.004223761695732135, LEX:748=0.009907608042060005, LEX:756=0.004480263235641418, LEX:764=0.004423712806862675, LEX:772=0.01377767263937592, LEX:780=0.00245201467553519, LEX:788=0.004374543832448163, LEX:796=0.14290366620789696, LEX:804=0.004374543832448163, LEX:812=0.152254792837061}
22: =========== r:0.5909090909090909 p:0.5909090909090909 (epoch:3 file:0 0)
for all bowls that are green
(forall $0 (and (object:t $0 bowls:d) (state:t $0 green:s)))
MakeLex parse time: 0.002 sec.
Adding:
green  :- NP : green:s : 0.0
Lex Size: 1029
First parse time: 0.003 sec.
CORRECT:(forall $0 (and (object:t $0 bowls:d) (state:t $0 green:s)))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.7064421774621772
all bowls that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 814 : 0.4158561495307339
green  :- NP : green:s : 51 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.7064421774621772
all bowls that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 814 : 0.4158561495307339
green  :- NP : green:s : 51 : 10.0
]
Scale: 0.9985221871629988
Update:
{BB:object:t:state:t=-0.2647195751025432, LHT:0:object:t:e=-0.1282584536583138, LHH:0:object:t:var=-0.1282584536583138, LHT:1:object:t:d=-0.12825882190817686, BB:object:t:object:t=-0.17647971673502874, LHH:1:object:t:mugs:d=-0.12825882190817717, BB:has:t:object:t=-0.04001896354066278, LHT:0:has:t:e=-0.0400210124719841, LHH:0:has:t:var=-0.0400210124719841, LHT:1:has:t:e=-0.0400210124719841, LHH:1:has:t:the=-0.0400210124719841, LEX:291=0.006305474667503967, LEX:813=0.013014530262869186, LEX:814=0.05122615242268222, LEX:815=-0.008012788579423157, LEX:817=-0.02516098950607995, LEX:816=-0.00907596139425758, LEX:818=-0.028296673994312703, LEX:655=0.013611571460683194, LEX:671=0.014000007454016193, LEX:727=-0.022182805755973325, LEX:743=-0.022673580922979955, LEX:791=-0.009999399821218388, LEX:807=-0.010127154532860679, LEX:613=0.030345386971921285, LEX:629=0.03389734464495139, LEX:653=0.014805422746277393, LEX:669=0.015297089540342056, LEX:725=-0.02140954883925689, LEX:741=-0.021973188435334735, LEX:789=-0.009861623250604785, LEX:805=-0.010030785935978934}
23: =========== r:0.6086956521739131 p:0.6086956521739131 (epoch:3 file:0 0)
for all glasses that are empty
(forall $0 (and (object:t $0 glasses:d) (state:t $0 empty:s)))
MakeLex parse time: 0.003 sec.
Adding:
empty  :- NP : empty:s : 0.0
Lex Size: 1029
First parse time: 0.003 sec.
CORRECT:(forall $0 (and (object:t $0 glasses:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.7367875644340984
all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 820 : 0.1363197976632944
empty  :- NP : empty:s : 53 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.7367875644340984
all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 820 : 0.1363197976632944
empty  :- NP : empty:s : 53 : 10.0
]
Scale: 0.9985122167969726
Update:
{BB:object:t:state:t=-0.18610133385795588, LHT:0:object:t:e=-0.08626375201225628, LHH:0:object:t:var=-0.08626375201225628, LHT:1:object:t:d=-0.08629570934402295, LHT:0:state:t:e=3.382593760798744E-5, LHH:0:state:t:var=3.382593760798744E-5, LHT:1:state:t:s=3.569454344897456E-5, LHH:1:state:t:empty:s=3.569454344897456E-5, BB:object:t:object:t=-0.12406755590530398, LHH:1:object:t:mugs:d=-0.08629570934402268, BB:has:t:object:t=-0.024261931391370693, LHT:0:has:t:e=-0.0242637999972117, LHH:0:has:t:var=-0.0242637999972117, LHT:1:has:t:e=-0.0242637999972117, LHH:1:has:t:the=-0.0242637999972117, LHT:0:object:t:s=-3.382593760794748E-5, LHH:0:object:t:empty:s=-3.382593760794748E-5, LHT:0:state:t:s=-3.382593760794748E-5, LHH:0:state:t:empty:s=-3.382593760794748E-5, LHT:1:state:t:e=-3.569454344895933E-5, LHH:1:state:t:var=-3.569454344895933E-5, LEX:292=0.0041484011887026415, LEX:819=0.008725503089456908, LEX:820=0.02833412893473167, LEX:821=-0.004955042620665224, LEX:823=-0.013992308333315884, LEX:822=-0.005813575560152008, LEX:824=-0.01644728802861101, LEX:639=-1.4477798244068854E-5, LEX:655=0.010936025431953841, LEX:671=0.01073361069854519, LEX:727=-0.016033048171359303, LEX:743=-0.01562443165207075, LEX:791=-0.006233631440870494, LEX:807=-0.006021390244044266, LEX:613=0.0182895197569431, LEX:629=0.018771980873086534, LEX:637=-1.2342334837293002E-5, LEX:653=0.011827598320159276, LEX:669=0.011617080483701667, LEX:725=-0.01537973970426269, LEX:741=-0.014989552620432655, LEX:789=-0.006106346684199136, LEX:805=-0.005900563022256797}
24: =========== r:0.625 p:0.625 (epoch:3 file:0 0)
for every cup that is dry
(forall $0 (and (object:t $0 cup:d) (state:t $0 dry:s)))
MakeLex parse time: 0.002 sec.
Adding:
dry  :- NP : dry:s : 0.0
Lex Size: 1029
First parse time: 0.002 sec.
CORRECT:(forall $0 (and (object:t $0 cup:d) (state:t $0 dry:s)))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.7550770841910416
every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 826 : 0.025719976419169073
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.7550770841910416
every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 826 : 0.025719976419169073
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9985022466300548
Update:
{BB:object:t:state:t=-0.09496070911543615, LHT:0:object:t:e=-0.04309680226883268, LHH:0:object:t:var=-0.04309680226883268, LHT:1:object:t:d=-0.04311377355237599, LHT:0:state:t:e=1.9575150164712053E-5, LHH:0:state:t:var=1.9575150164712053E-5, LHT:1:state:t:s=2.217901678622772E-5, LHH:1:state:t:dry:s=2.217901678622772E-5, BB:object:t:object:t=-0.06330713941029059, LHH:1:object:t:mugs:d=-0.04311377355237596, BB:has:t:object:t=-0.011460203847230661, LHT:0:has:t:e=-0.011462807713852137, LHH:0:has:t:var=-0.011462807713852137, LHT:1:has:t:e=-0.011462807713852137, LHH:1:has:t:the=-0.011462807713852137, LHT:0:object:t:s=-1.95751501646852E-5, LHH:0:object:t:dry:s=-1.95751501646852E-5, LHT:0:state:t:s=-1.95751501646852E-5, LHH:0:state:t:dry:s=-1.95751501646852E-5, LHT:1:state:t:e=-2.217901678616416E-5, LHH:1:state:t:var=-2.217901678616416E-5, LEX:293=0.002741934382254144, LEX:825=0.005845975636819207, LEX:826=0.017631437837750806, LEX:827=-0.006633021246575705, LEX:828=-0.019586450323315043, LEX:613=0.011796434502447597, LEX:629=0.01168358283874396, LEX:637=-1.6312960618311952E-5, LEX:653=0.008446472940902894, LEX:669=0.008464142002200678, LEX:725=-0.015865096330471787, LEX:741=-0.015785211185127136, LEX:789=-0.005769684044081072, LEX:805=-0.005690519803149589}
25: =========== r:0.64 p:0.64 (epoch:3 file:0 0)
for every plate that is on the table
(forall $0 (and (object:t $0 plate:d) (On:t $0 (the $1 (object:t $1 table:f)))))
MakeLex parse time: 0.004 sec.
Adding:
the table  :- NP : table:f : 0.0
Lex Size: 1029
First parse time: 0.004 sec.
CORRECT:(forall $0 (and (object:t $0 plate:d) (On:t $0 (the $1 (object:t $1 table:f)))))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.7668735186934892
every plate that is on  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 830 : 0.045521217765061746
the table  :- NP : table:f : 73 : 20.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.7668735186934892
every plate that is on  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 plate:d) (On:t $1 (the $2 (object:t $2 $0)))))) : 830 : 0.045521217765061746
the table  :- NP : table:f : 73 : 20.0
]
Scale: 0.9984922766622402
Update:
{BB:On:t:object:t=-0.07731698026999947, LHT:0:object:t:e=-0.03476410275724289, LHH:0:object:t:var=-0.03476410275724289, LHT:1:object:t:d=-0.034776527300779306, LHT:0:On:t:e=1.6747056288833323E-5, LHH:0:On:t:var=1.6747056288833323E-5, LHT:1:object:t:f=1.6747056288833323E-5, LHH:1:object:t:table:f=1.6747056288833323E-5, BB:object:t:object:t=-0.05154465351333296, LHH:1:object:t:mugs:d=-0.03477652730077935, BB:has:t:object:t=-0.009004200544112854, LHT:0:has:t:e=-0.009008523056865284, LHH:0:has:t:var=-0.009008523056865284, LHT:1:has:t:e=-0.009008523056865284, LHH:1:has:t:the=-0.009008523056865284, LHT:0:object:t:f=-1.674705628901965E-5, LHH:0:object:t:table:f=-1.674705628901965E-5, LHT:0:On:t:f=-1.674705628901965E-5, LHH:0:On:t:table:f=-1.674705628901965E-5, LHT:1:object:t:e=-2.1069569041449494E-5, LHH:1:object:t:var=-2.1069569041449494E-5, LEX:294=0.002190294483408808, LEX:829=0.00473159894571356, LEX:830=0.014463203254569032, LEX:831=-0.00533987582361034, LEX:832=-0.01604522086464872, LEX:613=0.009614617126060617, LEX:629=0.009584507586974366, LEX:637=-1.3409229922401588E-5, LEX:653=0.006666492359425797, LEX:669=0.006738347483016817, LEX:725=-0.012861549454169615, LEX:741=-0.012908520436509929, LEX:789=-0.004513090631840302, LEX:805=-0.004490028951892873}
26: =========== r:0.6538461538461539 p:0.6538461538461539 (epoch:3 file:0 0)
for all mugs that are in the sink
(forall $0 (and (object:t $0 mugs:d) (In:t $0 (the $1 (object:t $1 sink:f)))))
MakeLex parse time: 0.006 sec.
Adding:
the sink  :- NP : sink:f : 0.0
Lex Size: 1029
First parse time: 0.005 sec.
CORRECT:(forall $0 (and (object:t $0 mugs:d) (In:t $0 (the $1 (object:t $1 sink:f)))))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.7764881358195498
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 834 : 0.037557853877861744
the sink  :- NP : sink:f : 74 : 20.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.7764881358195498
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 834 : 0.037557853877861744
the sink  :- NP : sink:f : 74 : 20.0
]
Scale: 0.9984823068935219
Update:
{BB:In:t:object:t=-0.04451237305472056, LHT:0:object:t:e=-0.029666904998556946, LHH:0:object:t:var=-0.029666904998556946, LHT:1:object:t:d=-0.02980996122465403, LHH:1:object:t:mugs:d=-0.02980996122465403, LHT:0:In:t:e=1.469206333406436E-4, LHH:0:In:t:var=1.469206333406436E-4, LHT:1:object:t:f=1.469206333406436E-4, LHH:1:object:t:sink:f=1.469206333406436E-4, BB:object:t:object:t=-0.022265047813824483, BB:has:t:object:t=-0.007562635983757909, LHT:0:has:t:e=-0.007566500391001572, LHH:0:has:t:var=-0.007566500391001572, LHT:1:has:t:e=-0.007566500391001572, LHH:1:has:t:the=-0.007566500391001572, LHT:0:object:t:f=-1.469206333405655E-4, LHH:0:object:t:sink:f=-1.469206333405655E-4, LHT:0:In:t:f=-1.469206333405655E-4, LHH:0:In:t:sink:f=-1.469206333405655E-4, LHT:1:object:t:e=-1.5078504058422797E-4, LHH:1:object:t:var=-1.5078504058422797E-4, LEX:295=0.0018687496369341747, LEX:833=0.004074289343056231, LEX:834=0.012387494583089255, LEX:835=-0.004625813333160377, LEX:836=-0.01370472023382498, LEX:613=0.008256708216926076, LEX:629=0.008208940116463136, LEX:637=-1.2100999375596994E-4, LEX:653=0.005775409428776318, LEX:669=0.005825028222648477, LEX:709=-1.7722572928144967E-5, LEX:725=-0.01110724112321021, LEX:741=-0.011122361544757983, LEX:789=-0.0037910825851382073, LEX:805=-0.003763365331963252}
27: =========== r:0.6666666666666666 p:0.6666666666666666 (epoch:3 file:0 0)
if the robot is grasping the mug
(exists $0 (and (object:t $0 robot:p) (IsGrasping:t $0 (the $1 (object:t $1 mug:d)))))
MakeLex parse time: 0.004 sec.
Adding:
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $4 $1) (IsGrasping:t $4 ($2 $3)))))))) : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsGrasping:t $4 ($2 $3)))))))) : 0.0
Lex Size: 1031
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsGrasping:t $0 (the $1 (object:t $1 mug:d)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.001134894593885111
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1014 : 3.1323405968216825E-5
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 3.1323405968216825E-5
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $4 $1) (IsGrasping:t $4 ($2 $3)))))))) : 1029 : 0.0
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsGrasping:t $4 ($2 $3)))))))) : 1030 : 0.0
the mug  :- NP : mug:d : 16 : 20.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.001134894593885111
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1014 : 3.1323405968216825E-5
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 3.1323405968216825E-5
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $4 $1) (IsGrasping:t $4 ($2 $3)))))))) : 1029 : 0.0
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsGrasping:t $4 ($2 $3)))))))) : 1030 : 0.0
the mug  :- NP : mug:d : 16 : 20.0
]
Scale: 0.9984723373238944
Update:
{LHT:0:object:t:e=0.00976680668162679, LHH:0:object:t:var=0.00976680668162679, LHT:1:object:t:p=0.0097668066816269, LHH:1:object:t:robot:p=0.0097668066816269, LHT:0:object:t:p=-0.009766806681626867, LHH:0:object:t:robot:p=-0.009766806681626867, LHT:1:object:t:e=-0.009766806681626867, LHH:1:object:t:var=-0.009766806681626867, LEX:884=0.0026052198779558627, LEX:1014=-9.477485209659917E-4, LEX:1018=-9.477485209659917E-4, LEX:1020=-7.097228607412595E-4, LEX:1029=-0.0036084551934732465, LEX:1030=0.0010032352907999482}
28: =========== r:0.6785714285714286 p:0.6785714285714286 (epoch:3 file:0 0)
if the robot is near the refrigerator
(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 refrigerator:f)))))
MakeLex parse time: 0.004 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
the refrigerator  :- NP : refrigerator:f : 0.0
the robot  :- NP : robot:p : 0.0
is near  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (IsNear:t $3 ($1 $2))))))) : 0.0
is  :- S/NP\(NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $4 $1) (IsNear:t $4 ($2 $3)))))))) : 0.0
near  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
is  :- S/NP\(NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 0.0
near  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
Lex Size: 1035
First parse time: 0.004 sec.
WRONG: (exists $0 (and (object:t $0 robot:p) (On:t $0 (the $1 (object:t $1 refrigerator:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.001134894593885111
the robot  :- NP : robot:p : 1 : 20.0
is  :- S/NP\(NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $4 $1) (On:t $4 ($2 $3)))))))) : 1012 : 3.1323405968216825E-5
is  :- S/NP\(NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (On:t $4 ($2 $3)))))))) : 1016 : 3.1323405968216825E-5
near  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1032 : 0.0
near  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1034 : 0.0
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.001134894593885111
the robot  :- NP : robot:p : 1 : 20.0
is near  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (IsNear:t $3 ($1 $2))))))) : 885 : 0.0
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
]
Scale: 0.9984623679533517
Update:
{BB:IsNear:t:object:t=0.9758225680294856, LHT:0:object:t:e=0.01219500508625097, LHH:0:object:t:var=0.01219500508625097, LHT:1:object:t:p=0.01219500508625097, LHH:1:object:t:robot:p=0.01219500508625097, LHT:0:IsNear:t:e=0.9758225680294856, LHH:0:IsNear:t:var=0.9758225680294856, LHT:1:IsNear:t:e=0.9758225680294856, LHH:1:IsNear:t:the=0.9758225680294856, BB:On:t:object:t=-0.9758225680294859, LHT:0:On:t:e=-0.9758225680294859, LHH:0:On:t:var=-0.9758225680294859, LHT:1:On:t:e=-0.9758225680294859, LHH:1:On:t:the=-0.9758225680294859, LHT:0:object:t:p=-0.012195005086251064, LHH:0:object:t:robot:p=-0.012195005086251064, LHT:1:object:t:e=-0.012195005086251064, LHH:1:object:t:var=-0.012195005086251064, LEX:885=0.3253363557873039, LEX:1012=-0.4879112840147427, LEX:1016=-0.4879112840147427, LEX:1031=0.32524310457775707, LEX:1033=0.32524310457775707, LEX:1032=-0.16266817943698555, LEX:1034=-0.16266817943698555}
29: =========== r:0.6551724137931034 p:0.6551724137931034 (epoch:3 file:0 0)
if the robot is close to the stove
(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
MakeLex parse time: 0.005 sec.
Adding:
is  :- S/NP\(NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $4 $1) (IsNear:t $4 ($2 $3)))))))) : 0.0
close to  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
is  :- S/NP\(NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 0.0
close to  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
Lex Size: 1037
First parse time: 0.006 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.001134894593885111
the robot  :- NP : robot:p : 1 : 20.0
is  :- S/NP\(NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $4 $1) (IsNear:t $4 ($2 $3)))))))) : 1031 : 0.32524310457775707
is  :- S/NP\(NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 1033 : 0.32524310457775707
close to  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1035 : 0.0
close to  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1036 : 0.0
the stove  :- NP : stove:f : 76 : 20.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.001134894593885111
the robot  :- NP : robot:p : 1 : 20.0
is  :- S/NP\(NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $4 $1) (IsNear:t $4 ($2 $3)))))))) : 1031 : 0.32524310457775707
is  :- S/NP\(NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 1033 : 0.32524310457775707
close to  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1035 : 0.0
close to  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1036 : 0.0
the stove  :- NP : stove:f : 76 : 20.0
]
Scale: 0.9984523987818882
Update:
{BB:IsNear:t:object:t=0.008478136539947166, LHT:0:object:t:e=0.00824637549963063, LHH:0:object:t:var=0.00824637549963063, LHT:1:object:t:p=0.00824637549963041, LHH:1:object:t:robot:p=0.00824637549963041, LHT:0:IsNear:t:e=0.008478136539947166, LHH:0:IsNear:t:var=0.008478136539947166, LHT:1:IsNear:t:e=0.008478136539947166, LHH:1:IsNear:t:the=0.008478136539947166, BB:On:t:object:t=-0.00847813653994711, LHT:0:On:t:e=-0.00847813653994711, LHH:0:On:t:var=-0.00847813653994711, LHT:1:On:t:e=-0.00847813653994711, LHH:1:On:t:the=-0.00847813653994711, LHT:0:object:t:p=-0.008246375499630388, LHH:0:object:t:robot:p=-0.008246375499630388, LHT:1:object:t:e=-0.008246375499630388, LHH:1:object:t:var=-0.008246375499630388, LEX:886=0.004412560817784723, LEX:1035=-0.0022062804297925272, LEX:1036=-0.0022062804297925272, LEX:1012=-0.004239068269973555, LEX:1016=-0.004239068269973555, LEX:1031=0.002032787840181056, LEX:1033=0.002032787840181056}
30: =========== r:0.6666666666666666 p:0.6666666666666666 (epoch:3 file:0 0)
if the microwave is on and the robot is close to the microwave
(and (exists $0 (and (object:t $0 microwave:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 microwave:f))))))
MakeLex parse time: 0.015 sec.
Adding:
the robot  :- NP : robot:p : 0.0
is close to  :- S/NP\S\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 t (lambda $3 e (and $2 (exists $4 (and (object:t $4 $0) (IsNear:t $4 ($1 $3))))))))) : 0.0
Lex Size: 1038
First parse time: 0.015 sec.
CORRECT:(and (exists $0 (and (object:t $0 microwave:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 microwave:f))))))
Using:
[LexEntries and scores:
if  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 547 : -0.7341093668651311
the microwave  :- NP : microwave:f : 77 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -0.2898930364260341
on  :- NP : IsOn:s : 57 : 9.999989827262347
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 1.2756999999999998
the robot  :- NP : robot:p : 1 : 20.0
is close to  :- S/NP\S\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 t (lambda $3 e (and $2 (exists $4 (and (object:t $4 $0) (IsNear:t $4 ($1 $3))))))))) : 1037 : 0.0
]
Second parse time: 0.012 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 547 : -0.7341093668651311
the microwave  :- NP : microwave:f : 77 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -0.2898930364260341
on  :- NP : IsOn:s : 57 : 9.999989827262347
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 1.2756999999999998
the robot  :- NP : robot:p : 1 : 20.0
is close to  :- S/NP\S\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 t (lambda $3 e (and $2 (exists $4 (and (object:t $4 $0) (IsNear:t $4 ($1 $3))))))))) : 1037 : 0.0
]
Scale: 0.9984424298094972
Update:
{BB:exists:exists=0.11016371999022756, BB:object:t:state:t=0.15087387951375372, LHT:0:object:t:e=0.14170960281891795, LHH:0:object:t:var=0.14170960281891795, LHT:0:state:t:e=0.15051697374739548, LHH:0:state:t:var=0.15051697374739548, LHT:1:state:t:s=0.15087387951375372, LHH:1:state:t:IsOn:s=0.1531332054149068, LHT:1:object:t:p=-0.00312909223969233, BB:exists:object:t=-0.16075309858418654, LHH:1:object:t:you:p=-0.003129092239692282, LHT:0:object:t:s=-0.15313320541490666, LHH:0:object:t:IsOn:s=-0.15313320541490666, LHT:1:object:t:d=-0.008294510356296634, LHH:1:object:t:bowl:d=-0.0022593259011531555, LHH:1:state:t:yellow:s=-0.0022593259011531555, LHH:1:object:t:cups:d=-0.006035184455143479, BB:exists:state:t=-3.569057663581368E-4, LHT:1:state:t:e=-3.569057663581368E-4, LHH:1:state:t:var=-3.569057663581368E-4, LEX:509=-1.6891489502372973E-5, LEX:123=-0.13568022017974896, LEX:131=0.082860181351588, LEX:172=-0.002259325901153155, LEX:311=-1.3522495330054701E-4, LEX:365=-0.0029938672863917353, LEX:373=-0.00589995950184293, LEX:547=0.04439099387067693, LEX:559=0.019721446266655816, LEX:518=0.01996000494560501, LEX:558=-2.342309995059989E-4, LEX:570=0.09718407400481496, LEX:977=-0.00829451035629663, LEX:1020=-0.10861533759461743}
31: =========== r:0.6774193548387096 p:0.6774193548387096 (epoch:3 file:0 0)
if the stove is not on and the mug contains coffee
(and (exists $0 (and (object:t $0 stove:f) (not (state:t $0 IsOn:s)))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coffee:q))))))
MakeLex parse time: 0.007 sec.
Adding:
if the stove is not  :- S/S/NP : (lambda $0 e (lambda $1 t (and (exists $2 (and (object:t $2 stove:f) (not (state:t $2 $0)))) $1))) : 0.25
on  :- NP : IsOn:s : 0.0
Lex Size: 1039
First parse time: 0.007 sec.
CORRECT:(and (exists $0 (and (object:t $0 stove:f) (not (state:t $0 IsOn:s)))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coffee:q))))))
Using:
[LexEntries and scores:
if the stove is not  :- S/S/NP : (lambda $0 e (lambda $1 t (and (exists $2 (and (object:t $2 stove:f) (not (state:t $2 $0)))) $1))) : 1038 : 0.25
on  :- NP : IsOn:s : 57 : 9.999989827262347
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 1.2756999999999998
the mug  :- NP : mug:d : 16 : 20.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.0009951537279416
coffee  :- NP : coffee:q : 35 : 10.0
]
Second parse time: 0.007 sec.
Best LexEntries:
[LexEntries and scores:
if the stove is not  :- S/S/NP : (lambda $0 e (lambda $1 t (and (exists $2 (and (object:t $2 stove:f) (not (state:t $2 $0)))) $1))) : 1038 : 0.25
on  :- NP : IsOn:s : 57 : 9.999989827262347
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 1.2756999999999998
the mug  :- NP : mug:d : 16 : 20.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.0009951537279416
coffee  :- NP : coffee:q : 35 : 10.0
]
Scale: 0.9984324610361731
Update:
{}
32: =========== r:0.6875 p:0.6875 (epoch:3 file:0 0)
if the mug is green and the TV is on
(and (exists $0 (and (object:t $0 mug:d) (state:t $0 green:s))) (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s))))
MakeLex parse time: 0.02 sec.
Adding:
if  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 0.0
green  :- NP : green:s : 0.0
on  :- NP : IsOn:s : 0.0
the mug  :- NP : mug:d : 0.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 0.0
the TV  :- NP : tv:f : 0.0
Lex Size: 1039
First parse time: 0.038 sec.
CORRECT:(and (exists $0 (and (object:t $0 mug:d) (state:t $0 green:s))) (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s))))
Using:
[LexEntries and scores:
if  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 547 : -0.6897183729944542
the mug  :- NP : mug:d : 16 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -0.39850837402065153
green  :- NP : green:s : 51 : 10.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 966 : 0.2623808739580999
the TV  :- NP : tv:f : 79 : 20.0
is  :- S/NP\S\(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 901 : 0.08614290711502723
on  :- NP : IsOn:s : 57 : 9.999989827262347
]
Second parse time: 0.02 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 547 : -0.6897183729944542
the mug  :- NP : mug:d : 16 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -0.39850837402065153
green  :- NP : green:s : 51 : 10.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 966 : 0.2623808739580999
the TV  :- NP : tv:f : 79 : 20.0
is  :- S/NP\S\(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 901 : 0.08614290711502723
on  :- NP : IsOn:s : 57 : 9.999989827262347
]
Scale: 0.9984224924619103
Update:
{BB:exists:exists=-0.07331988803318232, BB:object:t:state:t=0.03696900365508011, LHT:0:object:t:e=-0.012228925499814894, LHH:0:object:t:var=-0.012228925499814894, LHT:1:object:t:d=-0.01744905119801745, LHT:0:state:t:e=0.0014318864638597842, LHH:0:state:t:var=0.0014318864638597842, LHT:1:state:t:s=0.0037881806248018127, LHH:1:state:t:green:s=0.008144230291959148, LHH:1:state:t:IsOn:s=0.001859363304867273, BB:has:t:object:t=-0.08085217810247018, LHT:0:has:t:e=-0.08085217810247018, LHH:0:has:t:var=-0.08085217810247018, LHT:1:has:t:e=-0.08085217810247018, LHH:1:has:t:the=-0.08085217810247018, LHH:1:object:t:cup:d=-0.002046814248388966, BB:object:t:object:t=-2.9152659024464054E-5, BB:state:t:state:t=-2.9582145596719536E-4, BB:exists:object:t=-0.022912982417823573, LHT:0:object:t:s=-0.010003451301589006, LHH:0:object:t:IsOn:s=-0.0018592210096298, BB:exists:state:t=-0.00789981517278306, LHT:1:state:t:e=-0.002356305065288319, LHH:1:state:t:var=-0.0023563159638025593, LHH:1:state:t:yellow:s=-0.006215402073511081, LHH:1:object:t:bowl:d=-0.005603556387182008, LHH:1:object:t:cups:d=-0.009798680562446324, LHT:1:object:t:p=-0.0047830400273165576, LHH:1:object:t:you:p=-0.0047830400273165576, LHH:0:object:t:green:s=-0.008144230291959204, BB:In:t:state:t=-0.09143749654508734, BB:In:t:exists=-4.967813397721711E-4, LHT:0:In:t:e=-0.04571874827254367, LHH:0:In:t:var=-0.04571874827254367, LHT:1:In:t:e=-1.0433740403017249E-4, BB:In:t:object:t=-0.09114792911993873, LHT:1:In:t:f=-0.04561426906463333, LHH:1:In:t:tv:f=-0.04561426906463333, LHH:1:In:t:var=-1.0347605194587005E-4, LEX:123=0.0027705069870071985, LEX:131=0.046660527346252194, LEX:151=-1.12409109991149E-4, LEX:172=-0.0055993866423343025, LEX:198=-2.5981982502496435E-5, LEX:218=-5.90033448674282E-4, LEX:311=-2.8157280415845126E-4, LEX:349=-2.554320637666633E-4, LEX:365=-0.00445949538225012, LEX:373=-0.00925784279171163, LEX:397=-4.026566299535425E-5, LEX:547=0.011216166567997161, LEX:559=0.005699768157405906, LEX:1028=-0.04571818094860709, LEX:518=0.06805819084940551, LEX:522=-8.857311951958909E-4, LEX:542=-1.0245896897491367E-4, LEX:546=-0.0011590909688603314, LEX:558=-0.0015448017241151196, LEX:570=0.049676333534898844, LEX:600=-0.0798410023646588, LEX:901=0.03852879235317398, LEX:929=-0.0035047462709314756, LEX:965=-1.0015059767465352E-5, LEX:977=-0.04350520345362149, LEX:1020=-0.025708214949274583, LEX:858=-0.08085217810247017, LEX:890=0.014767913092665489, LEX:918=-0.002018820235750408, LEX:954=0.01814451924211007, LEX:966=0.09572281956436911, LEX:972=-0.045614269428578075, LEX:1022=-1.4791005066783108E-4}
33: =========== r:0.696969696969697 p:0.696969696969697 (epoch:3 file:0 0)
if there exists a mug and the mug contains sugar
(and (exists $0 (object:t $0 mug:d)) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 sugar:q))))))
MakeLex parse time: 0.012 sec.
Adding:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
a mug  :- NP : mug:d : 0.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 0.5467285714285715
the mug  :- NP : mug:d : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
sugar  :- NP : sugar:q : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
sugar  :- NP : sugar:q : 0.0
Lex Size: 1039
First parse time: 0.013 sec.
CORRECT:(and (exists $0 (object:t $0 mug:d)) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 sugar:q))))))
Using:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.16607629912521607
a mug  :- NP : mug:d : 22 : 20.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : 0.0780351798659171
the mug  :- NP : mug:d : 16 : 20.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.1736643001360243
sugar  :- NP : sugar:q : 30 : 10.0
]
Second parse time: 0.012 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.16607629912521607
a mug  :- NP : mug:d : 22 : 20.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : 0.0780351798659171
the mug  :- NP : mug:d : 16 : 20.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.1736643001360243
sugar  :- NP : sugar:q : 30 : 10.0
]
Scale: 0.9984125240867021
Update:
{BB:exists:exists=0.0010068041904689508, LHT:0:object:t:e=-0.005978310874087732, LHH:0:object:t:var=-0.005978310874087732, LHT:1:object:t:d=-0.004925066929855456, LHH:1:object:t:mug:d=0.0014776041833161014, BB:has:t:object:t=0.006826653139120716, LHT:0:has:t:e=-0.03926451699212099, LHH:0:has:t:var=-0.03926451699212099, LHT:1:has:t:e=-0.03926452498690129, LHH:1:has:t:the=-0.039264517010647135, LHT:0:object:t:d=-8.371658962223708E-4, LHH:0:object:t:mug:d=-8.371658962223708E-4, LHT:1:object:t:e=-1.4454725039876179E-5, LHH:1:object:t:var=-1.4454725039876179E-5, BB:object:t:state:t=-0.029536585144734326, LHT:0:state:t:e=-0.0295339401549926, LHH:0:state:t:var=-0.0295339401549926, LHT:1:state:t:e=-0.0069605944420299305, LHH:1:state:t:the=-0.006826693377204376, BB:exists:object:t=-0.0061525383510990786, LHT:1:object:t:p=-0.0018759551154129282, LHH:1:object:t:you:p=-0.0018759551154129282, LHT:1:state:t:s=-0.023215320860531043, LHH:1:state:t:yellow:s=-0.023215320860531043, BB:object:t:object:t=-0.003207534506969914, LHH:1:object:t:bowl:d=-0.0025039978390618218, LHH:1:object:t:cups:d=-0.002619293713880982, LHH:1:object:t:cup:d=-0.001279379560228999, BB:exists:state:t=-5.541264985332324E-4, LHT:0:state:t:d=-6.41975147568343E-4, LHH:0:state:t:mug:d=-6.41975147568343E-4, LHH:1:state:t:var=-1.339010648255554E-4, LEX:122=0.003607937361968109, LEX:125=0.0019853714304555745, LEX:129=7.133219981139882E-4, LEX:133=0.0042260263077219815, LEX:137=6.092864906945712E-4, LEX:141=0.001447693669994063, LEX:145=0.0025640258991450767, LEX:149=0.001447693669994063, LEX:153=6.580920322024591E-4, LEX:200=-0.005198052502600783, LEX:210=-1.3469495646847995E-4, LEX:220=-0.005737714137043451, LEX:240=-8.212475591605813E-4, LEX:250=-2.8231116899989035E-4, LEX:423=-1.8275866260646548E-4, LEX:861=-2.4841795002557666E-5, LEX:863=-2.4841795002557666E-5, LEX:124=6.002602918957902E-4, LEX:128=-0.004725571393334097, LEX:132=0.002454919559704144, LEX:136=7.279052480980889E-4, LEX:140=0.002301906216614904, LEX:144=8.322381099173515E-4, LEX:148=0.0022493921573781906, LEX:152=-0.009167083932565408, LEX:123=0.001091106995939237, LEX:127=5.384610293317581E-4, LEX:131=0.004107534073010696, LEX:135=0.001038800670458415, LEX:139=0.0023226571060654165, LEX:143=0.0016740358571759788, LEX:147=0.0023124250530214985, LEX:151=0.0012782348884411018, LEX:198=-0.008686999418064589, LEX:208=-2.1761278550759395E-4, LEX:218=-0.003041696887409819, LEX:238=-0.0013289087137107775, LEX:248=-2.6701292219811975E-4, LEX:333=-0.001187873499192512, LEX:341=-6.579049799991774E-5, LEX:349=-0.001250302177217013, LEX:365=-0.001067709732376249, LEX:381=-5.382025433812285E-4, LEX:389=-1.775192788165035E-4, LEX:397=-2.006535830005799E-4, LEX:553=-3.919139440074668E-5, LEX:559=-4.235014294300104E-5, LEX:571=-3.112355511511129E-4, LEX:577=-2.0682818755662582E-5, LEX:583=-4.418832828669637E-4, LEX:589=-2.0739792355614056E-5, LEX:595=-3.040707696555684E-4, LEX:419=-4.7884246793898E-4, LEX:859=3.529984757888786E-4, LEX:126=0.0017409675386832997, LEX:130=-0.005625036613758084, LEX:134=0.0051927495189524895, LEX:138=9.652758023813271E-4, LEX:142=0.0014228518749915132, LEX:146=0.0022238837282477298, LEX:150=0.0014228518749915132, LEX:154=-0.006225218481956713, LEX:858=0.006826693360859601, LEX:966=-0.006826476741848049, LEX:454=-0.046091178126021544, LEX:472=-0.006826693377204376, LEX:502=0.05291787150322563}
34: =========== r:0.7058823529411765 p:0.7058823529411765 (epoch:3 file:0 0)
if the television is on
(exists $0 (and (object:t $0 television:f) (state:t $0 IsOn:s)))
MakeLex parse time: 0.003 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
on  :- NP : IsOn:s : 0.0
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 0.0
on  :- NP : IsOn:s : 0.0
Lex Size: 1039
First parse time: 0.003 sec.
WRONG: (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s)))
Using:
[LexEntries and scores:
if  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 547 : -0.678502206426457
the television  :- NP : tv:f : 78 : 18.001938209850742
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -0.4242165889699261
on  :- NP : IsOn:s : 57 : 9.999989827262347
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.009544485091886825
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 845 : 1.6224871548888373
on  :- NP : IsOn:s : 57 : 9.999989827262347
]
Scale: 0.998402555910543
Update:
{BB:object:t:state:t=0.050937748229225636, LHT:0:object:t:e=0.03763054033524637, LHH:0:object:t:var=0.03763054033524637, LHH:1:object:t:television:f=0.9983902383546334, LHT:0:state:t:e=0.05023201483667808, LHH:0:state:t:var=0.05023201483667808, LHT:1:state:t:s=0.050937748229225636, LHH:1:state:t:IsOn:s=0.05623310822698854, LHH:1:object:t:tv:f=-0.9983902383546334, BB:exists:object:t=-0.0033776126160546234, LHT:1:object:t:p=-0.0033776126160546234, LHH:1:object:t:you:p=-0.0033776126160546234, LHT:0:object:t:s=-0.056233108226988245, LHH:0:object:t:IsOn:s=-0.056233108226988245, BB:exists:exists=-0.015224955275687234, LHT:1:object:t:d=-0.015224955275687234, LHH:1:object:t:bowl:d=-0.005295359997762749, LHH:1:state:t:yellow:s=-0.005295359997762749, LHH:1:object:t:cups:d=-0.009929595277924481, BB:exists:state:t=-7.05733392547289E-4, LHT:1:state:t:e=-7.05733392547289E-4, LHH:1:state:t:var=-7.05733392547289E-4, LEX:845=0.8875211244493751, LEX:78=-0.9983902383546336, LEX:123=0.002846561541060131, LEX:131=0.36616000812248534, LEX:172=-0.005295359997762748, LEX:311=-2.817166690492772E-4, LEX:365=-0.0030958959470053457, LEX:373=-0.009647878608875204, LEX:547=-0.29889277371067163, LEX:559=-0.16266205863543948, LEX:518=-0.1622281368609494, LEX:558=-4.339217744900754E-4, LEX:570=-0.4656491541239041, LEX:977=-0.01522495527568723, LEX:1020=-0.35485407031960264, LEX:304=0.11086701543531412}
35: =========== r:0.6857142857142857 p:0.6857142857142857 (epoch:3 file:0 0)
if you find any cups
(exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d))))
MakeLex parse time: 0.005 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
you  :- NP : you:p : 0.0
find any cups  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 0.0
Lex Size: 1039
First parse time: 0.004 sec.
WRONG: (exists $0 (and (object:t $0 you:p) (state:t $0 yellow:s)))
Using:
[LexEntries and scores:
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (state:t $1 yellow:s)))) : 218 : -0.3502426577229814
you  :- NP : you:p : 2 : 10.853030189931374
find any cups  :- S\S : (lambda $0 t $0) : 314 : 0.4745262806401181
]
Second parse time: 0.013 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.3566155230305985
you  :- NP : you:p : 2 : 10.853030189931374
find any cups  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 360 : 0.788795962885789
]
Scale: 0.9983925879334273
Update:
{BB:exists:object:t=0.4992434644726426, LHT:0:object:t:e=0.4994484478781955, LHH:0:object:t:var=0.4994484478781955, LHT:1:object:t:p=-0.06700593965715203, LHH:1:object:t:you:p=-0.06700593965715203, LHT:1:object:t:d=0.5664563277483984, LHH:1:object:t:cups:d=0.572275791535142, BB:exists:exists=-3.645508429503629E-5, BB:object:t:state:t=-0.5053068621360961, LHH:1:object:t:bowl:d=-1.415848749361184E-4, LHT:0:state:t:e=-0.5055611169409018, LHH:0:state:t:var=-0.5055611169409018, LHT:1:state:t:s=-0.5047279931082693, LHH:1:state:t:yellow:s=-0.5047279931082693, BB:exists:state:t=-1.3303356054895814E-5, LHT:1:state:t:e=-8.33123832632642E-4, LHH:1:state:t:var=-8.33123832632642E-4, LHH:1:object:t:cup:d=-0.005677878911807432, LEX:309=-7.748313943882891E-5, LEX:323=-1.0631512968328473E-4, LEX:347=-3.064670411324648E-5, LEX:355=-0.0035760867282476553, LEX:379=-7.748313943882891E-5, LEX:395=-8.095453141351687E-5, LEX:403=-0.0020894576894378825, LEX:312=-6.526569516689892E-5, LEX:326=-4.3874776177068236E-4, LEX:334=-4.0371883868759416E-5, LEX:342=-2.0058332883063928E-5, LEX:358=-1.0859440289048981E-5, LEX:366=-1.09437177326835E-4, LEX:382=-1.0663892328077173E-4, LEX:398=-2.3446014546319612E-5, LEX:307=-7.748313943882891E-5, LEX:321=-1.0631512968328473E-4, LEX:345=-3.0646694813381036E-5, LEX:377=-7.748313943882891E-5, LEX:393=-8.095450684879569E-5, LEX:314=-0.2506309502992133, LEX:328=-8.883367413973215E-4, LEX:336=-3.064667746858038E-5, LEX:344=-4.084436211530791E-5, LEX:360=0.2960281308991869, LEX:368=-7.748313943882891E-5, LEX:376=-0.006454866697387697, LEX:384=-8.095446103421436E-5, LEX:392=-1.551706067708577E-5, LEX:408=-0.030668546812126548, LEX:305=-7.748313943882891E-5, LEX:319=-1.0632426601920157E-4, LEX:343=-3.0347201173763425E-5, LEX:375=-1.2349660504901034E-4, LEX:391=-8.016345331232801E-5, LEX:316=-7.748313943882891E-5, LEX:330=-1.0631512968328473E-4, LEX:338=-3.0646694813381036E-5, LEX:370=-7.748313943882891E-5, LEX:386=-8.095450684879569E-5, LEX:131=0.266664375174864, LEX:151=-1.1034817073649296E-4, LEX:172=-2.544400090047387E-5, LEX:188=-2.6928157327460735E-5, LEX:198=-2.6313037243075215E-5, LEX:208=-7.914090346971278E-5, LEX:218=-0.5043938978126331, LEX:248=-2.554101001651724E-4, LEX:341=-2.4351222881579337E-5, LEX:349=0.2811797107703731, LEX:365=-0.0014090667979751636, LEX:373=-3.969772635226915E-5, LEX:389=-6.425646621709552E-5, LEX:397=-0.033777574474192135, LEX:553=-1.4348826668095428E-5, LEX:559=-8.327889281120189E-4, LEX:2=0.0075667145136507205, LEX:25=-0.005661535043936328, LEX:318=-7.748313943882891E-5, LEX:332=-1.063107520888915E-4, LEX:340=-3.0646694813381036E-5, LEX:372=-7.748313943882891E-5, LEX:388=-8.095450684879569E-5}
36: =========== r:0.6666666666666666 p:0.6666666666666666 (epoch:3 file:0 0)
When the water is boiling
(exists $0 (and (object:t $0 water:q) (state:t $0 IsBoiling:s)))
MakeLex parse time: 0.002 sec.
Adding:
When the  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 0.0
Lex Size: 1040
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 water:q) (state:t $0 IsBoiling:s)))
Using:
[LexEntries and scores:
When the  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 1039 : 0.0
water  :- NP : water:q : 32 : 10.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -0.7790706592895287
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
When the  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 1039 : 0.0
water  :- NP : water:q : 32 : 10.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -0.7790706592895287
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Scale: 0.9983826201553484
Update:
{LHT:0:state:t:e=-2.0240584652489368E-4, LHH:0:state:t:var=-2.0240584652489368E-4, BB:exists:state:t=-2.0240584652482453E-4, LHT:1:state:t:e=-2.0240584652482453E-4, LHH:1:state:t:var=-2.0240584652482453E-4, LEX:846=7.677659376657958E-5, LEX:1039=-7.678902369967436E-5, LEX:570=-1.2562925275825867E-4, LEX:1020=1.2561682282510848E-4}
37: =========== r:0.6756756756756757 p:0.6756756756756757 (epoch:3 file:0 0)
when the water in the pot is boiling
(exists $0 (and (object:t $0 water:q) (In:t $0 (the $1 (object:t $1 pot:d))) (state:t $0 IsBoiling:s)))
MakeLex parse time: 0.003 sec.
Adding:
when the water in  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and (object:t $2 water:q) (In:t $2 (the $3 ($0 $3))) (state:t $2 $1))))) : 0.0512659375
Lex Size: 1041
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 water:q) (In:t $0 (the $1 (object:t $1 pot:d))) (state:t $0 IsBoiling:s)))
Using:
[LexEntries and scores:
when the water in  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and (object:t $2 water:q) (In:t $2 (the $3 ($0 $3))) (state:t $2 $1))))) : 1040 : 0.0512659375
the pot  :- NP : pot:d : 19 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -0.7789450424667036
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
when the water in  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and (object:t $2 water:q) (In:t $2 (the $3 ($0 $3))) (state:t $2 $1))))) : 1040 : 0.0512659375
the pot  :- NP : pot:d : 19 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -0.7789450424667036
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Scale: 0.9983726525763006
Update:
{BB:object:t:state:t=-0.010682527987151953, LHT:1:In:t:e=0.01068252798715162, LHT:0:state:t:e=-0.01068252798715173, LHH:0:state:t:var=-0.01068252798715173, LHT:1:state:t:s=-0.01068252798715173, LHT:1:In:t:s=-0.010682527987151713, LHH:1:state:t:var=-0.010682527987151713, LEX:570=-0.010682527987151715, LEX:1020=0.010681295447975709}
38: =========== r:0.6842105263157895 p:0.6842105263157895 (epoch:3 file:0 0)
if there exists a cup and there exists a cup and there exists a cup and there exists a cup and there exists a cup
(and (exists $0 (object:t $0 cup:d)))
MakeLex parse time: 0.045 sec.
Adding:
and there exists a cup and there exists a cup and there exists a cup  :- S\S : (lambda $0 t $0) : 0.0
Lex Size: 1041
First parse time: 3.009 sec.
WRONG: (and (exists $0 (and (object:t $0 cup:d) (object:t $0 (the $1 (object:t $1 cup:d))))) (exists $0 (and (object:t $0 cup:d) (state:t $0 (the $1 (exists $2 (and (object:t $2 cup:d) (object:t $2 cup:d) (state:t $2 $1))))))))
Using:
[LexEntries and scores:
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 141 : -0.4872709134015593
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 149 : -0.4872709134015593
exists  :- S/NP/NP\(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($0 $4 $3) ($1 $4 $2))))))) : 1003 : 0.1153429080593947
exists  :- S/NP/NP\(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($0 $4 $3) ($1 $2 $4))))))) : 1004 : 0.1153429080593947
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 1.0036983246761313
cup  :- NP : cup:d : 8 : 8.951895281881198
and  :- NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1025 : 2.2180582847837482
there exists  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 136 : -0.9272107023801099
a cup  :- NP : cup:d : 20 : 7.766382609687776
and  :- S/NP\S/(S|NP) : (lambda $0 <e,t> (lambda $1 t (lambda $2 e (and $1 (exists $3 (and ($0 $3) (state:t $3 $2))))))) : 954 : 0.018023964863099727
there exists  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 152 : -1.7470696537196715
and  :- NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 1026 : 2.2180582847837482
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : 0.0027587894842857116
there exists  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 128 : -1.7854810636120149
]
Second parse time: 0.045 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 5.590359471276227
and there exists a cup and there exists a cup and there exists a cup  :- S\S : (lambda $0 t $0) : 999 : 0.8823845112517487
]
Scale: 0.998362685196278
Update:
{BB:exists:exists=-3.9621670545026975, LHT:0:object:t:e=-5.017224654363817, LHH:0:object:t:var=-4.885061956276125, LHT:1:object:t:d=-3.9964592237654055, LHH:1:object:t:cup:d=-3.995971705305689, BB:object:t:state:t=-1.9061368856060987, LHT:0:state:t:e=-1.363827147766347, LHH:0:state:t:var=-1.363827147766347, LHT:1:state:t:s=-0.544230345572996, LHH:1:state:t:the=-1.0816129339938056, BB:exists:object:t=-0.5283275892728436, BB:exists:state:t=-0.03169274657557594, LHT:1:state:t:e=-0.8201976057923579, LHH:1:state:t:var=-0.2827393541970793, BB:object:t:object:t=-1.3148837746496345, LHT:1:object:t:f=-0.43108647931410143, LHH:1:object:t:tv:f=-0.43108647931410143, LHH:0:object:t:the=-0.13505782179562273, LHH:1:state:t:yellow:s=-7.566317446857672E-5, LHH:1:object:t:bowl:d=-3.73809892258019E-4, LHH:1:object:t:cups:d=-1.1370856745841693E-4, LHT:1:object:t:p=-0.001522109741182209, LHH:1:object:t:you:p=-0.001522109741182209, LHT:0:object:t:d=-2.8826449286096352E-5, LHH:0:object:t:cup:d=-2.8826449286096352E-5, LHT:1:object:t:e=-0.5910731082706507, LHH:1:object:t:var=-3.448234245692098E-4, BB:has:t:object:t=-0.10790906166608151, BB:has:t:state:t=-2.2261087136094563E-5, LHT:0:has:t:e=-0.10864640453790518, LHH:0:has:t:var=-0.01292126802650706, LHT:1:has:t:e=-0.10865584528536804, LHH:1:has:t:the=-0.01316555841001851, LHT:0:object:t:s=-0.0028951237079314117, BB:In:t:state:t=-4.203883950628767E-4, BB:In:t:object:t=-3.987818837108033E-4, LHT:0:In:t:e=-2.1019419753143834E-4, LHH:0:In:t:var=-2.1019419753143834E-4, LHT:1:In:t:s=-3.839894083632878E-5, LHH:1:In:t:the=-2.1019419753143834E-4, LHH:1:object:t:the=-0.5907359682757756, LHH:0:has:t:the=-0.09572538970699336, LHH:1:has:t:var=-0.09549028687534951, LHT:0:state:t:d=-6.008035990070369E-4, LHH:0:state:t:cup:d=-6.008035990070369E-4, BB:In:t:exists=-4.3213022704146954E-5, LHT:1:In:t:e=-1.7179525669510956E-4, LEX:999=0.9771175816045181, LEX:155=0.016477424808918503, LEX:122=-9.574215936935669E-5, LEX:159=-0.015587388449122505, LEX:161=-0.011928954950101654, LEX:163=-1.6275339106998466E-4, LEX:125=-9.760701418080685E-5, LEX:129=-1.9409400913660024E-5, LEX:133=-0.1327686003203612, LEX:137=-1.618979078126101E-5, LEX:141=-0.21573489464754173, LEX:145=-6.929356546957466E-5, LEX:149=-0.21573489464754173, LEX:153=-2.9620802504418E-4, LEX:190=-2.1382466157819627E-5, LEX:210=-2.2607872676136046E-4, LEX:240=-6.11722717010606E-5, LEX:250=-3.35260941296633E-5, LEX:423=-3.0890423879160464E-4, LEX:861=-3.002125436329073E-4, LEX:863=-3.002125436329073E-4, LEX:124=-0.014704539115483025, LEX:128=-0.27360696053650596, LEX:132=-0.10039021093338836, LEX:136=-0.9641207522251156, LEX:140=-6.371689138361325E-5, LEX:144=-0.9428519181462907, LEX:148=-0.0011976190465708518, LEX:152=-1.8112603818316524, LEX:865=-0.057163757027116076, LEX:866=-0.057163757027116076, LEX:20=-3.0255761449606653, LEX:457=-1.4959377551308656E-4, LEX:469=-1.585743936579222E-5, LEX:493=-1.897581824410802E-5, LEX:123=-6.01731545223193E-5, LEX:127=-1.4177940848907192E-5, LEX:131=-0.14463379715525865, LEX:135=-2.755438657597133E-5, LEX:139=-6.175815621273925E-5, LEX:143=-4.623331990234619E-5, LEX:147=-6.148264688877852E-5, LEX:151=-3.7853195859739665E-4, LEX:198=-1.0085893862188493E-5, LEX:238=-6.448206424486283E-5, LEX:333=-1.0439894914186563E-4, LEX:365=-0.001509830924467642, LEX:381=-1.1988399664764441E-5, LEX:571=-8.196197045838994E-4, LEX:583=-0.001211520336553063, LEX:595=-8.575459483712251E-4, LEX:1006=-0.10395121567124913, LEX:1008=-0.15054322983951463, LEX:1027=-1.0900282913394835E-4, LEX:1028=-1.0119136839749002E-4, LEX:419=-0.24915342511110627, LEX:859=-0.013771222395139017, LEX:126=-0.018363621028130925, LEX:130=-1.9570850548921706E-5, LEX:134=-0.17914620559121786, LEX:138=-0.013787205491308525, LEX:142=-3.842603676554118E-5, LEX:146=-5.934635666057553E-5, LEX:150=-3.842603676554118E-5, LEX:154=-0.18488721223844856, LEX:424=-5.907890118964766E-4, LEX:1003=-0.158832924127293, LEX:1004=-0.158832924127293, LEX:431=-0.011107330594048738, LEX:443=-0.0013025846948720378, LEX:455=-6.022889692924953E-4, LEX:467=-0.09547615142949685, LEX:479=-0.48083163424807446, LEX:491=-0.010913854421309434, LEX:1001=-1.2245612640441768, LEX:8=-1.9385203334862102, LEX:869=-6.022889692924953E-4, LEX:887=-7.362983626908314E-4, LEX:918=-0.17527643398805268, LEX:930=-0.035828339133313056, LEX:942=-0.0567046371182764, LEX:954=-1.0895561104087872, LEX:978=-0.17248825737044263, LEX:988=-0.25859822194365867, LEX:1022=-0.27398452955145886, LEX:1023=-2.220324122272238E-5, LEX:1024=-3.3393953758500044E-5, LEX:1025=-0.6509881604534405, LEX:1026=-1.2523158566969352, LEX:118=0.0067798624677609, LEX:82=0.991582822728517}
39: =========== r:0.6666666666666666 p:0.6666666666666666 (epoch:3 file:0 0)
if the mug is on the table or on the stove
(exists $0 (and (object:t $0 mug:d) (or (On:t $0 (the $1 (object:t $1 table:f))) (On:t $0 (the $1 (object:t $1 stove:f))))))
MakeLex parse time: 0.007 sec.
Adding:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.2734183333333333
mug is on  :- S|NP/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (On:t $2 ($0 $1))))) : 0.0
Lex Size: 1042
First parse time: 0.007 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (or (On:t $0 (the $1 (object:t $1 table:f))) (On:t $0 (the $1 (object:t $1 stove:f))))))
Using:
[LexEntries and scores:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 505 : 1.2717725826515256
mug is on  :- S|NP/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (On:t $2 ($0 $1))))) : 1041 : 0.0
the table  :- NP : table:f : 73 : 20.0
or on  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and (object:t $2 mug:d) (or ($0 $2) (On:t $2 (the $3 (object:t $3 $1)))))))) : 851 : 0.5555555555555556
the stove  :- NP : stove:f : 76 : 20.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 505 : 1.2717725826515256
mug is on  :- S|NP/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (On:t $2 ($0 $1))))) : 1041 : 0.0
the table  :- NP : table:f : 73 : 20.0
or on  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and (object:t $2 mug:d) (or ($0 $2) (On:t $2 (the $3 (object:t $3 $1)))))))) : 851 : 0.5555555555555556
the stove  :- NP : stove:f : 76 : 20.0
]
Scale: 0.9983527180152749
Update:
{}
40: =========== r:0.675 p:0.675 (epoch:3 file:0 0)
if the glass is empty or dry
(exists $0 (and (object:t $0 glass:d) (or (state:t $0 empty:s) (state:t $0 dry:s))))
MakeLex parse time: 0.003 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
the glass is empty  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 glass:d) ($0 $1)))) : 0.0
Lex Size: 1043
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (or (state:t $0 empty:s) (state:t $0 dry:s))))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.47864610105020394
the glass is empty  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 glass:d) ($0 $1)))) : 1042 : 0.0
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 857 : 2.0511089168593646
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.47864610105020394
the glass is empty  :- S/(S|NP) : (lambda $0 <e,t> (exists $1 (and (object:t $1 glass:d) ($0 $1)))) : 1042 : 0.0
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 857 : 2.0511089168593646
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9983427510332847
Update:
{LHT:0:state:t:e=0.0034290472000805083, LHH:0:state:t:var=0.0034290472000805083, LHT:1:state:t:null=0.001714808692773618, LHH:1:state:t:dry:s=0.00171461863095156, LHT:1:state:t:e=-0.001714808692773975, LHH:1:state:t:var=-0.001714808692773975, LHT:0:state:t:s=-0.003429237261903338, LHH:0:state:t:dry:s=-0.003429237261903338, LEX:417=1.979569132882498E-5, LEX:852=-0.0010121492578035278, LEX:854=-3.4883202983151365E-4, LEX:856=2.751725421474302E-4, LEX:1042=0.0010660121980903862, LEX:123=4.074352148109057E-5, LEX:131=0.0010257458905968497, LEX:853=-4.893547871111627E-4, LEX:855=-4.186636576149913E-4, LEX:857=8.882218973288044E-4}
41: =========== r:0.6829268292682927 p:0.6829268292682927 (epoch:3 file:0 0)
if the refrigerator is on and the mug contains coke
(and (exists $0 (and (object:t $0 refrigerator:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coke:q))))))
MakeLex parse time: 0.009 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
on  :- NP : IsOn:s : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
the refrigerator  :- NP : refrigerator:f : 0.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
on  :- NP : IsOn:s : 0.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 0.5467285714285715
the mug  :- NP : mug:d : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
coke  :- NP : coke:q : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
coke  :- NP : coke:q : 0.0
Lex Size: 1043
First parse time: 0.011 sec.
WRONG: (and (object:t IsOn:s refrigerator:f) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coke:q))))))
Using:
[LexEntries and scores:
if  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 123 : -1.1377537230772774
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -0.7682637470187279
on  :- NP : IsOn:s : 57 : 9.999989827262347
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : 0.0848618732267767
the mug  :- NP : mug:d : 16 : 20.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.22658217163925
coke  :- NP : coke:q : 34 : 10.0
]
Second parse time: 0.008 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.4796718469408008
the refrigerator  :- NP : refrigerator:f : 75 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -1.975362356807166
on  :- NP : IsOn:s : 57 : 9.999989827262347
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : 0.0848618732267767
the mug  :- NP : mug:d : 16 : 20.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.22658217163925
coke  :- NP : coke:q : 34 : 10.0
]
Scale: 0.9983327842503019
Update:
{BB:exists:exists=0.9982950654490025, BB:object:t:state:t=0.9982664975189104, LHT:0:object:t:e=0.9982950654517443, LHH:0:object:t:var=0.9982950654517443, LHT:0:state:t:e=0.9982664973477423, LHH:0:state:t:var=0.9982664973477423, LHT:1:state:t:s=0.9982950654698444, LHH:1:state:t:IsOn:s=0.9982950654698499, BB:has:t:object:t=2.8567950934196522E-5, LHT:0:has:t:e=-0.028656048391464763, LHH:0:has:t:var=-0.028656048391464763, LHT:1:has:t:e=-0.028656048391464763, LHH:1:has:t:the=-0.028656048391464763, LHT:1:state:t:e=-2.8568122102084098E-5, LHH:1:state:t:the=-2.8567950933889608E-5, BB:exists:object:t=-0.9982950654997153, LHT:0:object:t:s=-0.9982950654698497, LHH:0:object:t:IsOn:s=-0.9982950654698497, LEX:509=-1.4137170318497802E-4, LEX:75=6.411984916773693E-5, LEX:123=-0.9547041585051109, LEX:131=0.656969780240156, LEX:70=-6.411984916733327E-5, LEX:570=0.7004439319311675, LEX:1020=-0.827719540867227, LEX:858=2.8567950866253316E-5, LEX:966=-2.856703816119656E-5, LEX:454=-0.028684616342398956, LEX:472=-2.8567950933889608E-5, LEX:502=0.028713184293333156, LEX:519=1.8463066160694313E-5, LEX:549=2.0578240433281078E-5, LEX:561=3.205911451693199E-5, LEX:547=0.1705613911459955, LEX:559=0.12724835875365204, LEX:518=0.12728041786816896}
Testing

File #0: 0
0: ==================(0 -- 0)
if you find any
(dummy:t)
Test parse time: 0.001 sec.
WRONG
1 parses: [(exists $0 (object:t $0 cups:d))]
[LexEntries and scores:
if you find any  :- S : (exists $0 (object:t $0 cups:d)) : 379 : -2.3578813887424675E-4
]
Had correct parse: false
Feats: {RN:true=1.0, LHT:0:object:t:e=1.0, LHH:0:object:t:var=1.0, LHT:1:object:t:d=1.0, LHH:1:object:t:cups:d=1.0, LEX:379=1.0}
-----------------------------
Recall : 0/1 = 0.0
Precision : 0/1 = 0.0
F1: NaN
No Parses : 0
EMPTY Recall : 0/1 = 0.0
EMPTY Precision : 0/1 = 0.0
EMPTY F1: NaN
-----------
Training, iteration 4
---------------------
DataSet: 0
---------------------
0: ===========
if there exists a mug
(exists $0 (object:t $0 mug:d))
MakeLex parse time: 0.004 sec.
Adding:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
a mug  :- NP : mug:d : 0.0
Lex Size: 1043
First parse time: 0.005 sec.
WRONG: (state:t mug:d yellow:s)
Using:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (state:t $0 yellow:s)) : 250 : -1.0248028755117304
exists  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 130 : -1.4258981567568167
a mug  :- NP : mug:d : 22 : 20.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.1695884943278148
a mug  :- NP : mug:d : 22 : 20.0
]
Scale: 0.9983228176663207
Update:
{LHT:0:object:t:e=0.9241143516906373, LHH:0:object:t:var=0.9241143516906373, LHT:1:object:t:d=0.8817090402092013, LHH:1:object:t:mug:d=0.9241147860581194, LHT:0:object:t:d=-0.16798603033730933, LHH:0:object:t:mug:d=-0.16798603033730933, LHT:1:object:t:e=-0.018450760946638896, LHH:1:object:t:var=-0.018450760946638896, BB:object:t:state:t=-1.7517486782550872E-4, LHT:0:state:t:e=-1.1429834451896382E-4, LHH:0:state:t:var=-1.1429834451896382E-4, LHT:1:state:t:s=-0.6826735091994979, LHH:1:state:t:yellow:s=-0.6826735091994979, LHH:1:object:t:bowl:d=-0.023493447295068224, LHH:1:object:t:cups:d=-0.01860691770070816, LHT:1:object:t:p=-0.10712995790923453, LHH:1:object:t:you:p=-0.10712995790923453, LHH:1:object:t:cup:d=-3.053808531417632E-4, LHT:0:state:t:d=-0.7561896322357226, LHH:0:state:t:mug:d=-0.7561896322357226, LHT:1:state:t:e=-0.07363042138074356, LHH:1:state:t:var=-0.07363042138074356, LEX:122=0.11235721423221186, LEX:125=0.06368596822946346, LEX:129=0.02202684038394293, LEX:133=0.07042388669028314, LEX:137=0.015969905938189467, LEX:141=0.0347652199760718, LEX:145=0.07711316226948187, LEX:149=0.0347652199760718, LEX:153=0.016875667668703978, LEX:190=-3.8867520105180325E-5, LEX:200=-3.6887367462691834E-5, LEX:210=-0.010507494603291045, LEX:220=-4.898803260010255E-5, LEX:250=-0.3968186334740088, LEX:423=-2.62500454058043E-4, LEX:861=-0.020071477631691894, LEX:863=-0.020071477631691894, LEX:124=0.007097571447441534, LEX:128=-0.4117616030299579, LEX:132=0.19401355987333088, LEX:136=0.011732969928002148, LEX:140=0.0525480808952082, LEX:144=0.01317955675145526, LEX:148=0.0522201633751886, LEX:152=0.008159729929647886, LEX:123=0.01349782773203234, LEX:127=0.012656695574089561, LEX:131=0.2567742903270621, LEX:135=0.011673862140860794, LEX:139=0.0693360921730919, LEX:143=0.016262508479182078, LEX:147=0.06891961821466468, LEX:151=0.00867443047771519, LEX:188=-2.2003842655379623E-5, LEX:198=-1.6249727274316934E-5, LEX:208=-0.012925078578980611, LEX:218=-1.1971692202617824E-5, LEX:248=-0.2856799075431888, LEX:341=-0.10712953384322021, LEX:389=-0.018606563045604523, LEX:553=-4.287520570174406E-5, LEX:577=-0.01671066819552798, LEX:589=-0.016776591236306565, LEX:419=0.04975857807889371, LEX:859=0.02292463584025269, LEX:126=0.06696860299526111, LEX:130=-0.3856496437001202, LEX:134=0.11337754605615005, LEX:138=0.04464350079896203, LEX:142=0.014693742344379904, LEX:146=0.06343707271674938, LEX:150=0.014693742344379904, LEX:154=0.028288192854655843}
1: =========== r:0.0 p:0.0 (epoch:4 file:0 0)
if there exists a cup
(exists $0 (object:t $0 cup:d))
MakeLex parse time: 0.004 sec.
Adding:
there exists a  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
cup  :- NP : cup:d : 0.0
Lex Size: 1044
First parse time: 0.006 sec.
WRONG: (state:t cup:d yellow:s)
Using:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (state:t $0 yellow:s)) : 250 : -1.4216215089857394
exists  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 130 : -1.811547800456937
a cup  :- NP : cup:d : 20 : 4.740806464727111
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 1.393415917508019
there exists a  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 1043 : 0.0
cup  :- NP : cup:d : 8 : 7.013374948394988
]
Scale: 0.9983128512813346
Update:
{LEX:81=8.041398111505689E-5, LHT:0:object:t:e=0.8826218134914695, LHH:0:object:t:var=0.8826218134914695, LHT:1:object:t:d=0.8026552882214645, LHH:1:object:t:cup:d=0.8820194475004006, LHT:0:object:t:d=-0.1680722103410743, LHH:0:object:t:cup:d=-0.1680722103410743, LHT:1:object:t:e=-0.025574327883333005, LHH:1:object:t:var=-0.025574327883333005, BB:object:t:state:t=-2.917519844475127E-5, LHT:1:state:t:s=-0.4015830048953804, LHH:1:state:t:yellow:s=-0.4015830048953804, LHH:1:object:t:bowl:d=-0.044514043044550214, LHH:1:object:t:cups:d=-0.03485011623438585, LHT:1:object:t:p=-0.06253135718773634, LHH:1:object:t:you:p=-0.06253135718773634, LHT:0:state:t:d=-0.7145782753853893, LHH:0:state:t:cup:d=-0.7145782753853893, LHT:1:state:t:e=-0.31300020675605555, LHH:1:state:t:var=-0.31300020675605555, BB:has:t:object:t=-1.2390801681932723E-4, LHT:1:has:t:e=-1.2390801681932723E-4, LHT:0:has:t:d=-1.2390750215501224E-4, LHH:0:has:t:cup:d=-1.2390750215501224E-4, LHH:1:has:t:var=-1.2390634802836726E-4, LEX:122=0.01626366611176367, LEX:159=-1.2391202054747188E-4, LEX:1043=0.7312621504785177, LEX:125=0.010042058605086255, LEX:129=0.001980861889629439, LEX:133=0.011631145695994497, LEX:137=-9.701427783105218E-4, LEX:141=0.0029955770976090867, LEX:145=0.010419285062785081, LEX:149=0.0029955770976090867, LEX:153=0.00242635273545623, LEX:190=-1.5615311915573806E-5, LEX:210=-0.020264235521803804, LEX:250=-0.22510943406564782, LEX:423=-5.234568669825395E-4, LEX:861=-0.0837288687506367, LEX:863=-0.0837288687506367, LEX:124=9.372935103399736E-4, LEX:128=-0.29704087147150116, LEX:132=0.04171092211114439, LEX:136=9.126284164907632E-4, LEX:140=-0.06649634754376454, LEX:144=0.0011853409047257815, LEX:148=-0.06624310710730463, LEX:152=0.0010436755732656261, LEX:20=-0.552521872159165, LEX:123=0.013025171697692088, LEX:127=0.00109853182746594, LEX:131=0.7687467152209031, LEX:135=8.243264089016076E-4, LEX:139=0.006442386471100654, LEX:143=0.0015818143678800016, LEX:147=0.0063606281326123, LEX:151=0.0012374324469766192, LEX:208=-0.024225570745700323, LEX:248=-0.1764444454499539, LEX:341=-0.06252696806108046, LEX:389=-0.034846706692006804, LEX:553=-8.331288263559985E-5, LEX:577=-0.07261841947896004, LEX:589=-0.07292399995715595, LEX:419=0.010266229620709744, LEX:859=-0.001904680843336928, LEX:126=0.011297852271824803, LEX:130=-0.24393345196972893, LEX:134=0.020140575380755844, LEX:138=0.00632580842693118, LEX:142=-0.08073329165302763, LEX:146=0.0010682817837899367, LEX:150=-0.08073329165302763, LEX:154=0.0030756781827216604, LEX:467=-1.2390634802836726E-4, LEX:1001=-0.17869676656543573, LEX:8=0.5524414581780501}
2: =========== r:0.0 p:0.0 (epoch:4 file:0 0)
if there exists a cup and there exists a cup
(and (exists $0 (object:t $0 cup:d)))
MakeLex parse time: 0.01 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
and there exists a cup  :- S\S : (lambda $0 t $0) : 0.0
Lex Size: 1044
First parse time: 0.039 sec.
WRONG: (exists $0 (object:t $0 cup:d))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 2.162162632728922
there exists a  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 1043 : 0.7312621504785177
cup  :- NP : cup:d : 8 : 7.565816406573038
and there exists a cup  :- S\S : (lambda $0 t $0) : 155 : -1.5732315715099756
]
Second parse time: 0.01 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 6.581942294004744
]
Scale: 0.9983028850953379
Update:
{LEX:82=0.9748465975781024, LHT:0:object:t:e=6.442926542303239E-4, LHH:0:object:t:var=6.447228921007669E-4, LHT:1:object:t:d=-8.060988317761146E-4, LHH:1:object:t:cup:d=6.437138518343638E-4, LHT:0:object:t:d=-0.002399986522354614, LHH:0:object:t:cup:d=-0.002399986522354614, LHT:1:object:t:e=-4.893563998744604E-4, LHH:1:object:t:var=-4.893377676024302E-4, BB:exists:exists=-0.0027131042373821877, LHT:0:state:t:e=-7.04105128259567E-5, LHH:0:state:t:var=-7.04105128259567E-5, LHT:1:state:t:e=-5.568976393968743E-4, LHH:1:state:t:var=-5.568976285392446E-4, BB:exists:object:t=-1.6413628125389064E-5, LHT:1:state:t:s=-5.045957923705349E-4, LHH:1:state:t:yellow:s=-5.045957923705349E-4, LHH:1:object:t:bowl:d=-8.279418158855609E-4, LHH:1:object:t:cups:d=-6.218708677257066E-4, LHT:1:object:t:p=-4.601732642898221E-4, LHH:1:object:t:you:p=-4.601732642898221E-4, BB:has:t:object:t=-1.5449423506353092E-4, LHT:0:has:t:e=-8.583742747005734E-5, LHH:0:has:t:var=-8.447171574197153E-5, LHT:1:has:t:e=-2.2392197911296293E-4, LHH:1:has:t:the=-8.447884705726924E-5, BB:has:t:state:t=-6.95237936977033E-5, LHH:1:has:t:var=-1.394431320556938E-4, LHT:0:state:t:d=-9.91082918941452E-4, LHH:0:state:t:cup:d=-9.91082918941452E-4, LHT:0:has:t:d=-1.3808455164290566E-4, LHH:0:has:t:cup:d=-1.3808455164290566E-4, LEX:1002=-0.0627408465666636, LEX:420=-0.17827880242261612, LEX:155=-0.7310273108965996, LEX:122=-0.0011031926317003192, LEX:159=-1.38153464427291E-4, LEX:1043=-0.8897149315580226, LEX:125=-7.154392012532237E-4, LEX:129=-1.0400246392297706E-4, LEX:133=-0.001218490773283894, LEX:137=-2.122318844406428E-4, LEX:141=-3.253247739099036E-4, LEX:145=-8.162895346369753E-4, LEX:149=-3.253247739099036E-4, LEX:153=-1.7074842470005987E-4, LEX:210=-3.952638613918982E-4, LEX:250=-3.131709951131056E-4, LEX:423=-2.696755358184691E-5, LEX:861=-1.472148561889647E-4, LEX:863=-1.472148561889647E-4, LEX:124=-1.1160224207457707E-4, LEX:128=-0.0017472635189756413, LEX:132=-0.010790326971600652, LEX:136=-2.1543895339145306E-4, LEX:140=-8.401490492691434E-4, LEX:144=-2.2136400800418698E-4, LEX:148=-8.354440550966757E-4, LEX:152=-1.069655265143117E-4, LEX:20=-0.012653988087690957, LEX:457=-1.3349786491952272E-5, LEX:123=-0.0035952109791703188, LEX:127=-5.4532599610513604E-5, LEX:131=-0.7202543701498105, LEX:135=-1.1824872296036847E-4, LEX:139=-7.085445927292037E-4, LEX:143=-1.6500060183342893E-4, LEX:147=-7.045833406035945E-4, LEX:151=-8.709472506494423E-5, LEX:208=-4.324642803524466E-4, LEX:248=-1.9029182728422044E-4, LEX:341=-4.441594467530468E-4, LEX:365=-1.565252964223224E-5, LEX:389=-6.214729837521088E-4, LEX:577=-1.3098870320133629E-4, LEX:589=-1.314664208602926E-4, LEX:419=-0.0026203134348205476, LEX:859=-0.0015336802516940056, LEX:126=-0.0017937180200403684, LEX:130=-7.564685948751542E-4, LEX:134=-0.0027169549959281322, LEX:138=-0.0014422174560519958, LEX:142=-4.7202553571010523E-4, LEX:146=-9.755844779908694E-4, LEX:150=-4.7202553571010523E-4, LEX:154=-3.5922572454822585E-4, LEX:424=-8.332401344177992E-5, LEX:455=-6.634993801917907E-5, LEX:467=-1.3944159408321813E-4, LEX:1001=-0.01230562444265196, LEX:8=-0.9649010360246061, LEX:869=-6.634993801917909E-5, LEX:918=-0.0025836780579429146, LEX:930=-5.686735479428874E-5, LEX:942=-7.275946129006878E-5, LEX:1023=-2.3722802514283855E-5, LEX:1024=-2.9498309934295863E-5, LEX:1025=-1.965777589348117E-5, LEX:1026=-1.3360860718121533E-5}
3: =========== r:0.0 p:0.0 (epoch:4 file:0 0)
if there exists an empty kettle
(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s)))
MakeLex parse time: 0.003 sec.
Adding:
if  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
there exists an  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and ($0 $3 $2) (state:t $3 $1)))))) : 0.10073333333333334
Lex Size: 1045
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 139 : 0.04876048565369677
there exists an  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and ($0 $3 $2) (state:t $3 $1)))))) : 1044 : 0.10073333333333334
empty  :- NP : empty:s : 53 : 10.0
kettle  :- NP : kettle:d : 11 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 139 : 0.04876048565369677
there exists an  :- S/NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and ($0 $3 $2) (state:t $3 $1)))))) : 1044 : 0.10073333333333334
empty  :- NP : empty:s : 53 : 10.0
kettle  :- NP : kettle:d : 11 : 10.0
]
Scale: 0.9982929191083246
Update:
{BB:object:t:state:t=0.0038645031227607825, LHT:0:object:t:e=-0.0025560284745240612, LHH:0:object:t:var=-0.0025560284745240612, LHT:1:object:t:d=8.592105316900461E-4, LHH:1:object:t:kettle:d=8.592128210652169E-4, LHT:0:state:t:e=0.003754854174560016, LHH:0:state:t:var=0.003754854174560016, LHT:1:state:t:s=0.003754854174560016, LHH:1:state:t:empty:s=0.003754854174560016, LHT:0:object:t:d=-4.425927007397958E-4, LHH:0:object:t:kettle:d=-4.425927007397958E-4, LHT:1:object:t:e=-4.7523898633612183E-4, LHH:1:object:t:var=-4.7523898633612183E-4, BB:state:t:state:t=-4.166246990759651E-4, LHT:0:state:t:d=-4.166224097008055E-4, LHH:0:state:t:kettle:d=-4.166224097008055E-4, LHT:1:state:t:e=-7.235867136999124E-4, LHH:1:state:t:var=-7.235867136999124E-4, BB:object:t:object:t=-0.0034478898705608235, LHT:1:object:t:s=-0.0034152412955893376, LHH:1:object:t:empty:s=-0.0034152412955893376, LHT:0:object:t:s=-3.264857497148568E-5, LHH:0:object:t:empty:s=-3.264857497148568E-5, LHT:0:state:t:s=-3.069643039991069E-4, LHH:0:state:t:empty:s=-3.069643039991069E-4, LEX:421=8.726510451402794E-4, LEX:1044=3.0281971918912993E-5, LEX:141=-0.001484068164901792, LEX:149=-0.001484068164901792, LEX:861=0.0012724603232352498, LEX:863=0.0012724603232352498, LEX:136=-2.199101031698039E-4, LEX:144=-2.1098578591374856E-4, LEX:152=-3.975602821083008E-5, LEX:862=-1.1341724953514884E-4, LEX:864=-1.1341724953514884E-4, LEX:139=8.894947929843238E-4, LEX:147=-4.4259041136463623E-4, LEX:589=-4.166201203256459E-4, LEX:1006=-2.204723078077367E-4, LEX:1008=-2.59281232949503E-4, LEX:1003=-9.819059213138758E-5, LEX:1004=-9.819059213138758E-5, LEX:1010=-6.761347250200243E-4}
4: =========== r:0.25 p:0.25 (epoch:4 file:0 0)
if there exists a green glass
(exists $0 (and (object:t $0 glass:d) (state:t $0 green:s)))
MakeLex parse time: 0.004 sec.
Adding:
if there exists  :- S/NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and ($0 $3 $2) (state:t $3 $1)))))) : 0.10073333333333334
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1046
First parse time: 0.005 sec.
WRONG: (exists $0 (and (has:t glass:d $0) (state:t $0 green:s)))
Using:
[LexEntries and scores:
if there exists  :- S/NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and ($0 $3 $2) (state:t $3 $1)))))) : 1045 : 0.10073333333333334
a  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 $0))) : 467 : -1.113772679021174
green  :- NP : green:s : 51 : 10.0
glass  :- NP : glass:d : 9 : 9.999938922891825
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (exists $3 (and ($0 $3 $2) (state:t $3 $1)))))) : 1045 : 0.10073333333333334
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.5228666904280568
green  :- NP : green:s : 51 : 10.0
glass  :- NP : glass:d : 9 : 9.999938922891825
]
Scale: 0.9982829533202892
Update:
{BB:object:t:state:t=0.7096442845698001, LHT:0:object:t:e=0.6924735549975883, LHH:0:object:t:var=0.6924735549975883, LHT:1:object:t:d=0.6950199246074253, LHH:1:object:t:glass:d=0.6950199246074253, LHT:0:state:t:e=0.00612760969116067, LHH:0:state:t:var=0.00612760969116067, LHT:1:state:t:s=0.00612760969116067, LHH:1:state:t:green:s=0.00612760969116067, LHT:0:object:t:d=-0.004260518258352745, LHH:0:object:t:glass:d=-0.004260518258352745, LHT:1:object:t:s=-0.006098109878617585, LHH:1:object:t:green:s=-0.006098109878617585, BB:object:t:object:t=-6.572043738266019E-4, BB:exists:state:t=-2.4056024172375003E-4, BB:In:t:state:t=-2.4056024172375003E-4, BB:In:t:exists=-2.4056024172375003E-4, LHT:1:object:t:e=-7.167728661561108E-4, LHH:1:object:t:var=-7.167728661561108E-4, LHT:0:In:t:e=-1.2028012086187501E-4, LHH:0:In:t:var=-1.2028012086187501E-4, LHT:1:In:t:d=-1.2028012086187501E-4, LHH:1:In:t:glass:d=-1.2028012086187501E-4, BB:has:t:object:t=-0.0017636979039658194, LHT:0:has:t:e=-0.014542395942686064, LHH:0:has:t:var=-0.014542395942686064, LHT:1:has:t:e=-0.7051815221708965, LHH:1:has:t:the=-0.014555653457258372, LHT:0:has:t:d=-0.6906391262282104, LHH:0:has:t:glass:d=-0.6906391262282104, LHH:1:has:t:var=-0.6906258687136382, LHT:0:state:t:s=-2.142950915316044E-5, LHH:0:state:t:green:s=-2.142950915316044E-5, LHT:1:state:t:e=-2.142950915316044E-5, LHH:1:state:t:var=-2.142950915316044E-5, BB:has:t:state:t=-0.7034178242669308, LEX:422=0.1088962559523708, LEX:1045=-0.11719423680078074, LEX:1043=-1.1277569008230227E-4, LEX:125=-0.0018166367736101303, LEX:141=-9.288021595094052E-4, LEX:149=-9.288021595094052E-4, LEX:861=0.007260193961955248, LEX:863=0.007260193961955248, LEX:136=-2.5824035380760704E-4, LEX:144=-2.476288942067317E-4, LEX:152=-1.5717306681795076E-4, LEX:865=0.09738041331755896, LEX:866=0.09738041331755896, LEX:123=-1.7375324905354291E-4, LEX:131=-0.0016948878815511803, LEX:1006=-2.584727092923022E-4, LEX:1008=-3.0474982267565453E-4, LEX:1028=-1.2028012086187501E-4, LEX:419=-0.001769850340056289, LEX:154=-0.0035857609165289724, LEX:1003=-0.09104902151511314, LEX:1004=-0.09104902151511314, LEX:431=-0.014542395942686066, LEX:443=-1.325751457230919E-5, LEX:467=-0.6906258687136384, LEX:479=0.4059011847352539, LEX:491=-5.751649273322374E-4, LEX:1001=-0.0036928577618000804}
5: =========== r:0.2 p:0.2 (epoch:4 file:0 0)
if there exists a cup that contains syrup
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
MakeLex parse time: 0.025 sec.
Adding:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 0.40293333333333337
syrup  :- NP : syrup:q : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
syrup  :- NP : syrup:q : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
Lex Size: 1046
First parse time: 0.032 sec.
WRONG: (exists $0 (and (object:t $0 bowl:d) (has:t $0 syrup:q)))
Using:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 bowl:d)) : 210 : -1.0752626709537436
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.8434699660137267
a cup that  :- S|NP/NP : (lambda $0 e (lambda $1 e (has:t $1 $0))) : 471 : -0.011544201537151542
contains  :- S|NP/NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 448 : -0.048876412271023004
syrup  :- NP : syrup:q : 33 : 10.0
]
Second parse time: 0.026 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 1.022856767952325
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.8434699660137267
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 0.6150065358399547
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 0.3285823065423313
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 0.7513062396285108
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.2552953559325832
syrup  :- NP : syrup:q : 33 : 10.0
]
Scale: 0.998272987731225
Update:
{BB:has:t:object:t=0.7199998330654052, LHT:0:object:t:e=0.5028044615947674, LHH:0:object:t:var=0.5028532674597089, LHT:1:object:t:d=0.40603089706664147, LHH:1:object:t:cup:d=0.9291825881288734, LHT:0:has:t:e=0.5320408295736402, LHH:0:has:t:var=0.5320612651946068, LHT:1:has:t:e=0.6353506572254902, LHH:1:has:t:the=0.6297079025007754, LHT:1:object:t:q=0.11372806254364817, LHH:1:object:t:syrup:q=0.11372806254364817, LHT:1:object:t:e=-0.01810124315677183, LHH:1:object:t:the=-0.011936814739630309, LHH:0:object:t:the=-4.880586494229416E-5, LHH:1:object:t:var=-0.006164428417141528, LHT:0:object:t:q=-0.001153048816396096, LHH:0:object:t:syrup:q=-0.001153048816396096, LHT:0:has:t:q=-0.014925327104613152, LHH:0:has:t:syrup:q=-0.014925327104613152, BB:object:t:state:t=-0.21944288912392906, LHT:0:state:t:e=-0.38715078726330193, LHH:0:state:t:var=-0.3870890595756008, LHT:1:state:t:s=-0.3869590629630569, LHH:1:state:t:yellow:s=-0.3869590629630569, BB:has:t:state:t=-0.18268833596824946, BB:object:t:object:t=-0.31883423050471627, LHH:1:object:t:bowl:d=-0.5231410605644116, BB:exists:object:t=-0.0025211463355348115, LHH:1:object:t:cups:d=-1.0630497820382048E-5, BB:exists:has:t=-0.002608340874991592, LHH:1:has:t:var=-0.014942707544141691, LHT:1:has:t:q=-0.11823515475646316, LHH:1:has:t:syrup:q=-0.09764969248760637, LHH:0:state:t:the=-6.172768770112523E-5, LHT:1:state:t:e=-1.9213737927926614E-4, LHH:1:state:t:the=-4.451411560715771E-5, LHH:1:state:t:var=-1.4762326367210836E-4, LHH:0:has:t:the=-2.043562096658675E-5, LEX:164=0.002269680660971431, LEX:122=-5.835613025516521E-5, LEX:159=0.0021280217881002594, LEX:161=0.15084663943112564, LEX:163=0.2681377677964934, LEX:1043=-0.011291314290764987, LEX:429=-0.015219031639900184, LEX:435=0.0024516490661403165, LEX:441=-0.07988846637146291, LEX:447=0.0023163390981718202, LEX:453=-0.1086518125812364, LEX:459=0.004267256787932649, LEX:465=0.002494697173857143, LEX:471=-0.049844867165043355, LEX:477=0.0026336718355891545, LEX:483=-0.014926821068899594, LEX:489=0.014305664655445135, LEX:495=-0.01389678581644477, LEX:501=0.016499331829946343, LEX:426=0.0031200446239307775, LEX:432=-0.04280190674849705, LEX:438=0.0031613144733524507, LEX:444=-0.026151439549700353, LEX:450=0.007960140518022853, LEX:456=0.005103464616123332, LEX:462=0.0018213675742564028, LEX:468=-0.0051080280373288905, LEX:474=-0.015277711593449097, LEX:480=0.0050186731580444555, LEX:486=-0.015500631289104524, LEX:492=0.0012739042519643608, LEX:498=-0.04786334520217429, LEX:125=-5.618118543062279E-5, LEX:129=-0.004996363524667883, LEX:133=-4.77440713263745E-5, LEX:141=-2.6708483958577104E-5, LEX:145=-4.4068837855810596E-5, LEX:149=-2.6708483958577104E-5, LEX:153=-0.0030135017724763568, LEX:190=-0.005028753316303449, LEX:210=-0.5179864584720139, LEX:220=-1.5907631916367407E-5, LEX:250=-0.381887907536115, LEX:260=-1.1266883458551379E-4, LEX:423=0.507955249832343, LEX:861=-2.119234970023591E-5, LEX:863=-2.119234970023591E-5, LEX:128=-2.557979732340096E-5, LEX:132=-2.1057248212767049E-4, LEX:140=-5.3988239585171356E-5, LEX:148=-5.363461388686442E-5, LEX:152=-9.975010578323487E-4, LEX:20=-2.522898405530028E-5, LEX:427=-0.014576658436836963, LEX:433=0.002453229097142695, LEX:439=-0.03089154699502945, LEX:445=0.002323251700251249, LEX:451=-0.03164504306499426, LEX:457=0.07385354268550305, LEX:463=0.002494697173857143, LEX:469=-0.049664347194116, LEX:475=0.0026471565331853985, LEX:481=-0.014933543068474426, LEX:487=0.0055997031172750405, LEX:493=-0.013943807308145286, LEX:499=0.00450003912559699, LEX:867=0.05618489172055641, LEX:428=0.0031200180460227507, LEX:434=-0.017040057438298298, LEX:440=0.0031611699297127947, LEX:446=-0.05393366705627011, LEX:452=0.007945880617968816, LEX:458=0.01864364578058251, LEX:464=0.002494697173857143, LEX:470=0.0024060086357708256, LEX:476=-0.0152776532767032, LEX:482=-0.0023792248406787246, LEX:488=-0.015499678049174605, LEX:494=-0.0010715116595298542, LEX:500=-0.04781608698862981, LEX:123=-2.099067226124684E-4, LEX:131=-0.01360964157616418, LEX:139=-3.540454930354514E-5, LEX:147=-3.5141651251400736E-5, LEX:151=-0.0018820672484919055, LEX:248=-1.1905236332158787E-5, LEX:577=-1.8556947714944512E-5, LEX:589=-1.851875237991422E-5, LEX:419=-9.798212616868825E-4, LEX:859=-0.0022407364037814815, LEX:126=-4.8180542524101784E-5, LEX:130=-2.4217878473788598E-5, LEX:134=-9.807927421074465E-5, LEX:138=-3.3962794056415284E-5, LEX:142=-3.7170497172094304E-5, LEX:146=-3.744983777374557E-5, LEX:150=-3.7170497172094304E-5, LEX:154=-0.006189407928388516, LEX:424=-0.40204859160478534, LEX:425=-0.014575977571884108, LEX:431=0.0020872130035505853, LEX:437=-0.030854865645294407, LEX:443=0.0024032518207911776, LEX:449=-0.031560071170631435, LEX:455=0.4323934410729938, LEX:461=0.0024701448084302785, LEX:467=-0.00781317338357209, LEX:473=0.002647163906625489, LEX:479=-0.03661027685337494, LEX:485=0.005593927364029922, LEX:491=-0.014370604976446434, LEX:497=0.00434963464773272, LEX:1001=-0.008543758611057465, LEX:8=-3.6538899962793126E-5, LEX:869=0.3654180757895424, LEX:868=0.4188194403961092, LEX:430=0.003086042920630206, LEX:436=-0.01714100384786428, LEX:442=-7.504380613109045E-4, LEX:448=-0.05564525923157947, LEX:454=0.0015309188988645703, LEX:460=0.003044740814664551, LEX:466=0.002494697173857143, LEX:472=0.003929019510914638, LEX:478=-0.015319551873934993, LEX:484=-0.002595109296353121, LEX:490=0.12078601061996808, LEX:496=-0.0012256170479252526, LEX:502=0.19535070734082988, LEX:158=1.798233341536488E-4, LEX:160=1.7371404090218626E-4, LEX:162=3.374014416814328E-4}
6: =========== r:0.16666666666666666 p:0.16666666666666666 (epoch:4 file:0 0)
if there exists a cup that contains coke
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 coke:q)))))
MakeLex parse time: 0.027 sec.
Adding:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 0.40293333333333337
coke  :- NP : coke:q : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
coke  :- NP : coke:q : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
Lex Size: 1046
First parse time: 0.032 sec.
WRONG: (exists $0 (and (object:t $0 bowl:d) (has:t $0 (the $1 (object:t $1 coke:q)))))
Using:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 bowl:d)) : 210 : -1.5932491294257574
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.44142137440894136
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 1.0473999769129485
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 0.6940003823318737
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 1.17012568002462
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.450646063273413
coke  :- NP : coke:q : 34 : 10.0
]
Second parse time: 0.026 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 1.530812017784668
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.44142137440894136
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 1.0473999769129485
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 0.6940003823318737
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 1.17012568002462
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.450646063273413
coke  :- NP : coke:q : 34 : 10.0
]
Scale: 0.9982630223411264
Update:
{BB:has:t:object:t=0.07549129414796166, LHT:0:object:t:e=0.04485323240757535, LHH:0:object:t:var=0.044867221365087924, LHT:1:object:t:d=0.03593238491684672, LHH:1:object:t:cup:d=0.4124615814159904, LHT:0:has:t:e=-0.1095815681581096, LHH:0:has:t:var=-0.10954204345069535, LHT:1:has:t:e=-0.09325396879680592, LHH:1:has:t:the=-0.0939549436293455, LHT:1:object:t:q=0.0168426007538292, LHH:1:object:t:coke:q=0.0168426007538292, LHT:1:object:t:e=-0.008059315131859875, LHH:1:object:t:the=-0.0018463269517356613, LHH:0:object:t:the=-1.39889575135538E-5, LHH:1:object:t:var=-0.006212988180124214, LHT:0:object:t:q=-1.3916211194137337E-4, LHH:0:object:t:coke:q=-1.3916211194137337E-4, LHT:0:has:t:q=-0.001111663241578038, LHH:0:has:t:coke:q=-0.001111663241578038, BB:object:t:state:t=-0.0037152316085647917, LHT:0:state:t:e=-0.02868674805407575, LHH:0:state:t:var=-0.028684959891243905, LHT:1:state:t:s=-0.02862082103385749, LHH:1:state:t:yellow:s=-0.02862082103385749, BB:has:t:state:t=-0.028521079983421623, BB:object:t:object:t=-0.04066393977516413, LHH:1:object:t:bowl:d=-0.3765262657236157, BB:exists:object:t=-2.632510006402724E-4, BB:exists:has:t=-0.005872679246916545, LHH:1:has:t:var=-0.0011465118483193694, LHT:1:has:t:q=-0.017439262602881877, LHH:1:has:t:coke:q=-0.015591775922023224, LHT:1:state:t:e=-6.600109222907318E-5, LHH:1:state:t:var=-6.479480726144411E-5, LHH:0:has:t:the=-3.9524707414007475E-5, LEX:158=2.8982247198671514E-5, LEX:160=2.8055662097102328E-5, LEX:162=6.324247704437143E-5, LEX:164=2.2670840514956087E-4, LEX:159=-6.315321798630928E-4, LEX:161=0.07100093633590916, LEX:163=0.13104949660198342, LEX:1043=-0.001731533162503452, LEX:429=-0.0013951732743204043, LEX:435=-6.142583253611301E-4, LEX:441=-0.007139307914069316, LEX:447=-6.282195350224534E-4, LEX:453=-0.009020137567737443, LEX:459=4.7866917763878403E-4, LEX:465=2.4986294602207643E-4, LEX:471=-0.007449652932629133, LEX:477=-6.555769792622303E-4, LEX:483=-0.001096448029544675, LEX:489=5.938487805435947E-4, LEX:495=-9.763986685942765E-4, LEX:501=9.193060923281186E-4, LEX:426=-5.79772659646251E-4, LEX:432=-0.0030107903060457132, LEX:438=-6.173456765999006E-4, LEX:444=-0.0020275129026288436, LEX:450=-0.0020771470968226425, LEX:456=8.799716255135359E-4, LEX:462=1.8278577618560372E-4, LEX:468=-7.066852066725215E-4, LEX:474=-0.0011783840524805453, LEX:480=-2.702492336834972E-4, LEX:486=-0.0011685209030957752, LEX:492=-0.0014617627926461463, LEX:498=-0.003324917722563458, LEX:125=-1.1635253929468831E-5, LEX:129=-0.006065687655354247, LEX:141=-2.2581691282859287E-5, LEX:149=-2.2581691282859287E-5, LEX:153=-2.932837611851762E-4, LEX:190=-0.0011841609541669593, LEX:210=-0.37527618254730166, LEX:250=-0.027432008763388797, LEX:260=-6.334406525303421E-5, LEX:423=0.2110797919578116, LEX:132=-3.2373175943013566E-5, LEX:152=-1.002997408692719E-4, LEX:427=-0.0011065095606834325, LEX:433=-6.146583599733248E-4, LEX:439=-0.002198598087133018, LEX:445=-6.279946560301142E-4, LEX:451=-0.0021282690358077135, LEX:457=0.005171141799492162, LEX:463=2.4986294602207643E-4, LEX:469=-0.007371605457762262, LEX:475=-6.524925056837469E-4, LEX:481=-0.0010971049119760528, LEX:487=-0.001414680453170726, LEX:493=-9.816964162935272E-4, LEX:499=-0.0014974575135685388, LEX:867=0.003747670322081337, LEX:428=-5.797788537487867E-4, LEX:434=-0.001264317200215577, LEX:440=-6.174059442927693E-4, LEX:446=-0.0045816656481556285, LEX:452=-0.002135438227592435, LEX:458=0.004212266940918584, LEX:464=2.4986294602207643E-4, LEX:470=4.157847487825846E-4, LEX:476=-0.001178373677374982, LEX:482=-0.0010595386099900926, LEX:488=-0.001168391056139505, LEX:494=-0.0038674721946226503, LEX:500=-0.0033186193968986967, LEX:123=-3.2889136297876004E-5, LEX:131=-0.0018728866168048512, LEX:151=-1.837217963874018E-4, LEX:419=-1.0491104300442295E-4, LEX:859=-1.2623304240735279E-4, LEX:134=-1.5218508590815339E-5, LEX:154=-5.197809095559312E-4, LEX:424=-0.19894437970730458, LEX:1003=-1.7957729897863322E-5, LEX:1004=-1.7957729897863322E-5, LEX:425=-0.0011063194743110313, LEX:431=-5.495379743682559E-4, LEX:437=-0.0021957211141381975, LEX:443=-6.223455538205041E-4, LEX:449=-0.0021222813809928776, LEX:455=0.0579336688675967, LEX:461=2.472312409492465E-4, LEX:467=-0.001284697406437241, LEX:473=-6.524908854150163E-4, LEX:479=-0.002558358906164561, LEX:485=-0.0014163865534512008, LEX:491=-0.00104498029467876, LEX:497=-0.0014528887029002522, LEX:1001=-7.732744494843011E-4, LEX:8=-5.685102380760169E-5, LEX:869=0.052335399228841756, LEX:868=0.05289224322308466, LEX:430=-5.893530360563001E-4, LEX:436=-0.0012728833800696102, LEX:442=-0.07907746207753323, LEX:448=-0.004728110002373168, LEX:454=-0.05128910250867186, LEX:460=3.4144987480602576E-4, LEX:466=2.4986294602207643E-4, LEX:472=4.658302822135693E-4, LEX:478=-0.0012615134941658297, LEX:484=-0.0010780604929824858, LEX:490=0.05009360703842491, LEX:496=-0.004014534595107215, LEX:502=0.12206669676065077}
7: =========== r:0.14285714285714285 p:0.14285714285714285 (epoch:4 file:0 0)
if there is a red glass
(exists $0 (and (object:t $0 glass:d) (state:t $0 red:s)))
MakeLex parse time: 0.006 sec.
Adding:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 0.0
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
red  :- NP : red:s : 0.0
glass  :- NP : glass:d : 0.0
Lex Size: 1046
First parse time: 0.01 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (state:t $0 red:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.028242154314829446
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.11418834362416695
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.8895992394037712
red  :- NP : red:s : 47 : 10.0
glass  :- NP : glass:d : 9 : 9.999938922891825
]
Second parse time: 0.007 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.028242154314829446
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.11418834362416695
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.8895992394037712
red  :- NP : red:s : 47 : 10.0
glass  :- NP : glass:d : 9 : 9.999938922891825
]
Scale: 0.9982530571499876
Update:
{BB:object:t:state:t=0.1510109443093011, LHT:0:object:t:e=-0.010116935865424304, LHH:0:object:t:var=-0.010116935865424304, LHT:1:object:t:d=0.009536124412585802, LHH:1:object:t:glass:d=0.009545523284976768, LHT:0:state:t:e=0.02889550591355723, LHH:0:state:t:var=0.02889550591355723, LHT:1:state:t:s=0.020654583254490606, LHH:1:state:t:red:s=0.020654583254490606, LHT:0:object:t:d=-1.9630335232862022E-5, LHH:0:object:t:glass:d=-1.9630335232862022E-5, LHT:0:state:t:d=-0.008243211057450859, LHH:0:state:t:glass:d=-0.008243211057450859, BB:object:t:object:t=-0.019670041944805983, BB:In:t:state:t=-2.4703144191421597E-5, LHT:1:state:t:e=-9.959182103133112E-4, LHH:1:state:t:var=-9.959182103133112E-4, LHT:0:In:t:e=-1.2351572095710798E-5, LHH:0:In:t:var=-1.2351572095710798E-5, LHT:1:In:t:d=-1.2351572095710798E-5, LHH:1:In:t:glass:d=-1.2351572095710798E-5, BB:In:t:object:t=-1.7653417478340474E-5, LHT:1:object:t:e=-4.014527515227149E-5, LHH:1:object:t:var=-4.014527515227149E-5, LHT:1:object:t:s=-0.019642937574960547, LHH:1:object:t:red:s=-0.019642937574960547, LHT:0:object:t:s=-1.8020540181583858E-5, LHH:0:object:t:red:s=-1.8020540181583858E-5, LHT:0:state:t:s=-9.93629811929064E-4, LHH:0:state:t:red:s=-9.93629811929064E-4, BB:has:t:state:t=-0.12313115919357985, LHT:0:has:t:e=-0.12185927014754902, LHH:0:has:t:var=-0.12185927014754902, LHT:1:has:t:e=-0.12313026490979301, LHH:1:has:t:the=-0.12186119719481515, LHT:0:has:t:d=-0.0012709947622439547, LHH:0:has:t:glass:d=-0.0012709947622439547, LHH:1:has:t:var=-0.001269067714977844, LEX:503=0.01590328515419416, LEX:1005=-0.003564011669603978, LEX:125=-0.004224111535845605, LEX:141=-0.009830476721280706, LEX:149=-0.009830476721280706, LEX:861=0.01181221216155716, LEX:863=0.01181221216155716, LEX:1007=-0.00402133309642942, LEX:1009=-0.0038836954774183778, LEX:870=0.001981735440276445, LEX:871=0.001981735440276445, LEX:123=-1.4686480569514056E-4, LEX:131=-0.0038701417446849414, LEX:1006=-0.0040503453116726654, LEX:1008=-0.0039974474676233804, LEX:1028=-1.23515720957108E-5, LEX:419=-0.004170691256416461, LEX:600=-0.008380535811539344, LEX:431=-0.12185927014754902, LEX:467=-0.0012690677149778439, LEX:479=0.1115374263540789, LEX:491=-1.8965893185937937E-5, LEX:1001=-0.008255562629546567}
8: =========== r:0.25 p:0.25 (epoch:4 file:0 0)
if there is a yellow bowl
(exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s)))
MakeLex parse time: 0.018 sec.
Adding:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 0.0
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
yellow  :- NP : yellow:s : 0.0
bowl  :- NP : bowl:d : 0.0
Lex Size: 1046
First parse time: 0.035 sec.
WRONG: (exists $0 (object:t $0 yellow:s))
Using:
[LexEntries and scores:
if there  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $1 $2)))) : 145 : 0.0871316132407813
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : -9.164251149977749E-4
a  :- NP/NP : (lambda $0 e $0) : 1001 : -4.280334938853978
yellow  :- NP : yellow:s : 50 : 10.049396867487538
bowl  :- S\S : (lambda $0 t $0) : 181 : -0.5659190936969565
]
Second parse time: 0.016 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.024191809003156782
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.11016701052773753
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 1.00113666575785
yellow  :- NP : yellow:s : 50 : 10.049396867487538
bowl  :- NP : bowl:d : 227 : 0.8443280312341652
]
Scale: 0.9982430921578023
Update:
{BB:object:t:state:t=0.8621594652736602, LHT:0:object:t:e=0.13633590382328706, LHH:0:object:t:var=0.13633590382328706, LHT:1:object:t:d=0.820743214443442, LHH:1:object:t:bowl:d=0.8316999012311342, LHT:0:state:t:e=0.7163600378872973, LHH:0:state:t:var=0.7163600378872973, LHT:1:state:t:s=0.6740141765116617, LHH:1:state:t:yellow:s=0.6740141765116617, LHT:1:object:t:e=-0.0010518376721864457, LHH:1:object:t:var=-0.0010518376721864457, BB:exists:state:t=-3.449722892455571E-5, BB:exists:object:t=-2.0645492839344904E-4, LHH:1:object:t:cup:d=-0.010099466025937554, LHT:1:state:t:e=-0.0196590086226118, LHH:1:state:t:var=-0.0196590086226118, LHT:0:object:t:d=-3.6300726977077733E-5, LHH:0:object:t:bowl:d=-3.6300726977077733E-5, BB:object:t:object:t=-0.08529668478974611, LHT:0:object:t:s=-0.022607195982554992, LHH:0:object:t:yellow:s=-0.022607195982554992, LHT:1:object:t:f=-0.010159363493463636, LHH:1:object:t:tv:f=-0.010159363493463636, LHT:0:state:t:s=-0.05640748827966242, LHH:0:state:t:yellow:s=-0.05640748827966242, LHT:0:state:t:d=-0.005597381718584763, LHH:0:state:t:bowl:d=-0.005597381718584763, LHT:1:object:t:s=-0.695585302669376, LHH:1:object:t:yellow:s=-0.695585302669376, BB:state:t:state:t=-2.9095832354859613E-5, LHT:1:object:t:p=-2.543034946614101E-4, LHH:1:object:t:you:p=-2.543034946614101E-4, LHH:1:object:t:cups:d=-8.572207617547287E-4, LHT:0:has:t:e=-0.019011816378772396, LHH:0:has:t:var=-0.019011816378772396, LHT:1:has:t:e=-0.030207444517969226, LHH:1:has:t:the=-0.008888448267991454, BB:has:t:state:t=-0.029880452060029893, LHH:1:has:t:var=-0.021318996249977764, BB:In:t:state:t=-2.85393859832505E-5, BB:In:t:object:t=-2.012292978135513E-5, LHT:0:In:t:e=-1.426969299162525E-5, LHH:0:In:t:var=-1.426969299162525E-5, LHT:0:has:t:d=-0.004088812927955889, LHH:0:has:t:bowl:d=-0.004088812927955889, LHT:0:has:t:s=-0.007106815211240934, LHH:0:has:t:yellow:s=-0.007106815211240934, LEX:186=-1.9829327710544888E-4, LEX:216=-1.5490361872133064E-4, LEX:256=-2.1935084052153898E-5, LEX:173=-3.311257927682447E-4, LEX:189=-7.502961020309149E-4, LEX:199=-1.8769278464302822E-4, LEX:239=-2.6579686865614537E-5, LEX:259=-1.1086731337396074E-5, LEX:168=0.05677667786010259, LEX:184=-1.9402416737082014E-4, LEX:214=-1.7363935998790711E-4, LEX:224=-0.001495649362156105, LEX:254=-2.458816336207029E-5, LEX:264=0.027493063921155428, LEX:503=0.07682214048365177, LEX:191=-1.044693819031114E-4, LEX:201=-1.9836649941109947E-4, LEX:241=-2.809247269593616E-5, LEX:166=6.504403550657911E-4, LEX:182=-9.005140971451315E-4, LEX:212=-1.744872749022607E-4, LEX:222=-5.731083505869608E-5, LEX:252=-2.4708232237449047E-5, LEX:262=4.599377261737198E-4, LEX:1005=0.18603271981152858, LEX:177=-7.46350231853227E-5, LEX:193=-7.007830124173106E-4, LEX:203=-1.70901323585048E-4, LEX:223=-9.743605878048489E-4, LEX:243=-2.4200443913242007E-5, LEX:263=-0.0015341606017902298, LEX:125=-0.03480211719688641, LEX:129=-0.06582518204296006, LEX:133=-0.006785583214975903, LEX:137=-0.07653492528558992, LEX:141=-0.08234981782033247, LEX:145=-0.1264030166886042, LEX:149=-0.08234575854540008, LEX:153=-0.01275684110064695, LEX:190=-2.187456031261941E-5, LEX:210=-0.002337217266863572, LEX:220=-4.379084204564747E-5, LEX:230=5.7583959013438995E-5, LEX:240=4.971903596892598E-4, LEX:250=-0.0020052496989389967, LEX:260=3.560021512260704E-4, LEX:270=-1.075768952938652E-4, LEX:423=-0.007536090019083928, LEX:861=0.04793366118363675, LEX:863=0.04793436933298028, LEX:1007=0.1761983224323467, LEX:1009=0.16723689755792423, LEX:870=0.01391329244569664, LEX:871=0.01391329244569664, LEX:195=-3.9815623444031166E-4, LEX:205=-6.168292046903508E-4, LEX:225=-2.8982623700839393E-5, LEX:245=-8.919622739255485E-5, LEX:265=-4.6120065565286956E-5, LEX:123=-0.006562389029963714, LEX:131=-0.2806592661926799, LEX:135=-0.009734441099454332, LEX:143=-0.011360059199688771, LEX:151=-0.002475477987563554, LEX:208=-1.3710086530480226E-4, LEX:333=-2.045316994326179E-5, LEX:341=-1.099902317783572E-4, LEX:349=-1.7933968518295405E-5, LEX:365=-1.298914707802999E-4, LEX:373=-3.2823002275880433E-4, LEX:389=-4.8443504799083355E-4, LEX:553=-1.149655535615153E-5, LEX:1006=0.18575159831209262, LEX:1008=0.1844600499847105, LEX:1028=-1.4269692991625249E-5, LEX:419=-0.03273486425918942, LEX:859=-0.2511762483298863, LEX:518=-0.0773427836871063, LEX:522=-1.888745120695994E-5, LEX:526=-1.2224052292926008E-5, LEX:532=-0.04831030107303576, LEX:542=-0.04830535150296521, LEX:546=-4.08144020992891E-5, LEX:552=-0.0024227319443169662, LEX:558=3.667949698693218E-5, LEX:570=1.0972317600197369E-4, LEX:576=-0.031799410011001575, LEX:582=-1.9239082253912513E-5, LEX:588=-0.012953439531443066, LEX:594=-1.9239082253912513E-5, LEX:600=-0.08487778187410917, LEX:923=-2.4468235597472118E-5, LEX:935=-5.3046708328094855E-5, LEX:947=-1.7969903160010223E-5, LEX:959=-0.010063804530288234, LEX:1014=-0.2903791952318636, LEX:1018=-0.08961968163080432, LEX:1020=-0.018345894115443965, LEX:431=-0.008730151553852377, LEX:443=-2.988609813526487E-5, LEX:449=-3.8295648139383137E-4, LEX:467=-0.021318996249977764, LEX:479=0.5861906475928743, LEX:491=-6.627104424906791E-5, LEX:497=-1.2841061600381106E-4, LEX:1001=-0.7371337648730483, LEX:50=0.00660760758665734, LEX:181=-0.6463765554304657, LEX:197=-0.03677689732832688, LEX:207=-1.7456049946948783E-4, LEX:217=-2.854895675930415E-5, LEX:227=0.7362436124639379, LEX:237=-0.003261740767594034, LEX:247=-2.471860129105999E-5, LEX:257=0.0014087691712056085, LEX:267=-0.10545936534398273, LEX:277=0.06068799092613793, LEX:238=8.264574992164099E-5}
9: =========== r:0.2222222222222222 p:0.2222222222222222 (epoch:4 file:0 0)
if there is an empty cup
(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
MakeLex parse time: 0.005 sec.
Adding:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 0.0
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
empty  :- NP : empty:s : 0.0
cup  :- NP : cup:d : 0.0
Lex Size: 1046
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.2099434073152494
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.28636533296008426
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1010 : 0.014781287134084248
empty  :- NP : empty:s : 53 : 10.0
cup  :- NP : cup:d : 8 : 6.600821980624662
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.2099434073152494
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.28636533296008426
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1010 : 0.014781287134084248
empty  :- NP : empty:s : 53 : 10.0
cup  :- NP : cup:d : 8 : 6.600821980624662
]
Scale: 0.9982331273645647
Update:
{BB:object:t:state:t=0.0027916556268847608, LHT:0:object:t:e=-0.0028219359055232955, LHH:0:object:t:var=-0.0028219359055232955, LHT:1:object:t:d=-1.1228274157155877E-5, LHH:1:object:t:cup:d=-1.1228274157155877E-5, LHT:0:state:t:e=0.0029305258561302967, LHH:0:state:t:var=0.0029305258561302967, LHT:1:state:t:s=0.0029305258561302967, LHH:1:state:t:empty:s=0.0029305258561302967, BB:object:t:object:t=-0.00282534201327128, LHT:1:object:t:s=-0.002810708413323755, LHH:1:object:t:empty:s=-0.002810708413323755, LHT:0:state:t:s=-1.1641289897372117E-4, LHH:0:state:t:empty:s=-1.1641289897372117E-4, LHT:1:state:t:e=-1.1641289897372117E-4, LHH:1:state:t:var=-1.1641289897372117E-4, LEX:504=3.94503727647789E-4, LEX:1005=5.351879790274858E-4, LEX:141=-0.0014070536227637838, LEX:149=-0.0014070593343928758, LEX:861=3.441514267623476E-4, LEX:863=3.4415167047303344E-4, LEX:1007=6.13338622364583E-4, LEX:1009=5.787316112075802E-4, LEX:872=-0.0010629022178745952, LEX:873=-0.001062907642046659, LEX:1006=6.112036514181816E-4, LEX:1008=5.848967942657815E-4, LEX:546=-1.1228274157133119E-5, LEX:600=1.5258486268907289E-5, LEX:1010=0.0017312884247111997}
10: =========== r:0.3 p:0.3 (epoch:4 file:0 0)
if the cup contains water
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 water:q)))))
MakeLex parse time: 0.003 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
water  :- NP : water:q : 0.0
the cup  :- NP : cup:d : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1046
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 water:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.001134894593885111
the cup  :- NP : cup:d : 14 : 19.001456172581204
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.0009951537279416
water  :- NP : water:q : 32 : 10.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.001134894593885111
the cup  :- NP : cup:d : 14 : 19.001456172581204
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.0009951537279416
water  :- NP : water:q : 32 : 10.0
]
Scale: 0.998223162770269
Update:
{BB:has:t:object:t=1.7892460584877464E-4, LHT:0:object:t:e=1.1020100265497553E-4, LHH:0:object:t:var=1.1020100265497553E-4, LHT:1:object:t:d=1.1016714367931696E-4, LHH:1:object:t:cup:d=1.1016714367931696E-4, LHT:0:has:t:e=1.728255684412649E-4, LHH:0:has:t:var=1.728255684412649E-4, LHT:1:has:t:e=1.728252746833321E-4, LHH:1:has:t:the=1.728252746833321E-4, BB:object:t:state:t=-6.864118254543958E-5, LHT:0:state:t:e=-6.864118254543958E-5, LHH:0:state:t:var=-6.864118254543958E-5, LHT:1:state:t:e=-6.864118254543958E-5, LHH:1:state:t:the=-6.864118254543958E-5, LEX:535=-4.198391814482239E-5, LEX:545=-6.014016042365964E-5, LEX:14=1.1028217721253599E-4, LEX:559=-6.863980202183751E-5, LEX:875=1.7892197923429575E-4, LEX:472=-6.864118254543958E-5, LEX:490=-1.0522191174955183E-5, LEX:502=-8.755967356374638E-5, LEX:874=1.7892460325724205E-4}
11: =========== r:0.36363636363636365 p:0.36363636363636365 (epoch:4 file:0 0)
if it contains coffee
(exists $0 (and (object:t $0 it:e) (has:t $0 (the $1 (object:t $1 coffee:q)))))
MakeLex parse time: 0.003 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
coffee  :- NP : coffee:q : 0.0
it  :- NP : it:e : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1046
First parse time: 0.001 sec.
CORRECT:(exists $0 (and (object:t $0 it:e) (has:t $0 (the $1 (object:t $1 coffee:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0013138165731194067
it  :- NP : it:e : 5 : 10.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.0011740783311989
coffee  :- NP : coffee:q : 35 : 10.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0013138165731194067
it  :- NP : it:e : 5 : 10.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.0011740783311989
coffee  :- NP : coffee:q : 35 : 10.0
]
Scale: 0.998213198374909
Update:
{BB:has:t:object:t=6.854538121405895E-5, LHT:0:has:t:e=6.854538121405895E-5, LHH:0:has:t:var=6.854538121405895E-5, LHT:1:has:t:e=6.854538121405895E-5, LHH:1:has:t:the=6.854538121405895E-5, BB:object:t:state:t=-6.854538121400462E-5, LHT:0:state:t:e=-6.854538121400462E-5, LHH:0:state:t:var=-6.854538121400462E-5, LHT:1:state:t:e=-6.854538121400462E-5, LHH:1:state:t:the=-6.854538121400462E-5, LEX:559=-6.854538121400462E-5, LEX:875=6.854326730737346E-5, LEX:472=-6.854440930371278E-5, LEX:874=6.854326730737346E-5}
12: =========== r:0.4166666666666667 p:0.4166666666666667 (epoch:4 file:0 0)
if the plate contains syrup
(exists $0 (and (object:t $0 plate:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
MakeLex parse time: 0.002 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
syrup  :- NP : syrup:q : 0.0
the plate  :- NP : plate:d : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1046
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 plate:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0013823598404267801
the plate  :- NP : plate:d : 18 : 20.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.0012426215985062
syrup  :- NP : syrup:q : 33 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0013823598404267801
the plate  :- NP : plate:d : 18 : 20.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.0012426215985062
syrup  :- NP : syrup:q : 33 : 10.0
]
Scale: 0.9982032341784787
Update:
{BB:has:t:object:t=6.849457391264972E-5, LHT:0:has:t:e=6.849457391264972E-5, LHH:0:has:t:var=6.849457391264972E-5, LHT:1:has:t:e=6.849457391264972E-5, LHH:1:has:t:the=6.849457391264972E-5, BB:object:t:state:t=-6.849457391270876E-5, LHT:0:state:t:e=-6.849457391270876E-5, LHH:0:state:t:var=-6.849457391270876E-5, LHT:1:state:t:e=-6.849457391270876E-5, LHH:1:state:t:the=-6.849457391270876E-5, LEX:559=-6.847938000812164E-5, LEX:875=6.848349814179535E-5, LEX:472=-6.849457391270875E-5, LEX:874=6.849457367338324E-5}
13: =========== r:0.46153846153846156 p:0.46153846153846156 (epoch:4 file:0 0)
if the cup is empty
(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
MakeLex parse time: 0.004 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
empty  :- NP : empty:s : 0.0
the cup  :- NP : cup:d : 0.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
empty  :- NP : empty:s : 0.0
Lex Size: 1046
First parse time: 0.006 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 1.1402014385672263
the cup  :- NP : cup:d : 14 : 19.001566454758414
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -1.2748087016999967
empty  :- NP : empty:s : 53 : 10.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 1.1402014385672263
the cup  :- NP : cup:d : 14 : 19.001566454758414
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -1.2748087016999967
empty  :- NP : empty:s : 53 : 10.0
]
Scale: 0.9981932701809724
Update:
{BB:object:t:state:t=0.01141001854942883, LHT:0:object:t:e=0.004202344276600288, LHH:0:object:t:var=0.004202344276600288, LHT:1:object:t:d=-0.006395813794160564, LHH:1:object:t:cup:d=4.651946192738853E-5, LHT:0:state:t:e=0.01134358659771132, LHH:0:state:t:var=0.01134358659771132, LHT:1:state:t:s=0.011364530636826815, LHH:1:state:t:empty:s=0.01144516869054892, LHH:1:state:t:yellow:s=-8.063805372222927E-5, LHH:1:object:t:bowl:d=-8.097511237176257E-5, BB:exists:state:t=-2.115628573347838E-5, LHH:1:object:t:cups:d=-0.00636135814371627, BB:exists:object:t=-8.463695538066127E-4, LHT:1:object:t:p=-8.463953060184984E-4, LHH:1:object:t:you:p=-8.463953060184984E-4, LHT:0:object:t:s=-0.011444870769165684, LHH:0:object:t:empty:s=-0.011444870769165684, LHT:1:state:t:e=-2.0959757230516924E-5, LHH:1:state:t:var=-2.0959757230516924E-5, BB:exists:exists=-0.0064413980000338515, LEX:14=4.68365884288837E-5, LEX:123=-0.011120659637049819, LEX:131=0.01615010072667743, LEX:172=-8.057168589631316E-5, LEX:311=-6.96810668574102E-5, LEX:365=-7.76651102061768E-4, LEX:373=-0.0062911452472801275, LEX:547=8.118158797015763E-4, LEX:559=0.0014236284170909043, LEX:518=0.0014358718342173372, LEX:558=-1.2218989841874314E-5, LEX:570=0.015688398613875564, LEX:977=-0.006441398000033852, LEX:1020=-0.010624139684550902}
14: =========== r:0.5 p:0.5 (epoch:4 file:0 0)
if they are used
(exists $0 (and (object:t $0 they:e) (state:t $0 used:s)))
MakeLex parse time: 0.001 sec.
Adding:
they  :- NP : they:e : 0.0
are  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
Lex Size: 1047
First parse time: 0.002 sec.
WRONG: (exists $0 (and (object:t $0 they:p) (state:t $0 used:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 1.1563515392939037
they  :- NP : they:p : 4 : 9.497344876443266
are  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 1046 : 0.0
used  :- NP : used:s : 54 : 10.308198004860518
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 1.1563515392939037
they  :- NP : they:e : 7 : 10.194412705375294
are  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 1046 : 0.0
used  :- NP : used:s : 54 : 10.308198004860518
]
Scale: 0.9981833063823842
Update:
{LHT:0:object:t:e=-8.904275422989971E-4, LHH:0:object:t:var=-8.904275422989971E-4, LHT:1:object:t:e=0.6948318693808306, LHH:1:object:t:they:e=0.6948318693808306, LHT:0:state:t:e=-1.0194524338050057E-5, LHH:0:state:t:var=-1.0194524338050057E-5, LHT:1:object:t:p=-0.6957222969231298, LHH:1:object:t:they:p=-0.6948318693808305, BB:exists:object:t=-8.904275422991538E-4, LHH:1:object:t:you:p=-8.904275422991538E-4, BB:exists:state:t=-1.0194524338121134E-5, LHT:1:state:t:e=-1.0194524338121134E-5, LHH:1:state:t:var=-1.0194524338121134E-5, LEX:1011=2.7206646039703315E-5, LEX:123=1.712768248655355E-5, LEX:131=8.782851288163742E-4, LEX:365=-8.904275422991536E-4, LEX:547=-1.0194524338121134E-5, LEX:4=-0.6948318693808306, LEX:7=0.6947994541522386, LEX:1046=-3.2415901374314734E-5}
15: =========== r:0.4666666666666667 p:0.4666666666666667 (epoch:4 file:0 0)
if the kettle is white
(exists $0 (and (object:t $0 kettle:d) (state:t $0 white:s)))
MakeLex parse time: 0.002 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
white  :- NP : white:s : 0.0
the kettle  :- NP : kettle:d : 0.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
white  :- NP : white:s : 0.0
Lex Size: 1047
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 white:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 1.15722982442272
the kettle  :- NP : kettle:d : 17 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -1.259120303086121
white  :- NP : white:s : 52 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 1.15722982442272
the kettle  :- NP : kettle:d : 17 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -1.259120303086121
white  :- NP : white:s : 52 : 10.0
]
Scale: 0.9981733427827076
Update:
{BB:object:t:state:t=0.014479875104203278, LHT:0:object:t:e=0.008042960507589961, LHH:0:object:t:var=0.008042960507589961, LHT:1:object:t:d=-0.006101323868459553, LHT:0:state:t:e=0.014458923053529431, LHH:0:state:t:var=0.014458923053529431, LHT:1:state:t:s=0.014479875104203278, LHH:1:state:t:white:s=0.014560204291184542, BB:exists:object:t=-4.1591991513536245E-4, LHT:1:object:t:p=-4.1591991513536245E-4, LHH:1:object:t:you:p=-4.1591991513536245E-4, LHT:0:object:t:s=-0.014560204291184714, LHH:0:object:t:white:s=-0.014560204291184714, BB:exists:exists=-0.006101323868459439, LHH:1:object:t:bowl:d=-8.032918698132067E-5, LHH:1:state:t:yellow:s=-8.032918698132067E-5, LHH:1:object:t:cups:d=-0.006020994681478119, BB:exists:state:t=-2.0952050673816927E-5, LHT:1:state:t:e=-2.0952050673816927E-5, LHH:1:state:t:var=-2.0952050673816927E-5, LEX:509=-1.1367937476870687E-5, LEX:123=-0.014199365010138331, LEX:131=0.018245777216020227, LEX:172=-8.032918698132068E-5, LEX:311=-3.341525477328025E-5, LEX:365=-3.825046603620822E-4, LEX:373=-0.005987579426704839, LEX:547=8.796100145489438E-4, LEX:559=0.0015623097083705972, LEX:518=0.0015747949577565041, LEX:558=-1.2139080386371428E-5, LEX:570=0.018210359862806474, LEX:977=-0.006101323868459439, LEX:1020=-0.0136716918925387}
16: =========== r:0.5 p:0.5 (epoch:4 file:0 0)
if the mug is on the stove
(exists $0 (and (object:t $0 mug:d) (On:t $0 (the $1 (object:t $1 stove:f)))))
MakeLex parse time: 0.004 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
the stove  :- NP : stove:f : 0.0
the mug  :- NP : mug:d : 0.0
is on  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (On:t $3 ($1 $2))))))) : 0.0
Lex Size: 1047
First parse time: 0.005 sec.
WRONG: (exists $0 (and (state:t $0 IsOn:s) (object:t $0 mug:d) (In:t $0 stove:f)))
Using:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (state:t $3 $1) ($0 $3) (In:t $3 $2)))))) : 1028 : -0.045966273702953794
the mug  :- NP : mug:d : 16 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -1.6386250135784888
on  :- NP : IsOn:s : 57 : 9.999989827262347
the stove  :- NP : stove:f : 76 : 20.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.0014508433385685756
the mug  :- NP : mug:d : 16 : 20.0
is on  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (On:t $3 ($1 $2))))))) : 876 : 3.258297066644735E-5
the stove  :- NP : stove:f : 76 : 20.0
]
Scale: 0.9981633793819372
Update:
{BB:On:t:object:t=0.9980591052907543, LHT:0:object:t:e=0.9954923129406955, LHH:0:object:t:var=0.9954923129406955, LHT:0:On:t:e=0.9980591019990883, LHH:0:On:t:var=0.9980591019990883, LHT:1:On:t:e=0.9980591019990883, LHH:1:On:t:the=0.9980591019990883, LHT:1:object:t:f=0.9954922855941628, LHH:1:object:t:stove:f=0.9954922855941698, BB:object:t:state:t=-1.9907584208073987, LHT:1:state:t:e=-2.2615679720999917E-4, LHH:1:state:t:var=-2.2615679720999917E-4, LHT:0:state:t:e=-0.995718442224243, LHH:0:state:t:var=-0.995718442224243, BB:IsNear:t:object:t=-0.002566816404918521, LHT:0:IsNear:t:e=-0.002566816404918521, LHH:0:IsNear:t:var=-0.002566816404918521, LHT:1:IsNear:t:e=-0.002566816404918521, LHH:1:IsNear:t:the=-0.002566816404918521, BB:exists:state:t=-4.5230701103860974E-4, BB:In:t:state:t=-1.9909845711883396, BB:In:t:exists=-4.5230701103860974E-4, LHT:1:state:t:s=-0.9954922855941698, LHH:1:state:t:IsOn:s=-0.9954922855941698, LHT:0:In:t:e=-0.9954922855941698, LHH:0:In:t:var=-0.9954922855941698, LHT:1:In:t:f=-0.9954922855941698, LHH:1:In:t:stove:f=-0.9954922855941698, BB:In:t:object:t=-1.990532264177301, LEX:16=-1.6096162921389346E-4, LEX:876=0.22605319806070265, LEX:875=0.9953313239649557, LEX:1028=-0.9954922855941699, LEX:570=-2.2615663007321534E-4, LEX:1012=0.13549308564840448, LEX:1014=0.16892285929298742, LEX:1016=0.12965861956583158, LEX:1018=0.20631590066825936, LEX:1020=-0.8636506921780163, LEX:1031=-0.0013116480635806662, LEX:1033=-0.0012551683413378537, LEX:57=-0.9954922855941696, LEX:1013=0.13418143699668905, LEX:1015=0.168922859102668, LEX:1017=0.12840345181262847, LEX:1019=0.250189798574607, LEX:505=1.6139302944357135E-4, LEX:10=1.613913699493918E-4, LEX:1021=0.08775070788269367}
17: =========== r:0.47058823529411764 p:0.47058823529411764 (epoch:4 file:0 0)
if the mug is red and dry
(exists $0 (and (object:t $0 mug:d) (state:t $0 red:s) (state:t $0 dry:s)))
MakeLex parse time: 0.004 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
dry  :- NP : dry:s : 0.0
the mug  :- NP : mug:d : 0.0
dry  :- NP : dry:s : 0.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
red  :- NP : red:s : 0.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 0.0
Lex Size: 1047
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (state:t $0 red:s) (state:t $0 dry:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 1.1754756016387402
the mug  :- NP : mug:d : 16 : 19.999839038370787
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.6575947325070906
red  :- NP : red:s : 47 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.27122574006717315
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 1.1754756016387402
the mug  :- NP : mug:d : 16 : 19.999839038370787
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.6575947325070906
red  :- NP : red:s : 47 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.27122574006717315
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9981534161800669
Update:
{BB:object:t:state:t=0.07380981302707672, BB:state:t:state:t=0.12913106522940845, LHT:0:object:t:e=-0.08141611175960359, LHH:0:object:t:var=-0.08141611175960359, LHT:1:object:t:d=-0.013837801051626575, LHT:0:state:t:e=0.06400922033999286, LHH:0:state:t:var=0.06400922033999286, LHT:1:state:t:s=0.06403559578029538, LHH:1:state:t:dry:s=0.06403560260092796, BB:object:t:object:t=-0.02766297898177186, LHH:1:object:t:cup:d=-0.013831592442103118, BB:exists:exists=-5.723488684177856E-4, LHT:1:object:t:s=-0.06403560260092798, LHH:1:object:t:dry:s=-0.06403560260092798, LHT:1:state:t:e=-2.6375440301936818E-5, LHH:1:state:t:var=-2.6375440301936818E-5, BB:exists:state:t=-1.0912853030634044E-5, BB:exists:object:t=-0.0030222809284462734, LHT:1:object:t:p=-0.0030127780932721567, LHH:1:object:t:you:p=-0.0030127780932721567, LHT:1:object:t:f=-5.299300137763818E-4, LHH:1:object:t:tv:f=-5.299300137763818E-4, BB:In:t:state:t=-0.12803057178813324, LHT:0:In:t:e=-0.06401528589406662, LHH:0:In:t:var=-0.06401528589406662, LHT:1:In:t:e=-0.06401528589406662, LHH:1:In:t:the=-0.06401528589406662, BB:In:t:object:t=-0.12802116026571136, LEX:123=7.21394985993912E-4, LEX:131=0.06632686548715509, LEX:151=-1.3722370933514171E-5, LEX:365=-0.0030125027289572065, LEX:1027=-0.06401528589406662, LEX:546=-0.01383148949088593, LEX:570=-5.549524818487097E-4, LEX:600=0.07838801290112621, LEX:1020=-0.06401058013285568, LEX:887=-0.0640152858940666, LEX:902=-5.299300137763819E-4, LEX:966=-2.0316706861394304E-5, LEX:1022=0.06455652341024061}
18: =========== r:0.5 p:0.5 (epoch:4 file:0 0)
if the kettle is empty and cool
(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s) (state:t $0 cool:s)))
MakeLex parse time: 0.003 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
cool  :- NP : cool:s : 0.0
the kettle  :- NP : kettle:d : 0.0
cool  :- NP : cool:s : 0.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
empty  :- NP : empty:s : 0.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 0.0
Lex Size: 1047
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s) (state:t $0 cool:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 1.2418024671258954
the kettle  :- NP : kettle:d : 17 : 20.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.5792067196059644
empty  :- NP : empty:s : 53 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.20666921665693255
cool  :- NP : cool:s : 49 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 1.2418024671258954
the kettle  :- NP : kettle:d : 17 : 20.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.5792067196059644
empty  :- NP : empty:s : 53 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.20666921665693255
cool  :- NP : cool:s : 49 : 10.0
]
Scale: 0.9981434531770906
Update:
{BB:object:t:state:t=0.01443014132843203, BB:state:t:state:t=0.05787850641630269, LHT:0:object:t:e=-0.04227550389702807, LHH:0:object:t:var=-0.04227550389702807, LHT:1:object:t:d=-0.01086691883873093, LHT:0:state:t:e=0.028539187965672664, LHH:0:state:t:var=0.028539187965672664, LHT:1:state:t:s=0.028558476015078774, LHH:1:state:t:cool:s=0.02855848256714851, BB:object:t:object:t=-0.021725452959063488, LHH:1:object:t:cup:d=-0.010862793939096357, BB:exists:exists=-4.107244133581345E-4, LHT:1:object:t:s=-0.028558482567148057, LHH:1:object:t:cool:s=-0.028558482567148057, LHT:1:state:t:e=-1.928804940654067E-5, LHH:1:state:t:var=-1.928804940654067E-5, BB:exists:object:t=-0.002475641621732871, LHT:1:object:t:p=-0.0024693318501461574, LHH:1:object:t:you:p=-0.0024693318501461574, LHT:1:object:t:f=-3.807706410029808E-4, LHH:1:object:t:tv:f=-3.807706410029808E-4, BB:In:t:state:t=-0.0570864406096175, LHT:0:In:t:e=-0.02854322030480875, LHH:0:In:t:var=-0.02854322030480875, LHT:1:In:t:e=-0.02854322030480875, LHH:1:In:t:the=-0.02854322030480875, BB:In:t:object:t=-0.05708135894910402, LEX:123=1.6460754578020637E-4, LEX:131=0.030864041579003004, LEX:151=-1.0878500877728557E-5, LEX:365=-0.0024691474677254388, LEX:1027=-0.028543220304808742, LEX:546=-0.010862726479531742, LEX:570=-3.9857373359902695E-4, LEX:600=0.03979801491607232, LEX:1020=-0.02854067947455201, LEX:887=-0.02854322030480875, LEX:902=-3.8077064100298073E-4, LEX:966=-1.5262262339308297E-5, LEX:1022=0.028935288436540602}
19: =========== r:0.5263157894736842 p:0.5263157894736842 (epoch:4 file:0 0)
if the glass is used and on the floor
(exists $0 (and (object:t $0 kettle:d) (state:t $0 used:s) (On:t $0 (the $1 (object:t $1 floor:lo)))))
MakeLex parse time: 0.006 sec.
Adding:
if the glass is  :- S/NP/(NP|NP)/NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (On:t $3 ($1 $2)) (object:t $3 kettle:d) (state:t $3 $0)))))) : 0.0
used  :- NP : used:s : 0.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1.9135499999999999
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
the floor  :- NP : floor:lo : 0.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1.9135499999999999
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1047
First parse time: 0.009 sec.
WRONG: (and (exists $0 (and (object:t $0 glass:d) (state:t $0 used:s))) (exists $0 (object:t $0 floor:lo)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 1.2726665087048983
the glass  :- NP : glass:d : 15 : 19.00150900186513
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -1.2420896260688354
used  :- NP : used:s : 54 : 10.308198004860518
and  :- S/NP\S/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 ($0 $3 $2)))))) : 930 : -1.5531792919092389
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 0.11448329924714663
the floor  :- NP : floor:lo : 67 : 20.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if the glass is  :- S/NP/(NP|NP)/NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (On:t $3 ($1 $2)) (object:t $3 kettle:d) (state:t $3 $0)))))) : 879 : 0.6515082569568725
used  :- NP : used:s : 54 : 10.308198004860518
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1023 : 2.0657582163481365
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 0.11448329924714663
the floor  :- NP : floor:lo : 67 : 20.0
]
Scale: 0.9981334903730025
Update:
{BB:object:t:state:t=0.8388331567847429, BB:On:t:object:t=1.9962217435813108, BB:On:t:state:t=1.9962217435813108, LHT:0:object:t:e=-0.10171049513113625, LHH:0:object:t:var=-0.10171049513113625, LHT:1:object:t:d=-0.013756300339188836, LHH:1:object:t:kettle:d=0.9981108717906554, LHT:0:state:t:e=-9.524288904127055E-5, LHH:0:state:t:var=-9.524288904127055E-5, LHT:1:state:t:s=0.003863969885861836, LHH:1:state:t:used:s=0.003927500045266325, LHT:0:On:t:e=0.9942187515082432, LHH:0:On:t:var=0.9942187515082432, LHT:1:On:t:e=0.9942187515082432, LHH:1:On:t:the=0.9942187515082432, LHT:1:object:t:lo=5.612504737636921E-4, LHH:1:object:t:floor:lo=5.612504737636921E-4, BB:exists:exists=-0.9084964741624665, LHH:1:object:t:glass:d=-0.9981108717906555, LHT:0:object:t:lo=-5.102549526297897E-4, LHH:0:object:t:floor:lo=-5.102549526297897E-4, LHT:1:object:t:e=-5.102549526297897E-4, LHH:1:object:t:var=-5.102549526297897E-4, BB:object:t:object:t=-0.09027397449286437, LHT:1:object:t:f=-0.09023444220680678, LHH:1:object:t:tv:f=-0.09023444220680678, BB:exists:object:t=-0.008806648291468907, LHT:1:object:t:p=-0.002208503104169825, LHH:1:object:t:you:p=-0.002208503104169825, BB:exists:state:t=-1.3470059362489416E-4, BB:In:t:state:t=-0.3026998590559543, BB:In:t:exists=-1.3326919895527146E-4, LHT:1:state:t:e=-0.003959212774902999, LHH:1:state:t:var=-0.003959212774902999, LHT:0:In:t:e=-0.15134992952797716, LHH:0:In:t:var=-0.15134992952797716, LHT:1:In:t:e=-0.15129893400684358, LHH:1:In:t:the=-0.15129893400684358, BB:In:t:object:t=-0.30256853686031177, BB:On:t:exists=-0.003995602581512986, BB:state:t:state:t=-0.00781529640437799, LHH:1:object:t:cup:d=-3.7499943707127425E-5, LHT:0:object:t:s=-0.003927500045266643, LHH:0:object:t:used:s=-0.003927500045266643, LHH:1:object:t:bowl:d=-1.2534638271529326E-5, LHH:1:state:t:yellow:s=-1.2534638271529326E-5, LHH:1:object:t:cups:d=-0.013706265757210468, LHH:1:state:t:IsOn:s=-5.0995521133550086E-5, LHT:1:In:t:lo=-5.0995521133550086E-5, LHH:1:In:t:floor:lo=-5.0995521133550086E-5, LEX:879=0.7833246391767158, LEX:509=-1.7313113679914486E-5, LEX:519=-2.672897715722969E-5, LEX:561=-1.7629834470560404E-5, LEX:15=-0.9980468408000736, LEX:606=0.02295383821525607, LEX:608=0.06268456948284079, LEX:123=-0.017190970557674067, LEX:131=-0.7744847982074485, LEX:172=-1.2534638271529326E-5, LEX:311=-4.280730094815324E-4, LEX:365=-0.0017804300946882919, LEX:373=-0.013278192747728934, LEX:547=-0.006267918995264022, LEX:559=-0.029362504104117865, LEX:875=-0.003891488917421779, LEX:1027=-0.13226117771692691, LEX:1028=-0.019088751811050235, LEX:9=-6.403099058140305E-5, LEX:518=-0.029379310267859636, LEX:546=-3.7499943707127425E-5, LEX:570=-0.7896234818073666, LEX:600=-0.003870148258481868, LEX:977=-0.013718800395481994, LEX:1020=-0.16148080744702906, LEX:54=-1.8953424415335287E-5, LEX:902=-3.546760135665566E-5, LEX:930=-0.3800792456115436, LEX:942=-0.37259060176327224, LEX:978=-0.048228351444117086, LEX:988=-0.04197062316133305, LEX:1022=-0.003907648202188995, LEX:1023=0.21011742784670293, LEX:1024=0.19990563922643612, LEX:1025=0.23079820651957506, LEX:1026=0.12035198792262272, LEX:57=-5.099552113355008E-5, LEX:1013=0.012599831639946608, LEX:1017=-0.0942953921048758, LEX:1019=-0.002085195169593258, LEX:1021=-0.0018069251128188433, LEX:605=1.3621380184613662E-5, LEX:880=0.21477214585052617}
20: =========== r:0.5 p:0.5 (epoch:4 file:0 0)
if the plate is dirty and in the refrigerator
(exists $0 (and (object:t $0 plate:d) (state:t $0 dirty:s) (In:t $0 (the $1 (object:t $1 refrigerator:f)))))
MakeLex parse time: 0.005 sec.
Adding:
in  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1048
First parse time: 0.007 sec.
WRONG: (and (exists $0 (and (object:t $0 plate:d) (state:t $0 dirty:s))) (exists $0 (object:t $0 refrigerator:f)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.49818171049744975
the plate  :- NP : plate:d : 18 : 20.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -2.031713107876202
dirty  :- NP : dirty:s : 55 : 10.0
and  :- S/NP\S/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 ($0 $3 $2)))))) : 930 : -1.9332585375207825
in  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1047 : 0.0
the refrigerator  :- NP : refrigerator:f : 75 : 20.000064119849167
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/(NP|NP)/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and (In:t $4 ($2 $3)) ($0 $4) (state:t $4 $1))))))) : 1027 : -0.2249286867449362
the plate  :- NP : plate:d : 18 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -2.7563077728109415
dirty  :- NP : dirty:s : 55 : 10.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1023 : 2.2758756441948393
in  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1047 : 0.0
the refrigerator  :- NP : refrigerator:f : 75 : 20.000064119849167
]
Scale: 0.9981235277677964
Update:
{BB:object:t:state:t=0.6323288974527216, BB:In:t:object:t=1.233998730239358, BB:In:t:state:t=1.233959620827903, LHT:0:object:t:e=-0.08315843260772278, LHH:0:object:t:var=-0.08315843260772278, LHT:1:object:t:d=-0.029888577589838556, LHT:0:state:t:e=0.015306958127175014, LHH:0:state:t:var=0.015306958127175014, LHT:1:state:t:s=0.015329532333042378, LHH:1:state:t:dirty:s=0.015357845870065109, LHT:0:In:t:e=0.6169798104139514, LHH:0:In:t:var=0.6169798104139514, LHT:1:In:t:e=0.6169798104139514, LHH:1:In:t:the=0.6169798104139514, LHT:1:object:t:f=-0.06599764912753935, LHH:1:object:t:refrigerator:f=3.2887404254122103E-4, BB:exists:exists=-0.7519940539035026, LHT:0:object:t:f=-3.288740425417671E-4, LHH:0:object:t:refrigerator:f=-3.288740425417671E-4, LHT:1:object:t:e=-3.288740425417671E-4, LHH:1:object:t:var=-3.288740425417671E-4, BB:object:t:object:t=-0.06632652317008064, LHH:1:object:t:tv:f=-0.06632652317008064, BB:exists:object:t=-0.020775501861754683, LHT:1:object:t:p=-0.0026300517604103024, LHH:1:object:t:you:p=-0.0026300517604103024, BB:exists:state:t=-4.212891159530037E-5, BB:In:t:exists=-3.9109411455272666E-5, LHT:1:state:t:e=-2.2574205867664042E-5, LHH:1:state:t:var=-2.2574205867664042E-5, LHT:0:object:t:s=-0.015357845870065511, LHH:0:object:t:dirty:s=-0.015357845870065511, LHH:1:object:t:bowl:d=-2.831353702268899E-5, LHH:1:state:t:yellow:s=-2.831353702268899E-5, LHH:1:object:t:cups:d=-0.029860264052815347, LEX:509=-1.2132572455972403E-5, LEX:519=-1.2676786664622752E-5, LEX:561=-1.788336079936929E-5, LEX:18=4.419794254037953E-5, LEX:610=0.02766720065701352, LEX:612=0.05166053915103673, LEX:123=-0.03213899485241942, LEX:131=-0.4595253546994667, LEX:172=-2.8313537022688987E-5, LEX:311=-7.716489395577234E-4, LEX:365=-0.0018584028208525794, LEX:373=-0.029088615113257624, LEX:547=-0.01502558496807142, LEX:559=-0.0784986671356908, LEX:1027=0.5164580417227173, LEX:1028=0.10052173828616204, LEX:12=-4.4228347612941575E-5, LEX:518=-0.07851430196782962, LEX:570=-0.4782100415390009, LEX:977=-0.02988857758983804, LEX:1020=0.5866151392202567, LEX:930=-0.5504405025685603, LEX:942=-2.1278467531102616E-4, LEX:978=-0.0663037973770829, LEX:988=-2.272579299774204E-5, LEX:1023=0.2846955730259843, LEX:1024=-6.480395358118779E-5, LEX:1025=0.2530498611541205, LEX:1026=-2.855962065181116E-5, LEX:1047=-0.0793277398080803}
21: =========== r:0.47619047619047616 p:0.47619047619047616 (epoch:4 file:0 0)
for all mugs that contain water
(forall $0 (and (object:t $0 mugs:d) (has:t $0 (the $1 (object:t $1 water:q)))))
MakeLex parse time: 0.008 sec.
Adding:
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
water  :- NP : water:q : 0.0
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 0.0
Lex Size: 1048
First parse time: 0.009 sec.
WRONG: (forall $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 water:q)))))
Using:
[LexEntries and scores:
for all  :- S/NP/NP : (lambda $0 e (lambda $1 e (forall $2 (and (object:t $2 $0) (has:t $2 (the $3 (object:t $3 $1))))))) : 695 : -1.0120916591985138
mugs  :- NP : mug:d : 27 : 7.364328351413658
that contain  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 626 : -0.4531957073080656
water  :- NP : water:q : 32 : 10.0
]
Second parse time: 0.008 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 0.7847448440364758
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 883 : 0.39363982062134767
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 1.2230179232477048
contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 812 : 0.2735153923527045
water  :- NP : water:q : 32 : 10.0
]
Scale: 0.9981135653614669
Update:
{BB:has:t:object:t=0.20790407051523602, LHT:0:object:t:e=0.18893724729975542, LHH:0:object:t:var=0.18893724729975542, LHT:1:object:t:d=0.15348221487171898, LHH:1:object:t:mugs:d=0.6882308662336978, LHT:0:has:t:e=0.14855707375607874, LHH:0:has:t:var=0.14855707375607874, LHT:1:has:t:e=0.15190425931705148, LHH:1:has:t:the=0.15195515292031994, LHT:1:object:t:q=0.022051338784160594, LHH:1:object:t:water:q=0.022051338784160594, LHT:0:object:t:q=-0.018686809924326666, LHH:0:object:t:water:q=-0.018686809924326666, LHT:0:has:t:q=-1.07415727397556E-5, LHH:0:has:t:water:q=-1.07415727397556E-5, LHT:1:object:t:e=-0.005283116280451028, LHH:1:object:t:var=-1.0476374832520363E-4, BB:object:t:object:t=-0.044211444382306134, LHH:1:object:t:mug:d=-0.5347486513619787, LHH:1:object:t:the=-0.005178352532125822, BB:forall:has:t=-7.699121417087306E-5, LHT:1:has:t:q=-0.0033579271337123616, LHH:1:has:t:water:q=-0.0033579271337123616, LHH:1:has:t:var=-5.0893603268508656E-5, LEX:290=0.0018261160856429196, LEX:619=0.00161022882227174, LEX:627=0.0018538416408864593, LEX:635=0.003913989055406349, LEX:643=-0.0032849701481968818, LEX:651=0.001650418325008254, LEX:659=-0.00875334494076361, LEX:667=0.001650418325008254, LEX:675=-0.008904246879722843, LEX:683=0.0018542980567070628, LEX:691=-3.3863541421147973E-4, LEX:699=0.0018564808881960523, LEX:707=0.0018564249324477785, LEX:715=2.637008462138959E-4, LEX:723=5.247778407390759E-4, LEX:731=-3.406792537025496E-4, LEX:739=5.247778407390759E-4, LEX:747=-3.6282967240152276E-4, LEX:755=0.003846785797568308, LEX:763=0.001857473713717456, LEX:771=0.002968969104714535, LEX:779=0.0016714658918062575, LEX:787=-0.003511892264469059, LEX:795=0.004419813455685817, LEX:803=-0.003511892264469059, LEX:811=0.004501585089572954, LEX:614=0.004021907301440524, LEX:622=-0.0012635416521332558, LEX:630=0.012460357950371486, LEX:638=9.902264116653146E-4, LEX:646=-0.003289432885091755, LEX:654=0.002792875010008364, LEX:662=-0.0032894328850917543, LEX:670=0.00877544657711567, LEX:678=-0.0029479961540851514, LEX:686=0.001838558016487586, LEX:694=0.0018573112236013399, LEX:702=0.0018564619314909514, LEX:710=6.770192185635701E-4, LEX:718=2.816720624156213E-4, LEX:726=-4.2910816172670287E-4, LEX:734=2.816720624156213E-4, LEX:742=-0.001346190156342866, LEX:750=0.0018900968934210984, LEX:758=0.001857473713717456, LEX:766=0.0058658478711823975, LEX:774=-0.001854749595037107, LEX:782=0.0016706495562517608, LEX:790=-0.006089811545489725, LEX:798=0.0016706495562517608, LEX:806=-0.01884009974477514, LEX:617=0.00161022882227174, LEX:625=0.0011596677866762852, LEX:633=0.003913989055406349, LEX:641=-0.003290962167667838, LEX:649=0.001650418325008254, LEX:657=-0.006768043632512031, LEX:665=0.001650418325008254, LEX:673=-0.0068617273912583154, LEX:681=0.0018542980567070628, LEX:689=-2.59213880524654E-4, LEX:697=0.0018564808881960523, LEX:705=3.6715345438887977E-4, LEX:713=2.811210121786747E-4, LEX:721=5.247778407390759E-4, LEX:729=5.764884978126567E-4, LEX:737=5.247778407390759E-4, LEX:745=5.797913122459656E-4, LEX:753=0.035650943559249776, LEX:761=0.001857473713717456, LEX:769=0.0033615284906668365, LEX:777=0.001670476007756102, LEX:785=-0.003511892264469059, LEX:793=0.0034406481120448297, LEX:801=-0.003511892264469059, LEX:809=0.003494198220436287, LEX:616=0.001268648415454228, LEX:624=-0.0012635416521332558, LEX:632=0.00321334050832646, LEX:640=0.0011927904959952603, LEX:648=-0.0032892526215435097, LEX:656=0.002498615652806135, LEX:664=-0.0032892526215435097, LEX:672=0.007833355717335701, LEX:680=-3.830720269546614E-4, LEX:688=0.001838558016487586, LEX:696=6.608885472402849E-4, LEX:704=0.0018564631548659751, LEX:712=5.618112745536097E-4, LEX:720=2.817372592782489E-4, LEX:728=-1.1941033291353274E-4, LEX:736=2.817372592782489E-4, LEX:744=-3.885015604138158E-4, LEX:752=0.0018900968934210984, LEX:760=0.001857473713717456, LEX:768=0.0058658478711823975, LEX:776=-0.0022906907120251343, LEX:784=0.0016706852208687073, LEX:792=-0.0055525855137256355, LEX:800=0.0016706852208687073, LEX:808=-0.017185018851120126, LEX:615=-0.12809309656342804, LEX:623=0.0018538416408864593, LEX:631=-0.186041899258064, LEX:639=-0.0024466495893909995, LEX:647=0.0016504186570670506, LEX:655=-0.009521372348924423, LEX:663=0.0016504186570670506, LEX:671=-0.00966143853909767, LEX:679=0.0011045064142304222, LEX:687=-3.3863541421147973E-4, LEX:695=-0.21695865326166555, LEX:703=0.0018573155299123805, LEX:711=2.3780207391171015E-4, LEX:719=5.247763064500637E-4, LEX:727=5.279551414280057E-4, LEX:735=5.247763064500637E-4, LEX:743=5.338544154279095E-4, LEX:751=0.003846785797568308, LEX:759=0.001857473713717456, LEX:767=0.002968969104714535, LEX:775=0.00167160001938609, LEX:783=-0.0035118767294063467, LEX:791=0.0025998806668344828, LEX:799=-0.0035118767294063467, LEX:807=0.002607881955870964, LEX:883=0.47316507534012475, LEX:618=0.0018869765078263173, LEX:626=-0.2132138061753989, LEX:634=0.005867458456756405, LEX:642=0.0016504124689797257, LEX:650=-0.003289432885091755, LEX:658=0.001674441336934574, LEX:666=-0.0032894328850917543, LEX:674=0.005192039290402619, LEX:682=-3.7591903019757177E-4, LEX:690=0.0010851164057663167, LEX:698=0.0018573112236013399, LEX:706=-0.31676241907386926, LEX:714=5.247766987722704E-4, LEX:722=2.816720624156213E-4, LEX:730=5.373285356761945E-4, LEX:738=2.816720624156213E-4, LEX:746=0.0016575257780753131, LEX:754=0.0271190473625261, LEX:762=0.001857473713717456, LEX:770=0.025436465508094024, LEX:778=-0.0035119232410342595, LEX:786=0.0016706495562517608, LEX:794=-0.0035687334650809405, LEX:802=0.0016706495562517608, LEX:810=-0.011033711207518669, LEX:613=0.2657659747595368, LEX:621=0.0018538416408864593, LEX:629=0.21915882950252663, LEX:637=-0.0020850897037511694, LEX:645=0.001650418325008254, LEX:653=-0.010492381647374994, LEX:661=0.001650418325008254, LEX:669=-0.010642178133859037, LEX:677=0.001774540175788368, LEX:685=-3.3863541421147973E-4, LEX:693=0.0018564808881960523, LEX:701=0.0018573164416378486, LEX:709=2.3519795815662498E-4, LEX:717=5.247778407390759E-4, LEX:725=4.8510921035174997E-4, LEX:733=5.247778407390759E-4, LEX:741=4.897665285425197E-4, LEX:749=0.003846785797568308, LEX:757=0.001857473713717456, LEX:765=0.002968969104714535, LEX:773=0.001661866627941249, LEX:781=-0.003511892264469059, LEX:789=0.002507455865879988, LEX:797=-0.003511892264469059, LEX:805=0.0025150067979475446, LEX:27=-0.5347486513619788, LEX:868=0.45503193313731455, LEX:620=0.0018869765078263173, LEX:628=-0.0012635416521332558, LEX:636=0.005867458456756405, LEX:644=0.0016446732483089207, LEX:652=-0.003289432885091755, LEX:660=-0.003150946130508204, LEX:668=-0.0032894328850917543, LEX:676=1.574298523339711E-4, LEX:684=-3.7591903019757177E-4, LEX:692=0.001838558016487586, LEX:700=0.0018573112236013399, LEX:708=0.0018523805746406721, LEX:716=5.176604456802966E-4, LEX:724=2.816720624156213E-4, LEX:732=-0.012411665198524397, LEX:740=2.816720624156213E-4, LEX:748=-0.011692318222753139, LEX:756=0.0018900968934210984, LEX:764=0.001857473713717456, LEX:772=0.0058658478711823975, LEX:780=-0.0035283253967430604, LEX:788=0.0016706495562517608, LEX:796=0.23665102778002597, LEX:804=0.0016706495562517608, LEX:812=0.2360589355057927}
22: =========== r:0.45454545454545453 p:0.45454545454545453 (epoch:4 file:0 0)
for all bowls that are green
(forall $0 (and (object:t $0 bowls:d) (state:t $0 green:s)))
MakeLex parse time: 0.002 sec.
Adding:
green  :- NP : green:s : 0.0
Lex Size: 1048
First parse time: 0.003 sec.
CORRECT:(forall $0 (and (object:t $0 bowls:d) (state:t $0 green:s)))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.0505108187960126
all bowls that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 814 : 0.46708230195341616
green  :- NP : green:s : 51 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.0505108187960126
all bowls that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 814 : 0.46708230195341616
green  :- NP : green:s : 51 : 10.0
]
Scale: 0.9981036031540074
Update:
{BB:object:t:state:t=-0.5686946792276358, LHT:0:object:t:e=-0.2788731863818243, LHH:0:object:t:var=-0.2788731863818243, LHT:1:object:t:d=-0.2788742307580419, BB:object:t:object:t=-0.37912978615175724, LHH:1:object:t:mugs:d=-0.2788742307580421, BB:has:t:object:t=-0.08930933768216341, LHT:0:has:t:e=-0.08931037496090564, LHH:0:has:t:var=-0.08931037496090564, LHT:1:has:t:e=-0.08931037496090564, LHH:1:has:t:the=-0.08931037496090564, LEX:291=0.01128041597722118, LEX:813=0.03306741564372707, LEX:814=0.13147496998752742, LEX:815=-0.019864481889782296, LEX:817=-0.06139286047221403, LEX:816=-0.023278499304620472, LEX:818=-0.07128741525912156, LEX:655=0.024105340447653712, LEX:671=0.024561440772106678, LEX:727=-0.04872893485502723, LEX:743=-0.04933533145614163, LEX:791=-0.022545866655390878, LEX:807=-0.022621490479991915, LEX:613=0.07881260034303059, LEX:629=0.08573082256696617, LEX:653=0.026858624680640254, LEX:669=0.027526398826277873, LEX:725=-0.04535044239351702, LEX:741=-0.046148933610607804, LEX:789=-0.02197386487715746, LEX:805=-0.022168115669623175}
23: =========== r:0.4782608695652174 p:0.4782608695652174 (epoch:4 file:0 0)
for all glasses that are empty
(forall $0 (and (object:t $0 glasses:d) (state:t $0 empty:s)))
MakeLex parse time: 0.002 sec.
Adding:
empty  :- NP : empty:s : 0.0
Lex Size: 1048
First parse time: 0.003 sec.
CORRECT:(forall $0 (and (object:t $0 glasses:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.129323419139043
all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 820 : 0.16465392659802608
empty  :- NP : empty:s : 53 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.129323419139043
all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 820 : 0.16465392659802608
empty  :- NP : empty:s : 53 : 10.0
]
Scale: 0.9980936411454122
Update:
{BB:object:t:state:t=-0.2531263838434904, LHT:0:object:t:e=-0.11285894497370266, LHH:0:object:t:var=-0.11285894497370266, LHT:1:object:t:d=-0.11288967708262605, LHT:0:state:t:e=3.1393827962255433E-5, LHH:0:state:t:var=3.1393827962255433E-5, LHT:1:state:t:s=3.205554700111942E-5, LHH:1:state:t:empty:s=3.205554700111942E-5, BB:object:t:object:t=-0.16875092256232707, LHH:1:object:t:mugs:d=-0.11288967708262632, BB:has:t:object:t=-0.028514215801462784, LHT:0:has:t:e=-0.028514877520501566, LHH:0:has:t:var=-0.028514877520501566, LHT:1:has:t:e=-0.028514877520501566, LHH:1:has:t:the=-0.028514877520501566, LHT:0:object:t:s=-3.139382796229729E-5, LHH:0:object:t:empty:s=-3.139382796229729E-5, LHT:0:state:t:s=-3.139382796229729E-5, LHH:0:state:t:empty:s=-3.139382796229729E-5, LHT:1:state:t:e=-3.20555470010817E-5, LHH:1:state:t:var=-3.20555470010817E-5, LEX:292=0.004456955363305147, LEX:819=0.013945902323408761, LEX:820=0.044998622652971804, LEX:821=-0.007513913227066652, LEX:823=-0.021076118251151986, LEX:822=-0.00914621500191458, LEX:824=-0.025665427870043882, LEX:639=-1.13393426838175E-5, LEX:655=0.011872099432879776, LEX:671=0.011590210314769839, LEX:727=-0.022230870470747198, LEX:743=-0.02154216686625121, LEX:791=-0.007386856015810887, LEX:807=-0.007097513269766206, LEX:613=0.02953230754013299, LEX:629=0.029412879155286432, LEX:653=0.013167596218937412, LEX:669=0.012879120763441226, LEX:725=-0.020607773698364137, LEX:741=-0.019984280415417797, LEX:789=-0.007150893412664199, LEX:805=-0.006878953103221488}
24: =========== r:0.5 p:0.5 (epoch:4 file:0 0)
for every cup that is dry
(forall $0 (and (object:t $0 cup:d) (state:t $0 dry:s)))
MakeLex parse time: 0.002 sec.
Adding:
dry  :- NP : dry:s : 0.0
Lex Size: 1048
First parse time: 0.003 sec.
CORRECT:(forall $0 (and (object:t $0 cup:d) (state:t $0 dry:s)))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.1588557266791761
every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 826 : 0.04335141425691988
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.1588557266791761
every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 826 : 0.04335141425691988
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9980836793356755
Update:
{BB:object:t:state:t=-0.11051868289312122, LHT:0:object:t:e=-0.048333821114277524, LHH:0:object:t:var=-0.048333821114277524, LHT:1:object:t:d=-0.04835001293835365, LHT:0:state:t:e=1.6942937136761026E-5, LHH:0:state:t:var=1.6942937136761026E-5, LHT:1:state:t:s=1.769405019784173E-5, LHH:1:state:t:dry:s=1.769405019784173E-5, BB:object:t:object:t=-0.07367912192874748, LHH:1:object:t:mugs:d=-0.048350012938353296, BB:has:t:object:t=-0.011510451973979555, LHT:0:has:t:e=-0.011511203087040576, LHH:0:has:t:var=-0.011511203087040576, LHT:1:has:t:e=-0.011511203087040576, LHH:1:has:t:the=-0.011511203087040576, LHT:0:object:t:s=-1.6942937136915938E-5, LHH:0:object:t:dry:s=-1.6942937136915938E-5, LHT:0:state:t:s=-1.6942937136915938E-5, LHH:0:state:t:dry:s=-1.6942937136915938E-5, LHT:1:state:t:e=-1.769405019793866E-5, LHH:1:state:t:var=-1.769405019793866E-5, LEX:293=0.002407476809278066, LEX:825=0.007711591070976969, LEX:826=0.022919797772352226, LEX:827=-0.008429866702645646, LEX:828=-0.024609107275241678, LEX:613=0.015651340765644603, LEX:629=0.014980799190745563, LEX:637=-1.2649365137443033E-5, LEX:653=0.007677427798525699, LEX:669=0.007646260527077712, LEX:725=-0.018525621953777605, LEX:741=-0.01830964543859667, LEX:789=-0.005813141019082413, LEX:805=-0.005697310954897138}
25: =========== r:0.52 p:0.52 (epoch:4 file:0 0)
for every plate that is on the table
(forall $0 (and (object:t $0 plate:d) (On:t $0 (the $1 (object:t $1 table:f)))))
MakeLex parse time: 0.004 sec.
Adding:
every plate that is  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($0 $3 $1))))))) : 0.0
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1049
First parse time: 0.004 sec.
CORRECT:(forall $0 (and (object:t $0 plate:d) (On:t $0 (the $1 (object:t $1 table:f)))))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.1745070674448208
every plate that is  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($0 $3 $1))))))) : 1048 : 0.0
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 0.12708313088709325
the table  :- NP : table:f : 73 : 20.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.1745070674448208
every plate that is  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($0 $3 $1))))))) : 1048 : 0.0
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 0.12708313088709325
the table  :- NP : table:f : 73 : 20.0
]
Scale: 0.9980737177247911
Update:
{BB:On:t:object:t=-0.052821753089484655, LHT:0:object:t:e=-0.022715919826365068, LHH:0:object:t:var=-0.022715919826365068, LHT:1:object:t:d=-0.022928503215441855, LHT:1:object:t:f=2.2063572648691945E-4, LHH:1:object:t:table:f=2.2063572648691945E-4, LHT:0:object:t:f=-2.2063572648693078E-4, LHH:0:object:t:table:f=-2.2063572648693078E-4, LHT:1:object:t:e=-2.2868806389757804E-4, LHH:1:object:t:var=-2.2868806389757804E-4, BB:object:t:object:t=-0.03521450205965656, LHH:1:object:t:mugs:d=-0.02292850321544188, BB:has:t:object:t=-0.0053212521856135985, LHT:0:has:t:e=-0.005329304523024245, LHH:0:has:t:var=-0.005329304523024245, LHT:1:has:t:e=-0.005329304523024245, LHH:1:has:t:the=-0.005329304523024245, LEX:294=6.718432191906956E-4, LEX:829=0.002186987584778222, LEX:830=0.0065732308518176704, LEX:831=-0.004687503520923158, LEX:832=-0.013986304644704583, LEX:1048=0.009241746508443196, LEX:613=0.009226333900017926, LEX:629=0.008783683382431838, LEX:653=0.0021214285093639497, LEX:669=0.0021335471091450046, LEX:725=-0.008811137670067132, LEX:741=-0.00879603486942029, LEX:789=-0.0026742007147050858, LEX:805=-0.002647021024933769, LEX:1013=0.00946447669081825, LEX:1017=-2.2273018237517565E-4}
26: =========== r:0.5384615384615384 p:0.5384615384615384 (epoch:4 file:0 0)
for all mugs that are in the sink
(forall $0 (and (object:t $0 mugs:d) (In:t $0 (the $1 (object:t $1 sink:f)))))
MakeLex parse time: 0.004 sec.
Adding:
the sink  :- NP : sink:f : 0.0
Lex Size: 1049
First parse time: 0.004 sec.
CORRECT:(forall $0 (and (object:t $0 mugs:d) (In:t $0 (the $1 (object:t $1 sink:f)))))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.1837334013448388
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 834 : 0.049945348460951
the sink  :- NP : sink:f : 74 : 20.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.1837334013448388
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 834 : 0.049945348460951
the sink  :- NP : sink:f : 74 : 20.0
]
Scale: 0.9980637563127532
Update:
{BB:In:t:object:t=-0.053550796269697346, LHT:0:object:t:e=-0.034573314526452514, LHH:0:object:t:var=-0.034573314526452514, LHT:1:object:t:d=-0.034728538369561704, LHH:1:object:t:mugs:d=-0.034728538369561704, LHT:0:In:t:e=1.593441052143292E-4, LHH:0:In:t:var=1.593441052143292E-4, LHT:1:object:t:f=1.593441052143292E-4, LHH:1:object:t:sink:f=1.593441052143292E-4, BB:object:t:object:t=-0.026790442085851435, BB:has:t:object:t=-0.007968184185715843, LHT:0:has:t:e=-0.007972304447820516, LHH:0:has:t:var=-0.007972304447820516, LHT:1:has:t:e=-0.007972304447820516, LHH:1:has:t:the=-0.007972304447820516, LHT:0:object:t:f=-1.5934410521430587E-4, LHH:0:object:t:sink:f=-1.5934410521430587E-4, LHT:0:In:t:f=-1.5934410521430587E-4, LHH:0:In:t:sink:f=-1.5934410521430587E-4, LHT:1:object:t:e=-1.6346436731897913E-4, LHH:1:object:t:var=-1.6346436731897913E-4, LEX:295=0.0017005277135802826, LEX:833=0.005584091070011956, LEX:834=0.016663088115901236, LEX:835=-0.006070211411480579, LEX:836=-0.01787749549156069, LEX:613=0.011363012972715565, LEX:629=0.010888286475302328, LEX:637=-1.1783142906053637E-4, LEX:653=0.005437686445684558, LEX:669=0.005460976449896543, LEX:709=-3.0087902005554885E-5, LEX:725=-0.0133860818708876, LEX:741=-0.013344184410952729, LEX:773=-1.1424774148214652E-5, LEX:789=-0.004001499602876122, LEX:805=-0.003955259808691508}
27: =========== r:0.5555555555555556 p:0.5555555555555556 (epoch:4 file:0 0)
if the robot is grasping the mug
(exists $0 (and (object:t $0 robot:p) (IsGrasping:t $0 (the $1 (object:t $1 mug:d)))))
MakeLex parse time: 0.004 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
the mug  :- NP : mug:d : 0.0
the robot  :- NP : robot:p : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsGrasping:t $4 ($2 $3)))))))) : 0.0
Lex Size: 1049
First parse time: 0.006 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsGrasping:t $0 (the $1 (object:t $1 mug:d)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.9928906783861026
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.11577979392245727
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsGrasping:t $4 ($2 $3)))))))) : 1030 : 0.0010032352907999482
the mug  :- NP : mug:d : 16 : 19.999839038370787
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.9928906783861026
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.11577979392245727
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsGrasping:t $4 ($2 $3)))))))) : 1030 : 0.0010032352907999482
the mug  :- NP : mug:d : 16 : 19.999839038370787
]
Scale: 0.9980537950995559
Update:
{LHT:0:object:t:e=0.010474886726187068, LHH:0:object:t:var=0.010474886726187068, LHT:1:object:t:p=0.010474886726186957, LHH:1:object:t:robot:p=0.010474886726186957, LHT:0:object:t:p=-0.010474886726186874, LHH:0:object:t:robot:p=-0.010474886726186874, LHT:1:object:t:e=-0.010474886726186874, LHH:1:object:t:var=-0.010474886726186874, LEX:884=0.003363459923817939, LEX:1014=-0.0014223389229840093, LEX:1018=-0.001761890910888519, LEX:1020=-1.792301017538781E-4, LEX:1029=-0.003137314567828996, LEX:1030=-2.2614536779745208E-4}
28: =========== r:0.5714285714285714 p:0.5714285714285714 (epoch:4 file:0 0)
if the robot is near the refrigerator
(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 refrigerator:f)))))
MakeLex parse time: 0.005 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
the refrigerator  :- NP : refrigerator:f : 0.0
the robot  :- NP : robot:p : 0.0
is near  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (IsNear:t $3 ($1 $2))))))) : 0.0
Lex Size: 1049
First parse time: 0.006 sec.
WRONG: (exists $0 (and (object:t $0 robot:p) (On:t $0 (the $1 (object:t $1 refrigerator:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.9928906783861026
the robot  :- NP : robot:p : 1 : 20.0
is  :- S/NP\(NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $4 $1) (On:t $4 ($2 $3)))))))) : 1012 : -0.3566259432303436
near  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1032 : -0.16266817943698555
the refrigerator  :- NP : refrigerator:f : 75 : 20.000064119849167
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.9928906783861026
the robot  :- NP : robot:p : 1 : 20.0
is near  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (IsNear:t $3 ($1 $2))))))) : 885 : 0.3253363557873039
the refrigerator  :- NP : refrigerator:f : 75 : 20.000064119849167
]
Scale: 0.998043834085193
Update:
{BB:IsNear:t:object:t=0.9561253639090371, LHT:0:object:t:e=0.013928794740287725, LHH:0:object:t:var=0.013928794740287725, LHT:1:object:t:p=0.013928794740287947, LHH:1:object:t:robot:p=0.013928794740287947, LHT:0:IsNear:t:e=0.9561253639090371, LHH:0:IsNear:t:var=0.9561253639090371, LHT:1:IsNear:t:e=0.9561253639090371, LHH:1:IsNear:t:the=0.9561253639090371, BB:On:t:object:t=-0.9561253639090371, LHT:0:On:t:e=-0.9561253639090371, LHH:0:On:t:var=-0.9561253639090371, LHT:1:On:t:e=-0.9561253639090371, LHH:1:On:t:the=-0.9561253639090371, LHT:0:object:t:p=-0.013928794740288006, LHH:0:object:t:robot:p=-0.013928794740288006, LHT:1:object:t:e=-0.013928794740288006, LHH:1:object:t:var=-0.013928794740288006, LEX:885=0.3541467681858113, LEX:1012=-0.4794572982499475, LEX:1016=-0.4766680656590898, LEX:1031=0.30098079751545964, LEX:1033=0.30099779730737086, LEX:1032=-0.17843697525967347, LEX:1034=-0.17570979382653337}
29: =========== r:0.5517241379310345 p:0.5517241379310345 (epoch:4 file:0 0)
if the robot is close to the stove
(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
MakeLex parse time: 0.006 sec.
Adding:
close  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 0.0
to  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
close  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
to  :- S|NP|NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 0.0
close  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 0.0
to  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
close  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
to  :- S|NP|NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 0.0
Lex Size: 1057
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.9928906783861026
the robot  :- NP : robot:p : 1 : 20.0
is  :- S/NP\(NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 1033 : 0.6270185213839712
close  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 1049 : 0.0
close  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1051 : 0.0
close  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 1053 : 0.0
close  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1055 : 0.0
to  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1050 : 0.0
to  :- S|NP|NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 1052 : 0.0
to  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1054 : 0.0
to  :- S|NP|NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 1056 : 0.0
the stove  :- NP : stove:f : 76 : 20.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.9928906783861026
the robot  :- NP : robot:p : 1 : 20.0
is  :- S/NP\(NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 1033 : 0.6270185213839712
close  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 1049 : 0.0
close  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1051 : 0.0
close  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 1053 : 0.0
close  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1055 : 0.0
to  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1050 : 0.0
to  :- S|NP|NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 1052 : 0.0
to  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1054 : 0.0
to  :- S|NP|NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $1 $2)))) : 1056 : 0.0
the stove  :- NP : stove:f : 76 : 20.0
]
Scale: 0.9980338732696588
Update:
{BB:IsNear:t:object:t=0.007518385374050599, LHT:0:object:t:e=0.012215157683044138, LHH:0:object:t:var=0.012215157683044138, LHT:1:object:t:p=0.012215157683044138, LHH:1:object:t:robot:p=0.012215157683044138, LHT:0:IsNear:t:e=0.007518385374050599, LHH:0:IsNear:t:var=0.007518385374050599, LHT:1:IsNear:t:e=0.007518385374050599, LHH:1:IsNear:t:the=0.007518385374050599, BB:On:t:object:t=-0.007518385374050714, LHT:0:On:t:e=-0.007518385374050714, LHH:0:On:t:var=-0.007518385374050714, LHT:1:On:t:e=-0.007518385374050714, LHH:1:On:t:the=-0.007518385374050714, LHT:0:object:t:p=-0.012215157683044087, LHH:0:object:t:robot:p=-0.012215157683044087, LHT:1:object:t:e=-0.012215157683044087, LHH:1:object:t:var=-0.012215157683044087, LEX:886=7.250873351181215E-4, LEX:1035=-5.257078358199599E-5, LEX:1036=-5.081738884028813E-5, LEX:1012=-0.003764916492338244, LEX:1016=-0.00375346888171247, LEX:1031=0.0033965242261379085, LEX:1033=0.0033967738102574827, LEX:1049=-2.0723305507764595E-4, LEX:1051=-1.0361652753885068E-4, LEX:1053=-2.0723305507764595E-4, LEX:1055=-1.0361652753885068E-4, LEX:1050=-2.0723305507764595E-4, LEX:1052=-1.0361652753885068E-4, LEX:1054=-2.0723305507764595E-4, LEX:1056=-1.0361652753885068E-4}
30: =========== r:0.5666666666666667 p:0.5666666666666667 (epoch:4 file:0 0)
if the microwave is on and the robot is close to the microwave
(and (exists $0 (and (object:t $0 microwave:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 microwave:f))))))
MakeLex parse time: 0.013 sec.
Adding:
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
close to  :- S/NP\S\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 t (lambda $4 e (and $3 (exists $5 (and ($0 $1 $5) (IsNear:t $5 ($2 $4)))))))))) : 0.0
Lex Size: 1058
First parse time: 0.02 sec.
CORRECT:(and (exists $0 (and (object:t $0 microwave:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 microwave:f))))))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -1.6915518997459467
the microwave  :- NP : microwave:f : 77 : 20.0
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -0.37983921734724607
on  :- NP : IsOn:s : 57 : 9.004446546147044
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 1.1824051954384336
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.11401790301156875
close to  :- S/NP\S\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 t (lambda $4 e (and $3 (exists $5 (and ($0 $1 $5) (IsNear:t $5 ($2 $4)))))))))) : 1057 : 0.0
]
Second parse time: 0.014 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -1.6915518997459467
the microwave  :- NP : microwave:f : 77 : 20.0
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -0.37983921734724607
on  :- NP : IsOn:s : 57 : 9.004446546147044
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 1.1824051954384336
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.11401790301156875
close to  :- S/NP\S\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 t (lambda $4 e (and $3 (exists $5 (and ($0 $1 $5) (IsNear:t $5 ($2 $4)))))))))) : 1057 : 0.0
]
Scale: 0.9980239126529471
Update:
{BB:exists:exists=-0.10986098301637155, BB:object:t:state:t=0.04016797516550974, LHT:0:object:t:e=0.01264819229281816, LHH:0:object:t:var=0.01264819229281816, LHT:0:state:t:e=0.040159394533508266, LHH:0:state:t:var=0.040159394533508266, LHT:1:state:t:s=0.04016797516550974, LHH:1:state:t:IsOn:s=0.0401997402548537, LHT:1:object:t:p=0.0022701701135817405, LHH:1:object:t:robot:p=0.00458125327203915, LHT:0:object:t:p=-0.004581253272039469, LHH:0:object:t:robot:p=-0.004581253272039469, LHT:1:object:t:e=-0.004581253272039469, LHH:1:object:t:var=-0.004581253272039469, BB:exists:object:t=-0.04536722209273632, LHH:1:object:t:you:p=-0.0023110831584578473, LHT:0:object:t:s=-0.040199740254853636, LHH:0:object:t:IsOn:s=-0.040199740254853636, LHT:1:object:t:d=-0.0298217180756167, LHH:1:object:t:bowl:d=-3.1765089343851956E-5, LHH:1:state:t:yellow:s=-3.1765089343851956E-5, LHH:1:object:t:cups:d=-0.029789952986272846, LEX:1037=0.0020498103631489822, LEX:509=-1.4668883922456924E-5, LEX:1057=-0.0020498103688072434, LEX:123=-0.03762911024603366, LEX:131=0.0456153766631764, LEX:172=-3.176508934385196E-5, LEX:311=-4.0681737217462333E-4, LEX:365=-0.0019042657862832237, LEX:373=-0.02938313561409823, LEX:547=0.00674407733727406, LEX:559=0.01700342698122966, LEX:518=0.017014613105044974, LEX:570=0.04626747995250879, LEX:977=-0.029821718075616704, LEX:1014=-0.0045812532720394695, LEX:1018=0.002297370449590297, LEX:1020=-0.03321930633757246}
31: =========== r:0.5806451612903226 p:0.5806451612903226 (epoch:4 file:0 0)
if the stove is not on and the mug contains coffee
(and (exists $0 (and (object:t $0 stove:f) (not (state:t $0 IsOn:s)))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coffee:q))))))
MakeLex parse time: 0.008 sec.
Adding:
if the stove is  :- S/S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 t (and (exists $3 (and (object:t $3 stove:f) ($0 $3 $1))) $2)))) : 0.0
not  :- S|NP|NP : (lambda $0 e (lambda $1 e (not (state:t $0 $1)))) : 3.333333333333333
if the stove is  :- S/S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 t (and (exists $3 (and (object:t $3 stove:f) ($0 $1 $3))) $2)))) : 0.0
not  :- S|NP|NP : (lambda $0 e (lambda $1 e (not (state:t $1 $0)))) : 3.333333333333333
if the stove is  :- S/S/(S|NP) : (lambda $0 <e,t> (lambda $1 t (and (exists $2 (and (object:t $2 stove:f) ($0 $2))) $1))) : 0.0
not  :- S|NP/NP : (lambda $0 e (lambda $1 e (not (state:t $1 $0)))) : 3.333333333333333
Lex Size: 1064
First parse time: 0.01 sec.
WRONG: (and (exists $0 (and (not (state:t stove:f $0)) (On:t $0 (the $1 (object:t $1 IsOn:s))))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coffee:q))))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.9928906783861026
the stove  :- NP : stove:f : 76 : 20.0
is  :- S/NP\(NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $4 $1) (On:t $4 ($2 $3)))))))) : 1012 : -0.8398481579726292
not  :- S|NP|NP : (lambda $0 e (lambda $1 e (not (state:t $1 $0)))) : 1061 : 3.333333333333333
not  :- S|NP/NP : (lambda $0 e (lambda $1 e (not (state:t $1 $0)))) : 1063 : 3.333333333333333
on  :- NP : IsOn:s : 57 : 9.004446546147044
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : 0.08489044117764295
the mug  :- NP : mug:d : 16 : 19.999839038370787
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.5726252003605001
coffee  :- NP : coffee:q : 35 : 10.0
]
Second parse time: 0.008 sec.
Best LexEntries:
[LexEntries and scores:
if the stove is  :- S/S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 t (and (exists $3 (and (object:t $3 stove:f) ($0 $3 $1))) $2)))) : 1058 : 0.0
if the stove is  :- S/S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 t (and (exists $3 (and (object:t $3 stove:f) ($0 $1 $3))) $2)))) : 1060 : 0.0
if the stove is  :- S/S/(S|NP) : (lambda $0 <e,t> (lambda $1 t (and (exists $2 (and (object:t $2 stove:f) ($0 $2))) $1))) : 1062 : 0.0
not  :- S|NP|NP : (lambda $0 e (lambda $1 e (not (state:t $0 $1)))) : 1059 : 3.333333333333333
not  :- S|NP|NP : (lambda $0 e (lambda $1 e (not (state:t $1 $0)))) : 1061 : 3.333333333333333
not  :- S|NP/NP : (lambda $0 e (lambda $1 e (not (state:t $1 $0)))) : 1063 : 3.333333333333333
on  :- NP : IsOn:s : 57 : 9.004446546147044
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 1.1824051954384336
the mug  :- NP : mug:d : 16 : 19.999839038370787
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.0013111161721795
coffee  :- NP : coffee:q : 35 : 10.0
]
Scale: 0.9980139522350523
Update:
{LHT:0:state:t:e=0.9979911824235047, LHH:0:state:t:var=0.9979911824235047, BB:has:t:object:t=2.2306556410160537E-5, LHT:0:has:t:e=-0.03157749372724687, LHH:0:has:t:var=-0.03157749372724687, LHT:1:has:t:e=-0.03157749372724687, LHH:1:has:t:the=-0.03157749372724687, BB:On:t:not=-0.9980134883811577, LHT:0:state:t:f=-0.9980134883811577, LHH:0:state:t:stove:f=-0.9980134883811577, LHT:1:state:t:e=-0.9980357955363245, LHH:1:state:t:var=-0.9980134889799146, LHT:0:On:t:e=-0.9980134883811577, LHH:0:On:t:var=-0.9980134883811577, LHT:1:On:t:e=-0.9980134883811577, LHH:1:On:t:the=-0.9980134883811577, LHT:1:object:t:s=-0.9980134883811573, LHH:1:object:t:IsOn:s=-0.9980134883811573, BB:object:t:state:t=-2.2306556410025025E-5, LHH:1:state:t:the=-2.2306556410025025E-5, LEX:505=-5.988974911380114E-5, LEX:76=-0.9979535986320436, LEX:875=-0.9979535986320437, LEX:71=-5.988974911380114E-5, LEX:1012=-0.6660148204219066, LEX:1016=-0.3319986679592507, LEX:1059=-0.13420818957913616, LEX:1061=-0.13521693183083883, LEX:1063=0.2603640253285616, LEX:858=-0.9979911794513018, LEX:966=-2.23058434192222E-5, LEX:454=-0.03159980028365705, LEX:472=-2.2306556410025025E-5, LEX:502=-0.96639138154109, BB:not:object:t=0.9980139522350523, LHT:1:object:t:f=0.9980139522350523, LHH:1:object:t:stove:f=0.9980139522350523, LHT:1:state:t:s=0.9980139522350523, LHH:1:state:t:IsOn:s=0.9980139522350523, LEX:1038=0.009060057007645133, LEX:1058=0.19779057038953687, LEX:1060=0.39558114077907375, LEX:1062=0.39558114077907375, LEX:887=0.998013952235052, LEX:874=0.9980139522350518}
32: =========== r:0.5625 p:0.5625 (epoch:4 file:0 0)
if the mug is green and the TV is on
(and (exists $0 (and (object:t $0 mug:d) (state:t $0 green:s))) (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s))))
MakeLex parse time: 0.02 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the mug  :- NP : mug:d : 0.0
green  :- NP : green:s : 0.0
on  :- NP : IsOn:s : 0.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 0.0
the TV  :- NP : tv:f : 0.0
Lex Size: 1064
First parse time: 0.037 sec.
CORRECT:(and (exists $0 (and (object:t $0 mug:d) (state:t $0 green:s))) (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s))))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -1.674548472764717
the mug  :- NP : mug:d : 16 : 19.999839038370787
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -0.3628246042422011
green  :- NP : green:s : 51 : 10.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 966 : 0.35119076492983986
the TV  :- NP : tv:f : 79 : 20.0
is  :- S/NP\S\(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 901 : 0.12467169946820121
on  :- NP : IsOn:s : 57 : 9.004446546147044
]
Second parse time: 0.02 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -1.674548472764717
the mug  :- NP : mug:d : 16 : 19.999839038370787
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -0.3628246042422011
green  :- NP : green:s : 51 : 10.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 966 : 0.35119076492983986
the TV  :- NP : tv:f : 79 : 20.0
is  :- S/NP\S\(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 901 : 0.12467169946820121
on  :- NP : IsOn:s : 57 : 9.004446546147044
]
Scale: 0.998003992015968
Update:
{BB:exists:exists=-0.15014168960517366, BB:object:t:state:t=0.023543869499526724, LHT:0:object:t:e=-0.03187209195538064, LHH:0:object:t:var=-0.03187209195538064, LHT:1:object:t:d=-0.03043336389887248, LHT:0:state:t:e=2.254208039063181E-4, LHH:0:state:t:var=2.254208039063181E-4, LHT:1:state:t:s=2.5616112304037864E-4, LHH:1:state:t:green:s=9.778345967693047E-4, LHH:1:state:t:IsOn:s=2.9780047242006368E-5, BB:has:t:object:t=-0.024118325303696297, LHT:0:has:t:e=-0.024118325303696297, LHH:0:has:t:var=-0.024118325303696297, LHT:1:has:t:e=-0.024118325303696297, LHH:1:has:t:the=-0.024118325303696297, LHH:1:object:t:cup:d=-4.2798813759969945E-4, BB:exists:object:t=-0.007126132560842138, LHT:0:object:t:s=-0.0010076143892489581, LHH:0:object:t:IsOn:s=-2.9779792479423525E-5, BB:exists:state:t=-2.405767158754263E-4, LHT:1:state:t:e=-3.0740512495223255E-5, LHH:1:state:t:var=-3.0740705695295115E-5, LHH:1:state:t:yellow:s=-7.514533277714749E-4, LHH:1:object:t:bowl:d=-7.365447131786189E-4, LHH:1:object:t:cups:d=-0.029268831048093292, LHT:1:object:t:p=-0.0024466456035296775, LHH:1:object:t:you:p=-0.0024466456035296775, LHH:0:object:t:green:s=-9.778345967695345E-4, BB:In:t:state:t=-0.0013642379531458551, LHT:0:In:t:e=-6.821189765729276E-4, LHH:0:In:t:var=-6.821189765729276E-4, BB:In:t:object:t=-0.0013638102293967436, LHT:1:In:t:f=-6.817130042113233E-4, LHH:1:In:t:tv:f=-6.817130042113233E-4, LEX:123=6.038108228642686E-4, LEX:131=0.02392176242881607, LEX:172=-7.364631252367582E-4, LEX:218=-1.4953136360430697E-5, LEX:311=-4.16766695733219E-4, LEX:349=-3.391851841849782E-4, LEX:365=-0.002019419729477131, LEX:373=-0.028512747862094876, LEX:397=-1.0443543560105839E-5, LEX:547=0.002173465555475474, LEX:559=0.006032786289823658, LEX:1028=-6.819297153160029E-4, LEX:518=0.021054104091319786, LEX:522=-3.64581867906132E-4, LEX:546=-6.340227757931366E-5, LEX:558=-2.3829784525267177E-5, LEX:570=0.01997443834393999, LEX:600=-0.024057650057649947, LEX:901=0.010386328056958409, LEX:929=-0.003820325340239417, LEX:977=-0.023816528921719735, LEX:1020=7.32068941886149E-4, LEX:858=-0.024118325303696307, LEX:890=0.003077964688262909, LEX:918=-8.06373355993026E-5, LEX:954=2.439609454384958E-4, LEX:966=0.021561723372066785, LEX:972=-6.817134503943582E-4}
33: =========== r:0.5757575757575758 p:0.5757575757575758 (epoch:4 file:0 0)
if there exists a mug and the mug contains sugar
(and (exists $0 (object:t $0 mug:d)) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 sugar:q))))))
MakeLex parse time: 0.013 sec.
Adding:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
a mug  :- NP : mug:d : 0.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 0.5467285714285715
the mug  :- NP : mug:d : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
sugar  :- NP : sugar:q : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
sugar  :- NP : sugar:q : 0.0
Lex Size: 1064
First parse time: 0.014 sec.
CORRECT:(and (exists $0 (object:t $0 mug:d)) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 sugar:q))))))
Using:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.2970478259098348
a mug  :- NP : mug:d : 22 : 20.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : -0.9372190635773551
the mug  :- NP : mug:d : 16 : 19.999839038370787
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 0.6062338188194101
sugar  :- NP : sugar:q : 30 : 10.0
]
Second parse time: 0.012 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.2970478259098348
a mug  :- NP : mug:d : 22 : 20.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : -0.9372190635773551
the mug  :- NP : mug:d : 16 : 19.999839038370787
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 0.6062338188194101
sugar  :- NP : sugar:q : 30 : 10.0
]
Scale: 0.9979940319956886
Update:
{BB:exists:exists=-9.69004403776396E-5, LHT:0:object:t:e=-0.0031530585951206574, LHH:0:object:t:var=-0.0031530585951206574, LHT:1:object:t:d=-0.0026076491889835303, LHH:1:object:t:mug:d=8.546228420996776E-5, BB:has:t:object:t=6.759243831729037E-4, LHT:0:has:t:e=-0.0616354462484467, LHH:0:has:t:var=-0.0616354462484467, LHT:1:has:t:e=-0.061635446306492606, LHH:1:has:t:the=-0.06163544624956976, LHT:0:object:t:d=-8.406081493626533E-5, LHH:0:object:t:mug:d=-8.406081493626533E-5, BB:object:t:state:t=-0.0014708055874984207, LHT:0:state:t:e=-0.0014707999543219943, LHH:0:state:t:var=-0.0014707999543219943, LHT:1:state:t:e=-6.764834887366799E-4, LHH:1:state:t:the=-6.759307794763963E-4, BB:exists:object:t=-0.002762933836793033, LHT:1:object:t:p=-6.246096688987386E-4, LHH:1:object:t:you:p=-6.246096688987386E-4, LHT:1:state:t:s=-7.957209025777003E-4, LHH:1:state:t:yellow:s=-7.957209025777003E-4, BB:object:t:object:t=-0.0010857469381887128, LHH:1:object:t:bowl:d=-0.0010533657096429986, LHH:1:object:t:cups:d=-0.0015634805629133066, LHH:1:object:t:cup:d=-7.626520063655322E-5, LEX:122=6.035731727250617E-4, LEX:125=3.1641365091393135E-4, LEX:129=5.259595164272427E-5, LEX:133=5.737816275709112E-4, LEX:137=8.672551834673353E-5, LEX:141=1.512460655065164E-4, LEX:145=3.762207705212652E-4, LEX:149=1.5124667859325907E-4, LEX:153=8.172620070600948E-5, LEX:200=-3.4718380704014965E-4, LEX:220=-2.4042698113171628E-4, LEX:240=-7.159690642042621E-4, LEX:423=-1.1155937924307398E-5, LEX:124=3.076662519851232E-5, LEX:128=-0.0012070083819485271, LEX:132=1.7403736954882425E-4, LEX:136=3.557144975840159E-5, LEX:140=3.632959355403811E-4, LEX:144=4.3025527307445974E-5, LEX:148=3.601527716695872E-4, LEX:152=-6.180985195773762E-4, LEX:123=5.7344390938078756E-5, LEX:127=2.9815741333175092E-5, LEX:131=7.269441314966202E-4, LEX:135=5.897394224260364E-5, LEX:139=3.6332724383701594E-4, LEX:143=8.115812640137721E-5, LEX:147=3.606030675769159E-4, LEX:151=4.200704127984667E-5, LEX:198=-1.52604014484724E-4, LEX:208=-2.341471587377947E-5, LEX:218=-5.423115186270903E-5, LEX:238=-3.0550112287620445E-4, LEX:333=-4.4412184204448753E-4, LEX:349=-0.001086975660047539, LEX:365=-5.301549954103252E-4, LEX:381=-5.586138477281306E-5, LEX:389=-3.209465521480215E-5, LEX:397=-3.5365255832385446E-5, LEX:571=-2.3420040941679395E-5, LEX:583=-2.8248277247152924E-5, LEX:595=-1.2552121714116854E-5, LEX:419=-2.6836180164374824E-4, LEX:859=1.700624694188009E-5, LEX:126=2.288065230727202E-4, LEX:130=-2.0805116012706558E-4, LEX:134=6.936951054141856E-4, LEX:138=1.048004206685403E-4, LEX:142=1.5121071983479869E-4, LEX:146=3.3503888581988724E-4, LEX:150=1.5121133630601193E-4, LEX:154=-0.0012419815928627774, LEX:858=6.759307750037779E-4, LEX:966=-6.759096348768011E-4, LEX:454=-0.06231137068966558, LEX:472=-6.759307794763959E-4, LEX:502=0.06298730146913684}
34: =========== r:0.5882352941176471 p:0.5882352941176471 (epoch:4 file:0 0)
if the television is on
(exists $0 (and (object:t $0 television:f) (state:t $0 IsOn:s)))
MakeLex parse time: 0.003 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
on  :- NP : IsOn:s : 0.0
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 0.0
on  :- NP : IsOn:s : 0.0
Lex Size: 1064
First parse time: 0.004 sec.
WRONG: (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -1.6685156864748933
the television  :- NP : tv:f : 78 : 17.003547971496108
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -0.3417705001508813
on  :- NP : IsOn:s : 57 : 9.004446546147044
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.10892043902147214
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 845 : 2.5100082793382126
on  :- NP : IsOn:s : 57 : 9.004446546147044
]
Scale: 0.9979840721742081
Update:
{BB:object:t:state:t=-4.9537081265411586E-5, LHT:0:object:t:e=-0.03408657653785345, LHH:0:object:t:var=-0.03408657653785345, LHH:1:object:t:television:f=0.9951197903995362, LHT:0:state:t:e=-6.324538516278786E-5, LHH:0:state:t:var=-6.324538516278786E-5, LHT:1:state:t:s=-4.9537081265411586E-5, LHH:1:state:t:IsOn:s=8.150123201835299E-4, LHH:1:object:t:tv:f=-0.9951197903995361, BB:exists:object:t=-0.001826499232713545, LHT:1:object:t:p=-0.001826499232713545, LHH:1:object:t:you:p=-0.001826499232713545, LHT:0:object:t:s=-8.150123201832361E-4, LHH:0:object:t:IsOn:s=-8.150123201832361E-4, BB:exists:exists=-0.033075089625323115, LHT:1:object:t:d=-0.033075089625323115, LHH:1:object:t:bowl:d=-8.64549401449058E-4, LHH:1:state:t:yellow:s=-8.64549401449058E-4, LHH:1:object:t:cups:d=-0.032210540223874054, BB:exists:state:t=-1.37083038973392E-5, LHT:1:state:t:e=-1.37083038973392E-5, LHH:1:state:t:var=-1.37083038973392E-5, LEX:304=0.05315594471593558, LEX:845=0.9419598303409218, LEX:78=-0.9951197903995356, LEX:123=0.020089825356553497, LEX:131=0.41547354022750244, LEX:172=-8.64549401449058E-4, LEX:311=-4.4254309052478867E-4, LEX:365=-0.001383956142188756, LEX:373=-0.03176799713334927, LEX:547=-0.12131385488148848, LEX:559=-0.33295042499366967, LEX:518=-0.33293936906829896, LEX:558=-1.1055925370724707E-5, LEX:570=-0.506968060957398, LEX:977=-0.033075089625323115, LEX:1020=-0.12212621482314508}
35: =========== r:0.5714285714285714 p:0.5714285714285714 (epoch:4 file:0 0)
if you find any cups
(exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d))))
MakeLex parse time: 0.005 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
you  :- NP : you:p : 0.0
find any cups  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 0.0
Lex Size: 1064
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d))))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.5243939792489746
you  :- NP : you:p : 2 : 10.860596904445025
find any cups  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 360 : 1.084824093784976
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.5243939792489746
you  :- NP : you:p : 2 : 10.860596904445025
find any cups  :- S\NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 360 : 1.084824093784976
]
Scale: 0.9979741125515205
Update:
{BB:exists:object:t=0.024131602087401414, LHT:0:object:t:e=0.02415616300219212, LHH:0:object:t:var=0.02415616300219212, LHT:1:object:t:p=-0.023676365620077654, LHH:1:object:t:you:p=-0.023676365620077654, LHT:1:object:t:d=0.04783435287386366, LHH:1:object:t:cups:d=0.05081572503687837, BB:object:t:state:t=-0.020576113121690914, LHH:1:object:t:bowl:d=-2.474633575589598E-4, LHT:0:state:t:e=-0.020613692239877558, LHH:0:state:t:var=-0.020613692239877558, LHT:1:state:t:s=-0.020605828125322582, LHH:1:state:t:yellow:s=-0.020605828125322582, BB:object:t:object:t=-1.1881180297261675E-5, LHH:1:object:t:cup:d=-0.002733908805456334, LEX:309=-3.517266030957509E-4, LEX:323=-3.900027098202435E-4, LEX:339=-2.264856582850871E-5, LEX:347=-4.075385175328563E-5, LEX:355=-0.002342574078981379, LEX:379=-3.517266030957509E-4, LEX:395=-3.719661650229525E-4, LEX:403=-3.9670280414775573E-4, LEX:411=-2.2522633110572993E-5, LEX:312=-1.615150415575179E-4, LEX:326=-5.360359531426925E-4, LEX:334=-4.416531334482383E-5, LEX:342=-3.114687052309024E-5, LEX:358=-3.817936160570211E-5, LEX:366=-5.915765426603645E-4, LEX:382=-4.030774561100491E-4, LEX:398=-5.459686710045751E-5, LEX:307=-3.517266030957509E-4, LEX:321=-3.900027098202435E-4, LEX:337=-2.264856582850871E-5, LEX:345=-4.0753839195132053E-5, LEX:353=-2.2564272872774828E-5, LEX:377=-3.517266030957509E-4, LEX:393=-3.7196605041436127E-4, LEX:409=-2.2522633110572993E-5, LEX:314=-0.009628337552260948, LEX:328=-3.931080491086209E-4, LEX:336=-4.0753815734398426E-5, LEX:344=-2.2982286451364444E-5, LEX:360=0.037330431450078895, LEX:368=-3.517266030957509E-4, LEX:376=-0.001602714170507144, LEX:384=-3.719658363066577E-4, LEX:400=-2.252263317191439E-5, LEX:408=-0.01724021663948492, LEX:305=-3.517266030957509E-4, LEX:319=-3.9007828243962895E-4, LEX:335=-2.2652964501017996E-5, LEX:343=-4.032463439491174E-5, LEX:351=-2.2563834282527364E-5, LEX:375=-4.3904575730161003E-4, LEX:391=-3.6804914558445656E-4, LEX:407=-6.18497852366995E-5, LEX:316=-3.517266030957509E-4, LEX:330=-3.900027098202435E-4, LEX:338=-4.0753839195132053E-5, LEX:346=-2.264856582850871E-5, LEX:362=-2.2564272872774828E-5, LEX:370=-3.517266030957509E-4, LEX:386=-3.7196605041436127E-4, LEX:402=-2.2522633110572993E-5, LEX:131=0.02060723000787407, LEX:151=-4.095366075479272E-4, LEX:208=-2.1049228965153735E-4, LEX:218=-0.020552309729324713, LEX:228=-1.6232946003682995E-5, LEX:238=-1.1378439139173789E-5, LEX:248=-3.78426334062424E-5, LEX:333=-1.723673490669442E-5, LEX:341=-2.7305522280047993E-5, LEX:349=0.022154509725966495, LEX:365=-0.0010468559675812137, LEX:373=-1.559444559188173E-4, LEX:389=-2.794739376652986E-4, LEX:397=-0.012449228966296409, LEX:405=-2.252060380756155E-5, LEX:2=0.0093519150550052, LEX:25=-0.0027254377593820154, LEX:318=-3.517266030957509E-4, LEX:332=-3.89983419278743E-4, LEX:340=-4.0753839195132053E-5, LEX:348=-2.2647440198143994E-5, LEX:364=-2.2564272872774828E-5, LEX:372=-3.517266030957509E-4, LEX:388=-3.7196605041436127E-4, LEX:404=-1.2449805260426357E-5}
36: =========== r:0.5833333333333334 p:0.5833333333333334 (epoch:4 file:0 0)
When the water is boiling
(exists $0 (and (object:t $0 water:q) (state:t $0 IsBoiling:s)))
MakeLex parse time: 0.002 sec.
Adding:
When  :- S/NP/(S|NP)/(S|NP|(S|NP)) : (lambda $0 <<e,t>,<e,t>> (lambda $1 <e,t> (lambda $2 e ($0 $1 $2)))) : 0.0
the  :- S|NP|(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 0.0
When  :- S|NP|(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 0.0
the  :- S/NP/(S|NP)\(S|NP|(S|NP)) : (lambda $0 <<e,t>,<e,t>> (lambda $1 <e,t> (lambda $2 e ($0 $1 $2)))) : 0.0
When  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
the  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 0.0
When  :- S/NP/(S|NP)/(S|(S|NP)|NP) : (lambda $0 <e,<<e,t>,t>> (lambda $1 <e,t> (lambda $2 e ($0 $2 $1)))) : 0.0
the  :- S|(S|NP)|NP : (lambda $0 e (lambda $1 <e,t> (exists $2 (and ($1 $2) (state:t $2 $0))))) : 0.0
When  :- S|(S|NP)|NP : (lambda $0 e (lambda $1 <e,t> (exists $2 (and ($1 $2) (state:t $2 $0))))) : 0.0
the  :- S/NP/(S|NP)\(S|(S|NP)|NP) : (lambda $0 <e,<<e,t>,t>> (lambda $1 <e,t> (lambda $2 e ($0 $2 $1)))) : 0.0
When  :- S/NP/(S|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and ($1 $3) ($0 $3 $2)))))) : 0.0
the  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
When  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
the  :- S/NP/(S|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and ($1 $3) ($0 $3 $2)))))) : 0.0
When  :- S/NP/(S|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and ($1 $3) ($0 $2 $3)))))) : 0.0
the  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
When  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
the  :- S/NP/(S|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and ($1 $3) ($0 $2 $3)))))) : 0.0
Lex Size: 1082
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 water:q) (state:t $0 IsBoiling:s)))
Using:
[LexEntries and scores:
When  :- S/NP/(S|NP)/(S|NP|(S|NP)) : (lambda $0 <<e,t>,<e,t>> (lambda $1 <e,t> (lambda $2 e ($0 $1 $2)))) : 1064 : 0.0
When  :- S|NP|(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 1066 : 0.0
When  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 1068 : 0.0
When  :- S/NP/(S|NP)/(S|(S|NP)|NP) : (lambda $0 <e,<<e,t>,t>> (lambda $1 <e,t> (lambda $2 e ($0 $2 $1)))) : 1070 : 0.0
When  :- S|(S|NP)|NP : (lambda $0 e (lambda $1 <e,t> (exists $2 (and ($1 $2) (state:t $2 $0))))) : 1072 : 0.0
When  :- S/NP/(S|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and ($1 $3) ($0 $3 $2)))))) : 1074 : 0.0
When  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1076 : 0.0
When  :- S/NP/(S|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and ($1 $3) ($0 $2 $3)))))) : 1078 : 0.0
When  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 1080 : 0.0
the  :- S|NP|(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 1065 : 0.0
the  :- S/NP/(S|NP)\(S|NP|(S|NP)) : (lambda $0 <<e,t>,<e,t>> (lambda $1 <e,t> (lambda $2 e ($0 $1 $2)))) : 1067 : 0.0
the  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 1069 : 0.0
the  :- S|(S|NP)|NP : (lambda $0 e (lambda $1 <e,t> (exists $2 (and ($1 $2) (state:t $2 $0))))) : 1071 : 0.0
the  :- S/NP/(S|NP)\(S|(S|NP)|NP) : (lambda $0 <e,<<e,t>,t>> (lambda $1 <e,t> (lambda $2 e ($0 $2 $1)))) : 1073 : 0.0
the  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1075 : 0.0
the  :- S/NP/(S|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and ($1 $3) ($0 $3 $2)))))) : 1077 : 0.0
the  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 1079 : 0.0
the  :- S/NP/(S|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and ($1 $3) ($0 $2 $3)))))) : 1081 : 0.0
water  :- NP : water:q : 32 : 10.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -2.32448531591127
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
When  :- S/NP/(S|NP)/(S|NP|(S|NP)) : (lambda $0 <<e,t>,<e,t>> (lambda $1 <e,t> (lambda $2 e ($0 $1 $2)))) : 1064 : 0.0
When  :- S|NP|(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 1066 : 0.0
When  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 1068 : 0.0
When  :- S/NP/(S|NP)/(S|(S|NP)|NP) : (lambda $0 <e,<<e,t>,t>> (lambda $1 <e,t> (lambda $2 e ($0 $2 $1)))) : 1070 : 0.0
When  :- S|(S|NP)|NP : (lambda $0 e (lambda $1 <e,t> (exists $2 (and ($1 $2) (state:t $2 $0))))) : 1072 : 0.0
When  :- S/NP/(S|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and ($1 $3) ($0 $3 $2)))))) : 1074 : 0.0
When  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1076 : 0.0
When  :- S/NP/(S|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and ($1 $3) ($0 $2 $3)))))) : 1078 : 0.0
When  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 1080 : 0.0
the  :- S|NP|(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 1065 : 0.0
the  :- S/NP/(S|NP)\(S|NP|(S|NP)) : (lambda $0 <<e,t>,<e,t>> (lambda $1 <e,t> (lambda $2 e ($0 $1 $2)))) : 1067 : 0.0
the  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 1069 : 0.0
the  :- S|(S|NP)|NP : (lambda $0 e (lambda $1 <e,t> (exists $2 (and ($1 $2) (state:t $2 $0))))) : 1071 : 0.0
the  :- S/NP/(S|NP)\(S|(S|NP)|NP) : (lambda $0 <e,<<e,t>,t>> (lambda $1 <e,t> (lambda $2 e ($0 $2 $1)))) : 1073 : 0.0
the  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1075 : 0.0
the  :- S/NP/(S|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and ($1 $3) ($0 $3 $2)))))) : 1077 : 0.0
the  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 1079 : 0.0
the  :- S/NP/(S|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and ($1 $3) ($0 $2 $3)))))) : 1081 : 0.0
water  :- NP : water:q : 32 : 10.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -2.32448531591127
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Scale: 0.9979641531276197
Update:
{BB:object:t:state:t=0.025024823944513507, LHT:0:object:t:e=0.025024823944513507, LHH:0:object:t:var=0.025024823944513507, LHT:0:state:t:e=0.025018456212407017, LHH:0:state:t:var=0.025018456212407017, LHT:1:state:t:s=0.02503064306836968, LHH:1:state:t:IsBoiling:s=0.02503064306836968, BB:exists:state:t=-1.2186855962760396E-5, LHT:1:state:t:e=-1.800597981885862E-5, LHH:1:state:t:var=-1.800597981885862E-5, LHT:0:object:t:s=-0.025024823944513493, LHH:0:object:t:IsBoiling:s=-0.025024823944513493, LEX:846=0.0019684674929709833, LEX:1039=0.0018396340975691654, LEX:1064=0.0036795507333987347, LEX:1066=0.0018397753666993674, LEX:1068=-0.020361115027843, LEX:1070=0.0018397753666993674, LEX:1072=0.0018397753666993674, LEX:1074=0.0018383205857353381, LEX:1076=0.0018383205857353381, LEX:1078=0.0018383205857353381, LEX:1080=0.0018383205857353381, LEX:1065=0.0018397753666993674, LEX:1067=-0.02220089039454237, LEX:1069=0.005519326100098101, LEX:1071=0.0018397753666993674, LEX:1073=0.0018397753666993674, LEX:1075=0.0018383205857353381, LEX:1077=0.0018383205857353381, LEX:1079=0.0018383205857353381, LEX:1081=0.0018383205857353381, LEX:570=0.0029404388202799946, LEX:1020=-0.002941293081144452}
37: =========== r:0.5945945945945946 p:0.5945945945945946 (epoch:4 file:0 0)
when the water in the pot is boiling
(exists $0 (and (object:t $0 water:q) (In:t $0 (the $1 (object:t $1 pot:d))) (state:t $0 IsBoiling:s)))
MakeLex parse time: 0.003 sec.
Adding:
when the  :- NP|(S|NP) : (lambda $0 <e,t> (the $1 ($0 $1))) : 0.4101275
water in  :- S/NP/(S|NP)\(NP|(S|NP)) : (lambda $0 <<e,t>,e> (lambda $1 <e,t> (lambda $2 e (exists $3 (and (In:t $3 ($0 $1)) (object:t $3 water:q) (state:t $3 $2)))))) : 0.0
Lex Size: 1084
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 water:q) (In:t $0 (the $1 (object:t $1 pot:d))) (state:t $0 IsBoiling:s)))
Using:
[LexEntries and scores:
when the  :- NP|(S|NP) : (lambda $0 <e,t> (the $1 ($0 $1))) : 1082 : 0.4101275
water in  :- S/NP/(S|NP)\(NP|(S|NP)) : (lambda $0 <<e,t>,e> (lambda $1 <e,t> (lambda $2 e (exists $3 (and (In:t $3 ($0 $1)) (object:t $3 water:q) (state:t $3 $2)))))) : 1083 : 0.0
the pot  :- NP : pot:d : 19 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -2.3274266089924147
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
when the  :- NP|(S|NP) : (lambda $0 <e,t> (the $1 ($0 $1))) : 1082 : 0.4101275
water in  :- S/NP/(S|NP)\(NP|(S|NP)) : (lambda $0 <<e,t>,e> (lambda $1 <e,t> (lambda $2 e (exists $3 (and (In:t $3 ($0 $1)) (object:t $3 water:q) (state:t $3 $2)))))) : 1083 : 0.0
the pot  :- NP : pot:d : 19 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -2.3274266089924147
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Scale: 0.9979541939024997
Update:
{BB:object:t:state:t=-0.0026434269835460124, LHT:1:In:t:e=0.002643426983545791, LHT:0:state:t:e=-0.0026434269902836888, LHH:0:state:t:var=-0.0026434269902836888, LHT:1:state:t:s=-0.002643426983546234, LHT:1:In:t:s=-0.002643426983545949, LHH:1:state:t:var=-0.0026434269902836432, LEX:570=-0.002642978310162581, LEX:1020=0.0026423883756404583}
38: =========== r:0.6052631578947368 p:0.6052631578947368 (epoch:4 file:0 0)
if there exists a cup and there exists a cup and there exists a cup and there exists a cup and there exists a cup
(and (exists $0 (object:t $0 cup:d)))
MakeLex parse time: 0.051 sec.
Adding:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 0.048352000000000006
and there exists a cup and there exists a cup and there exists a cup  :- S\S : (lambda $0 t $0) : 0.0
Lex Size: 1084
First parse time: 2.916 sec.
CORRECT:(and (exists $0 (object:t $0 cup:d)))
Using:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 7.556788891582846
and there exists a cup and there exists a cup and there exists a cup  :- S\S : (lambda $0 t $0) : 999 : 1.8595020928562667
]
Second parse time: 0.046 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 7.556788891582846
and there exists a cup and there exists a cup and there exists a cup  :- S\S : (lambda $0 t $0) : 999 : 1.8595020928562667
]
Scale: 0.9979442348761551
Update:
{LEX:118=2.1485900063149596E-4, LHT:0:object:t:e=-0.11201586562579473, LHH:0:object:t:var=-0.11201491495289194, LHT:1:object:t:d=-0.10913329094611965, LHH:1:object:t:cup:d=-0.10245656856267303, BB:exists:exists=-0.06925304757037887, BB:exists:object:t=-4.3567822197318105E-4, LHT:0:object:t:d=-1.2448135014722016E-5, LHH:0:object:t:cup:d=-1.2448135014722016E-5, LHT:1:object:t:e=-0.0023451693393813063, LHH:1:object:t:var=-4.125371812073809E-4, BB:object:t:state:t=-0.00251167171800308, LHT:0:state:t:e=-0.0032033196809261055, LHH:0:state:t:var=-0.0032033196809261055, BB:object:t:object:t=-0.0025329566039188098, LHT:1:object:t:f=-3.249169941139325E-4, LHH:1:object:t:tv:f=-3.249169941139325E-4, LHT:1:state:t:s=-0.0031991912419571736, LHH:1:state:t:yellow:s=-0.003199191229272393, LHH:1:object:t:bowl:d=-0.006661768172434817, LHH:1:object:t:cups:d=-1.4954211011666192E-5, LHT:1:object:t:p=-2.2493647595194354E-4, LHH:1:object:t:you:p=-2.2493647595194354E-4, LHT:0:has:t:d=-7.72695113625028E-5, LHH:0:has:t:cup:d=-7.72695113625028E-5, LHT:1:has:t:e=-0.04006179173973705, LHH:1:has:t:the=-0.03980299599170296, LHT:0:has:t:e=-0.03998452222837454, LHH:0:has:t:var=-0.039730116696955996, BB:has:t:object:t=-0.03918716944649448, BB:exists:has:t=-1.816039566821163E-4, BB:has:t:state:t=-0.004440409130238429, LHH:1:object:t:the=-0.0019326321634168635, LHH:0:has:t:the=-2.544055314185452E-4, LHH:1:has:t:var=-2.5879574803409086E-4, LEX:999=-5.801268623328146E-4, LEX:82=0.5848388090467539, LEX:1002=-0.14902397865704367, LEX:420=-0.2370555543899207, LEX:81=-3.43449317840495E-5, LEX:155=-0.08675583669538829, LEX:122=-0.003460381366272596, LEX:159=-2.8628593714943325E-4, LEX:161=-0.005498914623618788, LEX:163=-0.010483897434071144, LEX:1043=-0.40923438211417046, LEX:125=-0.00231880978096347, LEX:129=-4.775470840064586E-4, LEX:133=-0.004036817399276336, LEX:137=-5.018101968891028E-4, LEX:141=-0.0017120537461664353, LEX:145=-0.0021735625494713347, LEX:149=-0.0017120606876842091, LEX:153=-4.8669495524162937E-4, LEX:190=-0.001249134643449479, LEX:210=-0.005400560429727201, LEX:250=-0.0019400444038876466, LEX:423=-0.014881700938113087, LEX:124=-0.0042539926348979795, LEX:128=-8.848558100428637E-4, LEX:132=-0.016803646465603467, LEX:136=-0.026276441195340637, LEX:140=-0.002095813593882768, LEX:144=-0.017892986086102517, LEX:148=-0.002217055638743934, LEX:152=-0.0037970928385823435, LEX:865=-1.6939234180510772E-4, LEX:866=-1.6939302818586236E-4, LEX:20=-0.08087253208454313, LEX:457=-0.003147059803989077, LEX:469=-7.651291705101302E-4, LEX:123=-0.003804699579444401, LEX:127=-1.706342750756055E-4, LEX:131=-0.13213919860065407, LEX:135=-3.390966783067918E-4, LEX:139=-0.0020890701539997606, LEX:143=-4.717135088576504E-4, LEX:147=-0.0020734488225071885, LEX:151=-3.1828164658095486E-4, LEX:365=-2.2256882050451186E-4, LEX:1006=-2.9735463371803383E-4, LEX:1008=-3.4979033720868746E-4, LEX:419=-0.005252282608847173, LEX:859=-0.0017716719966690696, LEX:126=-0.0036226338204053995, LEX:130=-3.042703752019308E-4, LEX:134=-0.007096140551904198, LEX:138=-0.002272967293608845, LEX:142=-8.693138654339624E-4, LEX:146=-0.00192853609786534, LEX:150=-8.693173897702634E-4, LEX:154=-0.0016294151811303966, LEX:424=-0.023651683839597735, LEX:1003=-6.743795866279816E-4, LEX:1004=-6.743823080983471E-4, LEX:431=-5.487721788272901E-5, LEX:443=-2.2528063813048207E-5, LEX:455=-0.035814802925534156, LEX:467=-2.57128411187203E-4, LEX:479=-0.0017516263926988097, LEX:491=-1.0225091376492655E-4, LEX:1001=-0.014755183149319596, LEX:8=-0.5755407402898713, LEX:869=-0.035814802925534156, LEX:887=-8.55392726748675E-4, LEX:918=-0.0632049051651742, LEX:930=-0.0017553613600212264, LEX:942=-0.0039239457322045555, LEX:978=-1.4625673769835625E-4, LEX:988=-1.786602493847716E-4, LEX:1023=-0.01345851937579442, LEX:1024=-0.012438305100329897, LEX:1025=-0.01029306794985441, LEX:1026=-0.004868047578924868}
39: =========== r:0.6153846153846154 p:0.6153846153846154 (epoch:4 file:0 0)
if the mug is on the table or on the stove
(exists $0 (and (object:t $0 mug:d) (or (On:t $0 (the $1 (object:t $1 table:f))) (On:t $0 (the $1 (object:t $1 stove:f))))))
MakeLex parse time: 0.008 sec.
Adding:
or  :- S/NP\(S|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and (object:t $3 mug:d) (or ($1 $3) ($0 $3 $2))))))) : 1.6666666666666665
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (On:t $0 (the $2 (object:t $2 $1))))) : 0.0
or  :- S/NP\(S|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and (object:t $3 mug:d) (or ($1 $3) ($0 $2 $3))))))) : 1.6666666666666665
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (On:t $1 (the $2 (object:t $2 $0))))) : 0.0
Lex Size: 1088
First parse time: 0.009 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (or (On:t $0 (the $1 (object:t $1 table:f))) (On:t $0 (the $1 (object:t $1 stove:f))))))
Using:
[LexEntries and scores:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 505 : 1.2718740859318554
mug is on  :- S|NP/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (On:t $2 ($0 $1))))) : 1041 : 0.0
the table  :- NP : table:f : 73 : 20.0
or  :- S/NP\(S|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and (object:t $3 mug:d) (or ($1 $3) ($0 $3 $2))))))) : 1084 : 1.6666666666666665
or  :- S/NP\(S|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and (object:t $3 mug:d) (or ($1 $3) ($0 $2 $3))))))) : 1086 : 1.6666666666666665
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (On:t $0 (the $2 (object:t $2 $1))))) : 1085 : 0.0
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (On:t $1 (the $2 (object:t $2 $0))))) : 1087 : 0.0
the stove  :- NP : stove:f : 76 : 19.002046401367956
]
Second parse time: 0.008 sec.
Best LexEntries:
[LexEntries and scores:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 505 : 1.2718740859318554
mug is on  :- S|NP/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (On:t $2 ($0 $1))))) : 1041 : 0.0
the table  :- NP : table:f : 73 : 20.0
or  :- S/NP\(S|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and (object:t $3 mug:d) (or ($1 $3) ($0 $3 $2))))))) : 1084 : 1.6666666666666665
or  :- S/NP\(S|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and (object:t $3 mug:d) (or ($1 $3) ($0 $2 $3))))))) : 1086 : 1.6666666666666665
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (On:t $0 (the $2 (object:t $2 $1))))) : 1085 : 0.0
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (On:t $1 (the $2 (object:t $2 $0))))) : 1087 : 0.0
the stove  :- NP : stove:f : 76 : 19.002046401367956
]
Scale: 0.9979342760485794
Update:
{LHT:0:object:t:e=-0.11049696117477754, LHH:0:object:t:var=2.2789707388416708E-5, BB:On:t:On:t=0.1105197508821663, LHT:0:On:t:e=0.1105505402869095, LHH:0:On:t:var=0.1105505402869095, LHT:1:On:t:null=0.11051975088216619, LHH:1:On:t:the=0.11051975088216619, LHT:0:object:t:null=0.11049696117477732, LHT:1:object:t:null=5.3579112132167846E-5, LHH:1:object:t:stove:f=5.357911213238943E-5, BB:On:t:object:t=-0.11051975088216637, LHH:0:object:t:stove:f=-2.2789707388822166E-5, LHT:1:object:t:e=-5.357911213245458E-5, LHH:1:object:t:var=-5.357911213245458E-5, LHT:0:On:t:null=-3.078940474363241E-5, LHH:0:On:t:stove:f=-3.078940474363241E-5, LEX:851=0.015624494341952504, LEX:1013=-0.059846260116815035, LEX:1017=-0.050673490765351305, LEX:1085=0.04744762826781947, LEX:1087=0.04744762826781947, LEX:1084=-0.012396740379572361, LEX:1086=-0.003227753966955228}
40: =========== r:0.625 p:0.625 (epoch:4 file:0 0)
if the glass is empty or dry
(exists $0 (and (object:t $0 glass:d) (or (state:t $0 empty:s) (state:t $0 dry:s))))
MakeLex parse time: 0.004 sec.
Adding:
the glass  :- NP : glass:d : 0.0
is empty  :- S/(S|NP)\NP : (lambda $0 e (lambda $1 <e,t> (exists $2 (and (object:t $2 $0) ($1 $2))))) : 0.0
Lex Size: 1089
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (or (state:t $0 empty:s) (state:t $0 dry:s))))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.41286201065619466
the glass  :- NP : glass:d : 15 : 18.00346216106506
is empty  :- S/(S|NP)\NP : (lambda $0 e (lambda $1 <e,t> (exists $2 (and (object:t $2 $0) ($1 $2))))) : 1088 : 0.0
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 857 : 2.0519971387566933
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.41286201065619466
the glass  :- NP : glass:d : 15 : 18.00346216106506
is empty  :- S/(S|NP)\NP : (lambda $0 e (lambda $1 <e,t> (exists $2 (and (object:t $2 $0) ($1 $2))))) : 1088 : 0.0
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 857 : 2.0519971387566933
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9979243174197668
Update:
{LHT:0:object:t:e=-0.0011580476181521024, LHH:0:object:t:var=-0.0011580476181521024, BB:exists:object:t=-0.0011580476191381814, LHT:1:object:t:p=-0.0011580476069885264, LHH:1:object:t:you:p=-0.0011580476069885264, LEX:123=1.7231116030288203E-5, LEX:131=0.001141139454293514, LEX:365=-0.0011580476069885267}
41: =========== r:0.6341463414634146 p:0.6341463414634146 (epoch:4 file:0 0)
if the refrigerator is on and the mug contains coke
(and (exists $0 (and (object:t $0 refrigerator:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coke:q))))))
MakeLex parse time: 0.023 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
on  :- NP : IsOn:s : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
the refrigerator  :- NP : refrigerator:f : 0.0
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
on  :- NP : IsOn:s : 0.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 0.5467285714285715
the mug  :- NP : mug:d : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
coke  :- NP : coke:q : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
coke  :- NP : coke:q : 0.0
Lex Size: 1089
First parse time: 0.038 sec.
CORRECT:(and (exists $0 (and (object:t $0 refrigerator:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coke:q))))))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.41400315011048816
the refrigerator  :- NP : refrigerator:f : 75 : 20.000064119849167
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -2.9503518315660346
on  :- NP : IsOn:s : 57 : 9.004446546147044
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : -0.9365431328023512
the mug  :- NP : mug:d : 16 : 19.999839038370787
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 0.669221120288547
coke  :- NP : coke:q : 34 : 10.0
]
Second parse time: 0.012 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.41400315011048816
the refrigerator  :- NP : refrigerator:f : 75 : 20.000064119849167
is  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 570 : -2.9503518315660346
on  :- NP : IsOn:s : 57 : 9.004446546147044
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : -0.9365431328023512
the mug  :- NP : mug:d : 16 : 19.999839038370787
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 0.669221120288547
coke  :- NP : coke:q : 34 : 10.0
]
Scale: 0.9979143589897116
Update:
{BB:exists:exists=-0.11666652170277991, BB:object:t:state:t=-5.757609858520594E-4, LHT:0:object:t:e=-0.023591617869834196, LHH:0:object:t:var=-0.02359161786981913, LHT:0:state:t:e=-5.860523323982704E-4, LHH:0:state:t:var=-5.860523323625958E-4, LHT:1:state:t:s=4.8469853180867326E-4, LHH:1:state:t:IsOn:s=0.0010864125937771229, BB:has:t:object:t=0.0010603930194977573, LHT:1:object:t:d=-0.02348626557743373, LHT:0:has:t:e=-0.03651508797232266, LHH:0:has:t:var=-0.03651508797232266, LHT:1:has:t:e=-0.03651508797232266, LHH:1:has:t:the=-0.03651508797232266, LHT:1:state:t:e=-0.0010707509645249723, LHH:1:state:t:the=-0.001060393014479984, BB:exists:object:t=-0.0032431129295420317, LHH:1:state:t:var=-1.0357950044988667E-5, BB:exists:state:t=-1.0361520660612538E-5, LHT:1:object:t:p=-0.0011916941570265537, LHH:1:object:t:you:p=-0.0011916941570265537, LHT:0:object:t:s=-0.0010863772949547194, LHH:0:object:t:IsOn:s=-0.0010863772949547194, LHH:1:object:t:bowl:d=-6.017140619683898E-4, LHH:1:state:t:yellow:s=-6.017140619683898E-4, LHH:1:object:t:cups:d=-0.022884529382935635, LEX:123=-6.656910354490186E-4, LEX:131=0.017235769964529146, LEX:172=-6.0171406196839E-4, LEX:311=-2.271569532454413E-4, LEX:365=-9.645372037811127E-4, LEX:373=-0.0226573724296902, LEX:547=0.0028163930344625074, LEX:559=0.0050616000254500035, LEX:518=0.005072094314147668, LEX:570=0.016690532590656712, LEX:977=-0.023486243444904024, LEX:1020=0.0017324104947226172, LEX:858=0.0010603930135436408, LEX:966=-0.0010603598256469409, LEX:454=-0.03757548099182021, LEX:472=-0.00106039301949771, LEX:502=0.038635874012367365}
Testing

File #0: 0
0: ==================(0 -- 0)
if you find any
(dummy:t)
Test parse time: 0.002 sec.
WRONG
1 parses: [(exists $0 (object:t $0 cups:d))]
[LexEntries and scores:
if you find any  :- S : (exists $0 (object:t $0 cups:d)) : 379 : -5.875147419699977E-4
]
Had correct parse: false
Feats: {RN:true=1.0, LHT:0:object:t:e=1.0, LHH:0:object:t:var=1.0, LHT:1:object:t:d=1.0, LHH:1:object:t:cups:d=1.0, LEX:379=1.0}
-----------------------------
Recall : 0/1 = 0.0
Precision : 0/1 = 0.0
F1: NaN
No Parses : 0
EMPTY Recall : 0/1 = 0.0
EMPTY Precision : 0/1 = 0.0
EMPTY F1: NaN
-----------
Training, iteration 5
---------------------
DataSet: 0
---------------------
0: ===========
if there exists a mug
(exists $0 (object:t $0 mug:d))
MakeLex parse time: 0.006 sec.
Adding:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
a mug  :- NP : mug:d : 0.0
Lex Size: 1089
First parse time: 0.008 sec.
CORRECT:(exists $0 (object:t $0 mug:d))
Using:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.2941910177162873
a mug  :- NP : mug:d : 22 : 20.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.2941910177162873
a mug  :- NP : mug:d : 22 : 20.0
]
Scale: 0.9979044007584074
Update:
{LHT:0:object:t:e=-0.0019118655421172129, LHH:0:object:t:var=-0.0019118655421172129, LHT:1:object:t:d=-0.0017164871795712162, LHH:1:object:t:mug:d=1.297568611109787E-4, LHT:0:object:t:d=-1.2738713863735774E-4, LHH:0:object:t:mug:d=-1.2738713863735774E-4, BB:object:t:state:t=-8.216915661058239E-4, LHT:0:state:t:e=-8.216870824054014E-4, LHH:0:state:t:var=-8.216870824054014E-4, LHT:1:state:t:s=-8.235142067734129E-4, LHH:1:state:t:yellow:s=-8.235142067734129E-4, BB:object:t:object:t=-7.077814048854462E-4, LHH:1:object:t:bowl:d=-7.18505894220667E-4, BB:exists:object:t=-0.0013338387745691284, LHH:1:object:t:cups:d=-0.0010735475794467913, LHT:1:object:t:p=-3.144489029757129E-4, LHH:1:object:t:you:p=-3.144489029757129E-4, LHH:1:object:t:cup:d=-5.4190567014300815E-5, LEX:122=4.553924629124157E-4, LEX:125=2.578325923609211E-4, LEX:129=3.9759587615911946E-5, LEX:133=3.0619793450030605E-4, LEX:137=6.465155147667601E-5, LEX:141=1.1377643459896569E-4, LEX:145=2.8337453762216367E-4, LEX:149=1.1377689474482866E-4, LEX:153=6.163607964210747E-5, LEX:200=-3.5934163381212925E-4, LEX:210=-1.286576634325492E-5, LEX:220=-2.4946072459909173E-4, LEX:240=-4.699557485232766E-4, LEX:423=-1.5237551258425067E-5, LEX:124=2.3548224386194218E-5, LEX:128=-8.81721014814922E-4, LEX:132=2.4099002453769908E-4, LEX:136=2.964095977106197E-5, LEX:140=2.729449983143761E-4, LEX:144=3.5374446710575123E-5, LEX:148=2.705423135694653E-4, LEX:152=-4.405999385715866E-4, LEX:123=4.809116059823453E-5, LEX:127=2.25098487290944E-5, LEX:131=5.384350113482118E-4, LEX:135=4.3262476805896185E-5, LEX:139=2.729993301048038E-4, LEX:143=6.0271877912370824E-5, LEX:147=2.7091274845627124E-4, LEX:151=3.157874204717569E-5, LEX:198=-1.5751413880586333E-4, LEX:208=-3.5661545473296634E-5, LEX:218=-5.5047414742076704E-5, LEX:238=-2.0001835191565135E-4, LEX:333=-2.9183146889122906E-4, LEX:349=-7.323731816650548E-4, LEX:365=-2.453163159001748E-4, LEX:381=-3.934141552967033E-5, LEX:389=-4.905250103746388E-5, LEX:397=-2.4685964729955598E-5, LEX:571=-1.3654756266197928E-5, LEX:583=-1.6648113394720938E-5, LEX:419=-1.6170125703763327E-4, LEX:859=2.2575964956260082E-5, LEX:126=1.8620197545980488E-4, LEX:130=-2.3879318669150403E-4, LEX:134=4.3190874763337177E-4, LEX:138=8.900490672148719E-5, LEX:142=1.1371529836406462E-4, LEX:146=2.515216512570409E-4, LEX:150=1.1371576435842289E-4, LEX:154=-9.533672598862749E-4}
1: =========== r:1.0 p:1.0 (epoch:5 file:0 0)
if there exists a cup
(exists $0 (object:t $0 cup:d))
MakeLex parse time: 0.005 sec.
Adding:
there exists  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1090
First parse time: 0.015 sec.
CORRECT:(exists $0 (object:t $0 cup:d))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.4317773550863655
there exists  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 1089 : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 1.5855756869580253
cup  :- NP : cup:d : 8 : 6.025281240334791
]
Second parse time: 0.008 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : 0.4317773550863655
there exists  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 1089 : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 1.5855756869580253
cup  :- NP : cup:d : 8 : 6.025281240334791
]
Scale: 0.9978944427258484
Update:
{LEX:81=1.812544409157933E-5, LHT:0:object:t:e=0.12474488219713141, LHH:0:object:t:var=0.12474488219713141, LHT:1:object:t:d=0.12639960933481018, LHH:1:object:t:cup:d=0.12683446088562012, LHT:0:object:t:d=-2.035229774607707E-4, LHH:0:object:t:cup:d=-2.035229774607707E-4, LHT:1:object:t:e=-6.34129512690563E-4, LHH:1:object:t:var=-6.34129512690563E-4, LHT:0:has:t:e=-0.021142042469287532, LHH:0:has:t:var=-0.021142042469287532, LHT:1:has:t:e=-0.1433487807034388, LHH:1:has:t:the=-0.016945691361319674, LHT:0:has:t:d=-0.12220673823415118, LHH:0:has:t:cup:d=-0.12220673823415118, LHH:1:has:t:var=-0.12640308934211905, BB:object:t:state:t=-4.9789556309186875E-5, LHT:0:state:t:e=-1.1650936295273223E-4, LHH:0:state:t:var=-1.1650936295273223E-4, LHT:1:state:t:s=-1.3561907004137463E-4, LHH:1:state:t:yellow:s=-1.3561907004137463E-4, BB:exists:state:t=-6.672930197219739E-5, BB:object:t:object:t=-3.3110539114296236E-4, LHH:1:object:t:bowl:d=-1.830199457360067E-4, BB:exists:object:t=-0.0013672120653707327, LHH:1:object:t:cups:d=-2.518316050741146E-4, BB:exists:exists=-1.325320241205024E-4, LHT:1:object:t:p=-0.0012241206024486207, LHH:1:object:t:you:p=-0.0012241206024486207, LHT:0:state:t:d=-2.1129184010425238E-5, LHH:0:state:t:cup:d=-2.1129184010425238E-5, BB:has:t:object:t=-5.200033049517617E-5, LEX:122=0.001592052722143815, LEX:159=-2.3093360964556377E-4, LEX:161=-1.0875079194681395E-4, LEX:1043=0.013296389396079205, LEX:125=9.164555960065425E-4, LEX:129=1.3890864177184317E-4, LEX:133=0.0010928622084856753, LEX:137=2.2922186755293985E-4, LEX:141=3.9932551892923673E-4, LEX:145=9.961926218839787E-4, LEX:149=3.9932713430116E-4, LEX:153=2.1962932633550663E-4, LEX:200=-2.2099949509045553E-5, LEX:210=-1.5237555767431627E-5, LEX:220=-1.4721223132699624E-5, LEX:240=-2.8813999539711138E-5, LEX:423=-1.805852630940458E-5, LEX:124=8.229304092481893E-5, LEX:128=-8.712233861090034E-5, LEX:132=0.0015218782730728694, LEX:136=1.511693752838088E-4, LEX:140=9.579836114265356E-4, LEX:144=1.7064334905415063E-4, LEX:148=9.506817138044598E-4, LEX:152=7.812493634624738E-5, LEX:1089=-0.02318924880823799, LEX:20=0.009280199095271809, LEX:469=-0.004712642445437074, LEX:481=-2.404034397182989E-5, LEX:493=-2.4069615760984613E-5, LEX:123=-5.455740794032347E-4, LEX:127=7.859108030477342E-5, LEX:131=-0.0012980782286986276, LEX:135=1.519661454152578E-4, LEX:139=9.584422321654802E-4, LEX:143=2.1296134213418384E-4, LEX:147=9.511505595428167E-4, LEX:151=-0.004350469443129024, LEX:198=-7.642123890787821E-5, LEX:208=-4.2207602956723366E-5, LEX:238=-9.675129582946842E-5, LEX:248=-1.033323292641566E-5, LEX:333=-1.5042719610161088E-4, LEX:349=-4.302708100439747E-5, LEX:365=-0.0011962870426376051, LEX:381=-2.032789675929701E-5, LEX:389=-5.8035225399245644E-5, LEX:419=3.705492767784072E-4, LEX:859=1.430579040365559E-4, LEX:126=7.364817853510816E-4, LEX:130=8.209819139688846E-5, LEX:134=0.0016106152896895511, LEX:138=3.7442467457867075E-4, LEX:142=3.987795100653352E-4, LEX:146=8.84102314800282E-4, LEX:150=3.9878113272058096E-4, LEX:154=3.114307876112645E-4, LEX:431=-0.016408332219680532, LEX:443=-5.301999739726008E-4, LEX:467=-0.121690446896682, LEX:479=0.12001461275728716, LEX:491=-1.466553039458856E-4, LEX:1001=9.342192743876436E-4, LEX:8=-0.004530412966527221}
2: =========== r:1.0 p:1.0 (epoch:5 file:0 0)
if there exists a cup and there exists a cup
(and (exists $0 (object:t $0 cup:d)))
MakeLex parse time: 0.015 sec.
Adding:
Lex Size: 1090
First parse time: 0.087 sec.
CORRECT:(and (exists $0 (object:t $0 cup:d)))
Using:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 8.1416277006296
]
Second parse time: 0.013 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 8.1416277006296
]
Scale: 0.997884484892029
Update:
{LEX:82=0.6611028887074729, LHT:0:object:t:e=-0.5143064827957878, LHH:0:object:t:var=-0.5142896365251461, LHT:1:object:t:d=-0.49918950642064713, LHH:1:object:t:cup:d=-0.4980458704823557, LHH:0:object:t:the=-1.684627064172303E-5, LHT:0:has:t:e=-0.02419178852470952, LHH:0:has:t:var=-0.023594874627490416, LHT:1:has:t:e=-0.05274649057872297, LHH:1:has:t:the=-0.036345756912069656, LHT:1:object:t:e=-0.013856233109961341, LHH:1:object:t:the=-5.414947143228621E-4, LHT:0:object:t:d=-5.173256954799752E-5, LHH:0:object:t:cup:d=-5.173256954799752E-5, LHH:1:object:t:var=-0.013314738395638478, LHH:0:has:t:the=-5.969138972191026E-4, LHH:1:has:t:var=-0.016400733666653285, LHT:0:has:t:d=-0.028554702054013423, LHH:0:has:t:cup:d=-0.028554702054013423, BB:exists:exists=-0.5211545188494995, BB:object:t:object:t=-8.273912024179029E-4, LHT:1:object:t:f=-2.966535438704419E-4, LHH:1:object:t:tv:f=-2.966535438704419E-4, BB:exists:object:t=-0.0020376529667963613, BB:object:t:state:t=-2.3716080942293283E-4, BB:exists:state:t=-2.3224860622287506E-5, LHT:0:state:t:e=-5.299886001229685E-4, LHH:0:state:t:var=-5.299886001229685E-4, LHT:1:state:t:s=-5.295100012006633E-4, LHH:1:state:t:yellow:s=-5.295100012006633E-4, LHH:1:object:t:bowl:d=-0.0011088598751443888, LHH:1:object:t:cups:d=-3.4776063148215986E-5, LHT:1:object:t:p=-0.0010158222908589443, LHH:1:object:t:you:p=-0.0010158222908589443, BB:has:t:object:t=-0.00667809229733804, BB:exists:has:t=-1.7196039184493428E-5, BB:has:t:state:t=-6.304658489319498E-4, LEX:81=-3.912091171073528E-5, LEX:155=-0.11893639704127959, LEX:122=-0.003470027131049983, LEX:159=-1.2976139515048012E-4, LEX:161=-0.0010131705066119328, LEX:163=-0.0018906617745031763, LEX:1043=-0.08007865730148618, LEX:125=-0.0026196637433909074, LEX:129=-3.190481603880434E-4, LEX:133=-0.004493137757135908, LEX:137=-5.031709688132988E-4, LEX:141=-9.995438377068755E-4, LEX:145=-0.002173144695360455, LEX:149=-9.995478841727057E-4, LEX:153=-4.826387325509009E-4, LEX:190=-1.1479414542383405E-4, LEX:210=-9.709969697693848E-4, LEX:250=-4.0132896614545986E-4, LEX:423=-0.002609202341773337, LEX:124=-0.0044092526603304386, LEX:128=-5.638715589758687E-4, LEX:132=-0.009157049665037782, LEX:136=-0.012713419867751251, LEX:140=-0.0020945891691777634, LEX:144=-0.012316662516458018, LEX:148=-0.0020786728716093964, LEX:152=-0.002667658671267886, LEX:1089=-1.0493932101478154, LEX:865=-2.7564861929295185E-5, LEX:866=-2.7564973529282914E-5, LEX:20=-0.06009873696605792, LEX:433=-2.2276294946568076E-5, LEX:457=-0.0016900608507757467, LEX:469=-0.0012670722705242735, LEX:481=-1.8320012498451819E-4, LEX:123=-0.030410256837667675, LEX:127=-1.71022621249785E-4, LEX:131=-0.6003424817628281, LEX:135=-3.317675928683538E-4, LEX:139=-0.002094564905489073, LEX:143=-4.644360844250414E-4, LEX:147=-0.0020786463641247113, LEX:151=-7.926043875343398E-4, LEX:238=-1.6709871145791597E-5, LEX:333=-2.6045749915670142E-5, LEX:365=-0.0010109054915954983, LEX:1006=-4.5178832407112674E-5, LEX:1008=-5.374227781936793E-5, LEX:419=-0.0034594893002347087, LEX:859=-0.0011004099490584582, LEX:126=-0.0026874063077162646, LEX:130=-3.0493956517521826E-4, LEX:134=-0.007227248442624999, LEX:138=-0.0016025315534672832, LEX:142=-8.717423315871418E-4, LEX:146=-0.0019339422946417079, LEX:150=-8.717458592116664E-4, LEX:154=-0.0013861991581685766, LEX:424=-0.004112179048522306, LEX:1003=-1.0026471121288931E-4, LEX:1004=-1.0026511694377961E-4, LEX:431=-0.016118713380125105, LEX:443=-3.330966654051521E-4, LEX:455=-0.017987461270836183, LEX:467=-0.015325439865577842, LEX:479=-1.0038094954277736, LEX:491=-9.388935012326509E-5, LEX:1001=-0.006159301547966851, LEX:8=-1.1219737233739167, LEX:869=-0.017987461270836183, LEX:887=-3.785517103771787E-4, LEX:918=-0.5146902309214011, LEX:930=-0.0018961681395011614, LEX:942=-0.004257444172672306, LEX:978=-1.3346967545969595E-4, LEX:988=-1.631740814365481E-4, LEX:1023=-0.007230260001729429, LEX:1024=-0.005822930746219249, LEX:1025=-0.005331497012415763, LEX:1026=-0.0022613383244315115}
3: =========== r:1.0 p:1.0 (epoch:5 file:0 0)
if there exists an empty kettle
(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s)))
MakeLex parse time: 0.003 sec.
Adding:
there exists  :- S/NP/NP\(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 0.20146666666666668
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
exists an  :- S/NP/NP\(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 0.20146666666666668
there exists  :- S/NP/NP\(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 0.20146666666666668
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
exists an  :- S/NP/NP\(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 0.20146666666666668
Lex Size: 1098
First parse time: 0.006 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 139 : 0.04702570964399601
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1092 : 0.0
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 1096 : 0.0
there exists  :- S/NP/NP\(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1090 : 0.20146666666666668
there exists  :- S/NP/NP\(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1094 : 0.20146666666666668
exists an  :- S/NP/NP\(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1093 : 0.20146666666666668
exists an  :- S/NP/NP\(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1097 : 0.20146666666666668
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1091 : 0.0
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 1095 : 0.0
empty  :- NP : empty:s : 53 : 10.0
kettle  :- NP : kettle:d : 11 : 10.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 139 : 0.04702570964399601
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1092 : 0.0
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 1096 : 0.0
there exists  :- S/NP/NP\(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1090 : 0.20146666666666668
there exists  :- S/NP/NP\(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1094 : 0.20146666666666668
exists an  :- S/NP/NP\(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1093 : 0.20146666666666668
exists an  :- S/NP/NP\(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1097 : 0.20146666666666668
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1091 : 0.0
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 1095 : 0.0
empty  :- NP : empty:s : 53 : 10.0
kettle  :- NP : kettle:d : 11 : 10.0
]
Scale: 0.9978745272569427
Update:
{BB:object:t:state:t=5.868293221609448E-4, LHT:0:object:t:e=-9.407100169608689E-4, LHH:0:object:t:var=-9.407100169608689E-4, LHT:1:object:t:d=2.1364301258083547E-5, LHH:1:object:t:kettle:d=2.1364337788988777E-5, LHT:0:state:t:e=5.898622413729066E-4, LHH:0:state:t:var=5.898622413729066E-4, LHT:1:state:t:s=5.919089416594421E-4, LHH:1:state:t:empty:s=5.919089416594421E-4, LHT:0:state:t:s=-1.1080912706390608E-5, LHH:0:state:t:empty:s=-1.1080912706390608E-5, LHT:1:state:t:e=-1.5669831396702387E-5, LHH:1:state:t:var=-1.5669831396702387E-5, BB:exists:object:t=-3.8440037197123525E-4, LHT:1:object:t:p=-3.8440037197123525E-4, LHH:1:object:t:you:p=-3.8440037197123525E-4, BB:object:t:object:t=-5.808263442773553E-4, LHT:1:object:t:s=-5.762580927104055E-4, LHH:1:object:t:empty:s=-5.762580927104055E-4, LHT:1:object:t:e=-2.1345355342224436E-5, LHH:1:object:t:var=-2.1345355342224436E-5, LHT:0:object:t:d=-1.5359565562222898E-5, LHH:0:object:t:kettle:d=-1.5359565562222898E-5, LEX:421=5.7077339677161184E-5, LEX:1045=4.981998596862696E-5, LEX:1044=5.4999407950067695E-5, LEX:141=-1.5195948116405802E-4, LEX:149=-1.5196009567498614E-4, LEX:861=9.429624030808256E-5, LEX:863=9.429630697354746E-5, LEX:136=-2.987281957108215E-5, LEX:144=-2.8870884674793403E-5, LEX:1090=-1.4976567735086537E-4, LEX:1094=5.8310182152188165E-5, LEX:862=-3.3563929631255476E-5, LEX:864=-3.3564229136358914E-5, LEX:1093=5.997261992665509E-5, LEX:1097=5.997261992665509E-5, LEX:123=4.380972122873018E-5, LEX:131=3.3449914334440333E-4, LEX:139=9.993384588907539E-5, LEX:147=-1.535952903107822E-5, LEX:365=-3.8440037197123535E-4, LEX:1006=-2.9939802529403445E-5, LEX:1008=-3.556791453311519E-5, LEX:1092=5.6926866228694944E-5, LEX:1096=5.692686622653461E-5, LEX:1003=-2.714507066626948E-5, LEX:1004=-2.7145307521510784E-5, LEX:1010=-2.8133768025134933E-4, LEX:1091=5.894926978333196E-5, LEX:1095=5.749221563291621E-5}
4: =========== r:1.0 p:1.0 (epoch:5 file:0 0)
if there exists a green glass
(exists $0 (and (object:t $0 glass:d) (state:t $0 green:s)))
MakeLex parse time: 0.007 sec.
Adding:
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 0.40293333333333337
Lex Size: 1099
First parse time: 0.012 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (state:t $0 green:s)))
Using:
[LexEntries and scores:
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 863 : -0.04966683898911128
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1098 : 0.40293333333333337
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.7017808042875389
green  :- NP : green:s : 51 : 10.0
glass  :- NP : glass:d : 9 : 9.999874891901245
]
Second parse time: 0.01 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 863 : -0.04966683898911128
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1098 : 0.40293333333333337
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.7017808042875389
green  :- NP : green:s : 51 : 10.0
glass  :- NP : glass:d : 9 : 9.999874891901245
]
Scale: 0.9978645698205839
Update:
{BB:object:t:state:t=0.016489638529628974, LHT:0:object:t:e=3.8939916892024986E-5, LHH:0:object:t:var=3.8939916892024986E-5, LHT:1:object:t:d=0.0012765263226686913, LHH:1:object:t:glass:d=0.001276526322941112, LHT:0:state:t:e=6.420572225544933E-4, LHH:0:state:t:var=6.420572225544933E-4, LHT:1:state:t:s=6.422245631572982E-4, LHH:1:state:t:green:s=6.422245631572982E-4, LHT:0:object:t:d=-1.2043250857517301E-4, LHH:0:object:t:glass:d=-1.2043250857517301E-4, LHT:1:object:t:s=-6.375465809043409E-4, LHH:1:object:t:green:s=-6.375465809043409E-4, BB:has:t:state:t=-0.015849782033821553, LHT:0:has:t:e=-0.014710174743622776, LHH:0:has:t:var=-0.014710174743622776, LHT:1:has:t:e=-0.01586628150344682, LHH:1:has:t:the=-0.014715099804254127, LHT:0:has:t:d=-0.0011558021863901286, LHH:0:has:t:glass:d=-0.0011558021863901286, LHT:1:object:t:e=-1.2599835478867492E-4, LHH:1:object:t:var=-1.2599835478867492E-4, LHH:1:has:t:var=-0.001151181699192687, BB:object:t:object:t=-6.218684350866798E-4, LHT:1:object:t:p=-5.962030172304884E-4, LHH:1:object:t:you:p=-5.962030172304884E-4, BB:exists:object:t=-5.962027655636314E-4, BB:has:t:object:t=-1.6499469672997382E-5, LEX:422=8.064637156035475E-4, LEX:1045=0.001115595771730361, LEX:141=-1.020763253982841E-4, LEX:149=-1.9846573902223126E-4, LEX:861=0.0017172444891280845, LEX:863=0.003332101352762309, LEX:136=-2.519717159458367E-5, LEX:144=-2.434146724640819E-5, LEX:1090=-1.8506511242126117E-4, LEX:1094=-9.752649585271867E-5, LEX:865=0.0021625714295742445, LEX:866=0.0021625717869108154, LEX:123=2.0019531364601966E-4, LEX:131=-0.00593999825179944, LEX:139=-2.824583309990238E-4, LEX:365=-5.962030172304884E-4, LEX:1006=-2.31059600123313E-5, LEX:1008=-2.8000804341822913E-5, LEX:1092=-0.0010383305587450327, LEX:1096=-0.005293404872485514, LEX:1003=-0.0015866330389575091, LEX:1004=-0.0015866325849324158, LEX:1098=-0.00273877678351877, LEX:431=-0.014700935253369659, LEX:443=-1.4164550884476579E-5, LEX:467=-0.0011511816991926873, LEX:479=0.010938486118368052, LEX:491=-2.0648450099368344E-4}
5: =========== r:1.0 p:1.0 (epoch:5 file:0 0)
if there exists a cup that contains syrup
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
MakeLex parse time: 0.058 sec.
Adding:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 0.40293333333333337
syrup  :- NP : syrup:q : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
syrup  :- NP : syrup:q : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
Lex Size: 1099
First parse time: 0.086 sec.
WRONG: (exists $0 (object:t $0 syrup:q))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.1754687040136163
there exists  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 1089 : -1.0725824589560533
a cup that  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 429 : 0.02336369997008483
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 0.7078569943009143
syrup  :- NP : syrup:q : 33 : 10.0
]
Second parse time: 0.086 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 1.716820364428017
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.21471313181351673
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 1.051531381584175
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 0.6925335173643451
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 1.6780498563850192
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 0.7078569943009143
syrup  :- NP : syrup:q : 33 : 10.0
]
Scale: 0.9978546125829466
Update:
{BB:has:t:object:t=0.9451228467807106, LHT:0:object:t:e=1.0066833549672962, LHH:0:object:t:var=1.0066864709481371, LHT:1:object:t:d=0.9376999145593008, LHH:1:object:t:cup:d=0.9552244717254126, LHT:0:has:t:e=0.7922818235774551, LHH:0:has:t:var=0.7926752284078236, LHT:1:has:t:e=0.8572475754270561, LHH:1:has:t:the=0.8551965335768912, LHT:1:object:t:q=0.0716847993359908, LHH:1:object:t:syrup:q=0.0716847993359908, LHT:1:object:t:e=-0.002798821726741122, LHH:1:object:t:the=-3.3684379368386584E-4, LHH:1:object:t:var=-0.002461977933057257, LHT:0:state:t:e=-0.03299807396052419, LHH:0:state:t:var=-0.03299681603232819, LHT:1:state:t:e=-0.0021783717677227137, LHH:1:state:t:var=-0.002175244313536591, LHH:0:has:t:the=-3.9340483036842965E-4, LHH:1:has:t:var=-0.007157935141735692, LHT:0:object:t:q=-0.0011243922692782192, LHH:0:object:t:syrup:q=-0.0011243922692782192, LHT:0:has:t:q=-0.007400231110118968, LHH:0:has:t:syrup:q=-0.007400231110118968, LHT:1:has:t:q=-0.07236598561505361, LHH:1:has:t:syrup:q=-0.06315700862315293, BB:object:t:state:t=-0.013806425555874722, BB:has:t:state:t=-0.025982200374600122, LHT:1:state:t:s=-0.0308228713228118, LHH:1:state:t:yellow:s=-0.0308228713228118, BB:object:t:object:t=-0.01034678963552252, LHH:1:object:t:bowl:d=-0.017522635856026578, BB:exists:object:t=-0.0014353728406398365, BB:exists:has:t=-0.00230512372546667, LHT:1:object:t:p=-0.0010269382508292346, LHH:1:object:t:you:p=-0.0010269382508292346, LEX:160=-0.0025307312939280096, LEX:164=0.0011469585788767085, LEX:161=0.16620910712872797, LEX:163=0.3319120145897163, LEX:1043=-1.1628313430897823E-4, LEX:429=-0.2130382492248537, LEX:435=-0.0012014221172493933, LEX:441=-0.05609168911367672, LEX:447=-0.0015774207050196717, LEX:453=-0.0018532757849958616, LEX:459=0.002083490860233839, LEX:465=0.001264446732780617, LEX:471=-0.032443266420522004, LEX:477=0.0013057612729103004, LEX:483=-0.023794291743619002, LEX:489=0.005373372819533745, LEX:495=-0.026405017761945742, LEX:501=0.00504497924390366, LEX:426=-0.004156678157259936, LEX:432=-0.033055271168563105, LEX:438=-0.004152570933160339, LEX:444=-0.05454537782516299, LEX:450=-0.0019970239845117066, LEX:456=0.003848343982596812, LEX:462=0.001238600707602664, LEX:468=0.004331949755718302, LEX:474=-0.055248131645579075, LEX:480=0.0020766336210802675, LEX:486=-0.05515172273261032, LEX:492=0.0011127538004549948, LEX:498=-0.054474811518187775, LEX:129=-6.840338874409228E-4, LEX:153=-5.899417549608352E-5, LEX:190=-0.0029342933819565685, LEX:210=-0.014581983841466285, LEX:220=-1.2874650658617538E-5, LEX:250=-0.02787128376829843, LEX:423=0.4558467973135037, LEX:152=-2.0245613723848228E-5, LEX:1089=-0.9067255033597749, LEX:865=-1.6256576218583896E-5, LEX:866=-1.625986544371415E-5, LEX:427=-0.12235495230962729, LEX:433=-0.001210348725610033, LEX:439=-0.06001615275374072, LEX:445=-0.001573678616813999, LEX:451=8.627279383620262E-4, LEX:457=0.07242199342837215, LEX:463=0.001264446732780617, LEX:469=-0.03147193058220087, LEX:475=0.001308735143084078, LEX:481=-0.023886844059833823, LEX:487=0.002723449728308176, LEX:493=-0.026419126581586287, LEX:499=0.0023137039879547938, LEX:867=0.03415831335566581, LEX:428=-0.004156199862453217, LEX:434=-0.05710872737052315, LEX:440=-0.004152668386931892, LEX:446=-0.027736342811391586, LEX:452=-0.001989919285093352, LEX:458=0.018451089222446808, LEX:464=0.001264446732780617, LEX:470=0.0019643313880041073, LEX:476=-0.05524323933011688, LEX:482=-9.245342343402623E-4, LEX:488=-0.05515147316762952, LEX:494=9.897765731213806E-4, LEX:500=-0.05446898823343405, LEX:131=-0.9058257387232536, LEX:135=-9.493561302215496E-4, LEX:143=-0.0010628571270280968, LEX:151=-1.9102723530819502E-4, LEX:365=-0.0010265760844592351, LEX:419=-1.8295687273778117E-5, LEX:1092=-0.0010898397944948811, LEX:1096=-0.0010829896470878494, LEX:154=-8.671165103084855E-5, LEX:424=0.40774748193317684, LEX:1003=-4.5200695979142835E-5, LEX:1004=-4.520982969669286E-5, LEX:1098=-4.055309048450214E-5, LEX:425=-0.12225594726861023, LEX:431=-0.0010220067572199274, LEX:437=-0.06001831364173459, LEX:443=-0.0014024541909989157, LEX:449=8.314534874644702E-4, LEX:455=0.7868509397651217, LEX:461=0.0012510416164262436, LEX:467=-0.004444615751128851, LEX:473=0.0013087362300424365, LEX:479=-0.0520160325803292, LEX:485=0.002720728245245258, LEX:491=-0.02516626530024814, LEX:497=0.0022324039762834868, LEX:1001=-1.3541808694962252E-4, LEX:869=0.7446062056845316, LEX:868=0.7968227579253444, LEX:430=-0.003609430395022227, LEX:436=-0.0585825640010015, LEX:442=-0.004320536890412505, LEX:448=-0.02768496784623224, LEX:454=-0.001678946209168152, LEX:460=0.0014870035738660263, LEX:466=0.001264446732780617, LEX:472=0.0014975767615917543, LEX:478=-0.04960635055015884, LEX:484=-0.0010352967372321083, LEX:490=0.2898330750567038, LEX:496=9.803203608860802E-4, LEX:502=0.3411041594818895, LEX:158=5.150454718052024E-5, LEX:162=1.1986753136484409E-4, LEX:159=0.0012176269883718898}
6: =========== r:0.8333333333333334 p:0.8333333333333334 (epoch:5 file:0 0)
if there exists a cup that contains coke
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 coke:q)))))
MakeLex parse time: 0.057 sec.
Adding:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 0.40293333333333337
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
coke  :- NP : coke:q : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
Lex Size: 1099
First parse time: 0.092 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 coke:q)))))
Using:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 2.1726671617415207
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.6224606137466936
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 1.8383823213492967
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 1.4371397230488767
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 2.474872614310364
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.0489611537828039
coke  :- NP : coke:q : 34 : 10.0
]
Second parse time: 0.066 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 2.1726671617415207
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.6224606137466936
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 1.8383823213492967
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 1.4371397230488767
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 2.474872614310364
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.0489611537828039
coke  :- NP : coke:q : 34 : 10.0
]
Scale: 0.997844655544025
Update:
{BB:has:t:object:t=-0.002079978395247279, LHT:0:object:t:e=0.01177337371479256, LHH:0:object:t:var=0.0117733960391216, LHT:1:object:t:d=0.013378780279875152, LHH:1:object:t:cup:d=0.15223034210999448, LHT:0:has:t:e=-0.35614829123948494, LHH:0:has:t:var=-0.3561481142298039, LHT:1:has:t:e=-0.356084256290437, LHH:1:has:t:the=-0.3560863945829441, LHT:1:object:t:q=1.0905349689814451E-4, LHH:1:object:t:coke:q=1.0905349689814451E-4, LHT:1:object:t:e=-0.001727790170162989, LHH:1:object:t:var=-0.0017263061557158744, LHT:0:state:t:e=-0.027407034251792993, LHH:0:state:t:var=-0.027407033322768896, LHT:1:state:t:e=-6.465018614665298E-4, LHT:0:object:t:q=-1.7635666004775834E-5, LHH:0:object:t:coke:q=-1.7635666004775834E-5, LHT:0:has:t:q=-1.6288133494562783E-5, LHH:0:has:t:coke:q=-1.6288133494562783E-5, LHT:1:has:t:q=-8.032351284861523E-5, LHH:1:has:t:coke:q=-7.487771305788902E-5, BB:has:t:state:t=-0.04258854342924162, LHH:1:state:t:var=-6.464898403587977E-4, BB:object:t:state:t=-0.03182469922496855, LHT:1:state:t:s=-0.026760784374666995, LHH:1:state:t:yellow:s=-0.026760784374666995, BB:object:t:object:t=-3.809730010006013E-4, LHH:1:object:t:bowl:d=-0.13885145867477816, BB:exists:has:t=-0.002340046864066331, LEX:164=3.8707459015522525E-5, LEX:161=0.01749945278545485, LEX:163=0.040359004351781885, LEX:435=-1.454033157497521E-4, LEX:441=-2.5558774843385314E-5, LEX:447=-1.4677320609348188E-4, LEX:453=-5.8678827507222484E-5, LEX:459=6.927262519322938E-5, LEX:465=4.273145037952006E-5, LEX:477=-1.5424087435416672E-4, LEX:483=2.430674750508619E-5, LEX:495=2.4739572366733824E-5, LEX:501=9.413819431541097E-5, LEX:426=-1.6502848633195857E-4, LEX:438=-1.6983445147737412E-4, LEX:444=1.6850168557297968E-5, LEX:450=-4.722314179947919E-4, LEX:456=2.811176413619836E-4, LEX:462=4.220434734650637E-5, LEX:468=3.3293965685912046E-4, LEX:474=2.579942670283322E-5, LEX:480=-5.456995562388106E-5, LEX:486=2.7007979162218582E-5, LEX:492=-1.4603111262758697E-4, LEX:498=7.058193420152525E-5, LEX:129=-0.00166760130485342, LEX:190=-0.015872893892088413, LEX:210=-0.12295130613112931, LEX:220=-2.7649811378650732E-5, LEX:250=-0.010860233099304006, LEX:260=-2.7181135854021676E-5, LEX:423=0.09432853217418456, LEX:1089=-2.0953302058613778E-4, LEX:433=-1.4545761155351818E-4, LEX:439=5.130729703723207E-5, LEX:445=-1.4679813644012E-4, LEX:451=5.41503309584472E-5, LEX:457=4.557618344512721E-5, LEX:463=4.273145037952006E-5, LEX:469=-2.4814886636456847E-5, LEX:475=-1.5445893807830232E-4, LEX:481=2.4311799961527455E-5, LEX:487=-3.3409927026454336E-4, LEX:493=2.4722993610315697E-5, LEX:499=-3.091871215322176E-4, LEX:867=-1.545396201676045E-5, LEX:428=-1.6376318589552286E-4, LEX:434=1.811617641427608E-5, LEX:440=-1.6865355812211832E-4, LEX:446=1.0394428850487103E-5, LEX:452=-4.810754217613432E-4, LEX:458=0.00264145008331514, LEX:464=4.273145037952006E-5, LEX:470=2.5651518310067836E-4, LEX:476=2.580113814869665E-5, LEX:482=-1.4254916749764459E-4, LEX:488=2.701117710043429E-5, LEX:494=-1.6435009333527623E-4, LEX:500=7.387159498407432E-5, LEX:131=-2.054293744626656E-4, LEX:135=-2.8913653955413683E-4, LEX:143=-3.236955002420193E-4, LEX:1092=-3.10418519227135E-4, LEX:1096=-3.0889868666122164E-4, LEX:424=-0.05769687684753071, LEX:431=-1.0808155220136315E-4, LEX:437=5.011756352267503E-5, LEX:443=-1.4740553532155616E-4, LEX:449=5.427782151760157E-5, LEX:455=0.0019009978142321938, LEX:461=4.227677061479621E-5, LEX:467=1.7950901899059528E-5, LEX:473=-1.544593889667724E-4, LEX:479=4.952671751444135E-5, LEX:485=-3.3441725906672E-4, LEX:491=2.4373411904470258E-5, LEX:497=-3.022440234080424E-4, LEX:869=0.0013255971546522478, LEX:868=-0.0015173222857805826, LEX:430=-1.7475528637025156E-4, LEX:436=1.798787689528816E-5, LEX:442=-0.22390293389503008, LEX:454=-0.1293472237087663, LEX:460=4.9440259801166346E-5, LEX:466=4.273145037952006E-5, LEX:472=6.227495400924818E-5, LEX:484=-1.4247921570405153E-4, LEX:490=0.1576398137147912, LEX:496=-1.654362390395531E-4, LEX:502=0.19409558925569184, LEX:159=5.2457507842083716E-5}
7: =========== r:0.8571428571428571 p:0.8571428571428571 (epoch:5 file:0 0)
if there is a red glass
(exists $0 (and (object:t $0 glass:d) (state:t $0 red:s)))
MakeLex parse time: 0.009 sec.
Adding:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 0.0
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
red  :- NP : red:s : 0.0
glass  :- NP : glass:d : 0.0
Lex Size: 1099
First parse time: 0.013 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (state:t $0 red:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.21015903173800068
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.28697867158244883
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.6607527845430922
red  :- NP : red:s : 47 : 10.0
glass  :- NP : glass:d : 9 : 9.999874891901245
]
Second parse time: 0.012 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.21015903173800068
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.28697867158244883
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.6607527845430922
red  :- NP : red:s : 47 : 10.0
glass  :- NP : glass:d : 9 : 9.999874891901245
]
Scale: 0.9978346987038127
Update:
{BB:object:t:state:t=0.134016410185341, LHT:0:object:t:e=-0.0030252694198444367, LHH:0:object:t:var=-0.0030252694198444367, LHT:1:object:t:d=8.23116747881044E-5, LHH:1:object:t:glass:d=2.0009114836992115E-4, LHT:0:state:t:e=0.0013715559281080399, LHH:0:state:t:var=0.0013715559281080399, LHT:1:state:t:s=0.001320483281836586, LHH:1:state:t:red:s=0.001320483281836586, LHH:1:object:t:cup:d=-1.1777947358208021E-4, LHT:0:state:t:d=-5.11427684214633E-5, LHH:0:state:t:glass:d=-5.11427684214633E-5, LHT:0:state:t:s=-1.0458991657837023E-5, LHH:0:state:t:red:s=-1.0458991657837023E-5, LHT:1:state:t:e=-1.0529113807752468E-5, LHH:1:state:t:var=-1.0529113807752468E-5, BB:object:t:object:t=-0.0014997258591848786, LHT:1:object:t:p=-0.001795082220559107, LHH:1:object:t:you:p=-0.001795082220559107, BB:exists:object:t=-0.001795008420468971, LHT:1:object:t:e=-1.1901977195949166E-5, LHH:1:object:t:var=-1.1901977195949166E-5, LHT:1:object:t:s=-0.0013084013989385784, LHH:1:object:t:red:s=-0.0013084013989385784, BB:has:t:state:t=-0.13300853850363575, LHT:0:has:t:e=-0.1328429264717754, LHH:0:has:t:var=-0.1328429264717754, LHT:1:has:t:e=-0.1329856268184559, LHH:1:has:t:the=-0.132847020525756, LHT:0:has:t:d=-1.4270034668053495E-4, LHH:0:has:t:glass:d=-1.4270034668053495E-4, LHH:1:has:t:var=-1.3860629269993606E-4, BB:has:t:object:t=-4.58233703596715E-5, LEX:503=0.012664294540097858, LEX:1005=-0.013515954978351716, LEX:125=-4.621583449327265E-5, LEX:141=-6.550423885605884E-4, LEX:149=-6.54981901618538E-4, LEX:861=0.009347822692961997, LEX:863=0.009362936916874242, LEX:1007=-0.016407250076185032, LEX:1009=-0.015560218296639824, LEX:870=0.016591302448877684, LEX:871=0.01657300124124438, LEX:123=0.004315281273134413, LEX:131=0.013238449504817642, LEX:365=-0.0017950822205591074, LEX:1006=-0.016270246915937907, LEX:1008=-0.015991621342967145, LEX:419=-5.675046545910503E-4, LEX:1092=0.00803570773550837, LEX:1096=0.007995992000270012, LEX:546=-1.177787538332431E-4, LEX:600=-4.959477871260412E-4, LEX:1014=2.6824435209965857E-4, LEX:431=-0.13284292647177542, LEX:467=-1.3860629269993603E-4, LEX:479=0.08694573153510582, LEX:1001=2.1696641719861967E-4}
8: =========== r:0.875 p:0.875 (epoch:5 file:0 0)
if there is a yellow bowl
(exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s)))
MakeLex parse time: 0.02 sec.
Adding:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 0.0
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
yellow  :- NP : yellow:s : 0.0
bowl  :- NP : bowl:d : 0.0
Lex Size: 1099
First parse time: 0.05 sec.
CORRECT:(exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.1938887848220628
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.2705714215062638
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.7476985160781979
yellow  :- NP : yellow:s : 50 : 10.056004475074195
bowl  :- NP : bowl:d : 227 : 1.5805716436981032
]
Second parse time: 0.015 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.1938887848220628
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.2705714215062638
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.7476985160781979
yellow  :- NP : yellow:s : 50 : 10.056004475074195
bowl  :- NP : bowl:d : 227 : 1.5805716436981032
]
Scale: 0.9978247420623041
Update:
{BB:object:t:state:t=0.08813796075270336, LHT:0:object:t:e=-0.008243133077729557, LHH:0:object:t:var=-0.008243133077729557, LHT:1:object:t:d=0.012553179811493937, LHH:1:object:t:bowl:d=0.013099848899136233, LHT:0:state:t:e=0.016252786106625904, LHH:0:state:t:var=0.016252786106625904, LHT:1:state:t:s=0.015977405285361818, LHH:1:state:t:yellow:s=0.015977405285361818, LHT:1:object:t:e=-6.577819287254998E-4, LHH:1:object:t:var=-6.577819287254998E-4, BB:exists:state:t=-3.83517119899542E-5, BB:exists:object:t=-0.0021067706920330997, LHT:1:state:t:e=-3.974046474480032E-4, LHH:1:state:t:var=-3.974046474480032E-4, LHH:1:object:t:cup:d=-3.479810485615322E-4, BB:object:t:object:t=-0.014816106937911074, LHT:0:object:t:s=-1.0885198214402406E-4, LHH:0:object:t:yellow:s=-1.0885198214402406E-4, LHT:1:object:t:f=-4.6989030651005375E-5, LHH:1:object:t:tv:f=-4.6989030651005375E-5, LHT:0:state:t:s=-5.93027170769393E-4, LHH:0:state:t:yellow:s=-5.93027170769393E-4, LHT:1:object:t:s=-0.01843166846485065, LHH:1:object:t:yellow:s=-0.01843166846485065, BB:state:t:state:t=-5.144464157207549E-5, LHT:0:state:t:d=-7.975370907041464E-5, LHH:0:state:t:bowl:d=-7.975370907041464E-5, LHT:1:object:t:p=-0.0017778310904265446, LHH:1:object:t:you:p=-0.0017778310904265446, LHH:1:object:t:cups:d=-1.9868803908065972E-4, BB:exists:exists=-8.046090266214876E-5, LHT:0:has:t:e=-0.06577050233056396, LHH:0:has:t:var=-0.06577050233056396, LHT:1:has:t:e=-0.06751526704107128, LHH:1:has:t:the=-0.06428085184047856, BB:has:t:state:t=-0.06749270872687989, BB:has:t:object:t=-2.7847805475247362E-5, LHH:1:has:t:var=-0.0032344152005927183, LHT:0:has:t:d=-9.34565798869672E-4, LHH:0:has:t:bowl:d=-9.34565798869672E-4, LHT:0:has:t:s=-8.101989116376414E-4, LHH:0:has:t:yellow:s=-8.101989116376414E-4, LEX:186=-3.9317176961407174E-5, LEX:216=-3.597300967244135E-5, LEX:173=-2.7101353464300598E-5, LEX:189=-7.953626974631154E-5, LEX:199=-4.908324996925916E-5, LEX:219=-2.3338148874891713E-5, LEX:249=-1.2073908583712691E-5, LEX:168=0.0027247999266522315, LEX:184=-3.8437033095855685E-5, LEX:214=-4.100579878495733E-5, LEX:224=-6.62059082426205E-5, LEX:264=6.607072376818847E-4, LEX:503=0.007861576982465715, LEX:191=-2.974859356863283E-5, LEX:201=-4.56517444617237E-5, LEX:166=1.3871679860093832E-5, LEX:182=-1.4358611331052109E-4, LEX:212=-4.1191032649683466E-5, LEX:242=-2.1861601760611792E-5, LEX:1005=-0.0032415592310039384, LEX:193=-8.833115380429174E-5, LEX:203=-4.0359641731295346E-5, LEX:223=-1.1719958456417105E-4, LEX:253=-1.340913386296472E-5, LEX:263=-4.2411999323099475E-5, LEX:125=-8.997335567803535E-4, LEX:129=-5.463307427250257E-5, LEX:133=-4.77105227287144E-4, LEX:137=-3.127872232014785E-4, LEX:141=-0.007317956856491195, LEX:145=-6.97582632395753E-4, LEX:149=-0.007317144518421419, LEX:153=-4.8558576463188474E-4, LEX:210=-1.8841164479082187E-5, LEX:230=-1.1176466037103752E-5, LEX:423=-1.3007648337642354E-4, LEX:861=0.005568391279448383, LEX:863=0.0055773973341667876, LEX:1007=-0.004344770356000926, LEX:1009=-0.004192011395206369, LEX:870=0.0032304355740229466, LEX:871=0.003220516396273716, LEX:195=-4.0322482216101716E-5, LEX:205=-1.4911809125988892E-4, LEX:245=-1.4880683146709837E-5, LEX:123=0.002569112290360747, LEX:131=0.007552345378256769, LEX:135=-4.987487233910179E-4, LEX:143=-5.837404655608675E-4, LEX:151=-1.5178258302936973E-4, LEX:208=-3.235392384315249E-5, LEX:238=-1.5350847687713098E-5, LEX:333=-2.1018214737257094E-5, LEX:349=-2.331159748186277E-5, LEX:365=-0.0017684456193198341, LEX:373=-9.7100061357089E-5, LEX:389=-5.2067900055434034E-5, LEX:1006=-0.003922687834790767, LEX:1008=-0.003938208354629779, LEX:419=-4.276496827599608E-4, LEX:859=-8.204621936571867E-5, LEX:1092=0.004137060501021255, LEX:1096=0.0040995175072593764, LEX:518=-4.377221554102052E-4, LEX:522=-1.4153701356013966E-5, LEX:532=-7.222091511488349E-4, LEX:542=-7.208830595572685E-4, LEX:546=-1.479361339016906E-4, LEX:552=-1.3033934983029898E-5, LEX:558=-3.394984581570752E-5, LEX:576=-3.12075332532035E-4, LEX:588=-2.912026623071876E-4, LEX:600=-0.0022976875119635394, LEX:941=-3.677291959008388E-5, LEX:953=-3.661581844130809E-5, LEX:959=-2.5923408910093207E-5, LEX:1014=6.648420539624348E-5, LEX:1018=-1.2665990502294308E-4, LEX:1020=-1.936243523543713E-5, LEX:431=-0.0641643044666981, LEX:443=-8.31664910627904E-5, LEX:449=-8.804481793428329E-5, LEX:467=-0.003234415200592719, LEX:479=0.05635227476405137, LEX:491=-1.1102490732240017E-4, LEX:497=-3.338088271766954E-5, LEX:1001=-0.005509937516450851, LEX:50=8.850026594171916E-4, LEX:181=-0.003691878147659728, LEX:197=-0.002895505830748243, LEX:207=-4.1223992790470223E-5, LEX:217=-4.9349564073128814E-5, LEX:227=0.00937324767830721, LEX:237=-2.8803040833535115E-4, LEX:257=-2.8564852186462297E-4, LEX:267=-0.0043439445649613734, LEX:277=0.003026284283839233}
9: =========== r:0.8888888888888888 p:0.8888888888888888 (epoch:5 file:0 0)
if there is an empty cup
(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
MakeLex parse time: 0.005 sec.
Adding:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 0.0
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
empty  :- NP : empty:s : 0.0
cup  :- NP : cup:d : 0.0
Lex Size: 1099
First parse time: 0.006 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.18996609698727202
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.26622665115026284
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1010 : 0.0162312378785441
empty  :- NP : empty:s : 53 : 10.0
cup  :- NP : cup:d : 8 : 4.898777103994346
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.18996609698727202
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.26622665115026284
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1010 : 0.0162312378785441
empty  :- NP : empty:s : 53 : 10.0
cup  :- NP : cup:d : 8 : 4.898777103994346
]
Scale: 0.9978147856194934
Update:
{BB:object:t:state:t=0.0024337382573819464, LHT:0:object:t:e=-0.005663440983210467, LHH:0:object:t:var=-0.005663440983210467, LHT:1:object:t:d=-7.949897323483536E-5, LHH:1:object:t:cup:d=-7.949897323483536E-5, LHT:0:state:t:e=0.002607970973535691, LHH:0:state:t:var=0.002607970973535691, LHT:1:state:t:s=0.002607970973535691, LHH:1:state:t:empty:s=0.002607970973535691, LHT:0:state:t:s=-1.1072737235594087E-5, LHH:0:state:t:empty:s=-1.1072737235594087E-5, LHT:1:state:t:e=-1.5233249988710227E-5, LHH:1:state:t:var=-1.5233249988710227E-5, BB:exists:object:t=-0.0029898223904839425, LHT:1:object:t:p=-0.0029898223904839425, LHH:1:object:t:you:p=-0.0029898223904839425, BB:object:t:object:t=-0.0026805570881020505, LHT:1:object:t:s=-0.002594119703266053, LHH:1:object:t:empty:s=-0.002594119703266053, LEX:504=6.219827508721846E-4, LEX:1005=8.298427793422404E-4, LEX:141=-0.0012985085074933378, LEX:149=-0.0012983897288066921, LEX:861=5.834494144151846E-4, LEX:863=5.84406869583851E-4, LEX:1007=9.806229661359104E-4, LEX:1009=9.309510155372868E-4, LEX:872=-0.0016559687587108694, LEX:873=-0.0016508408319222613, LEX:123=2.7053575684237515E-4, LEX:131=8.41518995309281E-4, LEX:365=-0.0029898223904839425, LEX:1006=9.804682308571767E-4, LEX:1008=8.744877525608719E-4, LEX:419=-5.661799825513308E-5, LEX:1092=-9.409136680189541E-4, LEX:1096=-9.368539703132233E-4, LEX:546=-8.365948598830408E-5, LEX:600=2.704148773317017E-5, LEX:1010=0.0026889592755134886}
10: =========== r:0.9 p:0.9 (epoch:5 file:0 0)
if the cup contains water
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 water:q)))))
MakeLex parse time: 0.003 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
water  :- NP : water:q : 0.0
the cup  :- NP : cup:d : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1099
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 water:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.005062920245941127
the cup  :- NP : cup:d : 14 : 19.001613291346843
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9993250684072312
water  :- NP : water:q : 32 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.005062920245941127
the cup  :- NP : cup:d : 14 : 19.001613291346843
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9993250684072312
water  :- NP : water:q : 32 : 10.0
]
Scale: 0.9978048293753742
Update:
{BB:has:t:object:t=1.2283508686579991E-5, LHT:0:has:t:e=1.2084340119732908E-5, LHH:0:has:t:var=1.2084340119732908E-5, LHT:1:has:t:e=1.2084324188220827E-5, LHH:1:has:t:the=1.2084324188220827E-5, LEX:875=1.2283475741470569E-5, LEX:874=1.22835087863915E-5}
11: =========== r:0.9090909090909091 p:0.9090909090909091 (epoch:5 file:0 0)
if it contains coffee
(exists $0 (and (object:t $0 it:e) (has:t $0 (the $1 (object:t $1 coffee:q)))))
MakeLex parse time: 0.001 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
coffee  :- NP : coffee:q : 0.0
it  :- NP : it:e : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1099
First parse time: 0.001 sec.
CORRECT:(exists $0 (and (object:t $0 it:e) (has:t $0 (the $1 (object:t $1 coffee:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0050506367701996565
it  :- NP : it:e : 5 : 10.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9993373519160176
coffee  :- NP : coffee:q : 35 : 10.0
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0050506367701996565
it  :- NP : it:e : 5 : 10.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9993373519160176
coffee  :- NP : coffee:q : 35 : 10.0
]
Scale: 0.9977948733299408
Update:
{LEX:472=-1.3790352546207661E-5}
12: =========== r:0.9166666666666666 p:0.9166666666666666 (epoch:5 file:0 0)
if the plate contains syrup
(exists $0 (and (object:t $0 plate:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
MakeLex parse time: 0.002 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
syrup  :- NP : syrup:q : 0.0
the plate  :- NP : plate:d : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1099
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 plate:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0050506367701996565
the plate  :- NP : plate:d : 18 : 20.00004419794254
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9993373519160176
syrup  :- NP : syrup:q : 33 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0050506367701996565
the plate  :- NP : plate:d : 18 : 20.00004419794254
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9993373519160176
syrup  :- NP : syrup:q : 33 : 10.0
]
Scale: 0.9977849174831872
Update:
{}
13: =========== r:0.9230769230769231 p:0.9230769230769231 (epoch:5 file:0 0)
if the cup is empty
(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
MakeLex parse time: 0.005 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the cup  :- NP : cup:d : 0.0
empty  :- NP : empty:s : 0.0
Lex Size: 1099
First parse time: 0.007 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -1.996404511443113
the cup  :- NP : cup:d : 14 : 19.001613291346843
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -0.6700754970604427
empty  :- NP : empty:s : 53 : 10.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -1.996404511443113
the cup  :- NP : cup:d : 14 : 19.001613291346843
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -0.6700754970604427
empty  :- NP : empty:s : 53 : 10.0
]
Scale: 0.9977749618351077
Update:
{BB:object:t:state:t=0.0012828950759980425, LHT:0:object:t:e=-0.23445599278856258, LHH:0:object:t:var=-0.23445599278856258, LHT:1:object:t:d=-0.22940522977486236, LHH:1:object:t:cup:d=6.32343276641419E-5, LHT:0:state:t:e=0.0012059985102492177, LHH:0:state:t:var=0.0012059985102492177, LHT:1:state:t:s=0.0012233038461818134, LHH:1:state:t:empty:s=0.005676096072670081, LHT:1:state:t:e=-1.7313747091182123E-5, LHH:1:state:t:var=-1.7313747091182123E-5, BB:exists:state:t=-1.834109204722082E-5, LHH:1:state:t:yellow:s=-0.00445279222648793, BB:exists:object:t=-0.010725679256878883, LHH:1:object:t:bowl:d=-0.00445439478994743, BB:exists:exists=-0.22946449735232413, LHH:1:object:t:cups:d=-0.22501406931257925, LHT:1:object:t:p=-0.010725694541404887, LHH:1:object:t:you:p=-0.010725694541404887, LHT:0:object:t:s=-0.005675662169934185, LHH:0:object:t:empty:s=-0.005675662169934185, LEX:14=6.163665652224338E-5, LEX:123=0.0037132236355653793, LEX:131=0.05844171158779541, LEX:172=-0.004452694696293261, LEX:311=-0.0070344699665506735, LEX:365=-0.0036910708807870534, LEX:373=-0.21797733263791952, LEX:547=0.06090614880839245, LEX:559=0.11015191969775921, LEX:518=0.11016719828945302, LEX:558=-1.4692196856190023E-5, LEX:570=0.06414118486882012, LEX:977=-0.22946449730076343, LEX:1020=0.05523351125386725}
14: =========== r:0.9285714285714286 p:0.9285714285714286 (epoch:5 file:0 0)
if they are used
(exists $0 (and (object:t $0 they:e) (state:t $0 used:s)))
MakeLex parse time: 0.002 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
used  :- NP : used:s : 0.0
they  :- NP : they:e : 0.0
are  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
Lex Size: 1099
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 they:e) (state:t $0 used:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -1.0014258466451536
they  :- NP : they:e : 7 : 10.889212159527533
are  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 1046 : -3.2415901374314734E-5
used  :- NP : used:s : 54 : 10.308179051436102
]
Second parse time: 0.001 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -1.0014258466451536
they  :- NP : they:e : 7 : 10.889212159527533
are  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 1046 : -3.2415901374314734E-5
used  :- NP : used:s : 54 : 10.308179051436102
]
Scale: 0.997765006385696
Update:
{LHT:0:object:t:e=-0.009811840441766754, LHH:0:object:t:var=-0.009811840441766754, LHT:1:object:t:e=0.035629818756578245, LHH:1:object:t:they:e=0.035629818756578245, LHT:0:state:t:e=-1.2271983902241273E-5, LHH:0:state:t:var=-1.2271983902241273E-5, LHT:1:object:t:p=-0.04544165919834513, LHH:1:object:t:they:p=-0.035629818756578426, BB:exists:object:t=-0.009811840441766705, LHH:1:object:t:you:p=-0.009811840441766705, BB:exists:state:t=-1.2271983901946802E-5, LHT:1:state:t:e=-1.2271983901946802E-5, LHH:1:state:t:var=-1.2271983901946802E-5, LEX:123=0.001296762903787144, LEX:131=0.008526014728657313, LEX:365=-0.009811840441766707, LEX:547=-1.2271983901946804E-5, LEX:4=-0.035629818756578426, LEX:7=0.03562783065575144}
15: =========== r:0.9333333333333333 p:0.9333333333333333 (epoch:5 file:0 0)
if the kettle is white
(exists $0 (and (object:t $0 kettle:d) (state:t $0 white:s)))
MakeLex parse time: 0.003 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the kettle  :- NP : kettle:d : 0.0
white  :- NP : white:s : 0.0
Lex Size: 1099
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 white:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -1.8862525917453539
the kettle  :- NP : kettle:d : 17 : 20.0
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -0.5599082987709897
white  :- NP : white:s : 52 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -1.8862525917453539
the kettle  :- NP : kettle:d : 17 : 20.0
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -0.5599082987709897
white  :- NP : white:s : 52 : 10.0
]
Scale: 0.9977550511349463
Update:
{BB:object:t:state:t=0.012336445942311767, LHT:0:object:t:e=-0.04825870440487719, LHH:0:object:t:var=-0.04825870440487719, LHT:1:object:t:d=-0.058819159824105086, LHT:0:state:t:e=0.012317236379512925, LHH:0:state:t:var=0.012317236379512925, LHT:1:state:t:s=0.01233720635139654, LHH:1:state:t:white:s=0.01409505593680234, BB:exists:object:t=-0.003531773862893845, LHT:1:object:t:p=-0.003531773192449266, LHH:1:object:t:you:p=-0.003531773192449266, BB:exists:state:t=-1.9969953251618118E-5, LHT:1:state:t:e=-1.997073419917515E-5, LHH:1:state:t:var=-1.997073419917515E-5, LHT:0:object:t:s=-0.014093643253790117, LHH:0:object:t:white:s=-0.014093643253790117, BB:exists:exists=-0.058818906614734955, LHH:1:object:t:bowl:d=-0.0017578495854058155, LHH:1:state:t:yellow:s=-0.0017578495854058155, LHH:1:object:t:cups:d=-0.05706105702932024, LEX:561=1.0938903448725996E-5, LEX:17=-1.2500958100448346E-5, LEX:123=-0.011408947672332788, LEX:131=0.017737923143732737, LEX:172=-0.0017578495854058157, LEX:311=-0.0012634728360305931, LEX:365=-0.0022683003564186724, LEX:373=-0.05579758419328964, LEX:547=0.018208397891284683, LEX:559=0.03653807964125601, LEX:11=1.250008827819869E-5, LEX:518=0.036565899990608414, LEX:558=-1.6880801991656483E-5, LEX:570=0.018148326742676555, LEX:977=-0.058818906614726045, LEX:1020=0.004121559813610517}
16: =========== r:0.9375 p:0.9375 (epoch:5 file:0 0)
if the mug is on the stove
(exists $0 (and (object:t $0 mug:d) (On:t $0 (the $1 (object:t $1 stove:f)))))
MakeLex parse time: 0.005 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
the stove  :- NP : stove:f : 0.0
the mug  :- NP : mug:d : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
on  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (On:t $4 ($2 $3)))))))) : 0.0
Lex Size: 1099
First parse time: 0.005 sec.
WRONG: (exists $0 (and (On:t $0 (the $1 (object:t $1 mug:d))) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0050506367701996565
the mug  :- NP : mug:d : 16 : 19.999839038370787
is  :- S/NP\(NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 1033 : 0.6304152951942287
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (On:t $1 (the $2 (object:t $2 $0))))) : 1087 : 0.04744762826781947
the stove  :- NP : stove:f : 76 : 19.002046401367956
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0050506367701996565
the mug  :- NP : mug:d : 16 : 19.999839038370787
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.1161886135561361
on  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (On:t $4 ($2 $3)))))))) : 1019 : 0.24731142554824445
the stove  :- NP : stove:f : 76 : 19.002046401367956
]
Scale: 0.9977450960828528
Update:
{BB:On:t:object:t=0.9974161593460852, LHT:0:object:t:e=6.994316619792087E-5, LHH:0:object:t:var=6.994316619792087E-5, LHT:1:object:t:d=3.806860339534065E-4, LHH:1:object:t:mug:d=3.806860339562866E-4, LHT:0:On:t:e=0.3249775612800362, LHH:0:On:t:var=0.3249775612800362, LHT:1:On:t:e=0.3245992658345421, LHH:1:On:t:the=0.3245992658345421, LHT:1:object:t:f=6.755257773041161E-5, LHH:1:object:t:stove:f=6.755257773583944E-5, BB:object:t:state:t=-1.3510455284384092E-4, LHT:0:state:t:e=-6.755391617079497E-5, LHH:0:state:t:var=-6.755391617079497E-5, LHT:1:object:t:e=-3.8068596816398417E-4, LHH:1:object:t:var=-3.8068596816398417E-4, BB:On:t:On:t=-7.842645867852536E-5, LHT:0:On:t:d=-3.782954454940745E-4, LHH:0:On:t:mug:d=-3.782954454940745E-4, BB:IsNear:t:object:t=-0.32461013971548486, LHT:0:IsNear:t:e=-0.9972701798759996, LHH:0:IsNear:t:var=-0.9972701798759996, LHT:1:IsNear:t:e=-0.9972701798759996, LHH:1:IsNear:t:the=-0.9972701798759996, BB:IsNear:t:On:t=-0.6726600401605148, BB:In:t:state:t=-1.3510515547168205E-4, LHT:1:state:t:s=-6.755257773584103E-5, LHH:1:state:t:IsOn:s=-6.755257773584103E-5, LHT:0:In:t:e=-6.755257773584103E-5, LHH:0:In:t:var=-6.755257773584103E-5, LHT:1:In:t:f=-6.755257773584103E-5, LHH:1:In:t:stove:f=-6.755257773584103E-5, BB:In:t:object:t=-1.3510321439252714E-4, LEX:876=0.2707896914900767, LEX:875=6.753951722763512E-5, LEX:1028=-6.755257773584101E-5, LEX:1012=0.05170017538057758, LEX:1014=0.22500844260580316, LEX:1016=0.06150585215004577, LEX:1018=0.31067791401308653, LEX:1020=0.07758810357797953, LEX:1031=-0.511347792767734, LEX:1033=-0.4859223871082657, LEX:57=-6.755257773584101E-5, LEX:1013=-0.12329740111468611, LEX:1015=0.22500844239513523, LEX:1017=-0.08802828461149692, LEX:1019=0.33943407428222433, LEX:1021=0.04889949469318738, LEX:1085=-0.33635042498876055, LEX:1087=-0.33638804163043273}
17: =========== r:0.8823529411764706 p:0.8823529411764706 (epoch:5 file:0 0)
if the mug is red and dry
(exists $0 (and (object:t $0 mug:d) (state:t $0 red:s) (state:t $0 dry:s)))
MakeLex parse time: 0.004 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
dry  :- NP : dry:s : 0.0
the mug  :- NP : mug:d : 0.0
dry  :- NP : dry:s : 0.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
red  :- NP : red:s : 0.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 0.0
Lex Size: 1099
First parse time: 0.008 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (state:t $0 red:s) (state:t $0 dry:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.9751619087727634
the mug  :- NP : mug:d : 16 : 19.999839038370787
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.5701030968173804
red  :- NP : red:s : 47 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.18164157642258094
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.9751619087727634
the mug  :- NP : mug:d : 16 : 19.999839038370787
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.5701030968173804
red  :- NP : red:s : 47 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.18164157642258094
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9977351412294092
Update:
{BB:object:t:state:t=0.0407922394218492, BB:state:t:state:t=0.06868358048077539, LHT:0:object:t:e=-0.048992664678881824, LHH:0:object:t:var=-0.048992664678881824, LHT:1:object:t:d=-0.0069729582411555266, LHT:0:state:t:e=0.03414543023093291, LHH:0:state:t:var=0.03414543023093291, LHT:1:state:t:s=0.034158131764038674, LHH:1:state:t:dry:s=0.03415813297366646, BB:object:t:object:t=-0.013945897549106686, LHH:1:object:t:cup:d=-0.006972949159359206, BB:exists:exists=-1.8380963852445206E-4, BB:exists:state:t=-1.3112621842150295E-5, LHT:1:object:t:s=-0.034158132973567734, LHH:1:object:t:dry:s=-0.034158132973567734, LHT:1:state:t:e=-1.2701533124338957E-5, LHH:1:state:t:var=-1.2701533124338957E-5, BB:exists:object:t=-0.007677933009422348, LHT:1:object:t:p=-0.007677916150308665, LHH:1:object:t:you:p=-0.007677916150308665, LHT:1:object:t:f=-1.8365731381763385E-4, LHH:1:object:t:tv:f=-1.8365731381763385E-4, BB:In:t:state:t=-0.06831606102206038, LHT:0:In:t:e=-0.03415803051103019, LHH:0:In:t:var=-0.03415803051103019, LHT:1:In:t:e=-0.03415803051103019, LHH:1:In:t:the=-0.03415803051103019, BB:In:t:object:t=-0.068315152897116, LEX:123=0.0051918015860653284, LEX:131=0.03664984737348588, LEX:365=-0.007677915524499673, LEX:547=-1.2141473846572327E-5, LEX:1027=-0.03415803051103019, LEX:546=-0.00697294877455334, LEX:570=-1.8421371118597333E-4, LEX:600=0.04131076163619655, LEX:1020=-0.03415757652920205, LEX:887=-0.034158030511030196, LEX:902=-1.8365731381763376E-4, LEX:1022=0.03433781286164348}
18: =========== r:0.8888888888888888 p:0.8888888888888888 (epoch:5 file:0 0)
if the kettle is empty and cool
(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s) (state:t $0 cool:s)))
MakeLex parse time: 0.004 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
cool  :- NP : cool:s : 0.0
the kettle  :- NP : kettle:d : 0.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
empty  :- NP : empty:s : 0.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 0.0
Lex Size: 1099
First parse time: 0.008 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s) (state:t $0 cool:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.9385120613992776
the kettle  :- NP : kettle:d : 17 : 19.9999874990419
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.5287923351811838
empty  :- NP : empty:s : 53 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.14730376356093747
cool  :- NP : cool:s : 49 : 10.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.9385120613992776
the kettle  :- NP : kettle:d : 17 : 19.9999874990419
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.5287923351811838
empty  :- NP : empty:s : 53 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.14730376356093747
cool  :- NP : cool:s : 49 : 10.0
]
Scale: 0.9977251865746098
Update:
{BB:object:t:state:t=0.028217860178619332, BB:state:t:state:t=0.05220899612960163, LHT:0:object:t:e=-0.0387502307249435, LHH:0:object:t:var=-0.0387502307249435, LHT:1:object:t:d=-0.005997888315431057, LHT:0:state:t:e=0.025939600443064065, LHH:0:state:t:var=0.025939600443064065, LHT:1:state:t:s=0.02595279124277704, LHH:1:state:t:cool:s=0.025952792627120518, BB:object:t:object:t=-0.011995759026363744, LHH:1:object:t:cup:d=-0.005997879868723004, BB:exists:exists=-1.5185613502149392E-4, BB:exists:state:t=-1.3521604781173309E-5, LHT:1:object:t:s=-0.02595279262698505, LHH:1:object:t:cool:s=-0.02595279262698505, LHT:1:state:t:e=-1.3190799750386567E-5, LHH:1:state:t:var=-1.3190799750386567E-5, BB:exists:object:t=-0.006647859971615025, LHT:1:object:t:p=-0.006647844292391886, LHH:1:object:t:you:p=-0.006647844292391886, LHT:1:object:t:f=-1.5170549010479778E-4, LHH:1:object:t:tv:f=-1.5170549010479778E-4, BB:In:t:state:t=-0.05190537537985836, LHT:0:In:t:e=-0.02595268768992918, LHH:0:In:t:var=-0.02595268768992918, LHT:1:In:t:e=-0.02595268768992918, LHH:1:In:t:the=-0.02595268768992918, BB:In:t:object:t=-0.05190461113300558, LEX:123=0.003925028538290718, LEX:131=0.028683380335537047, LEX:365=-0.006647843715204442, LEX:547=-1.2700043121453238E-5, LEX:1027=-0.025952687689929175, LEX:546=-0.005997879513181873, LEX:570=-1.5219243271758837E-4, LEX:600=0.03209951222308226, LEX:1020=-0.025952305632084, LEX:887=-0.025952687689929175, LEX:902=-1.5170549010479775E-4, LEX:1022=0.02610163270990039}
19: =========== r:0.8947368421052632 p:0.8947368421052632 (epoch:5 file:0 0)
if the glass is used and on the floor
(exists $0 (and (object:t $0 kettle:d) (state:t $0 used:s) (On:t $0 (the $1 (object:t $1 floor:lo)))))
MakeLex parse time: 0.007 sec.
Adding:
if the glass is  :- S/NP/(NP|NP)/NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (On:t $3 ($1 $2)) (object:t $3 kettle:d) (state:t $3 $0)))))) : 0.0
used  :- NP : used:s : 0.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1.9135499999999999
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
the floor  :- NP : floor:lo : 0.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1.9135499999999999
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1099
First parse time: 0.018 sec.
WRONG: (exists $0 (and (state:t $0 used:s) (object:t $0 glass:d) (In:t $0 (the $1 (On:t $1 (the $2 (object:t $2 floor:lo)))))))
Using:
[LexEntries and scores:
if  :- S/NP/(NP|NP)/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and (In:t $4 ($2 $3)) ($0 $4) (state:t $4 $1))))))) : 1027 : 0.2314186367768217
the glass  :- NP : glass:d : 15 : 18.00346216106506
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -2.246237880073116
used  :- NP : used:s : 54 : 10.308179051436102
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1023 : 2.5398824378433
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (On:t $0 (the $2 (object:t $2 $1))))) : 1085 : -0.2889027967209411
the floor  :- NP : floor:lo : 67 : 20.0
]
Second parse time: 0.007 sec.
Best LexEntries:
[LexEntries and scores:
if the glass is  :- S/NP/(NP|NP)/NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (On:t $3 ($1 $2)) (object:t $3 kettle:d) (state:t $3 $0)))))) : 879 : 1.4348328961335883
used  :- NP : used:s : 54 : 10.308179051436102
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1023 : 2.5398824378433
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : -0.04659605365358964
the floor  :- NP : floor:lo : 67 : 20.0
]
Scale: 0.9977152321184488
Update:
{BB:object:t:state:t=-0.003051112880352084, BB:On:t:object:t=1.994775059825733, LHT:0:object:t:e=0.0017461580875932886, LHH:0:object:t:var=0.0017461580875932886, LHT:1:object:t:d=-5.232646142457289E-5, LHT:0:state:t:e=-0.0048880630747877105, LHH:0:state:t:var=-0.0048880630747877105, LHT:1:state:t:s=-0.0024322567451772943, LHT:0:On:t:e=0.15599953176569092, LHH:0:On:t:var=0.15599953176569092, LHT:1:On:t:e=0.1558960165465344, LHH:1:On:t:the=0.1558960165465344, LHT:1:object:t:lo=0.00267380533109851, LHH:1:object:t:floor:lo=0.00267380533109851, BB:exists:exists=-0.0020830961349050923, LHH:1:object:t:glass:d=-0.9977113086560955, LHT:0:object:t:lo=-1.5205972313732909E-4, LHH:0:object:t:floor:lo=-1.5205972313732909E-4, LHT:1:object:t:e=-2.5557494229259394E-4, LHH:1:object:t:var=-2.5557494229259394E-4, LHT:0:On:t:lo=-1.0351521915654748E-4, LHH:0:On:t:floor:lo=-1.0351521915654748E-4, BB:object:t:object:t=-1.3415665051020781E-4, LHT:1:object:t:f=-7.57881344910335E-4, LHH:1:object:t:tv:f=-7.57881344910335E-4, BB:exists:object:t=-3.8310004740249274E-5, LHT:1:object:t:p=-1.3922702166553071E-5, LHH:1:object:t:you:p=-1.3922702166553071E-5, BB:exists:state:t=-0.00487366941412796, BB:In:t:state:t=-1.9916310725707909, BB:In:t:exists=-0.004873437898156101, LHT:1:state:t:e=-0.0024558063297018262, LHH:1:state:t:var=-0.0024558063297018262, LHT:0:In:t:e=-0.9958155362853954, LHH:0:In:t:var=-0.9958155362853954, LHT:1:In:t:e=-0.9933973058966813, LHH:1:In:t:the=-0.9933973058966813, BB:In:t:object:t=-1.9867629629375632, BB:On:t:exists=-2.1546144849377027E-5, BB:state:t:state:t=-0.004874151033686048, LHH:1:object:t:cup:d=-1.3253072814121787E-5, LHH:1:object:t:bowl:d=-1.4026356463642911E-5, LHH:1:state:t:yellow:s=-1.4026356463642911E-5, LHH:1:object:t:cups:d=-2.5047032146935622E-5, LHH:1:state:t:IsOn:s=-0.002418230388713951, LHT:1:In:t:lo=-0.002418230388713951, LHH:1:In:t:floor:lo=-0.002418230388713951, LEX:15=-0.9977090673779789, LEX:606=0.022458715286643, LEX:608=0.04580764584150633, LEX:123=-3.875368698551686E-5, LEX:131=-0.001371052290916725, LEX:172=-1.4026356463642911E-5, LEX:373=-1.9389251448042984E-5, LEX:547=-1.349325624882284E-4, LEX:559=-2.800616785185356E-4, LEX:875=-2.149272384120486E-5, LEX:1027=-0.9026257695391231, LEX:1028=-0.09318976674627225, LEX:518=-2.8046122265729204E-4, LEX:546=-1.325307281283914E-5, LEX:570=-0.0014378169091821158, LEX:600=-0.0024238224440301845, LEX:977=-3.907338861057855E-5, LEX:1020=-0.9935166859816856, LEX:930=-4.05346640924387E-4, LEX:942=-7.136977408880502E-4, LEX:978=-3.8404244437855757E-4, LEX:988=-3.7116554696424057E-4, LEX:1022=-0.0024370755168430236, LEX:1023=-0.02152914473033973, LEX:1024=-0.03960882442319519, LEX:1025=0.0055756564360322745, LEX:1026=-0.008390161667175636, LEX:57=-0.002418231904562368, LEX:1013=0.513417436050241, LEX:1017=0.26254961081979017, LEX:1019=-1.3148543107908329E-5, LEX:1085=-0.5301027925043792, LEX:1087=-0.3116909811234857, BB:On:t:state:t=1.9954304642368976, LHH:1:object:t:kettle:d=0.9977152321184488, LEX:879=0.8630125252062374, LEX:880=0.134693172279506}
20: =========== r:0.85 p:0.85 (epoch:5 file:0 0)
if the plate is dirty and in the refrigerator
(exists $0 (and (object:t $0 plate:d) (state:t $0 dirty:s) (In:t $0 (the $1 (object:t $1 refrigerator:f)))))
MakeLex parse time: 0.006 sec.
Adding:
if  :- S/NP/(NP|NP)/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and (In:t $4 ($2 $3)) ($0 $4) (state:t $4 $1))))))) : 0.0
dirty  :- NP : dirty:s : 0.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1.9135499999999999
in  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
the refrigerator  :- NP : refrigerator:f : 0.0
the plate  :- NP : plate:d : 0.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1.9135499999999999
in  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1099
First parse time: 0.013 sec.
WRONG: (and (exists $0 (and (object:t $0 plate:d) (state:t $0 dirty:s))) (exists $0 (object:t $0 refrigerator:f)))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -1.8499945737826164
the plate  :- NP : plate:d : 18 : 20.00004419794254
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -0.5236228600030386
dirty  :- NP : dirty:s : 55 : 10.0
and  :- S/NP\S/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 ($0 $3 $2)))))) : 930 : -2.4877559162297893
in  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1047 : -0.0793277398080803
the refrigerator  :- NP : refrigerator:f : 75 : 20.000064119849167
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/(NP|NP)/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and (In:t $4 ($2 $3)) ($0 $4) (state:t $4 $1))))))) : 1027 : -0.6712071327623014
the plate  :- NP : plate:d : 18 : 20.00004419794254
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.2397545660548017
dirty  :- NP : dirty:s : 55 : 10.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1023 : 2.51835329311296
in  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1047 : -0.0793277398080803
the refrigerator  :- NP : refrigerator:f : 75 : 20.000064119849167
]
Scale: 0.9977052778609199
Update:
{BB:object:t:state:t=0.6508481196843339, BB:In:t:object:t=1.297065198504199, BB:In:t:state:t=1.2970356694099534, LHT:0:object:t:e=-0.07210662805864698, LHH:0:object:t:var=-0.07210662805864698, LHT:1:object:t:d=-0.019844076535588565, LHT:0:state:t:e=0.002287686462912353, LHH:0:state:t:var=0.002287686462912353, LHT:1:state:t:s=0.0023156335108993242, LHH:1:state:t:dirty:s=0.0031211784200937866, LHT:0:In:t:e=0.6485178347049767, LHH:0:In:t:var=0.6485178347049767, LHT:1:In:t:e=0.6485178347049767, LHH:1:In:t:the=0.6485178347049767, LHT:1:object:t:f=-0.053181914681544186, LHH:1:object:t:refrigerator:f=3.271501768251149E-4, BB:exists:exists=-0.7455527268028423, LHT:0:object:t:f=-3.271501767912122E-4, LHH:0:object:t:refrigerator:f=-3.271501767912122E-4, LHT:1:object:t:e=-3.271563713595329E-4, LHH:1:object:t:var=-3.271563713595329E-4, BB:object:t:object:t=-0.05350931560992531, LHH:1:object:t:tv:f=-0.053509064858369496, BB:exists:object:t=-0.008129568812645465, LHT:1:object:t:p=-0.002201458705394401, LHH:1:object:t:you:p=-0.002201458705394401, BB:exists:state:t=-4.271158902379721E-5, BB:In:t:exists=-2.9529094245592458E-5, LHT:1:state:t:e=-2.7947178668802388E-5, LHH:1:state:t:var=-2.7947178668802388E-5, LHT:0:object:t:s=-0.003121003173991627, LHH:0:object:t:dirty:s=-0.003121003173991627, LHH:1:object:t:bowl:d=-8.055449091942503E-4, LHH:1:state:t:yellow:s=-8.055449091942503E-4, LHH:1:object:t:cups:d=-0.019038493979128664, LEX:509=-1.6421679095135083E-5, LEX:519=-3.0313165694856825E-5, LEX:561=-7.785387886200466E-5, LEX:18=1.4263741895719466E-4, LEX:610=0.023585338959885665, LEX:612=0.05710863045167498, LEX:123=-0.04039342145035139, LEX:131=-0.26846576700548497, LEX:172=-8.055449091942501E-4, LEX:311=-3.300692194344261E-4, LEX:365=-0.0018713894859599752, LEX:373=-0.018708424759694236, LEX:547=-0.048135676965079886, LEX:559=-0.2696699168892319, LEX:1027=0.49800501704498956, LEX:1028=0.1505127436686214, LEX:12=-1.427114103229442E-4, LEX:518=-0.2697366240605809, LEX:558=-1.1146599673198002E-5, LEX:570=-0.3076719592602802, LEX:977=-0.019844038888322917, LEX:1020=0.5972636948174913, LEX:930=-0.5947379206202038, LEX:942=-2.7084922640334777E-4, LEX:978=-0.053495687329679915, LEX:988=-1.3377528689536856E-5, LEX:1023=0.2779054149159045, LEX:1024=-2.788469897207978E-5, LEX:1025=0.2899613774273174, LEX:1026=-1.5042350895197492E-5, LEX:1047=-0.08069396941162212}
21: =========== r:0.8095238095238095 p:0.8095238095238095 (epoch:5 file:0 0)
for all mugs that contain water
(forall $0 (and (object:t $0 mugs:d) (has:t $0 (the $1 (object:t $1 water:q)))))
MakeLex parse time: 0.007 sec.
Adding:
water  :- NP : water:q : 0.0
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
Lex Size: 1099
First parse time: 0.009 sec.
CORRECT:(forall $0 (and (object:t $0 mugs:d) (has:t $0 (the $1 (object:t $1 water:q)))))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.1950964143175544
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 883 : 0.8668048959614725
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 2.4733552920245834
contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 812 : 0.5095743278584972
water  :- NP : water:q : 32 : 10.0
]
Second parse time: 0.008 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.1950964143175544
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 883 : 0.8668048959614725
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 2.4733552920245834
contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 812 : 0.5095743278584972
water  :- NP : water:q : 32 : 10.0
]
Scale: 0.9976953238020173
Update:
{BB:has:t:object:t=0.21121601401893783, LHT:0:object:t:e=0.22527919591212978, LHH:0:object:t:var=0.22527919591212978, LHT:1:object:t:d=0.1591488608945214, LHH:1:object:t:mugs:d=0.20556722212116035, LHT:0:has:t:e=0.08065982381575194, LHH:0:has:t:var=0.08065982381575194, LHT:1:has:t:e=0.08318891914153603, LHH:1:has:t:the=0.083207865980243, LHT:1:object:t:q=0.03457901067028299, LHH:1:object:t:water:q=0.03457901067028299, LHT:0:object:t:q=-0.03202767013074452, LHH:0:object:t:water:q=-0.03202767013074452, LHT:0:has:t:q=-1.3578116244431742E-5, LHH:0:has:t:water:q=-1.3578116244431742E-5, LHT:1:object:t:e=-4.763457834192059E-4, LHH:1:object:t:var=-1.7403998418878444E-4, BB:object:t:object:t=-0.022207594115938065, LHH:1:object:t:mug:d=-0.046418361226639206, LHH:1:object:t:the=-3.0230579923042164E-4, BB:forall:has:t=-2.4033770918319435E-5, LHT:1:has:t:q=-0.002542673442028577, LHH:1:has:t:water:q=-0.002542673442028577, LHH:1:has:t:var=-1.8946838707058696E-5, LEX:290=1.3474357089157167E-4, LEX:619=-0.0031789373465883463, LEX:627=1.3661585244533503E-4, LEX:635=2.9110806263826506E-4, LEX:643=-0.005062200551150451, LEX:651=8.780057406120265E-5, LEX:659=-0.015155146019456426, LEX:667=8.780057406120265E-5, LEX:675=-0.015410032644291811, LEX:683=1.3676614608355072E-4, LEX:691=-0.0032566288772810023, LEX:699=1.3697687406744708E-4, LEX:707=1.372381024841279E-4, LEX:715=-6.346467954633792E-4, LEX:723=-0.0010769862556284729, LEX:731=-0.0022151794671722647, LEX:739=-0.0010769862556284729, LEX:747=-0.0022551620296371215, LEX:755=2.8553228778506305E-4, LEX:763=1.3731647809115335E-4, LEX:771=-4.3988227321780596E-4, LEX:779=6.617755112187866E-5, LEX:787=-0.004645996789977413, LEX:795=3.103093107661604E-4, LEX:803=-0.004645996789977413, LEX:811=3.164677127166213E-4, LEX:614=4.483070611913506E-4, LEX:622=-0.003981761445698948, LEX:630=0.0013630529832020719, LEX:638=4.3501686953647127E-5, LEX:646=-0.005068513035246712, LEX:654=1.9202771410978408E-4, LEX:662=-0.005068513035246713, LEX:670=6.076817618281389E-4, LEX:678=-0.010884477092247753, LEX:686=1.3139243063607883E-4, LEX:694=1.3730430714026397E-4, LEX:702=1.3694839710324966E-4, LEX:710=-6.734380088224033E-4, LEX:718=-6.326941767369861E-4, LEX:726=-0.0018623185394393386, LEX:734=-6.326941767369861E-4, LEX:742=-0.005751504059408348, LEX:750=1.4001100184175765E-4, LEX:758=1.3731647809115335E-4, LEX:766=4.359950029527018E-4, LEX:774=-0.0030550606947888207, LEX:782=6.586102390260709E-5, LEX:790=-0.007187224784377052, LEX:798=6.586102390260709E-5, LEX:806=-0.021920432773512744, LEX:617=-0.0031789373465883463, LEX:625=6.908876924507816E-5, LEX:633=2.9110806263826506E-4, LEX:641=-0.005070793753896929, LEX:649=8.780057406120265E-5, LEX:657=-0.010371444358040794, LEX:665=8.780057406120265E-5, LEX:673=-0.010493232385332469, LEX:681=1.3676614608355072E-4, LEX:689=-0.001631471342081474, LEX:697=1.3697687406744708E-4, LEX:705=1.9707226092384814E-5, LEX:713=-6.331088644425184E-4, LEX:721=-0.0010769862556284729, LEX:729=-0.0013017606891674788, LEX:737=-0.0010769862556284729, LEX:745=-0.0013162460659894932, LEX:753=0.008291102977329283, LEX:761=1.3731647809115335E-4, LEX:769=-7.114232804169738E-5, LEX:777=6.57428810069656E-5, LEX:785=-0.004645996789977413, LEX:793=1.3497239700573755E-4, LEX:801=-0.004645996789977413, LEX:809=1.3619762607082958E-4, LEX:616=8.230636024589535E-5, LEX:624=-0.003981761445698948, LEX:632=2.0191257814234213E-4, LEX:640=5.8088186538572834E-5, LEX:648=-0.005068421595827247, LEX:656=1.6251442356074363E-4, LEX:664=-0.005068421595827247, LEX:672=5.12856419558128E-4, LEX:680=-0.0019581745745368938, LEX:688=1.3139243063607883E-4, LEX:696=3.920828972010035E-5, LEX:704=1.3695554935451578E-4, LEX:712=-7.992941563787573E-4, LEX:720=-6.326772200459307E-4, LEX:728=-0.0016391440251639256, LEX:736=-6.326772200459307E-4, LEX:744=-0.0050667443520366895, LEX:752=1.4001100184175765E-4, LEX:760=1.3731647809115335E-4, LEX:768=4.359950029527018E-4, LEX:776=-0.003505200924476603, LEX:784=6.586651502968429E-5, LEX:792=-0.006511313387393896, LEX:800=6.586651502968418E-5, LEX:808=-0.01988222664688584, LEX:615=-0.013282104220584961, LEX:623=1.3661585244533503E-4, LEX:631=-0.015548821187969365, LEX:639=-0.0037714395713521797, LEX:647=8.780054854455385E-5, LEX:655=-0.0151136269771875, LEX:663=8.780054854455385E-5, LEX:671=-0.015322358302730809, LEX:679=8.163054402469337E-5, LEX:687=-0.0032566288772810023, LEX:695=-0.019303907730855014, LEX:703=1.3730462364668604E-4, LEX:711=-5.416920593188828E-4, LEX:719=-0.0010769874926920538, LEX:727=-0.0010879538237637187, LEX:735=-0.0010769874926920538, LEX:743=-0.0010943600384784066, LEX:751=2.8553228778506305E-4, LEX:759=1.3731647809115335E-4, LEX:767=-4.3988227321780596E-4, LEX:775=6.607092821109598E-5, LEX:783=-0.004645998345537555, LEX:791=9.772528999883875E-5, LEX:799=-0.004645998345537555, LEX:807=9.682101765113011E-5, LEX:883=0.25451594520273446, LEX:618=1.3946258508598075E-4, LEX:626=-0.02105144211747827, LEX:634=4.360608369588729E-4, LEX:642=8.779905254675352E-5, LEX:650=-0.005068513035246712, LEX:658=8.850409141550451E-5, LEX:666=-0.005068513035246713, LEX:674=2.755360117901653E-4, LEX:682=-0.0033265865599113845, LEX:690=7.779103556002479E-5, LEX:698=1.3730430714026397E-4, LEX:706=-0.02705567959598056, LEX:714=-0.0010769839686146892, LEX:722=-6.326941767369861E-4, LEX:730=-0.0010884804120334392, LEX:738=-6.326941767369861E-4, LEX:746=-0.0033596385782261786, LEX:754=0.004653901399082859, LEX:762=1.3731647809115335E-4, LEX:770=0.004565400073570837, LEX:778=-0.004646014453169165, LEX:786=6.586102390260709E-5, LEX:794=-0.004701812841196375, LEX:802=6.586102390260709E-5, LEX:810=-0.014428534521606763, LEX:613=0.13455803997333463, LEX:621=1.3661585244533503E-4, LEX:629=0.11075793180501492, LEX:637=-0.003214341865890719, LEX:645=8.780057406120265E-5, LEX:653=-0.01696858700345206, LEX:661=8.780057406120265E-5, LEX:669=-0.017202166625316945, LEX:677=1.2685637653055444E-4, LEX:685=-0.0032566288772810023, LEX:693=1.3697687406744708E-4, LEX:701=1.3730469100446338E-4, LEX:709=-5.361183970718268E-4, LEX:717=-0.0010769862556284729, LEX:725=-9.658788676224073E-4, LEX:733=-0.0010769862556284729, LEX:741=-9.707438061711279E-4, LEX:749=2.8553228778506305E-4, LEX:757=1.3731647809115335E-4, LEX:765=-4.3988227321780596E-4, LEX:773=6.575578880262853E-5, LEX:781=-0.004645996789977413, LEX:789=9.295807115544212E-5, LEX:797=-0.004645996789977413, LEX:805=9.199871420865757E-5, LEX:27=-0.04641836122663921, LEX:868=0.25358485089019184, LEX:620=1.3946258508598075E-4, LEX:628=-0.003981761445698948, LEX:636=4.360608369588729E-4, LEX:644=8.440814513745689E-5, LEX:652=-0.005068513035246712, LEX:660=-0.008617294544237885, LEX:668=-0.005068513035246713, LEX:676=-0.008752458057370224, LEX:684=-0.0033265865599113845, LEX:692=1.3139243063607883E-4, LEX:700=1.3730430714026397E-4, LEX:708=1.3124749054068362E-4, LEX:716=-0.0010723984647147532, LEX:724=-6.326941767369861E-4, LEX:732=-0.047279428332024406, LEX:740=-6.326941767369861E-4, LEX:748=-0.05067507058916669, LEX:756=1.4001100184175765E-4, LEX:764=1.3731647809115335E-4, LEX:772=4.359950029527018E-4, LEX:780=-0.0047377150549898035, LEX:788=6.586102390260709E-5, LEX:796=0.17193112458177162, LEX:804=6.586102390260709E-5, LEX:812=0.16267026088516345}
22: =========== r:0.8181818181818182 p:0.8181818181818182 (epoch:5 file:0 0)
for all bowls that are green
(forall $0 (and (object:t $0 bowls:d) (state:t $0 green:s)))
MakeLex parse time: 0.002 sec.
Adding:
green  :- NP : green:s : 0.0
Lex Size: 1099
First parse time: 0.002 sec.
CORRECT:(forall $0 (and (object:t $0 bowls:d) (state:t $0 green:s)))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.329654454290889
all bowls that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 814 : 0.5985572719409435
green  :- NP : green:s : 51 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.329654454290889
all bowls that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 814 : 0.5985572719409435
green  :- NP : green:s : 51 : 10.0
]
Scale: 0.9976853699417351
Update:
{BB:object:t:state:t=-0.16697841017327544, LHT:0:object:t:e=-0.07537188586296903, LHH:0:object:t:var=-0.07537188586296903, LHT:1:object:t:d=-0.0753718889303549, BB:object:t:object:t=-0.11131894011551711, LHH:1:object:t:mugs:d=-0.075371888930355, BB:has:t:object:t=-0.019712418872596435, LHT:0:has:t:e=-0.01971242618087624, LHH:0:has:t:var=-0.01971242618087624, LHT:1:has:t:e=-0.01971242618087624, LHH:1:has:t:the=-0.01971242618087624, LEX:291=0.0024361143893498784, LEX:813=0.009648746943058914, LEX:814=0.04182161011163092, LEX:815=-0.006232087444583376, LEX:817=-0.01851322776358562, LEX:816=-0.007432126537231272, LEX:818=-0.021729126925812126, LEX:655=0.00501305698462673, LEX:671=0.004986705195749306, LEX:727=-0.014671347283787098, LEX:743=-0.014503057474739367, LEX:791=-0.0050442798454217236, LEX:807=-0.0049423256096869875, LEX:613=0.02437676381415899, LEX:629=0.027093600548810836, LEX:653=0.005721009416621835, LEX:669=0.005744555553147142, LEX:725=-0.013262753261076352, LEX:741=-0.013222308553492464, LEX:789=-0.004890950714336355, LEX:805=-0.004834862703151371}
23: =========== r:0.8260869565217391 p:0.8260869565217391 (epoch:5 file:0 0)
for all glasses that are empty
(forall $0 (and (object:t $0 glasses:d) (state:t $0 empty:s)))
MakeLex parse time: 0.005 sec.
Adding:
empty  :- NP : empty:s : 0.0
Lex Size: 1099
First parse time: 0.002 sec.
CORRECT:(forall $0 (and (object:t $0 glasses:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.354031218105048
all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 820 : 0.20965254925099788
empty  :- NP : empty:s : 53 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.354031218105048
all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 820 : 0.20965254925099788
empty  :- NP : empty:s : 53 : 10.0
]
Scale: 0.9976754162800675
Update:
{BB:object:t:state:t=-0.16209657300838615, LHT:0:object:t:e=-0.07187437056296238, LHH:0:object:t:var=-0.07187437056296238, LHT:1:object:t:d=-0.07187450895145615, BB:object:t:object:t=-0.10806438200559097, LHH:1:object:t:mugs:d=-0.07187450895145595, BB:has:t:object:t=-0.017842317948660452, LHT:0:has:t:e=-0.017842325721072274, LHH:0:has:t:var=-0.017842325721072274, LHT:1:has:t:e=-0.017842325721072274, LHH:1:has:t:the=-0.017842325721072274, LEX:292=0.002489025327437369, LEX:819=0.009843682029070712, LEX:820=0.03228092501721046, LEX:821=-0.005247140892569231, LEX:823=-0.014565587918066525, LEX:822=-0.006583164517952469, LEX:824=-0.018217846910147457, LEX:655=0.006500023446624834, LEX:671=0.006288473141968275, LEX:727=-0.014523522820701764, LEX:743=-0.013965783593218959, LEX:791=-0.004659487349658403, LEX:807=-0.004440637025102323, LEX:613=0.021191825156722834, LEX:629=0.02093278966197009, LEX:653=0.007343442505317607, LEX:669=0.0071289360018093615, LEX:725=-0.013006328043965813, LEX:741=-0.012536516767003045, LEX:789=-0.0044699857217247105, LEX:805=-0.004272207852175019}
24: =========== r:0.8333333333333334 p:0.8333333333333334 (epoch:5 file:0 0)
for every cup that is dry
(forall $0 (and (object:t $0 cup:d) (state:t $0 dry:s)))
MakeLex parse time: 0.002 sec.
Adding:
dry  :- NP : dry:s : 0.0
Lex Size: 1099
First parse time: 0.004 sec.
CORRECT:(forall $0 (and (object:t $0 cup:d) (state:t $0 dry:s)))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.375223043261771
every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 826 : 0.06627121202927211
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.375223043261771
every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 826 : 0.06627121202927211
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9976654628170082
Update:
{BB:object:t:state:t=-0.07899155257298286, LHT:0:object:t:e=-0.034791963008782976, LHH:0:object:t:var=-0.034791963008782976, LHT:1:object:t:d=-0.03479202638065215, BB:object:t:object:t=-0.05266103504865534, LHH:1:object:t:mugs:d=-0.034792026380652125, BB:has:t:object:t=-0.00846150885632446, LHT:0:has:t:e=-0.008461517788944738, LHH:0:has:t:var=-0.008461517788944738, LHT:1:has:t:e=-0.008461517788944738, LHH:1:has:t:the=-0.008461517788944738, LEX:293=0.0015012619381065784, LEX:825=0.006002463931231764, LEX:826=0.017844515083919175, LEX:827=-0.006536333018059944, LEX:828=-0.018811975322586178, LEX:613=0.012276640697344162, LEX:629=0.011570347250426952, LEX:653=0.004751866818181406, LEX:669=0.004691906710001482, LEX:725=-0.01329136123810987, LEX:741=-0.013039139469905212, LEX:789=-0.004289758919311792, LEX:805=-0.004171749937012669}
25: =========== r:0.84 p:0.84 (epoch:5 file:0 0)
for every plate that is on the table
(forall $0 (and (object:t $0 plate:d) (On:t $0 (the $1 (object:t $1 table:f)))))
MakeLex parse time: 0.004 sec.
Adding:
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
the table  :- NP : table:f : 0.0
every plate that is  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($0 $3 $1))))))) : 0.0
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1099
First parse time: 0.012 sec.
WRONG: (forall $0 (and (object:t $0 plate:d) (On:t $0 (the $1 (On:t $1 (the $2 (object:t $2 table:f)))))))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.3874996839591152
every plate that is  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($0 $3 $1))))))) : 1048 : 0.009241746508443196
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (On:t $0 (the $2 (object:t $2 $1))))) : 1085 : -0.8190055892253203
the table  :- NP : table:f : 73 : 20.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.3874996839591152
every plate that is  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($0 $3 $1))))))) : 1048 : 0.009241746508443196
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 0.4668213823966514
the table  :- NP : table:f : 73 : 20.0
]
Scale: 0.9976555095525514
Update:
{BB:On:t:object:t=-0.011622502387878555, LHT:0:object:t:e=-0.00506916597159163, LHH:0:object:t:var=-0.00506916597159163, LHT:1:object:t:d=-0.005088501478069009, LHT:0:On:t:e=-0.6517076784544181, LHH:0:On:t:var=-0.6517076784544181, LHT:1:On:t:e=-0.6517240189709173, LHH:1:On:t:the=-0.6517240189709173, LHT:1:object:t:f=4.487688306740826E-5, LHH:1:object:t:table:f=4.487688306740826E-5, LHT:0:object:t:f=-2.9079607314409232E-5, LHH:0:object:t:table:f=-2.9079607314409232E-5, LHT:1:object:t:e=-5.462098390396837E-5, LHH:1:object:t:var=-5.462098390396837E-5, LHT:0:On:t:f=-1.6340516499210032E-5, LHH:0:On:t:table:f=-1.6340516499210032E-5, BB:object:t:object:t=-0.0077483349252523755, LHH:1:object:t:mugs:d=-0.005088501478069142, BB:has:t:object:t=-0.0012143340154429543, LHT:0:has:t:e=-0.0012240781162795409, LHH:0:has:t:var=-0.0012240781162795409, LHT:1:has:t:e=-0.0012240781162795409, LHH:1:has:t:the=-0.0012240781162795409, LEX:294=0.013749233700088036, LEX:829=0.055497466766443994, LEX:830=0.16498758914377368, LEX:831=0.020513962885561714, LEX:832=0.06111460200081863, LEX:1048=-0.3158628545252766, LEX:613=-0.05085193206052539, LEX:629=-0.044516122453696634, LEX:653=0.04334612338140864, LEX:669=0.043371340834103, LEX:725=-0.001942422448151178, LEX:741=-0.0019316401059085418, LEX:789=-6.115293379808409E-4, LEX:805=-6.027641963445298E-4, LEX:1013=0.33589032635043164, LEX:1017=-2.9161904791263292E-5, LEX:1085=-0.6517039970034957, LEX:1087=-2.0021967421304256E-5}
26: =========== r:0.8076923076923077 p:0.8076923076923077 (epoch:5 file:0 0)
for all mugs that are in the sink
(forall $0 (and (object:t $0 mugs:d) (In:t $0 (the $1 (object:t $1 sink:f)))))
MakeLex parse time: 0.005 sec.
Adding:
the sink  :- NP : sink:f : 0.0
Lex Size: 1099
First parse time: 0.005 sec.
CORRECT:(forall $0 (and (object:t $0 mugs:d) (In:t $0 (the $1 (object:t $1 sink:f)))))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.3366477518985898
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 834 : 0.06660843657685224
the sink  :- NP : sink:f : 74 : 20.0
]
Second parse time: 0.007 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.3366477518985898
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 834 : 0.06660843657685224
the sink  :- NP : sink:f : 74 : 20.0
]
Scale: 0.9976455564866915
Update:
{BB:In:t:object:t=-0.045139617516153384, LHT:0:object:t:e=-0.029496359747956627, LHH:0:object:t:var=-0.029496359747956627, LHT:1:object:t:d=-0.029606368599794392, LHH:1:object:t:mugs:d=-0.029606368599794392, LHT:0:In:t:e=1.1345116018602599E-4, LHH:0:In:t:var=1.1345116018602599E-4, LHT:1:object:t:f=1.1345116018602599E-4, LHH:1:object:t:sink:f=1.1345116018602599E-4, BB:object:t:object:t=-0.02258060504112083, BB:has:t:object:t=-0.007047356124761694, LHT:0:has:t:e=-0.007050798433110019, LHH:0:has:t:var=-0.007050798433110019, LHT:1:has:t:e=-0.007050798433110019, LHH:1:has:t:the=-0.007050798433110019, LHT:0:object:t:f=-1.134511601860401E-4, LHH:0:object:t:sink:f=-1.134511601860401E-4, LHT:0:In:t:f=-1.134511601860401E-4, LHH:0:In:t:sink:f=-1.134511601860401E-4, LHT:1:object:t:e=-1.1689346853436431E-4, LHH:1:object:t:var=-1.1689346853436431E-4, LEX:295=0.001294673367497572, LEX:833=0.004973201363995105, LEX:834=0.014847825580266085, LEX:835=-0.0053886905109513305, LEX:836=-0.015727009803503705, LEX:613=0.01017698883518833, LEX:629=0.009647480417421176, LEX:637=-8.356735656652027E-5, LEX:653=0.004291615729932934, LEX:669=0.00428261991197301, LEX:709=-2.1592566088094165E-5, LEX:725=-0.0113152540488488, LEX:741=-0.011222165860095838, LEX:789=-0.003549682224342002, LEX:805=-0.0034893826628882656}
27: =========== r:0.8148148148148148 p:0.8148148148148148 (epoch:5 file:0 0)
if the robot is grasping the mug
(exists $0 (and (object:t $0 robot:p) (IsGrasping:t $0 (the $1 (object:t $1 mug:d)))))
MakeLex parse time: 0.006 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
the mug  :- NP : mug:d : 0.0
the robot  :- NP : robot:p : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsGrasping:t $4 ($2 $3)))))))) : 0.0
Lex Size: 1099
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsGrasping:t $0 (the $1 (object:t $1 mug:d)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.005004589976813226
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.4268665275692226
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsGrasping:t $4 ($2 $3)))))))) : 1030 : 7.770899230024962E-4
the mug  :- NP : mug:d : 16 : 19.999839038370787
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.005004589976813226
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.4268665275692226
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsGrasping:t $4 ($2 $3)))))))) : 1030 : 7.770899230024962E-4
the mug  :- NP : mug:d : 16 : 19.999839038370787
]
Scale: 0.9976356036194219
Update:
{LHT:0:object:t:e=0.009724595057655919, LHH:0:object:t:var=0.009724595057655919, LHT:1:object:t:p=0.009724595057656141, LHH:1:object:t:robot:p=0.009724595057656141, LHT:0:object:t:p=-0.009724595057656263, LHH:0:object:t:robot:p=-0.009724595057656263, LHT:1:object:t:e=-0.009724595057656263, LHH:1:object:t:var=-0.009724595057656263, LEX:884=0.002640234589425901, LEX:1014=-0.0011057903880126868, LEX:1018=-0.0014663316621527896, LEX:1020=-6.811256431620547E-5, LEX:1029=-0.002874164235344049, LEX:1030=2.339296208623982E-4}
28: =========== r:0.8214285714285714 p:0.8214285714285714 (epoch:5 file:0 0)
if the robot is near the refrigerator
(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 refrigerator:f)))))
MakeLex parse time: 0.004 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
the refrigerator  :- NP : refrigerator:f : 0.0
the robot  :- NP : robot:p : 0.0
is near  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (IsNear:t $3 ($1 $2))))))) : 0.0
Lex Size: 1099
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 refrigerator:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.005004589976813226
the robot  :- NP : robot:p : 1 : 20.0
is near  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (IsNear:t $3 ($1 $2))))))) : 885 : 0.6794831239731152
the refrigerator  :- NP : refrigerator:f : 75 : 20.000064119849167
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.005004589976813226
the robot  :- NP : robot:p : 1 : 20.0
is near  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (IsNear:t $3 ($1 $2))))))) : 885 : 0.6794831239731152
the refrigerator  :- NP : refrigerator:f : 75 : 20.000064119849167
]
Scale: 0.9976256509507372
Update:
{BB:IsNear:t:object:t=0.0025072835526940888, LHT:0:object:t:e=0.005624733904999446, LHH:0:object:t:var=0.005624733904999446, LHT:1:object:t:p=0.005624733904999446, LHH:1:object:t:robot:p=0.005624733904999446, LHT:0:IsNear:t:e=0.0025072835526940888, LHH:0:IsNear:t:var=0.0025072835526940888, LHT:1:IsNear:t:e=0.0025072835526940888, LHH:1:IsNear:t:the=0.0025072835526940888, BB:On:t:object:t=-0.0025072835526941052, LHT:0:On:t:e=-0.0025072835526941052, LHH:0:On:t:var=-0.0025072835526941052, LHT:1:On:t:e=-0.0025072835526941052, LHH:1:On:t:the=-0.0025072835526941052, LHT:0:object:t:p=-0.005624733904999475, LHH:0:object:t:robot:p=-0.005624733904999475, LHT:1:object:t:e=-0.005624733904999475, LHH:1:object:t:var=-0.005624733904999475, LEX:885=0.004442659456788362, LEX:1012=-0.0010404530009072335, LEX:1016=-0.0014668305517868717, LEX:1031=-9.616580763131583E-4, LEX:1033=-9.737178492793785E-4, LEX:1032=-0.0020709866614692916, LEX:1034=-0.0023716728168173616}
29: =========== r:0.8275862068965517 p:0.8275862068965517 (epoch:5 file:0 0)
if the robot is close to the stove
(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
MakeLex parse time: 0.008 sec.
Adding:
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
close to  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 0.0
Lex Size: 1100
First parse time: 0.006 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.005004589976813226
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.42540019590706984
close to  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 1099 : 0.0
the stove  :- NP : stove:f : 76 : 19.002046401367956
]
Second parse time: 0.007 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.005004589976813226
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.42540019590706984
close to  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 1099 : 0.0
the stove  :- NP : stove:f : 76 : 19.002046401367956
]
Scale: 0.9976156984806314
Update:
{BB:IsNear:t:object:t=0.004637630229713782, LHT:0:object:t:e=0.010854982694190864, LHH:0:object:t:var=0.010854982694190864, LHT:1:object:t:p=0.010854982694190975, LHH:1:object:t:robot:p=0.010854982694190975, LHT:0:IsNear:t:e=0.004637630229713782, LHH:0:IsNear:t:var=0.004637630229713782, LHT:1:IsNear:t:e=0.004637630229713782, LHH:1:IsNear:t:the=0.004637630229713782, BB:On:t:object:t=-0.004637630229713732, LHT:0:On:t:e=-0.004637630229713732, LHH:0:On:t:var=-0.004637630229713732, LHT:1:On:t:e=-0.004637630229713732, LHH:1:On:t:the=-0.004637630229713732, LHT:0:object:t:p=-0.010854982694190872, LHH:0:object:t:robot:p=-0.010854982694190872, LHT:1:object:t:e=-0.010854982694190872, LHH:1:object:t:var=-0.010854982694190872, LEX:886=8.363341199685327E-4, LEX:1035=-7.174804450835966E-5, LEX:1036=-1.3812367941744725E-4, LEX:1099=6.351782868179248E-4, LEX:1012=-0.0019279629085257213, LEX:1014=-6.972486024577246E-4, LEX:1016=-0.0027096673211880087, LEX:1018=0.0012732026108523923, LEX:1020=5.922427842326221E-5, LEX:1031=0.0015628847680028628, LEX:1033=0.0016032330469934496, LEX:1049=-4.205178455211919E-4, LEX:1051=-2.1030249987467745E-4, LEX:1053=-4.205178455211919E-4, LEX:1055=-2.1030249987467745E-4, LEX:1050=-4.205178455211919E-4, LEX:1052=-2.1030249987467745E-4, LEX:1054=-4.205178455211919E-4, LEX:1056=-2.1030249987467745E-4}
30: =========== r:0.8333333333333334 p:0.8333333333333334 (epoch:5 file:0 0)
if the microwave is on and the robot is close to the microwave
(and (exists $0 (and (object:t $0 microwave:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 microwave:f))))))
MakeLex parse time: 0.024 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the microwave  :- NP : microwave:f : 0.0
on  :- NP : IsOn:s : 0.0
the microwave  :- NP : microwave:f : 0.0
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 1.2756999999999998
the robot  :- NP : robot:p : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
close to  :- S/NP\S\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 t (lambda $4 e (and $3 (exists $5 (and ($0 $1 $5) (IsNear:t $5 ($2 $4)))))))))) : 0.0
Lex Size: 1100
First parse time: 0.053 sec.
CORRECT:(and (exists $0 (and (object:t $0 microwave:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 microwave:f))))))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.1196644906718483
the microwave  :- NP : microwave:f : 77 : 20.0
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -0.7933594840636196
on  :- NP : IsOn:s : 57 : 9.001960761664746
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 2.1190744850354
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.42667339851792224
close to  :- S/NP\S\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 t (lambda $4 e (and $3 (exists $5 (and ($0 $1 $5) (IsNear:t $5 ($2 $4)))))))))) : 1057 : -0.0020498103688072434
]
Second parse time: 0.034 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.1196644906718483
the microwave  :- NP : microwave:f : 77 : 20.0
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -0.7933594840636196
on  :- NP : IsOn:s : 57 : 9.001960761664746
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 2.1190744850354
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.42667339851792224
close to  :- S/NP\S\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 t (lambda $4 e (and $3 (exists $5 (and ($0 $1 $5) (IsNear:t $5 ($2 $4)))))))))) : 1057 : -0.0020498103688072434
]
Scale: 0.9976057462090983
Update:
{BB:exists:exists=-0.18477680453528106, BB:object:t:state:t=-4.3833666028784263E-4, LHT:0:object:t:e=-0.03473796777352221, LHH:0:object:t:var=-0.03473796777352221, LHT:0:state:t:e=-4.60785976091109E-4, LHH:0:state:t:var=-4.60785976091109E-4, LHT:1:state:t:s=-4.381399334519924E-4, LHH:1:state:t:IsOn:s=0.0011219378013535319, LHT:1:object:t:p=0.0010217080681214751, LHH:1:object:t:robot:p=0.004595738533629909, LHT:0:object:t:p=-0.004595738533630494, LHH:0:object:t:robot:p=-0.004595738533630494, LHT:1:object:t:e=-0.004595742067375348, LHH:1:object:t:var=-0.004595742067375348, LHH:1:state:t:var=-2.306021848752815E-5, BB:exists:object:t=-0.009168830531459213, LHH:1:object:t:you:p=-0.0035740304655085173, LHT:1:state:t:e=-2.285320040654438E-5, BB:exists:state:t=-2.285304457513843E-5, LHT:1:object:t:d=-0.03688167316380691, LHT:0:object:t:s=-0.0011218657489050375, LHH:0:object:t:IsOn:s=-0.0011218657489050375, LHH:1:object:t:bowl:d=-0.0015598707167245947, LHH:1:state:t:yellow:s=-0.0015598707167245947, LHH:1:object:t:cups:d=-0.03532166791735398, LEX:1037=0.0017697865008306285, LEX:77=-1.13305362941679E-5, LEX:1057=-0.0017697865049560305, LEX:123=0.0014610984499891576, LEX:131=0.014806579042488973, LEX:172=-0.0015598707167245951, LEX:311=-5.920827378732778E-4, LEX:365=-0.0029819477276352402, LEX:373=-0.034729585179480695, LEX:547=0.008175856060865194, LEX:559=0.015409247216243656, LEX:72=1.1330536292099867E-5, LEX:518=0.015434646286925183, LEX:558=-1.957304604276927E-5, LEX:570=0.014406920200963144, LEX:977=-0.036881538634078566, LEX:1014=-0.004595738533630497, LEX:1018=0.002700488536525967, LEX:1020=0.007185008684380637}
31: =========== r:0.8387096774193549 p:0.8387096774193549 (epoch:5 file:0 0)
if the stove is not on and the mug contains coffee
(and (exists $0 (and (object:t $0 stove:f) (not (state:t $0 IsOn:s)))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coffee:q))))))
MakeLex parse time: 0.01 sec.
Adding:
if  :- S/S/NP/(S|NP|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 t (and (exists $4 (and ($0 $4) ($1 $2 $4))) $3))))) : 0.0
if  :- S/S/(S|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (lambda $2 t (and (exists $3 (and ($0 $3) ($1 $3))) $2)))) : 0.0
Lex Size: 1102
First parse time: 0.012 sec.
CORRECT:(and (exists $0 (and (object:t $0 stove:f) (not (state:t $0 IsOn:s)))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coffee:q))))))
Using:
[LexEntries and scores:
if  :- S/S/NP/(S|NP|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 t (and (exists $4 (and ($0 $4) ($1 $2 $4))) $3))))) : 1100 : 0.0
if  :- S/S/(S|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (lambda $2 t (and (exists $3 (and ($0 $3) ($1 $3))) $2)))) : 1101 : 0.0
the stove  :- NP : stove:f : 76 : 19.002046401367956
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -2.635314750838823
not  :- S|NP/NP : (lambda $0 e (lambda $1 e (not (state:t $1 $0)))) : 1063 : 3.5936973586618945
on  :- NP : IsOn:s : 57 : 9.001960761664746
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 2.1190744850354
the mug  :- NP : mug:d : 16 : 19.999839038370787
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9993373519160176
coffee  :- NP : coffee:q : 35 : 10.0
]
Second parse time: 0.02 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S/NP/(S|NP|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 t (and (exists $4 (and ($0 $4) ($1 $2 $4))) $3))))) : 1100 : 0.0
if  :- S/S/(S|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (lambda $2 t (and (exists $3 (and ($0 $3) ($1 $3))) $2)))) : 1101 : 0.0
the stove  :- NP : stove:f : 76 : 19.002046401367956
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -2.635314750838823
not  :- S|NP/NP : (lambda $0 e (lambda $1 e (not (state:t $1 $0)))) : 1063 : 3.5936973586618945
on  :- NP : IsOn:s : 57 : 9.001960761664746
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 2.1190744850354
the mug  :- NP : mug:d : 16 : 19.999839038370787
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9993373519160176
coffee  :- NP : coffee:q : 35 : 10.0
]
Scale: 0.9975957941361319
Update:
{BB:not:object:t=1.7256575807713822E-5, LHT:0:state:t:e=-1.6357338448834357E-5, LHH:0:state:t:var=-1.6357338448834357E-5, BB:exists:not=-1.725653727972207E-5, BB:object:t:state:t=-1.7256537289161044E-5, LHT:1:state:t:e=-1.8155736375555745E-5, LHH:1:state:t:var=-1.815573636611677E-5, LEX:570=-1.724941526941905E-5, LEX:1020=1.724945168074979E-5}
32: =========== r:0.84375 p:0.84375 (epoch:5 file:0 0)
if the mug is green and the TV is on
(and (exists $0 (and (object:t $0 mug:d) (state:t $0 green:s))) (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s))))
MakeLex parse time: 0.045 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the mug  :- NP : mug:d : 0.0
green  :- NP : green:s : 0.0
on  :- NP : IsOn:s : 0.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 0.0
the TV  :- NP : tv:f : 0.0
Lex Size: 1102
First parse time: 0.096 sec.
CORRECT:(and (exists $0 (and (object:t $0 mug:d) (state:t $0 green:s))) (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s))))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.1042552434556048
the mug  :- NP : mug:d : 16 : 19.999839038370787
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -0.7779248377766944
green  :- NP : green:s : 51 : 10.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 966 : 0.3710162188413829
the TV  :- NP : tv:f : 79 : 20.0
is  :- S/NP\S\(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 901 : 0.1350580275251596
on  :- NP : IsOn:s : 57 : 9.001960761664746
]
Second parse time: 0.042 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.1042552434556048
the mug  :- NP : mug:d : 16 : 19.999839038370787
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -0.7779248377766944
green  :- NP : green:s : 51 : 10.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 966 : 0.3710162188413829
the TV  :- NP : tv:f : 79 : 20.0
is  :- S/NP\S\(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 901 : 0.1350580275251596
on  :- NP : IsOn:s : 57 : 9.001960761664746
]
Scale: 0.9975858422617265
Update:
{BB:exists:exists=-0.17007392539972394, BB:object:t:state:t=0.037341747667483736, LHT:0:object:t:e=-0.037206661343613945, LHH:0:object:t:var=-0.037206661343613945, LHT:1:object:t:d=-0.03614789576980309, LHT:0:state:t:e=6.626453249032952E-4, LHH:0:state:t:var=6.626453249032952E-4, LHT:1:state:t:s=7.192099896229672E-4, LHH:1:state:t:green:s=0.0022764928025412494, LHH:1:state:t:IsOn:s=1.2919981512449496E-5, BB:has:t:object:t=-0.03750832104946826, LHT:0:has:t:e=-0.03750832104946826, LHH:0:has:t:var=-0.03750832104946826, LHT:1:has:t:e=-0.03750832104946826, LHH:1:has:t:the=-0.03750832104946826, LHH:1:object:t:cup:d=-0.0021400201817933363, BB:state:t:state:t=-1.849035730900383E-5, LHT:1:state:t:e=-5.6564699611026686E-5, LHH:1:state:t:var=-5.656472973085958E-5, BB:exists:object:t=-0.011890037708715027, LHT:0:object:t:s=-0.002289182647275143, LHH:0:object:t:IsOn:s=-1.291992211282485E-5, BB:exists:state:t=-2.4853772938939953E-4, LHH:1:state:t:yellow:s=-0.001570202764312332, LHH:1:object:t:bowl:d=-0.0014493653833635824, LHH:1:object:t:cups:d=-0.032558510205261994, LHT:1:object:t:p=-0.0033480036798976234, LHH:1:object:t:you:p=-0.0033480036798976234, LHH:0:object:t:green:s=-0.0022762627251623185, BB:In:t:state:t=-0.001274901634451361, LHT:0:In:t:e=-6.374508172256805E-4, LHH:0:In:t:var=-6.374508172256805E-4, BB:In:t:object:t=-0.0012745645940655506, LHT:1:In:t:f=-6.372707067021932E-4, LHH:1:In:t:tv:f=-6.372707067021932E-4, LEX:123=0.0015352714300474963, LEX:131=0.017079410413738273, LEX:172=-0.001449139510863439, LEX:218=-1.2093085277658373E-4, LEX:311=-4.967780817140207E-4, LEX:349=-0.001796807296594316, LEX:365=-0.0027876351595163542, LEX:373=-0.030264629993317294, LEX:397=-6.354874854589406E-5, LEX:547=0.006478093430805385, LEX:559=0.012523906778916368, LEX:1028=-6.374508172256807E-4, LEX:518=0.03109001582601847, LEX:522=-0.0019812869162627532, LEX:546=-1.587057752836545E-4, LEX:558=-4.0127171268711667E-5, LEX:570=0.014447153741824434, LEX:600=-0.03735889151135894, LEX:901=0.021009361827020505, LEX:929=-0.0055857331598640194, LEX:977=-0.025292531291093656, LEX:1020=0.003871322896950612, LEX:858=-0.037508321049468274, LEX:890=0.0039597589000180886, LEX:918=-6.038910715266126E-5, LEX:954=3.1096530077019446E-4, LEX:966=0.03394462731137593, LEX:972=-6.372712575547689E-4}
33: =========== r:0.8484848484848485 p:0.8484848484848485 (epoch:5 file:0 0)
if there exists a mug and the mug contains sugar
(and (exists $0 (object:t $0 mug:d)) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 sugar:q))))))
MakeLex parse time: 0.04 sec.
Adding:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
a mug  :- NP : mug:d : 0.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 0.5467285714285715
the mug  :- NP : mug:d : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
sugar  :- NP : sugar:q : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
sugar  :- NP : sugar:q : 0.0
Lex Size: 1102
First parse time: 0.059 sec.
CORRECT:(and (exists $0 (object:t $0 mug:d)) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 sugar:q))))))
Using:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.29276843577029354
a mug  :- NP : mug:d : 22 : 20.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : -0.9729910608382759
the mug  :- NP : mug:d : 16 : 19.999839038370787
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.2430567430384958
sugar  :- NP : sugar:q : 30 : 10.0
]
Second parse time: 0.038 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.29276843577029354
a mug  :- NP : mug:d : 22 : 20.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : -0.9729910608382759
the mug  :- NP : mug:d : 16 : 19.999839038370787
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.2430567430384958
sugar  :- NP : sugar:q : 30 : 10.0
]
Scale: 0.9975758905858764
Update:
{BB:exists:exists=-2.134172304445246E-5, LHT:0:object:t:e=-0.0025268327431728, LHH:0:object:t:var=-0.0025268327431728, LHT:1:object:t:d=-0.0021387857156747857, LHH:1:object:t:mug:d=1.2695308499454148E-4, BB:has:t:object:t=3.633762913466091E-4, LHT:0:has:t:e=-0.029176914653642125, LHH:0:has:t:var=-0.029176914653642125, LHT:1:has:t:e=-0.029176917175075645, LHH:1:has:t:the=-0.02917691467687637, LHT:0:object:t:d=-1.250530868113881E-4, LHH:0:object:t:mug:d=-1.250530868113881E-4, LHT:1:state:t:e=-3.64021562176965E-4, BB:object:t:state:t=-0.0012922871342460518, LHT:0:state:t:e=-0.0012922807023062785, LHH:0:state:t:var=-0.0012922807023062785, LHH:1:state:t:the=-3.6338855682086223E-4, BB:exists:object:t=-0.0021688905992636484, LHT:1:object:t:p=-5.075151688661616E-4, LHH:1:object:t:you:p=-5.075151688661616E-4, LHT:1:state:t:s=-9.30159930604427E-4, LHH:1:state:t:yellow:s=-9.301598827062067E-4, BB:object:t:object:t=-0.001030787968936408, LHH:1:object:t:bowl:d=-9.442056301114698E-4, LHH:1:object:t:cups:d=-0.0011490428679814587, LHH:1:object:t:cup:d=-1.724903025752064E-4, LEX:122=6.211914501608834E-4, LEX:125=3.3311108216221863E-4, LEX:129=5.4149299324273266E-5, LEX:133=5.967018246894365E-4, LEX:137=8.90792505778998E-5, LEX:141=1.5427313618605396E-4, LEX:145=3.864493084171687E-4, LEX:149=1.5425904281618572E-4, LEX:153=8.395566921741701E-5, LEX:200=-4.0615534849328285E-4, LEX:220=-2.824477958136005E-4, LEX:240=-6.376805431343968E-4, LEX:423=-4.815604722062161E-5, LEX:124=3.0217540269272448E-5, LEX:128=-9.25479852087808E-4, LEX:132=-1.4307516420004643E-4, LEX:136=1.444283635930676E-5, LEX:140=3.732672742650043E-4, LEX:144=2.240493723807095E-5, LEX:148=3.7016234197248066E-4, LEX:152=-5.318489788285441E-4, LEX:123=5.807337915462287E-5, LEX:127=3.069969147331555E-5, LEX:131=2.1528138398053224E-4, LEX:135=5.845172197817848E-5, LEX:139=3.733088881137742E-4, LEX:143=8.147817104129392E-5, LEX:147=3.705328963313998E-4, LEX:151=4.2721056372714866E-5, LEX:198=-1.7768271708176799E-4, LEX:208=-2.7119797227616932E-5, LEX:218=-6.226782261440902E-5, LEX:238=-2.7087366999406384E-4, LEX:333=-3.186755226527483E-4, LEX:349=-8.000887233538869E-4, LEX:365=-4.259164063923301E-4, LEX:381=-4.7944148637075853E-5, LEX:389=-3.007761693163841E-5, LEX:397=-3.0159710461902827E-5, LEX:571=-4.404452219371617E-5, LEX:583=-5.380910539405897E-5, LEX:595=-2.4304320207870127E-5, LEX:419=-2.875861963853267E-4, LEX:859=-1.1579659762300584E-5, LEX:126=1.9381176723238386E-4, LEX:130=-2.857222812970589E-4, LEX:134=7.08077060563255E-4, LEX:138=7.837596594872802E-5, LEX:142=1.5417283562416633E-4, LEX:146=3.4444089401288814E-4, LEX:150=1.5415849861671478E-4, LEX:154=-0.0011784103004686712, LEX:858=3.6338855580447506E-4, LEX:966=-3.6337752556701055E-4, LEX:454=-0.02954020922597899, LEX:472=-3.633885434221457E-4, LEX:502=0.029903597784272866}
34: =========== r:0.8529411764705882 p:0.8529411764705882 (epoch:5 file:0 0)
if the television is on
(exists $0 (and (object:t $0 television:f) (state:t $0 IsOn:s)))
MakeLex parse time: 0.004 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
on  :- NP : IsOn:s : 0.0
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 0.0
on  :- NP : IsOn:s : 0.0
Lex Size: 1102
First parse time: 0.005 sec.
WRONG: (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.0917313366766885
the television  :- NP : tv:f : 78 : 16.008428181096573
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -0.746834821950676
on  :- NP : IsOn:s : 57 : 9.001960761664746
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -1.1475642295199344
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 845 : 3.451968109679134
on  :- NP : IsOn:s : 57 : 9.001960761664746
]
Scale: 0.997565939108575
Update:
{BB:object:t:state:t=1.676020601017953E-4, LHT:0:object:t:e=-0.02646718158979042, LHH:0:object:t:var=-0.02646718158979042, LHH:1:object:t:television:f=0.8596902002097879, LHT:0:state:t:e=1.4110752582778855E-4, LHH:0:state:t:var=1.4110752582778855E-4, LHT:1:state:t:s=1.676020601017953E-4, LHH:1:state:t:IsOn:s=0.001371445114648199, LHH:1:object:t:tv:f=-0.8596902002097879, BB:exists:object:t=-0.002497694123183701, LHT:1:object:t:p=-0.002497694123183701, LHH:1:object:t:you:p=-0.002497694123183701, LHT:0:object:t:s=-0.001371445114647762, LHH:0:object:t:IsOn:s=-0.001371445114647762, BB:exists:exists=-0.025340932581254427, LHT:1:object:t:d=-0.025340932581254427, LHH:1:object:t:bowl:d=-0.0012038430545464537, LHH:1:state:t:yellow:s=-0.0012038430545464537, LHH:1:object:t:cups:d=-0.024137089526707976, BB:exists:state:t=-2.6494534274144468E-5, LHT:1:state:t:e=-2.6494534274144468E-5, LHH:1:state:t:var=-2.6494534274144468E-5, LEX:304=0.05869515918625508, LEX:845=0.8009908263175118, LEX:78=-0.859690200209788, LEX:123=0.08237658977817723, LEX:131=0.49437699350336145, LEX:172=-0.0012038430545464537, LEX:311=-3.683830866664406E-4, LEX:365=-0.00212931103651726, LEX:373=-0.023768706440041535, LEX:547=-0.20397326080646583, LEX:559=-0.40400945274957745, LEX:518=-0.4039885482868241, LEX:558=-2.09044627532103E-5, LEX:570=-0.22500069902936334, LEX:977=-0.02534093258125443, LEX:1020=-0.20533911584959263}
35: =========== r:0.8285714285714286 p:0.8285714285714286 (epoch:5 file:0 0)
if you find any cups
(exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d))))
MakeLex parse time: 0.005 sec.
Adding:
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 0.0
you  :- NP : you:p : 0.0
find any cups  :- S\S : (lambda $0 t $0) : 0.0
Lex Size: 1102
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d))))
Using:
[LexEntries and scores:
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 349 : 0.9200872735876402
you  :- NP : you:p : 2 : 10.86994881950003
find any cups  :- S\S : (lambda $0 t $0) : 314 : 0.21426699278864386
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 349 : 0.9200872735876402
you  :- NP : you:p : 2 : 10.86994881950003
find any cups  :- S\S : (lambda $0 t $0) : 314 : 0.21426699278864386
]
Scale: 0.9975559878298169
Update:
{BB:exists:object:t=0.060095075442290244, LHT:0:object:t:e=0.06019424309802557, LHH:0:object:t:var=0.06019424309802557, LHT:1:object:t:p=-0.015665448303832732, LHH:1:object:t:you:p=-0.015665448303832732, LHT:1:object:t:d=0.07586368027740104, LHH:1:object:t:cups:d=0.08672204341470915, BB:object:t:state:t=-0.05091549976408039, LHH:1:object:t:bowl:d=-6.099767118999542E-4, LHT:0:state:t:e=-0.051039162985315724, LHH:0:state:t:var=-0.051039162985315724, LHT:1:state:t:s=-0.05102680454178348, LHH:1:state:t:yellow:s=-0.05102680454178348, BB:object:t:object:t=-2.132109126088104E-5, LHT:1:state:t:e=-1.2358443532244067E-5, LHH:1:state:t:var=-1.2358443532244067E-5, LHH:1:object:t:cup:d=-0.01024838642540861, LEX:309=-7.492033547627178E-4, LEX:323=-8.450459730938243E-4, LEX:339=-3.156437963166686E-5, LEX:347=-9.996611995426114E-5, LEX:355=-0.008524620635363665, LEX:379=-7.492033547627178E-4, LEX:395=-7.768893806417192E-4, LEX:403=-0.0016981523954528242, LEX:411=-3.144538424332288E-5, LEX:312=-2.3579442489278323E-4, LEX:326=-0.0013175747064651548, LEX:334=-1.0791128340141914E-4, LEX:342=-4.924921552719993E-5, LEX:358=-5.8748646903754727E-5, LEX:366=-3.8968405354749104E-4, LEX:382=-8.385589414274368E-4, LEX:398=-7.873321565121986E-5, LEX:307=-7.492033547627178E-4, LEX:321=-8.450459730938243E-4, LEX:337=-3.156437963166686E-5, LEX:345=-9.996608680880306E-5, LEX:353=-3.1518702698791074E-5, LEX:377=-7.492033547627178E-4, LEX:393=-7.768891231541024E-4, LEX:409=-3.144538424332288E-5, LEX:314=-0.0018212654961821397, LEX:328=-8.476238807283275E-4, LEX:336=-9.996602109418158E-5, LEX:344=-3.1873483031147854E-5, LEX:360=0.03619496760430865, LEX:368=-7.492033547627178E-4, LEX:376=-0.002064951090209958, LEX:384=-7.76888612644653E-4, LEX:400=-3.144538433973687E-5, LEX:408=-0.009993508567419429, LEX:305=-7.492033547627178E-4, LEX:319=-8.45189267747774E-4, LEX:335=-3.1569748132772396E-5, LEX:343=-9.889918163461229E-5, LEX:351=-3.151792006642017E-5, LEX:375=-9.270118928509681E-4, LEX:391=-7.686013825939108E-4, LEX:407=-8.840537333231397E-5, LEX:316=-7.492033547627178E-4, LEX:330=-8.450459730938243E-4, LEX:338=-9.996608680880306E-5, LEX:346=-3.156437963166686E-5, LEX:362=-3.1518702698791074E-5, LEX:370=-7.492033547627178E-4, LEX:386=-7.768891231541024E-4, LEX:402=-3.144538424332288E-5, LEX:131=0.027167132382724914, LEX:151=-8.835578446933919E-4, LEX:172=-1.1750717838253045E-5, LEX:188=-1.2504381870622139E-5, LEX:198=-1.3850578200425487E-5, LEX:208=-5.384954739074243E-4, LEX:218=-0.05086458847221667, LEX:228=-2.7763733044318082E-5, LEX:238=-1.944266694184454E-5, LEX:248=-1.2411039165752561E-4, LEX:333=-2.4037509807367864E-5, LEX:341=-6.696910141752301E-5, LEX:349=0.07105628865630953, LEX:365=-0.0012677265760336225, LEX:373=-2.2185435820053424E-4, LEX:389=-5.835647042345351E-4, LEX:397=-0.0232303980834604, LEX:405=-3.144214361034843E-5, LEX:553=-4.154634822197092E-5, LEX:559=-1.2337308671455187E-5, LEX:2=0.023317008730245475, LEX:25=-0.010202994099274693, LEX:318=-7.492033547627178E-4, LEX:332=-8.450110015104745E-4, LEX:340=-9.996608680880306E-5, LEX:348=-3.1563065301244964E-5, LEX:364=-3.1518702698791074E-5, LEX:372=-7.492033547627178E-4, LEX:388=-7.768891231541024E-4, LEX:404=-1.7484284104134533E-5}
36: =========== r:0.8333333333333334 p:0.8333333333333334 (epoch:5 file:0 0)
When the water is boiling
(exists $0 (and (object:t $0 water:q) (state:t $0 IsBoiling:s)))
MakeLex parse time: 0.002 sec.
Adding:
boiling  :- NP : IsBoiling:s : 0.0
water  :- NP : water:q : 0.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
Lex Size: 1102
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 water:q) (state:t $0 IsBoiling:s)))
Using:
[LexEntries and scores:
When  :- S/NP/(S|NP)/(S|NP|(S|NP)) : (lambda $0 <<e,t>,<e,t>> (lambda $1 <e,t> (lambda $2 e ($0 $1 $2)))) : 1064 : 0.0036795507333987347
the  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 1069 : 0.005519326100098101
water  :- NP : water:q : 32 : 10.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -2.836765294339784
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
When  :- S/NP/(S|NP)/(S|NP|(S|NP)) : (lambda $0 <<e,t>,<e,t>> (lambda $1 <e,t> (lambda $2 e ($0 $1 $2)))) : 1064 : 0.0036795507333987347
the  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 1069 : 0.005519326100098101
water  :- NP : water:q : 32 : 10.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -2.836765294339784
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Scale: 0.9975460367495961
Update:
{BB:object:t:state:t=0.022104834148437533, LHT:0:object:t:e=0.022104834148437533, LHH:0:object:t:var=0.022104834148437533, LHT:0:state:t:e=0.02209726543683209, LHH:0:state:t:var=0.02209726543683209, LHT:1:state:t:s=0.022110402420661947, LHH:1:state:t:IsBoiling:s=0.022110402420661947, BB:exists:state:t=-1.3136983829680434E-5, LHT:1:state:t:e=-1.870525605401063E-5, LHH:1:state:t:var=-1.870525605401063E-5, LHT:0:object:t:s=-0.022104834148437547, LHH:0:object:t:IsBoiling:s=-0.022104834148437547, LEX:846=0.0019165610208348998, LEX:1039=0.0016106505021273945, LEX:1064=0.003239384249594998, LEX:1066=0.0015754078259676472, LEX:1068=-0.01802010640779405, LEX:1070=0.0016137406055236484, LEX:1072=0.0016137406055236484, LEX:1074=0.0016123438421961611, LEX:1076=0.0016123438421961611, LEX:1078=0.0016123438421961611, LEX:1080=0.0016123438421961611, LEX:1065=0.0016167122584867036, LEX:1067=-0.019612952692828253, LEX:1069=0.004790926102110132, LEX:1071=0.0016137406055236484, LEX:1073=0.0016137406055236484, LEX:1075=0.0016123438421961611, LEX:1077=0.0016123438421961611, LEX:1079=0.0016123438421961611, LEX:1081=0.0016123438421961611, LEX:570=0.0028198976666468415, LEX:1020=-0.002821143896084135}
37: =========== r:0.8378378378378378 p:0.8378378378378378 (epoch:5 file:0 0)
when the water in the pot is boiling
(exists $0 (and (object:t $0 water:q) (In:t $0 (the $1 (object:t $1 pot:d))) (state:t $0 IsBoiling:s)))
MakeLex parse time: 0.004 sec.
Adding:
water  :- NP : water:q : 0.0
in  :- S/NP/(S|NP)\(NP|(S|NP))\NP : (lambda $0 e (lambda $1 <<e,t>,e> (lambda $2 <e,t> (lambda $3 e (exists $4 (and (In:t $4 ($1 $2)) (object:t $4 $0) (state:t $4 $3))))))) : 0.0
Lex Size: 1103
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 water:q) (In:t $0 (the $1 (object:t $1 pot:d))) (state:t $0 IsBoiling:s)))
Using:
[LexEntries and scores:
when the  :- NP|(S|NP) : (lambda $0 <e,t> (the $1 ($0 $1))) : 1082 : 0.4101275
water  :- NP : water:q : 32 : 10.0
in  :- S/NP/(S|NP)\(NP|(S|NP))\NP : (lambda $0 e (lambda $1 <<e,t>,e> (lambda $2 <e,t> (lambda $3 e (exists $4 (and (In:t $4 ($1 $2)) (object:t $4 $0) (state:t $4 $3))))))) : 1102 : 0.0
the pot  :- NP : pot:d : 19 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -2.839586438235868
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
when the  :- NP|(S|NP) : (lambda $0 <e,t> (the $1 ($0 $1))) : 1082 : 0.4101275
water  :- NP : water:q : 32 : 10.0
in  :- S/NP/(S|NP)\(NP|(S|NP))\NP : (lambda $0 e (lambda $1 <<e,t>,e> (lambda $2 <e,t> (lambda $3 e (exists $4 (and (In:t $4 ($1 $2)) (object:t $4 $0) (state:t $4 $3))))))) : 1102 : 0.0
the pot  :- NP : pot:d : 19 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -2.839586438235868
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Scale: 0.9975360858679063
Update:
{BB:object:t:state:t=-0.004289396021143313, LHT:1:In:t:e=0.004289396021143977, LHT:0:state:t:e=-0.00428939603182946, LHH:0:state:t:var=-0.00428939603182946, LHT:1:state:t:s=-0.004289396021143756, LHT:1:In:t:s=-0.004289396021143822, LHH:1:state:t:var=-0.004289396031829401, LEX:570=-0.004288737860589627, LEX:1020=0.004288737737384107}
38: =========== r:0.8421052631578947 p:0.8421052631578947 (epoch:5 file:0 0)
if there exists a cup and there exists a cup and there exists a cup and there exists a cup and there exists a cup
(and (exists $0 (object:t $0 cup:d)))
MakeLex parse time: 0.205 sec.
Adding:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 0.048352000000000006
and there exists a cup and there exists a cup and there exists a cup  :- S\S : (lambda $0 t $0) : 0.0
Lex Size: 1103
First parse time: 65.971 sec.
CORRECT:(and (exists $0 (object:t $0 cup:d)))
Using:
[LexEntries and scores:
if there exists a cup and there exists a cup and there exists a cup and there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 118 : 1.5083440897969531
]
Second parse time: 0.272 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 8.802730589337074
and there exists a cup and there exists a cup and there exists a cup  :- S\S : (lambda $0 t $0) : 999 : 1.8589219659939338
]
Scale: 0.9975261351847418
Update:
{LEX:118=-0.9974200996935968, LEX:999=0.9970869180471357, LEX:82=0.9974205746308079, LEX:155=0.0010009697510168982}
39: =========== r:0.8461538461538461 p:0.8461538461538461 (epoch:5 file:0 0)
if the mug is on the table or on the stove
(exists $0 (and (object:t $0 mug:d) (or (On:t $0 (the $1 (object:t $1 table:f))) (On:t $0 (the $1 (object:t $1 stove:f))))))
MakeLex parse time: 0.011 sec.
Adding:
or  :- S/NP\(S|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and (object:t $3 mug:d) (or ($1 $3) (On:t $3 (the $4 ($0 $4 $2))))))))) : 1.25
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1104
First parse time: 0.014 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (or (On:t $0 (the $1 (object:t $1 table:f))) (On:t $0 (the $1 (object:t $1 stove:f))))))
Using:
[LexEntries and scores:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 505 : 1.2718740859318554
mug is on  :- S|NP/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (On:t $2 ($0 $1))))) : 1041 : 0.0
the table  :- NP : table:f : 73 : 20.0
or  :- S/NP\(S|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and (object:t $3 mug:d) (or ($1 $3) (On:t $3 (the $4 ($0 $4 $2))))))))) : 1103 : 1.25
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 0.802711708747083
the stove  :- NP : stove:f : 76 : 19.002046401367956
]
Second parse time: 0.012 sec.
Best LexEntries:
[LexEntries and scores:
if the  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 505 : 1.2718740859318554
mug is on  :- S|NP/NP\(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (On:t $2 ($0 $1))))) : 1041 : 0.0
the table  :- NP : table:f : 73 : 20.0
or  :- S/NP\(S|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and (object:t $3 mug:d) (or ($1 $3) (On:t $3 (the $4 ($0 $4 $2))))))))) : 1103 : 1.25
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 0.802711708747083
the stove  :- NP : stove:f : 76 : 19.002046401367956
]
Scale: 0.9975161847000966
Update:
{LHT:0:object:t:e=-0.14306558566731437, LHH:0:object:t:var=3.0650182283479996E-4, BB:On:t:On:t=0.1430911334643352, LHT:0:On:t:e=0.14310145031050114, LHH:0:On:t:var=0.08853960456244707, LHT:1:On:t:null=0.08828606518409551, LHH:1:On:t:the=0.08828606518409551, LHT:0:object:t:null=0.14306558566731437, LHT:1:object:t:null=3.5864643186768766E-5, LHH:1:object:t:stove:f=5.600412011865806E-4, BB:On:t:object:t=-0.1430911334643352, LHH:0:object:t:stove:f=-3.065018228353606E-4, LHT:1:object:t:e=-3.5864643186831954E-5, LHH:1:object:t:var=-5.600412011865735E-4, LHT:0:On:t:null=-0.05481538512640521, LHH:0:On:t:stove:f=-2.5353937835121304E-4, LEX:851=0.02569427878469876, LEX:1013=0.017448936914952504, LEX:1017=-0.0477744371224874, LEX:1085=-0.03712696533871624, LEX:1087=0.04175818675414554, LEX:1084=-0.07815815971486995, LEX:1086=-0.005496684053796648, LEX:1103=0.05796056497656104}
40: =========== r:0.85 p:0.85 (epoch:5 file:0 0)
if the glass is empty or dry
(exists $0 (and (object:t $0 glass:d) (or (state:t $0 empty:s) (state:t $0 dry:s))))
MakeLex parse time: 0.007 sec.
Adding:
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
empty  :- S/(S|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,t> (exists $3 (and ($0 $1 $3) ($2 $3)))))) : 0.0
Lex Size: 1105
First parse time: 0.012 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (or (state:t $0 empty:s) (state:t $0 dry:s))))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.626020103633848
the glass  :- NP : glass:d : 15 : 17.00575309368708
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.42937388705444823
empty  :- S/(S|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,t> (exists $3 (and ($0 $1 $3) ($2 $3)))))) : 1104 : 0.0
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 857 : 2.0519971387566933
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.626020103633848
the glass  :- NP : glass:d : 15 : 17.00575309368708
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.42937388705444823
empty  :- S/(S|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,t> (exists $3 (and ($0 $1 $3) ($2 $3)))))) : 1104 : 0.0
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 857 : 2.0519971387566933
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9975062344139651
Update:
{LHT:0:object:t:e=-0.002891352885134818, LHH:0:object:t:var=-0.002891352885134818, LHT:1:object:t:d=9.019301807423023E-5, LHH:1:object:t:glass:d=9.019396055590067E-5, LHT:0:object:t:d=-8.352856773199975E-5, LHH:0:object:t:glass:d=-8.352856773199975E-5, LHT:1:object:t:e=-8.352652946754187E-5, LHH:1:object:t:var=-8.352652946754187E-5, BB:exists:object:t=-0.0029815468654421683, LHT:1:object:t:p=-0.0029815467512106083, LHH:1:object:t:you:p=-0.0029815467512106083, LEX:1088=3.4868614639140954E-5, LEX:123=1.2380126124139924E-4, LEX:131=0.0028533873339202727, LEX:365=-0.0029815467512106088, LEX:1014=-8.352652924287233E-5, LEX:1018=5.3568489762604495E-5, LEX:1104=-3.486870486710459E-5}
41: =========== r:0.8536585365853658 p:0.8536585365853658 (epoch:5 file:0 0)
if the refrigerator is on and the mug contains coke
(and (exists $0 (and (object:t $0 refrigerator:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coke:q))))))
MakeLex parse time: 0.017 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the refrigerator  :- NP : refrigerator:f : 0.0
on  :- NP : IsOn:s : 0.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 0.5467285714285715
the mug  :- NP : mug:d : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
coke  :- NP : coke:q : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
coke  :- NP : coke:q : 0.0
Lex Size: 1105
First parse time: 0.044 sec.
CORRECT:(and (exists $0 (and (object:t $0 refrigerator:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coke:q))))))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.4957531267349378
the refrigerator  :- NP : refrigerator:f : 75 : 20.000064119849167
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.1508233702375001
on  :- NP : IsOn:s : 57 : 9.001960761664746
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : -0.9726276722824715
the mug  :- NP : mug:d : 16 : 19.999839038370787
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.2729603408227685
coke  :- NP : coke:q : 34 : 10.0
]
Second parse time: 0.017 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.4957531267349378
the refrigerator  :- NP : refrigerator:f : 75 : 20.000064119849167
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.1508233702375001
on  :- NP : IsOn:s : 57 : 9.001960761664746
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : -0.9726276722824715
the mug  :- NP : mug:d : 16 : 19.999839038370787
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.2729603408227685
coke  :- NP : coke:q : 34 : 10.0
]
Scale: 0.9974962843263409
Update:
{BB:exists:exists=-0.1683500874871743, BB:object:t:state:t=3.1602575267141255E-5, LHT:0:object:t:e=-0.03453981102133169, LHH:0:object:t:var=-0.03453981102132017, LHT:0:state:t:e=1.2035166942452989E-5, LHH:0:state:t:var=1.2035166972686192E-5, LHT:1:state:t:s=4.4253530726364154E-4, LHH:1:state:t:IsOn:s=0.0017822982204627495, BB:has:t:object:t=4.1056739450818933E-4, LHT:1:object:t:d=-0.03389620042870286, LHT:0:has:t:e=-0.02447454111349049, LHH:0:has:t:var=-0.02447454111349049, LHT:1:has:t:e=-0.02447454111349049, LHH:1:has:t:the=-0.02447454111349049, LHT:1:state:t:e=-4.3050033505098365E-4, LHH:1:state:t:the=-4.105673895468015E-4, BB:exists:object:t=-0.006163731490015996, LHH:1:state:t:var=-1.9932945504182125E-5, BB:exists:state:t=-1.9935416480583024E-5, LHT:1:object:t:p=-0.0024257590761895442, LHH:1:object:t:you:p=-0.0024257590761895442, LHT:0:object:t:s=-0.0017822234228209919, LHH:0:object:t:IsOn:s=-0.0017822234228209919, LHH:1:object:t:bowl:d=-0.0013397629131994837, LHH:1:state:t:yellow:s=-0.0013397629131994837, LHH:1:object:t:cups:d=-0.03255631580102937, LEX:123=-3.48703300189133E-4, LEX:131=0.019892574439037573, LEX:172=-0.001339762913199484, LEX:311=-4.7041952332553414E-4, LEX:365=-0.0019553395528640097, LEX:373=-0.03208589627770383, LEX:547=0.007008720564257652, LEX:559=0.00928999129922925, LEX:518=0.009312204374104592, LEX:558=-1.709769824957787E-5, LEX:570=0.019369244228038984, LEX:977=-0.03389607871422884, LEX:1020=0.005231727810334571, LEX:858=4.1056739221268076E-4, LEX:966=-4.1055495360153865E-4, LEX:454=-0.024885108507998417, LEX:472=-4.1056739450802323E-4, LEX:502=0.025295675903022494}
Testing

File #0: 0
0: ==================(0 -- 0)
if you find any
(dummy:t)
Test parse time: 0.002 sec.
WRONG
1 parses: [(exists $0 (object:t $0 cups:d))]
[LexEntries and scores:
if you find any  :- S : (exists $0 (object:t $0 cups:d)) : 379 : -0.0013367180967327156
]
Had correct parse: false
Feats: {RN:true=1.0, LHT:0:object:t:e=1.0, LHH:0:object:t:var=1.0, LHT:1:object:t:d=1.0, LHH:1:object:t:cups:d=1.0, LEX:379=1.0}
-----------------------------
Recall : 0/1 = 0.0
Precision : 0/1 = 0.0
F1: NaN
No Parses : 0
EMPTY Recall : 0/1 = 0.0
EMPTY Precision : 0/1 = 0.0
EMPTY F1: NaN
-----------
Training, iteration 6
---------------------
DataSet: 0
---------------------
0: ===========
if there exists a mug
(exists $0 (object:t $0 mug:d))
MakeLex parse time: 0.008 sec.
Adding:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
a mug  :- NP : mug:d : 0.0
Lex Size: 1105
First parse time: 0.017 sec.
CORRECT:(exists $0 (object:t $0 mug:d))
Using:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.2933896272204544
a mug  :- NP : mug:d : 22 : 20.0
]
Second parse time: 0.009 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.2933896272204544
a mug  :- NP : mug:d : 22 : 20.0
]
Scale: 0.9974863344372181
Update:
{LHT:0:object:t:e=-0.002295944708086109, LHH:0:object:t:var=-0.002295944708086109, LHT:1:object:t:d=-0.002111433923891283, LHH:1:object:t:mug:d=1.480096011221916E-4, LHT:0:object:t:d=-1.4596252224206326E-4, LHH:0:object:t:mug:d=-1.4596252224206326E-4, BB:object:t:state:t=-8.272689916016926E-4, LHT:0:state:t:e=-8.272654170851624E-4, LHH:0:state:t:var=-8.272654170851624E-4, LHT:1:state:t:s=-8.287363723557126E-4, LHH:1:state:t:yellow:s=-8.287363723557126E-4, BB:object:t:object:t=-9.734086941005341E-4, LHH:1:object:t:bowl:d=-8.999325606819046E-4, BB:exists:object:t=-0.0014705362454693765, LHH:1:object:t:cups:d=-0.0011864776452722588, LHT:1:object:t:p=-3.2400731434557877E-4, LHH:1:object:t:you:p=-3.2400731434557877E-4, LHH:1:object:t:cup:d=-1.7303331905974304E-4, LEX:122=5.898072512371803E-4, LEX:125=3.326141772052754E-4, LEX:129=5.1369711705629735E-5, LEX:133=3.9394771043310385E-4, LEX:137=8.433285857196185E-5, LEX:141=1.463292845063479E-4, LEX:145=3.668334211596112E-4, LEX:149=1.4631591265639013E-4, LEX:153=7.957736785396105E-5, LEX:200=-3.6279724271359563E-4, LEX:220=-2.5255234534384094E-4, LEX:240=-6.024173342502557E-4, LEX:423=-5.568455862562028E-5, LEX:124=3.1130804388912184E-5, LEX:128=-9.636680958242902E-4, LEX:132=1.67399380273636E-5, LEX:136=1.403733022400935E-5, LEX:140=3.541950683185787E-4, LEX:144=2.1595618374969356E-5, LEX:148=3.513436071959756E-4, LEX:152=-5.020026829056877E-4, LEX:123=6.428542081165546E-5, LEX:127=2.9104508578715906E-5, LEX:131=2.488778467196919E-4, LEX:135=5.5417704657672654E-5, LEX:139=3.542428028835528E-4, LEX:143=7.726663265915292E-5, LEX:147=3.516041084559973E-4, LEX:151=4.046836696834124E-5, LEX:198=-1.5879930317808737E-4, LEX:208=-3.152200964419763E-5, LEX:218=-5.289376303894783E-5, LEX:238=-2.5606506971742946E-4, LEX:333=-3.113517232206647E-4, LEX:349=-8.387895407907851E-4, LEX:365=-2.5115980758142755E-4, LEX:381=-4.275421798582283E-5, LEX:389=-3.613032941437164E-5, LEX:397=-2.6274894792095388E-5, LEX:571=-4.142062677378554E-5, LEX:583=-5.0596462841299454E-5, LEX:595=-2.2837909644033568E-5, LEX:419=-2.364848240221656E-4, LEX:126=2.0344455370226218E-4, LEX:130=-2.675733205091327E-4, LEX:134=5.309133971437214E-4, LEX:138=8.848178320733302E-5, LEX:142=1.4620590796886093E-4, LEX:146=3.2681836573431045E-4, LEX:150=1.4619222003724552E-4, LEX:154=-0.0010909465224697406}
1: =========== r:1.0 p:1.0 (epoch:6 file:0 0)
if there exists a cup
(exists $0 (object:t $0 cup:d))
MakeLex parse time: 0.013 sec.
Adding:
if there exists a  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
cup  :- NP : cup:d : 0.0
Lex Size: 1106
First parse time: 0.03 sec.
CORRECT:(exists $0 (object:t $0 cup:d))
Using:
[LexEntries and scores:
if there exists a  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 1105 : 0.0
cup  :- NP : cup:d : 8 : 4.898777103994346
]
Second parse time: 0.013 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 1105 : 0.0
cup  :- NP : cup:d : 8 : 4.898777103994346
]
Scale: 0.9974763847465912
Update:
{LEX:81=1.80239140402904E-5, LHT:0:object:t:e=0.002021184169168429, LHH:0:object:t:var=0.002021184169168429, LHT:1:object:t:d=0.0018434080651432848, LHH:1:object:t:cup:d=0.0036344150792304076, LHT:0:object:t:d=-8.00789732109167E-4, LHH:0:object:t:cup:d=-8.00789732109167E-4, LHT:1:object:t:e=-9.5598267961456E-5, LHH:1:object:t:var=-9.5598267961456E-5, LHT:0:state:t:d=-8.436706517967523E-5, LHH:0:state:t:cup:d=-8.436706517967523E-5, LHT:1:state:t:e=-1.272233496911781E-4, LHH:1:state:t:var=-1.272233496911781E-4, LHT:0:has:t:e=-0.00533734866463566, LHH:0:has:t:var=-0.00533734866463566, LHT:1:has:t:e=-0.007718386531999657, LHH:1:has:t:the=-0.002148440717070393, LHT:0:has:t:d=-0.0023810378673639982, LHH:0:has:t:cup:d=-0.0023810378673639982, LHH:1:has:t:var=-0.0055699458149292705, BB:object:t:state:t=-6.152067306633192E-4, LHT:0:state:t:e=-6.559920393073143E-4, LHH:0:state:t:var=-6.559920393073143E-4, LHT:1:state:t:s=-6.131357547958113E-4, LHH:1:state:t:yellow:s=-6.131357547958113E-4, BB:exists:state:t=-4.0803341072049044E-5, BB:object:t:object:t=-0.0027869127038491577, LHH:1:object:t:bowl:d=-8.129879168715063E-4, BB:exists:object:t=-0.0012734544190061892, LHH:1:object:t:cups:d=-9.780190972153446E-4, BB:exists:exists=-8.563375747713267E-5, LHT:1:object:t:p=-5.274153601225067E-4, LHH:1:object:t:you:p=-5.274153601225067E-4, BB:has:t:object:t=-2.8784788350597474E-4, LEX:1105=0.002417408709727424, LEX:122=0.0014215020064440415, LEX:159=-9.789895058487379E-4, LEX:161=-0.0015046738175343473, LEX:1043=0.0013524678530549132, LEX:125=8.064243320735847E-4, LEX:129=1.237070503552018E-4, LEX:133=9.567712302809998E-4, LEX:137=1.995268256410682E-4, LEX:141=3.5074409980150213E-4, LEX:145=8.841214969015914E-4, LEX:149=3.5071203848734627E-4, LEX:153=1.928937707829006E-4, LEX:200=-2.2100216894602165E-4, LEX:210=-5.430841712148521E-5, LEX:220=-1.5284643760423396E-4, LEX:240=-3.653106094463134E-4, LEX:250=-3.135201203578581E-5, LEX:423=-3.0491553342056884E-4, LEX:124=7.49916657962628E-5, LEX:128=-9.247749402851647E-4, LEX:132=3.9144898070359187E-4, LEX:136=1.0744982958033624E-4, LEX:140=8.476169601182995E-4, LEX:144=1.249820664810831E-4, LEX:148=8.411477591027134E-4, LEX:152=-2.353503022402703E-4, LEX:1089=-0.006579142662344211, LEX:865=-1.1847709536313432E-5, LEX:866=-1.1847722552513805E-5, LEX:20=0.005176265680989179, LEX:469=-0.0032074951376975104, LEX:481=-1.60049721028068E-5, LEX:493=-1.5986867441529104E-5, LEX:123=4.7528626136622527E-4, LEX:127=7.00383029358659E-5, LEX:131=-0.0014091430061863954, LEX:135=2.0217327168348385E-5, LEX:139=8.494770666434394E-4, LEX:143=1.8546288142022048E-4, LEX:147=8.431025031033146E-4, LEX:151=-0.002938863553420955, LEX:198=-1.376368593918539E-4, LEX:208=-1.7236582424516188E-4, LEX:218=-3.199578581403975E-5, LEX:238=-2.2096855593524336E-4, LEX:248=-3.826798088057335E-5, LEX:333=-2.7471632014613626E-4, LEX:341=-1.9800046984647482E-5, LEX:349=-5.046751254815946E-4, LEX:365=-4.5279732382784785E-4, LEX:381=-3.783378231519865E-5, LEX:389=-1.9750711160618987E-4, LEX:397=-1.5863667013389055E-5, LEX:553=-1.3205142856237534E-5, LEX:571=-2.565352607569053E-5, LEX:583=-3.09834637561771E-5, LEX:595=-2.026432011962948E-5, LEX:419=-2.4714283733052506E-5, LEX:859=3.88710921179319E-5, LEX:1092=-5.9606075878494716E-5, LEX:1096=-5.9292404758470915E-5, LEX:126=5.34575391139851E-4, LEX:130=-4.2049554616947364E-4, LEX:134=0.0013221204601713372, LEX:138=2.441388731393931E-4, LEX:142=3.456279309573319E-4, LEX:146=7.836842118780785E-4, LEX:150=3.4558659675353943E-4, LEX:154=-4.16937250655977E-4, LEX:1003=-1.6361519890948568E-5, LEX:1004=-1.6361547581904392E-5, LEX:1098=-5.599068444869767E-5, LEX:431=-0.0018369513592676762, LEX:443=-3.0403602992819825E-4, LEX:467=-0.0023624506772317593, LEX:479=-1.8245598021083946E-4, LEX:491=-0.0012186853858940118, LEX:1001=2.1104901192559307E-4, LEX:8=-0.0019473492899134408}
2: =========== r:1.0 p:1.0 (epoch:6 file:0 0)
if there exists a cup and there exists a cup
(and (exists $0 (object:t $0 cup:d)))
MakeLex parse time: 0.063 sec.
Adding:
Lex Size: 1106
First parse time: 0.801 sec.
CORRECT:(and (exists $0 (object:t $0 cup:d)))
Using:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 9.800151163967882
]
Second parse time: 0.049 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 9.800151163967882
]
Scale: 0.9974664352544537
Update:
{LEX:82=0.07234612968910542, LHT:0:object:t:e=-0.07038429301280016, LHH:0:object:t:var=-0.07037563956341321, LHT:1:object:t:d=-0.07014055442112166, LHH:1:object:t:cup:d=-0.06592005154130798, BB:object:t:state:t=-0.0018001248136623224, LHT:1:object:t:e=-1.812492152550425E-4, LHH:1:object:t:the=-1.3187573390634622E-4, LHT:1:state:t:e=-3.867687894217792E-4, LHH:1:state:t:var=-7.703970860684207E-4, BB:has:t:state:t=-0.002921525772114588, LHT:0:has:t:d=-2.291626883217619E-5, LHH:0:has:t:cup:d=-2.291626883217619E-5, LHT:1:has:t:e=-0.07196438309421599, LHH:1:has:t:the=-0.07191724912952642, LHH:1:object:t:var=-1.242075702085339E-4, LHT:0:state:t:e=-0.003487408645515643, LHH:0:state:t:var=-0.0034872580492570633, LHT:0:has:t:e=-0.0719414668253838, LHH:0:has:t:var=-0.0719414661204452, LHT:1:state:t:s=-0.0031007276389305237, LHH:1:state:t:the=-3.0747151835005496E-4, LHH:1:has:t:var=-4.7133964689547094E-5, BB:exists:object:t=-3.264063726653215E-5, LHH:1:state:t:yellow:s=-0.0024096278239338262, LHH:1:object:t:bowl:d=-0.00421978934918565, BB:exists:exists=-1.3163476583328837E-5, BB:object:t:object:t=-1.2695081901731116E-4, BB:has:t:object:t=-0.07018201459108256, BB:exists:has:t=-1.7567341843855233E-4, LHH:0:object:t:the=-1.1726286718629532E-5, LHT:1:object:t:s=-7.483408885983771E-5, LEX:161=-0.004066217999813203, LEX:163=-0.018468152627704792, LEX:125=-1.1062243036054125E-5, LEX:129=-7.870509657272047E-5, LEX:133=-1.2363165399290518E-5, LEX:141=-2.0255964810735992E-5, LEX:149=-4.0347230654681924E-5, LEX:190=-4.44923056535057E-4, LEX:210=-0.003773528184851618, LEX:250=-0.001963054311500848, LEX:423=-0.04298068281372496, LEX:128=-0.0012701574643784357, LEX:136=-0.04513406789757287, LEX:144=-0.02044005789814462, LEX:152=-0.003948559578898746, LEX:1090=-2.644800121599157E-4, LEX:1094=-1.1818384945178971E-4, LEX:865=-7.367454289728193E-5, LEX:866=-7.343793484982697E-5, LEX:20=-0.07005352630969658, LEX:457=-0.0015740666788223194, LEX:469=-3.846708860232381E-4, LEX:135=-4.4690678971871836E-5, LEX:139=-5.957425099608468E-5, LEX:143=-5.002724171551251E-5, LEX:151=-2.5476551769582425E-5, LEX:577=-2.8824943109545564E-4, LEX:419=-8.539165521602936E-4, LEX:1092=-3.62054951680016E-4, LEX:1096=-4.2486350595041366E-4, LEX:134=-1.2692438856941652E-5, LEX:154=-8.641609459717498E-4, LEX:424=-0.049337948565606506, LEX:1003=-1.1660968597987324E-4, LEX:1004=-1.176548382481473E-4, LEX:1098=-3.7001566059641444E-4, LEX:431=-3.0016108900812398E-5, LEX:455=-0.06994969804742482, LEX:467=-2.046398639552354E-5, LEX:479=-8.010894543917404E-4, LEX:491=-1.1273890653587788E-4, LEX:1001=-0.00161212399500706, LEX:8=-0.0027287815648992715, LEX:869=-0.06994969804742482, LEX:887=-0.0013033733852448966, LEX:1023=-0.027705143749380323, LEX:1024=-0.01902018456969799, LEX:1025=-0.018093852178378434, LEX:1026=-0.006210500116283001}
3: =========== r:1.0 p:1.0 (epoch:6 file:0 0)
if there exists an empty kettle
(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s)))
MakeLex parse time: 0.005 sec.
Adding:
if  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 0.0
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
Lex Size: 1107
First parse time: 0.009 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 1106 : 0.0
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1092 : 0.008428531534713807
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1098 : 0.399727997114285
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1010 : 0.01892019715405759
empty  :- NP : empty:s : 53 : 10.0
kettle  :- NP : kettle:d : 11 : 10.000012500088278
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 1106 : 0.0
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1092 : 0.008428531534713807
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1098 : 0.399727997114285
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1010 : 0.01892019715405759
empty  :- NP : empty:s : 53 : 10.0
kettle  :- NP : kettle:d : 11 : 10.000012500088278
]
Scale: 0.9974564859607999
Update:
{BB:object:t:state:t=0.0010204207179212493, LHT:0:object:t:e=-0.001701449599427634, LHH:0:object:t:var=-0.001701449599427634, LHT:0:state:t:e=0.0010314913790968898, LHH:0:state:t:var=0.0010314913790968898, LHT:1:state:t:s=0.001031521099008026, LHH:1:state:t:empty:s=0.001031521099008026, LHT:0:state:t:s=-1.1482821884543764E-5, LHH:0:state:t:empty:s=-1.1482821884543764E-5, LHT:1:state:t:e=-1.1821671931473956E-5, LHH:1:state:t:var=-1.1821671931473956E-5, BB:exists:object:t=-6.866113517850778E-4, LHT:1:object:t:p=-6.866113517850778E-4, LHH:1:object:t:you:p=-6.866113517850778E-4, BB:object:t:object:t=-0.0010200379322621792, LHT:1:object:t:s=-0.0010163601215090665, LHH:1:object:t:empty:s=-0.0010163601215090665, LEX:421=7.316857009397843E-5, LEX:1045=6.437935060676025E-5, LEX:1044=7.425512246105997E-5, LEX:141=-2.2341944050249414E-4, LEX:149=-3.905293425224398E-4, LEX:861=1.2325571094322214E-4, LEX:863=2.1871616693189142E-4, LEX:136=-4.1536455373618286E-5, LEX:144=-4.11395502822768E-5, LEX:1090=-2.310525519575518E-4, LEX:1094=8.035201807823266E-5, LEX:862=-2.7224887313682486E-5, LEX:864=-2.659022157521374E-5, LEX:1093=8.21883203912618E-5, LEX:1097=8.182340901776588E-5, LEX:123=8.290500287875489E-5, LEX:131=3.877932960846993E-4, LEX:139=8.883475577887503E-5, LEX:365=-6.866113517850777E-4, LEX:1006=-4.158431288651521E-5, LEX:1008=-5.08750596849008E-5, LEX:1106=3.5530610957183815E-4, LEX:1092=2.3009649697724625E-4, LEX:1096=7.330828918193932E-5, LEX:1003=-2.1593800792769675E-5, LEX:1004=-2.1091673688902036E-5, LEX:1098=-3.608326502903666E-5, LEX:1010=-4.202994976493692E-4, LEX:1091=8.143171617110206E-5, LEX:1095=8.124443539857712E-5}
4: =========== r:1.0 p:1.0 (epoch:6 file:0 0)
if there exists a green glass
(exists $0 (and (object:t $0 glass:d) (state:t $0 green:s)))
MakeLex parse time: 0.008 sec.
Adding:
if  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 0.0
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 0.40293333333333337
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
green  :- NP : green:s : 0.0
glass  :- NP : glass:d : 0.0
Lex Size: 1107
First parse time: 0.015 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (state:t $0 green:s)))
Using:
[LexEntries and scores:
if  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 1106 : 3.5530610957183815E-4
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1092 : 0.008658628031691054
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1098 : 0.399691913849256
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.8030672454076467
green  :- NP : green:s : 51 : 10.0
glass  :- NP : glass:d : 9 : 9.999874891901245
]
Second parse time: 0.009 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 1106 : 3.5530610957183815E-4
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1092 : 0.008658628031691054
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1098 : 0.399691913849256
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.8030672454076467
green  :- NP : green:s : 51 : 10.0
glass  :- NP : glass:d : 9 : 9.999874891901245
]
Scale: 0.9974465368656241
Update:
{BB:object:t:state:t=0.012080087967720804, LHT:0:object:t:e=-0.0014125264337180108, LHH:0:object:t:var=-0.0014125264337180108, LHT:1:object:t:d=6.404238034571512E-4, LHH:1:object:t:glass:d=6.404238049835749E-4, LHT:0:state:t:e=0.0011321108099961068, LHH:0:state:t:var=0.0011321108099961068, LHT:1:state:t:s=0.0011321601366185074, LHH:1:state:t:green:s=0.0011321601366185074, LHT:0:object:t:d=-6.999851293407324E-5, LHH:0:object:t:glass:d=-6.999851293407324E-5, LHT:1:object:t:s=-0.0011274535942037331, LHH:1:object:t:green:s=-0.0011274535942037331, BB:has:t:state:t=-0.010950486748098566, LHT:0:has:t:e=-0.01041892570454178, LHH:0:has:t:var=-0.01041892570454178, LHT:1:has:t:e=-0.010989864971494123, LHH:1:has:t:the=-0.010426184895656086, LHT:0:has:t:d=-5.702922664524397E-4, LHH:0:has:t:glass:d=-5.702922664524397E-4, LHT:1:object:t:e=-7.804458737628396E-5, LHH:1:object:t:var=-7.804458737628396E-5, LHH:1:has:t:var=-5.636800758380367E-4, BB:object:t:object:t=-0.0010894258179886668, LHT:1:object:t:p=-9.188390218001351E-4, LHH:1:object:t:you:p=-9.188390218001351E-4, BB:exists:object:t=-9.188387625264204E-4, BB:has:t:object:t=-3.937822339555833E-5, LEX:422=5.010629021264248E-4, LEX:1045=7.679209834551035E-4, LEX:141=-1.763955408747896E-4, LEX:149=-3.505385352837523E-4, LEX:861=0.0011489021507167926, LEX:863=0.002278957334567086, LEX:136=-4.3107030552027954E-5, LEX:144=-4.268634857993968E-5, LEX:1090=-3.400310307890789E-4, LEX:1094=-1.6590409089365692E-4, LEX:865=0.0014529161060729964, LEX:866=0.001453599957572785, LEX:123=-2.2301851414690174E-4, LEX:131=-0.00599104299833762, LEX:139=-5.057539330704914E-4, LEX:365=-9.188390218001351E-4, LEX:1006=-4.183684314546605E-5, LEX:1008=-5.1591454326419626E-5, LEX:1106=0.0035629989822601685, LEX:1092=6.932063158676271E-4, LEX:1096=-0.004260504076035728, LEX:1003=-9.66409801405658E-4, LEX:1004=-9.520197643516765E-4, LEX:1098=-0.001656926231501609, LEX:431=-0.010394787696232406, LEX:443=-3.139719942367867E-5, LEX:467=-5.636800758380365E-4, LEX:479=0.007790511365087033, LEX:491=-2.099613357443269E-4}
5: =========== r:1.0 p:1.0 (epoch:6 file:0 0)
if there exists a cup that contains syrup
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
MakeLex parse time: 0.068 sec.
Adding:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 0.40293333333333337
syrup  :- NP : syrup:q : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
syrup  :- NP : syrup:q : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
Lex Size: 1107
First parse time: 0.115 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
Using:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 2.2234761784793373
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.5154257883335565
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 1.770333621116104
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 1.3685156221561041
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 2.726940142914775
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.298256016725791
syrup  :- NP : syrup:q : 33 : 10.0
]
Second parse time: 0.069 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 2.2234761784793373
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.5154257883335565
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 1.770333621116104
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 1.3685156221561041
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 2.726940142914775
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.298256016725791
syrup  :- NP : syrup:q : 33 : 10.0
]
Scale: 0.9974365879689199
Update:
{BB:has:t:object:t=0.04857515984189022, LHT:0:object:t:e=0.051180254839997955, LHH:0:object:t:var=0.05118098759560983, LHT:1:object:t:d=0.05294041853240899, LHH:1:object:t:cup:d=0.11756874064566925, LHT:0:has:t:e=-0.0026142224027363914, LHH:0:has:t:var=-0.0026072539244143427, LHT:1:has:t:e=-0.0021758073414265408, LHH:1:has:t:the=-0.002194430021316015, LHT:1:object:t:q=8.647665148763937E-4, LHH:1:object:t:syrup:q=8.647665148763937E-4, LHT:1:object:t:e=-0.002658048099304253, LHH:1:object:t:the=-4.786299043291636E-5, LHH:1:object:t:var=-0.0026101851088713365, LHT:0:state:t:e=-0.0493912545282987, LHH:0:state:t:var=-0.04939118097870877, LHT:1:state:t:e=-0.0032905841191069743, LHH:1:state:t:var=-0.003290324216323761, LHH:1:has:t:var=-7.542659766416449E-5, LHT:0:object:t:q=-7.354586253134458E-5, LHH:0:object:t:syrup:q=-7.354586253134458E-5, LHT:0:has:t:q=-2.2299854174601206E-4, LHH:0:has:t:syrup:q=-2.2299854174601206E-4, LHT:1:has:t:q=-6.614144245395475E-4, LHH:1:has:t:syrup:q=-5.673651469861489E-4, BB:object:t:state:t=-0.025221240309170456, BB:has:t:state:t=-0.05759487084927145, LHT:1:state:t:s=-0.04610152779095379, LHH:1:state:t:yellow:s=-0.04610152779095379, BB:object:t:object:t=-0.00783107405335471, LHH:1:object:t:bowl:d=-0.06462806551690396, BB:exists:object:t=-8.809467840934021E-5, BB:exists:has:t=-0.005613606599821408, LHT:1:object:t:p=-4.042850874237254E-5, LHH:1:object:t:you:p=-4.042850874237254E-5, LEX:1105=-1.6104621094716084E-5, LEX:160=-6.0441245928316665E-5, LEX:161=0.014838999540357129, LEX:163=0.03248599435855077, LEX:1043=-1.473126253161474E-5, LEX:429=-0.004446635215822281, LEX:435=-6.344629681437397E-5, LEX:441=-0.002188421049217201, LEX:447=-6.728282969128415E-5, LEX:453=-0.002220897270676975, LEX:471=-3.012241289292575E-4, LEX:477=-1.0178356161592677E-5, LEX:483=-5.713288785481932E-4, LEX:489=1.3480594891269995E-5, LEX:495=-5.773403866949244E-4, LEX:501=1.2933909653154166E-5, LEX:426=-1.3168604493326718E-4, LEX:432=-9.731073070234831E-4, LEX:438=-1.245837949673919E-4, LEX:444=-0.0010836662661299606, LEX:450=-1.5291608557461197E-4, LEX:456=2.3792199202874992E-5, LEX:468=-1.0291296766905946E-5, LEX:474=-9.45993992525679E-4, LEX:486=-9.158476461651678E-4, LEX:492=-1.3156406076779059E-5, LEX:498=-0.001600862303277797, LEX:129=-0.0023420729483967745, LEX:190=-0.01222542959711343, LEX:210=-0.05238032850282032, LEX:220=-3.907812773392543E-5, LEX:250=-0.033836800842647424, LEX:260=-2.2042913614065545E-5, LEX:423=0.07022197970455994, LEX:1089=-0.013421122873458152, LEX:427=-0.001818761496466258, LEX:433=-6.360779785623522E-5, LEX:439=-0.001313305223436349, LEX:445=-6.739688477921356E-5, LEX:451=-6.815346001523648E-4, LEX:457=5.442490518782667E-4, LEX:469=-2.863455458483111E-4, LEX:481=-5.726263544564716E-4, LEX:487=-2.149117232497241E-5, LEX:493=-5.790363510812421E-4, LEX:499=-2.117190251241468E-5, LEX:867=1.8097758031877524E-4, LEX:428=-1.3014753687471653E-4, LEX:434=-8.079901744588997E-4, LEX:440=-1.2313740642472837E-4, LEX:446=-7.037510847370718E-4, LEX:452=-1.5130278087866736E-4, LEX:458=2.1005096132432587E-4, LEX:470=1.5373187509154268E-5, LEX:476=-9.459145093778425E-4, LEX:482=-3.0798733466855894E-5, LEX:488=-9.157588060922526E-4, LEX:494=-2.6398969640191304E-5, LEX:500=-0.001599985730978595, LEX:131=-0.013393919056594683, LEX:135=-0.0015348804703613507, LEX:143=-0.0017180266269834375, LEX:151=-1.1227268838386165E-5, LEX:365=-4.039379946284835E-5, LEX:1092=-0.0016422499854827257, LEX:1096=-0.0016261780005949263, LEX:424=-0.03388159940984489, LEX:425=-0.0018207400550840868, LEX:431=-3.872907856281051E-5, LEX:437=-0.0013144836229908982, LEX:443=-6.666793018373949E-5, LEX:449=-6.840463746912408E-4, LEX:455=0.021331334369677647, LEX:467=-3.95824761829548E-5, LEX:479=-0.0013509026680458265, LEX:485=-2.1515220853855054E-5, LEX:491=-5.765954273723873E-4, LEX:497=-2.112227962581146E-5, LEX:869=0.02110034885427528, LEX:868=0.021414948413830296, LEX:430=-1.238400510196346E-4, LEX:436=-8.150990712890279E-4, LEX:442=-0.014066848524004893, LEX:448=-7.058480728616779E-4, LEX:454=-0.008457874683694458, LEX:478=-9.409475279873252E-4, LEX:484=-3.1967259783144846E-5, LEX:490=0.016414808251108307, LEX:496=-2.7329266665613763E-5, LEX:502=0.01993091114241321, LEX:159=3.81450745813455E-5}
6: =========== r:1.0 p:1.0 (epoch:6 file:0 0)
if there exists a cup that contains coke
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 coke:q)))))
MakeLex parse time: 0.073 sec.
Adding:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 0.40293333333333337
coke  :- NP : coke:q : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
coke  :- NP : coke:q : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
Lex Size: 1107
First parse time: 0.114 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 coke:q)))))
Using:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 2.293698158183897
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.48154418892371154
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 1.7916649554857818
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 1.3896159710103795
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 2.7483550913286052
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.3181869278682044
coke  :- NP : coke:q : 34 : 10.0
]
Second parse time: 0.082 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 2.293698158183897
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.48154418892371154
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 1.7916649554857818
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 1.3896159710103795
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 2.7483550913286052
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.3181869278682044
coke  :- NP : coke:q : 34 : 10.0
]
Scale: 0.9974266392706816
Update:
{BB:has:t:object:t=0.03290077295027558, LHT:0:object:t:e=0.03225111309779092, LHH:0:object:t:var=0.032251762417976844, LHT:1:object:t:d=0.033572182812561906, LHH:1:object:t:cup:d=0.08199002426826794, LHT:0:has:t:e=-0.006033635254156931, LHH:0:has:t:var=-0.006028805637202277, LHT:1:has:t:e=-0.005563119730555341, LHH:1:has:t:the=-0.0055756699581224175, LHT:1:object:t:q=7.971480242712718E-4, LHH:1:object:t:coke:q=7.971480242712718E-4, LHT:1:object:t:e=-0.002156907116365708, LHH:1:object:t:the=-3.833432206499183E-5, LHH:1:object:t:var=-0.0021185727943007155, LHT:0:state:t:e=-0.030321617966161108, LHH:0:state:t:var=-0.03032156941302056, LHT:1:state:t:e=-0.002187834722981514, LHH:1:state:t:var=-0.002187655486191832, LHH:1:has:t:var=-5.12313684704883E-5, LHT:0:object:t:q=-7.05559130041699E-5, LHH:0:object:t:coke:q=-7.05559130041699E-5, LHT:0:has:t:q=-1.5956936162734133E-4, LHH:0:has:t:coke:q=-1.5956936162734133E-4, LHT:1:has:t:q=-6.300855972556209E-4, LHH:1:has:t:coke:q=-5.663040012180778E-4, BB:object:t:state:t=-0.016639155017396986, BB:has:t:state:t=-0.03580504308185287, LHT:1:state:t:s=-0.028134501991599947, LHH:1:state:t:yellow:s=-0.028134501991599947, BB:object:t:object:t=-0.007400243851240748, LHH:1:object:t:bowl:d=-0.04841763581744236, BB:exists:object:t=-6.251303038748997E-5, BB:exists:has:t=-0.004084360562375402, LHT:1:object:t:p=-3.186695822061762E-5, LHH:1:object:t:you:p=-3.186695822061762E-5, LEX:1105=-1.2722896012687683E-5, LEX:160=-4.168924991576072E-5, LEX:161=0.010406339678660724, LEX:163=0.02257608254310615, LEX:1043=-1.1496070292765698E-5, LEX:429=-0.0031772608534384452, LEX:435=-4.580324518640236E-5, LEX:441=-0.001845937163465744, LEX:447=-4.843256492159984E-5, LEX:453=-0.0020954929186229837, LEX:471=-2.8996660143432406E-4, LEX:483=-4.471223093240507E-4, LEX:489=1.0020374838240959E-5, LEX:495=-4.476643380990091E-4, LEX:501=1.113082835575793E-5, LEX:426=-9.30474294715343E-5, LEX:432=-7.936102318586777E-4, LEX:438=-8.823439949741373E-5, LEX:444=-8.072711453629303E-4, LEX:450=-1.1289359826541307E-4, LEX:456=1.9742452769217882E-5, LEX:474=-7.040918406584267E-4, LEX:486=-6.860787101594556E-4, LEX:492=-1.2686718176705412E-5, LEX:498=-0.0013188324302299773, LEX:129=-0.0019077176813763435, LEX:190=-0.008093867303599966, LEX:210=-0.04030749424822794, LEX:220=-2.63573018429446E-5, LEX:250=-0.02001415453801716, LEX:260=-1.6079874052034552E-5, LEX:423=0.04898909217901854, LEX:1089=-0.009427361341557939, LEX:427=-0.001306901681688966, LEX:433=-4.590699216815078E-5, LEX:439=-0.001010855016874341, LEX:445=-4.851032641139942E-5, LEX:451=-6.313473035110988E-4, LEX:457=4.1390614757628265E-4, LEX:469=-2.7582844722806517E-4, LEX:481=-4.480651748117434E-4, LEX:487=-2.059033128336818E-5, LEX:493=-4.4905756293298304E-4, LEX:499=-1.9911758049745903E-5, LEX:867=1.3744739435046698E-4, LEX:428=-9.162053009045163E-5, LEX:434=-6.397216536086393E-4, LEX:440=-8.689419817885752E-5, LEX:446=-5.764161729692382E-4, LEX:452=-1.1165022741931692E-4, LEX:458=1.778199336452772E-4, LEX:470=1.2406120611242474E-5, LEX:476=-7.04033049857361E-4, LEX:482=-2.338500549947505E-5, LEX:488=-6.860140716510481E-4, LEX:494=-2.78550724924483E-5, LEX:500=-0.0013189661284347693, LEX:131=-0.009405790269953633, LEX:135=-0.0010193787658283188, LEX:143=-0.0011408595501914498, LEX:365=-3.184169961561391E-5, LEX:1092=-0.0010912015310187665, LEX:1096=-0.001080464531164913, LEX:424=-0.02354124299937321, LEX:425=-0.001308969469655572, LEX:431=-2.7952611640662027E-5, LEX:437=-0.001011942199234007, LEX:443=-4.8047624903132234E-5, LEX:449=-6.324123848218777E-4, LEX:455=0.016909349554582346, LEX:467=-3.8213369067726834E-5, LEX:479=-0.0010528258886728314, LEX:485=-2.061153627305219E-5, LEX:491=-4.487236580658886E-4, LEX:497=-1.9670784419700242E-5, LEX:869=0.016730406977377595, LEX:868=0.016949905163945744, LEX:430=-8.794626124897871E-5, LEX:436=-6.461385429606086E-4, LEX:442=-0.01355323704385572, LEX:448=-5.797766428173335E-4, LEX:454=-0.008194550793907488, LEX:478=-7.148388783941058E-4, LEX:484=-2.417488605548834E-5, LEX:490=0.014708018710857909, LEX:496=-2.889645661165594E-5, LEX:502=0.0178226181728549, LEX:159=3.398063583308179E-5}
7: =========== r:1.0 p:1.0 (epoch:6 file:0 0)
if there is a red glass
(exists $0 (and (object:t $0 glass:d) (state:t $0 red:s)))
MakeLex parse time: 0.008 sec.
Adding:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 0.0
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
red  :- NP : red:s : 0.0
glass  :- NP : glass:d : 0.0
Lex Size: 1107
First parse time: 0.013 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (state:t $0 red:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.19086314406209723
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.2672072741163988
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.8084540282160151
red  :- NP : red:s : 47 : 10.0
glass  :- NP : glass:d : 9 : 9.999874891901245
]
Second parse time: 0.007 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.19086314406209723
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.2672072741163988
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.8084540282160151
red  :- NP : red:s : 47 : 10.0
glass  :- NP : glass:d : 9 : 9.999874891901245
]
Scale: 0.9974166907709032
Update:
{BB:object:t:state:t=0.023570288661956058, LHT:0:object:t:e=7.100793415658775E-4, LHH:0:object:t:var=7.100793415658775E-4, LHT:1:object:t:d=0.001520842127351264, LHH:1:object:t:glass:d=0.0015209500038660924, LHT:0:state:t:e=8.634553052020285E-4, LHH:0:state:t:var=8.634553052020285E-4, LHT:1:state:t:s=3.8886645008524005E-4, LHH:1:state:t:red:s=3.8886645008524005E-4, LHT:0:object:t:d=-6.122061612624586E-5, LHH:0:object:t:glass:d=-6.122061612624586E-5, LHT:0:state:t:d=-4.7471775795022194E-4, LHH:0:state:t:glass:d=-4.7471775795022194E-4, LHT:0:state:t:s=-1.1540465148251408E-5, LHH:0:state:t:red:s=-1.1540465148251408E-5, LHT:1:state:t:e=-1.166936798196463E-5, LHH:1:state:t:var=-1.166936798196463E-5, BB:object:t:object:t=-3.773262228415961E-4, LHT:1:object:t:p=-4.283042961051165E-4, LHH:1:object:t:you:p=-4.283042961051165E-4, BB:exists:object:t=-4.280786062783125E-4, LHT:1:object:t:e=-6.913782898747884E-5, LHH:1:object:t:var=-6.913782898747884E-5, LHT:1:object:t:s=-3.759336632251505E-4, LHH:1:object:t:red:s=-3.759336632251505E-4, BB:has:t:state:t=-0.022718439844322477, LHT:0:has:t:e=-0.021733459588231432, LHH:0:has:t:var=-0.021733459588231432, LHT:1:has:t:e=-0.022718439844321647, LHH:1:has:t:the=-0.021740050958197324, LHT:0:has:t:d=-9.849802560902108E-4, LHH:0:has:t:glass:d=-9.849802560902108E-4, LHH:1:has:t:var=-9.783888861243238E-4, LEX:503=0.0017623541322674787, LEX:1005=-0.002823846215623148, LEX:125=-3.98966253483063E-4, LEX:141=-1.8870834412387552E-4, LEX:149=-1.8861764081307014E-4, LEX:861=0.001321213670700675, LEX:863=0.0013249684729501393, LEX:1007=-0.0033517134266689464, LEX:1009=-0.0031823248873150438, LEX:870=0.004059876448878682, LEX:871=0.00406189244825701, LEX:123=6.243723268050858E-4, LEX:131=0.0028391530629886647, LEX:365=-4.2830429610511657E-4, LEX:1006=-0.0033293824745884324, LEX:1008=-0.0032561291869181615, LEX:1106=0.0027419711905844408, LEX:419=-1.710937025642748E-4, LEX:1092=0.0029627860208079147, LEX:1096=0.002933944701161046, LEX:600=-5.699678014840599E-4, LEX:1014=4.461655035576083E-5, LEX:431=-0.021733459588231432, LEX:467=-9.78388886124324E-4, LEX:479=0.01332560954871176, LEX:491=-6.042746631353815E-5, LEX:1001=-4.309257311059972E-4}
8: =========== r:1.0 p:1.0 (epoch:6 file:0 0)
if there is a yellow bowl
(exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s)))
MakeLex parse time: 0.018 sec.
Adding:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 0.0
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
yellow  :- NP : yellow:s : 0.0
bowl  :- NP : bowl:d : 0.0
Lex Size: 1107
First parse time: 0.045 sec.
CORRECT:(exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.18753376158750878
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.2638555606897298
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.8217796377647268
yellow  :- NP : yellow:s : 50 : 10.056889477733613
bowl  :- NP : bowl:d : 227 : 1.5899448913764105
]
Second parse time: 0.017 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.18753376158750878
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.2638555606897298
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.8217796377647268
yellow  :- NP : yellow:s : 50 : 10.056889477733613
bowl  :- NP : bowl:d : 227 : 1.5899448913764105
]
Scale: 0.9974067424695792
Update:
{BB:object:t:state:t=0.04821248829686138, LHT:0:object:t:e=0.019506988992419164, LHH:0:object:t:var=0.019506988992419164, LHT:1:object:t:d=0.03076837769362493, LHH:1:object:t:bowl:d=0.031065820471882794, LHT:0:state:t:e=0.00690521338559021, LHH:0:state:t:var=0.00690521338559021, LHT:1:state:t:s=0.005906787582323493, LHH:1:state:t:yellow:s=0.005906787582323493, LHT:1:object:t:e=-8.325598839566014E-4, LHH:1:object:t:var=-8.325598839566014E-4, BB:exists:state:t=-5.018763245184655E-5, BB:exists:object:t=-5.325489315803304E-4, LHT:1:state:t:e=-5.050479429844746E-4, LHH:1:state:t:var=-5.050479429844746E-4, LHH:1:object:t:cup:d=-2.171889194548135E-4, LHT:0:object:t:d=-3.6196754485591574E-5, LHH:0:object:t:bowl:d=-3.6196754485591574E-5, BB:object:t:object:t=-0.0045668554911591774, LHT:0:object:t:s=-1.2781533137332712E-4, LHH:0:object:t:yellow:s=-1.2781533137332712E-4, LHT:1:object:t:f=-2.6608944585044392E-5, LHH:1:object:t:tv:f=-2.6608944585044392E-5, LHT:0:state:t:d=-2.956573232458032E-4, LHH:0:state:t:bowl:d=-2.956573232458032E-4, LHT:0:state:t:s=-0.001207793426543754, LHH:0:state:t:yellow:s=-0.001207793426543754, LHT:1:object:t:s=-0.010142622027932173, LHH:1:object:t:yellow:s=-0.010142622027932173, BB:state:t:state:t=-1.2063650858314542E-4, LHT:1:object:t:p=-4.2360993058988247E-4, LHH:1:object:t:you:p=-4.2360993058988247E-4, LHH:1:object:t:cups:d=-8.025385880298007E-5, BB:exists:exists=-1.7363064100196352E-5, LHT:0:has:t:e=-0.02078495092340882, LHH:0:has:t:var=-0.02078495092340882, LHT:1:has:t:e=-0.026256037661357805, LHH:1:has:t:the=-0.018201518391252034, BB:has:t:state:t=-0.02623933992439969, LHH:1:has:t:var=-0.00805451927010577, LHT:0:has:t:d=-0.0029434688849634873, LHH:0:has:t:bowl:d=-0.0029434688849634873, LHT:0:has:t:s=-0.0025276178529854963, LHH:0:has:t:yellow:s=-0.0025276178529854963, LEX:186=-5.098926534751574E-5, LEX:216=-3.215349324707402E-5, LEX:256=-1.3034556739955872E-5, LEX:173=-1.4473125176525516E-5, LEX:189=-7.609082189421451E-5, LEX:199=-4.009390947709674E-5, LEX:239=-1.625507469551048E-5, LEX:168=0.0010480680038245484, LEX:184=-5.005149484904729E-5, LEX:214=-3.728394656963199E-5, LEX:224=-8.420236247243181E-5, LEX:254=-1.5114692822637601E-5, LEX:264=3.077886058977377E-4, LEX:503=0.0035016699369533797, LEX:191=-4.013404045293751E-5, LEX:201=-4.163820924356997E-5, LEX:241=-1.6882021578291358E-5, LEX:261=-2.7242972910992954E-5, LEX:182=-1.641518451204549E-4, LEX:212=-3.7451204497611686E-5, LEX:252=-1.5182512109839572E-5, LEX:1005=7.77443596129178E-5, LEX:193=-9.04209871462775E-5, LEX:203=-3.668242726755306E-5, LEX:223=-1.3461309194024844E-4, LEX:243=-1.4870795622877866E-5, LEX:263=-1.9133605684145102E-4, LEX:125=-0.002856032242720868, LEX:129=-2.8952323270951007E-5, LEX:133=-0.0019912625785297507, LEX:137=-5.64147082940502E-4, LEX:141=-0.0023175702157325765, LEX:145=-0.0011459832597694067, LEX:149=-0.0023164588088709554, LEX:153=-0.0011874880239064738, LEX:200=-1.3528302426475904E-5, LEX:423=-1.2801406840410004E-4, LEX:861=0.00201351101107117, LEX:863=0.0020192841483591037, LEX:1007=-7.795297283110217E-4, LEX:1009=-8.687804082701422E-4, LEX:870=0.006305115692435471, LEX:871=0.006308167180789229, LEX:195=-5.3068988145247994E-5, LEX:205=-1.1834836577564932E-4, LEX:245=-4.901717346911644E-5, LEX:123=9.946808734811068E-4, LEX:131=0.0018217643973362978, LEX:135=-9.424388795213073E-4, LEX:143=-0.0010867729120561727, LEX:151=-3.146641220362525E-4, LEX:208=-2.9394957678082043E-5, LEX:365=-4.179388236497609E-4, LEX:373=-2.940037702787202E-5, LEX:389=-3.786601313787486E-5, LEX:1006=-1.765988526995498E-5, LEX:1008=-1.2851721734301483E-5, LEX:1106=0.004197068240816972, LEX:419=-8.081693963388854E-4, LEX:859=-2.9264696799837577E-4, LEX:1092=0.0035229037544895095, LEX:1096=0.003465515373121587, LEX:518=-4.970450103070472E-4, LEX:532=-0.0029145492039927934, LEX:542=-0.002905881495584902, LEX:546=-2.7023261210225838E-5, LEX:552=-2.0327159946019198E-5, LEX:558=-2.079244640857472E-5, LEX:576=-7.721836978655996E-4, LEX:588=-6.16180094195334E-4, LEX:600=-0.0070910194206371315, LEX:959=-2.068964334656267E-5, LEX:1014=-3.197284926790979E-5, LEX:1018=-1.4895736548644747E-4, LEX:1020=-1.0251751672627559E-5, LEX:431=-0.01813379952039966, LEX:443=-5.3277061374620215E-5, LEX:449=-1.0223885447261614E-4, LEX:467=-0.008054519270105769, LEX:479=0.02640369473249681, LEX:491=-1.6214547996816E-4, LEX:497=-1.4441809477752336E-5, LEX:1001=-0.01632180240415097, LEX:50=0.001069759693492064, LEX:181=-0.010854140801025198, LEX:197=-0.007481200436605792, LEX:207=-3.748629533017697E-5, LEX:217=-1.0509643783822067E-4, LEX:227=0.02669954388267968, LEX:237=-3.691406408938645E-4, LEX:247=-1.5196739260710857E-5, LEX:257=-7.562468705981222E-5, LEX:267=-0.008212318437298754, LEX:277=0.001422151713492853}
9: =========== r:1.0 p:1.0 (epoch:6 file:0 0)
if there is an empty cup
(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
MakeLex parse time: 0.007 sec.
Adding:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 0.0
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
empty  :- NP : empty:s : 0.0
cup  :- NP : cup:d : 0.0
Lex Size: 1107
First parse time: 0.009 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.18751610170223884
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.2630760309614188
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1010 : 0.01849989765640822
empty  :- NP : empty:s : 53 : 10.0
cup  :- NP : cup:d : 8 : 4.894100973139533
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.18751610170223884
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.2630760309614188
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1010 : 0.01849989765640822
empty  :- NP : empty:s : 53 : 10.0
cup  :- NP : cup:d : 8 : 4.894100973139533
]
Scale: 0.9973967943667029
Update:
{BB:object:t:state:t=7.271426252488749E-4, LHT:0:object:t:e=-0.0013623280279038295, LHH:0:object:t:var=-0.0013623280279038295, LHT:1:object:t:d=1.162380251706751E-5, LHH:1:object:t:cup:d=1.162380251706751E-5, LHT:0:state:t:e=7.28258843890536E-4, LHH:0:state:t:var=7.28258843890536E-4, LHT:1:state:t:s=7.28258843890536E-4, LHH:1:state:t:empty:s=7.28258843890536E-4, LHT:0:state:t:s=-1.2739923869541416E-5, LHH:0:state:t:empty:s=-1.2739923869541416E-5, LHT:1:state:t:e=-2.4363775030823126E-5, LHH:1:state:t:var=-2.4363775030823126E-5, BB:exists:object:t=-6.605474879274708E-4, LHT:1:object:t:p=-6.605474879274708E-4, LHH:1:object:t:you:p=-6.605474879274708E-4, BB:object:t:object:t=-7.155190173060724E-4, LHT:1:object:t:s=-7.134043911376001E-4, LHH:1:object:t:empty:s=-7.134043911376001E-4, BB:state:t:state:t=-1.1623851162793954E-5, LHT:0:state:t:d=-1.1623851161281714E-5, LHH:0:state:t:cup:d=-1.1623851161281714E-5, LEX:504=1.1802119258740715E-4, LEX:1005=1.5417036474988229E-4, LEX:141=-3.578393231030724E-4, LEX:149=-3.5767959691817343E-4, LEX:861=1.1006266766239674E-4, LEX:863=1.103802072916706E-4, LEX:1007=1.7994896747229345E-4, LEX:1009=1.7070028620932412E-4, LEX:872=-3.156264458231005E-4, LEX:873=-3.1231204545448835E-4, LEX:123=5.339928949128298E-5, LEX:131=2.435576100578577E-4, LEX:365=-6.605474879274708E-4, LEX:1006=1.798201517469672E-4, LEX:1008=1.759214577116153E-4, LEX:1106=2.307281421680153E-4, LEX:1092=-6.674774764810543E-5, LEX:1096=-6.611469856220961E-5, LEX:1010=5.215358253697663E-4, LEX:1095=-1.1623851161281717E-5}
10: =========== r:1.0 p:1.0 (epoch:6 file:0 0)
if the cup contains water
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 water:q)))))
MakeLex parse time: 0.003 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
water  :- NP : water:q : 0.0
the cup  :- NP : cup:d : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1107
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 water:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.005004589976813226
the cup  :- NP : cup:d : 14 : 19.001674928003364
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9993373519160176
water  :- NP : water:q : 32 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.005004589976813226
the cup  :- NP : cup:d : 14 : 19.001674928003364
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9993373519160176
water  :- NP : water:q : 32 : 10.0
]
Scale: 0.9973868464622688
Update:
{BB:has:t:object:t=4.29342482798062E-5, LHT:0:object:t:e=3.2049389131614136E-5, LHH:0:object:t:var=3.2049389131614136E-5, LHT:1:object:t:d=3.2041717596706144E-5, LHH:1:object:t:cup:d=3.2041717596706144E-5, LHT:0:has:t:e=4.222500200797416E-5, LHH:0:has:t:var=4.222500200797416E-5, LHT:1:has:t:e=4.222492542614927E-5, LHH:1:has:t:the=4.222492542614927E-5, BB:object:t:state:t=-1.0801322914760727E-5, LHT:0:state:t:e=-1.0801322914760727E-5, LHH:0:state:t:var=-1.0801322914760727E-5, LHT:1:state:t:e=-1.0801322914760727E-5, LHH:1:state:t:the=-1.0801322914760727E-5, LEX:535=-1.3890943298080305E-5, LEX:545=-1.589596854031296E-5, LEX:14=3.213290732582533E-5, LEX:559=-1.080122598804893E-5, LEX:875=4.2934133313998464E-5, LEX:472=-1.0801322914760727E-5, LEX:502=-2.3634431368771494E-5, LEX:874=4.293424826219978E-5}
11: =========== r:1.0 p:1.0 (epoch:6 file:0 0)
if it contains coffee
(exists $0 (and (object:t $0 it:e) (has:t $0 (the $1 (object:t $1 coffee:q)))))
MakeLex parse time: 0.002 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
coffee  :- NP : coffee:q : 0.0
it  :- NP : it:e : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1107
First parse time: 0.001 sec.
CORRECT:(exists $0 (and (object:t $0 it:e) (has:t $0 (the $1 (object:t $1 coffee:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.004961655843499228
it  :- NP : it:e : 5 : 10.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9993802861642798
coffee  :- NP : coffee:q : 35 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.004961655843499228
it  :- NP : it:e : 5 : 10.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9993802861642798
coffee  :- NP : coffee:q : 35 : 10.0
]
Scale: 0.9973768987562711
Update:
{BB:has:t:object:t=1.079792048506838E-5, LHT:0:has:t:e=1.079792048506838E-5, LHH:0:has:t:var=1.079792048506838E-5, LHT:1:has:t:e=1.079792048506838E-5, LHH:1:has:t:the=1.079792048506838E-5, BB:object:t:state:t=-1.079792048516845E-5, LHT:0:state:t:e=-1.079792048516845E-5, LHH:0:state:t:var=-1.079792048516845E-5, LHT:1:state:t:e=-1.079792048516845E-5, LHH:1:state:t:the=-1.079792048516845E-5, LEX:559=-1.079792048516845E-5, LEX:875=1.079779704970115E-5, LEX:472=-1.603667832291531E-5, LEX:874=1.079779704970115E-5}
12: =========== r:1.0 p:1.0 (epoch:6 file:0 0)
if the plate contains syrup
(exists $0 (and (object:t $0 plate:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
MakeLex parse time: 0.002 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
syrup  :- NP : syrup:q : 0.0
the plate  :- NP : plate:d : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1107
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 plate:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.004950858046449526
the plate  :- NP : plate:d : 18 : 20.000186835361497
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9993910839613294
syrup  :- NP : syrup:q : 33 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.004950858046449526
the plate  :- NP : plate:d : 18 : 20.000186835361497
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9993910839613294
syrup  :- NP : syrup:q : 33 : 10.0
]
Scale: 0.9973669512487034
Update:
{BB:has:t:object:t=1.080061160513143E-5, LHT:0:has:t:e=1.080061160513143E-5, LHH:0:has:t:var=1.080061160513143E-5, LHT:1:has:t:e=1.080061160513143E-5, LHH:1:has:t:the=1.080061160513143E-5, BB:object:t:state:t=-1.0800611605192947E-5, LHT:0:state:t:e=-1.0800611605192947E-5, LHH:0:state:t:var=-1.0800611605192947E-5, LHT:1:state:t:e=-1.0800611605192947E-5, LHH:1:state:t:the=-1.0800611605192947E-5, LEX:559=-1.0794724175533696E-5, LEX:875=1.0798854523058834E-5, LEX:472=-1.0800611605192947E-5, LEX:874=1.0800611591068723E-5}
13: =========== r:1.0 p:1.0 (epoch:6 file:0 0)
if the cup is empty
(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
MakeLex parse time: 0.007 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the cup  :- NP : cup:d : 0.0
empty  :- NP : empty:s : 0.0
Lex Size: 1107
First parse time: 0.01 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.486495529306357
the cup  :- NP : cup:d : 14 : 19.00170706091069
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.1420082108737026
empty  :- NP : empty:s : 53 : 10.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.486495529306357
the cup  :- NP : cup:d : 14 : 19.00170706091069
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.1420082108737026
empty  :- NP : empty:s : 53 : 10.0
]
Scale: 0.9973570039395602
Update:
{BB:object:t:state:t=0.021489708550297977, LHT:0:object:t:e=-0.015029270831732064, LHH:0:object:t:var=-0.015029270831732064, LHT:1:object:t:d=-0.035032497140258946, LHH:1:object:t:cup:d=5.188107679879486E-4, LHT:0:state:t:e=0.02095685656508527, LHH:0:state:t:var=0.02095685656508527, LHT:1:state:t:s=0.020976835043124174, LHH:1:state:t:empty:s=0.02201426475876363, LHT:1:state:t:e=-2.0040169102785195E-5, LHH:1:state:t:var=-2.0040169102785195E-5, BB:exists:state:t=-2.1387581752049532E-5, LHH:1:state:t:yellow:s=-0.0010374297156397394, BB:exists:object:t=-0.0020081514562707366, LHH:1:object:t:bowl:d=-0.0010398494219378753, BB:exists:exists=-0.035545199819823244, LHH:1:object:t:cups:d=-0.034511458486309154, LHT:1:object:t:p=-0.0020082995842640883, LHH:1:object:t:you:p=-0.0020082995842640883, LHT:0:object:t:s=-0.022013041293535058, LHH:0:object:t:empty:s=-0.022013041293535058, LEX:525=-1.9387972180564458E-5, LEX:535=-3.195238348245805E-5, LEX:545=-2.374836418496678E-5, LEX:581=-1.8503756551810534E-5, LEX:593=-1.8502142489390838E-5, LEX:528=-1.5408446670866007E-5, LEX:538=-1.5389965183294753E-5, LEX:572=-1.75626854370578E-5, LEX:584=-1.964305385119019E-5, LEX:596=-6.522940280554179E-5, LEX:523=-2.0431386373766177E-5, LEX:533=-4.0857997280422745E-5, LEX:543=-4.085766958875019E-5, LEX:579=-2.0429158875081487E-5, LEX:591=-2.0429158875081487E-5, LEX:14=5.185242838043871E-4, LEX:516=-3.7411477528946905E-5, LEX:530=-6.539038105312251E-5, LEX:540=-6.538848066523687E-5, LEX:574=-2.0429158875081487E-5, LEX:586=-2.0429158875081487E-5, LEX:598=-6.128978612388002E-5, LEX:123=-0.019221162836914867, LEX:131=0.025467041721011288, LEX:135=-3.507448913544041E-5, LEX:143=-5.882936195917323E-5, LEX:151=-4.257684969382622E-5, LEX:172=-0.0010368565612554127, LEX:311=-5.019436344984152E-4, LEX:365=-0.0015060002066643857, LEX:373=-0.03400639956184108, LEX:547=0.013398507487062634, LEX:559=0.017876767199939442, LEX:577=-1.5583826048173887E-5, LEX:589=-1.556542098319516E-5, LEX:1106=-4.145668530433424E-5, LEX:1075=-6.271444173446126E-5, LEX:1079=-6.480200120169748E-5, LEX:518=0.01789406138385214, LEX:532=-1.849994929996807E-5, LEX:542=-1.849660954184919E-5, LEX:558=-1.7188931111641764E-5, LEX:570=0.026798036438202614, LEX:576=-1.911076801948784E-5, LEX:588=-1.9706683560258436E-5, LEX:600=-3.556490929702783E-5, LEX:977=-0.03554519975759491, LEX:1020=-0.008611112974587519}
14: =========== r:1.0 p:1.0 (epoch:6 file:0 0)
if they are used
(exists $0 (and (object:t $0 they:e) (state:t $0 used:s)))
MakeLex parse time: 0.003 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
used  :- NP : used:s : 0.0
they  :- NP : they:e : 0.0
are  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
Lex Size: 1107
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 they:e) (state:t $0 used:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.6024658492577639
they  :- NP : they:e : 7 : 10.924839990183285
are  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 1046 : -3.2415901374314734E-5
used  :- NP : used:s : 54 : 10.308179051436102
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.6024658492577639
they  :- NP : they:e : 7 : 10.924839990183285
are  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 1046 : -3.2415901374314734E-5
used  :- NP : used:s : 54 : 10.308179051436102
]
Scale: 0.9973470568288352
Update:
{LHT:0:object:t:e=-0.003175991274805092, LHH:0:object:t:var=-0.003175991274805092, LHT:1:object:t:e=0.02902882167737168, LHH:1:object:t:they:e=0.02902882167737168, LHT:1:object:t:p=-0.03220481295217702, LHH:1:object:t:they:p=-0.029028821677371728, BB:exists:object:t=-0.0031759912748052987, LHH:1:object:t:you:p=-0.0031759912748052987, LEX:123=3.018772260570815E-4, LEX:131=0.002880162535865659, LEX:365=-0.003175991274805298, LEX:4=-0.029028821677371718, LEX:7=0.029027653005278358}
15: =========== r:1.0 p:1.0 (epoch:6 file:0 0)
if the kettle is white
(exists $0 (and (object:t $0 kettle:d) (state:t $0 white:s)))
MakeLex parse time: 0.003 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the kettle  :- NP : kettle:d : 0.0
white  :- NP : white:s : 0.0
Lex Size: 1107
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 white:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.4686187621064177
the kettle  :- NP : kettle:d : 17 : 19.9999874990419
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.1241141494898506
white  :- NP : white:s : 52 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.4686187621064177
the kettle  :- NP : kettle:d : 17 : 19.9999874990419
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.1241141494898506
white  :- NP : white:s : 52 : 10.0
]
Scale: 0.9973371099165229
Update:
{BB:object:t:state:t=0.026390966632237573, LHT:0:object:t:e=-0.003341593653211979, LHH:0:object:t:var=-0.003341593653211979, LHT:1:object:t:d=-0.02891785780008832, LHT:0:state:t:e=0.026370784612683773, LHH:0:state:t:var=0.026370784612683773, LHT:1:state:t:s=0.026391407933696306, LHH:1:state:t:white:s=0.027347151811844047, BB:exists:object:t=-0.0017691810374189398, LHT:1:object:t:p=-0.001769180804909543, LHH:1:object:t:you:p=-0.001769180804909543, BB:exists:state:t=-2.0623309719824842E-5, LHT:1:state:t:e=-2.0624179161966405E-5, LHH:1:state:t:var=-2.0624179161966405E-5, LHT:0:object:t:s=-0.02734629911574476, LHH:0:object:t:white:s=-0.02734629911574476, BB:exists:exists=-0.02891771098941951, LHH:1:object:t:bowl:d=-9.557438781478255E-4, LHH:1:state:t:yellow:s=-9.557438781478255E-4, LHH:1:object:t:cups:d=-0.027961967111268502, LEX:123=-0.024705631608025604, LEX:131=0.02515102696119351, LEX:172=-9.557438781478254E-4, LEX:311=-3.901109472472502E-4, LEX:365=-0.001379069857662293, LEX:373=-0.027571856164021247, LEX:547=0.01256109627796199, LEX:559=0.0172855546267616, LEX:518=0.017312409193526963, LEX:558=-1.759007281494247E-5, LEX:570=0.02640151383904466, LEX:977=-0.028917710989416326, LEX:1020=-0.014778623266219171}
16: =========== r:1.0 p:1.0 (epoch:6 file:0 0)
if the mug is on the stove
(exists $0 (and (object:t $0 mug:d) (On:t $0 (the $1 (object:t $1 stove:f)))))
MakeLex parse time: 0.006 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
the stove  :- NP : stove:f : 0.0
the mug  :- NP : mug:d : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
on  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (On:t $4 ($2 $3)))))))) : 0.0
Lex Size: 1107
First parse time: 0.007 sec.
WRONG: (exists $0 (and (object:t $0 mug:d) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.004940059191926468
the mug  :- NP : mug:d : 16 : 19.999839038370787
is  :- S/NP\(NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $4 $1) (IsNear:t $4 ($2 $3)))))))) : 1031 : 0.11959500001991073
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 0.8201606456620355
the stove  :- NP : stove:f : 76 : 19.002046401367956
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.004940059191926468
the mug  :- NP : mug:d : 16 : 19.999839038370787
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.42927849817872443
on  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (On:t $4 ($2 $3)))))))) : 1019 : 0.5867323512873609
the stove  :- NP : stove:f : 76 : 19.002046401367956
]
Scale: 0.9973271632026169
Update:
{BB:On:t:object:t=0.9574717122921244, LHT:0:object:t:e=0.003490742568329412, LHH:0:object:t:var=0.003490742568329412, LHT:1:object:t:d=1.8342560549514976E-4, LHH:1:object:t:mug:d=1.8342560602607882E-4, LHT:0:On:t:e=0.7217245591972403, LHH:0:On:t:var=0.7217245591972403, LHT:1:On:t:e=0.7215517720776113, LHH:1:On:t:the=0.7215517720776113, LHT:1:object:t:f=0.0034801040815160295, LHH:1:object:t:stove:f=0.003480104081932579, BB:object:t:state:t=-0.006960172945362162, LHT:0:object:t:d=-1.0625168040397685E-5, LHH:0:object:t:mug:d=-1.0625168040397685E-5, LHT:0:state:t:e=-0.0034801820844028984, LHH:0:state:t:var=-0.0034801820844028984, LHT:1:object:t:e=-1.8341228672196563E-4, LHH:1:object:t:var=-1.8341228672196563E-4, BB:On:t:On:t=-0.0017807111756891149, LHT:0:On:t:d=-1.7278711962905797E-4, LHH:0:On:t:mug:d=-1.7278711962905797E-4, BB:IsNear:t:object:t=-0.7198523791713679, LHT:0:IsNear:t:e=-0.9522108623260577, LHH:0:IsNear:t:var=-0.9522108623260577, LHT:1:IsNear:t:e=-0.9522108623260577, LHH:1:IsNear:t:the=-0.9522108623260577, BB:IsNear:t:On:t=-0.23235848315468965, BB:In:t:state:t=-0.006960208163865236, LHT:1:state:t:s=-0.003480104081932618, LHH:1:state:t:IsOn:s=-0.003480104081932618, LHT:0:In:t:e=-0.003480104081932618, LHH:0:In:t:var=-0.003480104081932618, LHT:1:In:t:f=-0.003480104081932618, LHH:1:In:t:stove:f=-0.003480104081932618, BB:In:t:object:t=-0.006960094940997039, LEX:876=0.22053032519464688, LEX:875=0.0034795362617581586, LEX:1028=-0.003480104081932619, LEX:1012=0.07057983744748542, LEX:1014=0.21780223934599152, LEX:1016=0.044566970932314216, LEX:1018=0.3706173428337124, LEX:1020=0.028114236604170423, LEX:1031=-0.5523961249236423, LEX:1033=-0.39981473740241547, LEX:57=-0.003480104081932619, LEX:1013=-0.41769510218360345, LEX:1015=0.21780220068539297, LEX:1017=-0.18522975743227593, LEX:1019=0.3845248224267193, LEX:1021=0.0176868084403484, LEX:1085=-0.06405070302196106, LEX:1087=-0.1700884913084177}
17: =========== r:0.9411764705882353 p:0.9411764705882353 (epoch:6 file:0 0)
if the mug is red and dry
(exists $0 (and (object:t $0 mug:d) (state:t $0 red:s) (state:t $0 dry:s)))
MakeLex parse time: 0.004 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
dry  :- NP : dry:s : 0.0
the mug  :- NP : mug:d : 0.0
dry  :- NP : dry:s : 0.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
red  :- NP : red:s : 0.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 0.0
Lex Size: 1107
First parse time: 0.014 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (state:t $0 red:s) (state:t $0 dry:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.5744346597607047
the mug  :- NP : mug:d : 16 : 19.999839038370787
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.544172089044909
red  :- NP : red:s : 47 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.1236392063678801
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.5744346597607047
the mug  :- NP : mug:d : 16 : 19.999839038370787
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.544172089044909
red  :- NP : red:s : 47 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.1236392063678801
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9973172166871116
Update:
{BB:object:t:state:t=-0.014788586605661505, BB:state:t:state:t=0.0015603919890041901, LHT:0:object:t:e=-0.007818716366084007, LHH:0:object:t:var=-0.007818716366084007, LHT:1:object:t:d=-0.004087248691412542, LHT:0:state:t:e=7.542439322717795E-4, LHH:0:state:t:var=7.542439322717795E-4, LHT:1:state:t:s=7.611918082213194E-4, LHH:1:state:t:dry:s=7.611920536470536E-4, BB:object:t:object:t=-0.008174495270249287, LHH:1:object:t:cup:d=-0.004087247691346171, BB:exists:exists=-1.903169020904923E-5, LHT:1:object:t:s=-7.611920535860709E-4, LHH:1:object:t:dry:s=-7.611920535860709E-4, BB:exists:object:t=-0.0029512736044558893, LHT:1:object:t:p=-0.002951271662264549, LHH:1:object:t:you:p=-0.002951271662264549, LHT:1:object:t:f=-1.9003958813316633E-5, LHH:1:object:t:tv:f=-1.9003958813316633E-5, BB:In:t:state:t=-0.001522338706919312, LHT:0:In:t:e=-7.61169353459656E-4, LHH:0:In:t:var=-7.61169353459656E-4, LHT:1:In:t:e=-7.61169353459656E-4, LHH:1:In:t:the=-7.61169353459656E-4, BB:In:t:object:t=-0.0015223147962076416, LEX:123=3.1915949022153655E-4, LEX:131=0.003399813549671713, LEX:365=-0.0029512715812956784, LEX:1027=-7.611693534596561E-4, LEX:546=-0.004087247635124645, LEX:570=-1.903859465935824E-5, LEX:600=0.004867012761440026, LEX:1020=-7.61157399842454E-4, LEX:887=-7.61169353459656E-4, LEX:902=-1.9003958813316633E-5, LEX:1022=7.797651263155199E-4}
18: =========== r:0.9444444444444444 p:0.9444444444444444 (epoch:6 file:0 0)
if the kettle is empty and cool
(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s) (state:t $0 cool:s)))
MakeLex parse time: 0.005 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
cool  :- NP : cool:s : 0.0
the kettle  :- NP : kettle:d : 0.0
cool  :- NP : cool:s : 0.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
empty  :- NP : empty:s : 0.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 0.0
Lex Size: 1107
First parse time: 0.012 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s) (state:t $0 cool:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.5710348462110331
the kettle  :- NP : kettle:d : 17 : 19.9999874990419
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.539305076283469
empty  :- NP : empty:s : 53 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.12285944124156459
cool  :- NP : cool:s : 49 : 10.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.5710348462110331
the kettle  :- NP : kettle:d : 17 : 19.9999874990419
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.539305076283469
empty  :- NP : empty:s : 53 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.12285944124156459
cool  :- NP : cool:s : 49 : 10.0
]
Scale: 0.9973072703700011
Update:
{BB:object:t:state:t=-0.013768221943521371, BB:state:t:state:t=0.0020517805183129303, LHT:0:object:t:e=-0.007851286165598078, LHH:0:object:t:var=-0.007851286165598078, LHT:1:object:t:d=-0.003955005955479633, LHT:0:state:t:e=0.0010003935662399803, LHH:0:state:t:var=0.0010003935662399803, LHT:1:state:t:s=0.0010073404759127146, LHH:1:state:t:cool:s=0.0010073408036684445, BB:object:t:object:t=-0.007910009154793837, LHH:1:object:t:cup:d=-0.0039550046489911376, BB:exists:exists=-1.8585794999588885E-5, LHT:1:object:t:s=-0.0010073408035791835, LHH:1:object:t:cool:s=-0.0010073408035791835, BB:exists:object:t=-0.002870392460599115, LHT:1:object:t:p=-0.002870389926982035, LHH:1:object:t:you:p=-0.002870389926982035, LHT:1:object:t:f=-1.8549479550060928E-5, LHH:1:object:t:tv:f=-1.8549479550060928E-5, BB:In:t:state:t=-0.002014621172843862, LHT:0:In:t:e=-0.001007310586421931, LHH:0:In:t:var=-0.001007310586421931, LHT:1:In:t:e=-0.001007310586421931, LHH:1:In:t:the=-0.001007310586421931, BB:In:t:object:t=-0.0020145894587759675, LEX:123=3.3353282935498285E-4, LEX:131=0.0035506779608327358, LEX:365=-0.0028703898213960355, LEX:1027=-0.0010073105864219307, LEX:546=-0.0039550045773969165, LEX:570=-1.8595527465347808E-5, LEX:600=0.004980456408109517, LEX:1020=-0.001007294731691631, LEX:887=-0.0010073105864219307, LEX:902=-1.8549479550060928E-5, LEX:1022=0.0010254518307123998}
19: =========== r:0.9473684210526315 p:0.9473684210526315 (epoch:6 file:0 0)
if the glass is used and on the floor
(exists $0 (and (object:t $0 kettle:d) (state:t $0 used:s) (On:t $0 (the $1 (object:t $1 floor:lo)))))
MakeLex parse time: 0.008 sec.
Adding:
if the glass is  :- S/NP/(NP|NP)/NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (On:t $3 ($1 $2)) (object:t $3 kettle:d) (state:t $3 $0)))))) : 0.0
used  :- NP : used:s : 0.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1.9135499999999999
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
the floor  :- NP : floor:lo : 0.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1.9135499999999999
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1107
First parse time: 0.022 sec.
WRONG: (exists $0 (and (state:t $0 used:s) (object:t $0 glass:d) (In:t $0 (the $1 (On:t $1 (the $2 (object:t $2 floor:lo)))))))
Using:
[LexEntries and scores:
if  :- S/NP/(NP|NP)/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and (In:t $4 ($2 $3)) ($0 $4) (state:t $4 $1))))))) : 1027 : -0.1749705956571934
the glass  :- NP : glass:d : 15 : 17.00575309368708
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -2.8271201762079925
used  :- NP : used:s : 54 : 10.308179051436102
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 1024 : 2.188663955862621
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (On:t $1 (the $2 (object:t $2 $0))))) : 1087 : -0.7289817210077925
the floor  :- NP : floor:lo : 67 : 20.0
]
Second parse time: 0.007 sec.
Best LexEntries:
[LexEntries and scores:
if the glass is  :- S/NP/(NP|NP)/NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (On:t $3 ($1 $2)) (object:t $3 kettle:d) (state:t $3 $0)))))) : 879 : 2.297845421339826
used  :- NP : used:s : 54 : 10.308179051436102
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1023 : 2.768553564279484
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 0.40246554347843205
the floor  :- NP : floor:lo : 67 : 20.0
]
Scale: 0.997297324251279
Update:
{BB:object:t:state:t=-0.006795404929591368, BB:On:t:object:t=1.9885428505314404, BB:On:t:state:t=1.9887090084118757, LHT:0:object:t:e=0.00761116508508647, LHH:0:object:t:var=0.00761116508508647, LHT:1:object:t:d=-1.0846596844280213E-4, LHH:1:object:t:kettle:d=0.9943545042059379, LHT:0:state:t:e=-0.01635232998830887, LHH:0:state:t:var=-0.01635232998830887, LHT:1:state:t:s=-0.007935217565095362, LHT:0:On:t:e=0.16866681951379642, LHH:0:On:t:var=0.16866681951379642, LHT:1:On:t:e=0.16859922125177704, LHH:1:On:t:the=0.16859922125177704, LHT:1:object:t:lo=0.008145136724349323, LHH:1:object:t:floor:lo=0.008145136724349323, BB:exists:exists=-0.010575702313790299, LHH:1:object:t:glass:d=-0.9943545042059379, LHT:0:object:t:lo=-1.8484234434183256E-4, LHH:0:object:t:floor:lo=-1.8484234434183256E-4, LHT:1:object:t:e=-2.5244060634870084E-4, LHH:1:object:t:var=-2.5244060634870084E-4, LHT:0:On:t:lo=-6.759826201905672E-5, LHH:0:On:t:floor:lo=-6.759826201905672E-5, BB:object:t:object:t=-2.0884612540702924E-4, LHT:1:object:t:f=-3.1206319925158903E-4, LHH:1:object:t:tv:f=-3.1206319925158903E-4, BB:exists:object:t=-1.3797726613636133E-4, LHT:1:object:t:p=-4.583313675296114E-5, LHH:1:object:t:you:p=-4.583313675296114E-5, BB:exists:state:t=-0.015819504552703714, BB:In:t:state:t=-1.9673694760365765, BB:In:t:exists=-0.015819486589740386, LHT:1:state:t:e=-0.008417112424122877, LHH:1:state:t:var=-0.008417112424122877, LHT:0:In:t:e=-0.9836847380182883, LHH:0:In:t:var=-0.9836847380182883, LHT:1:In:t:e=-0.9757920419011967, LHH:1:In:t:the=-0.9757920419011967, BB:In:t:object:t=-1.951553185265616, BB:On:t:exists=-5.090325604716776E-4, BB:state:t:state:t=-0.016800009390424857, LHH:1:object:t:cup:d=-3.2285117150058324E-5, LHH:1:object:t:bowl:d=-4.252144800348923E-5, LHH:1:state:t:yellow:s=-4.252144800348923E-5, LHH:1:object:t:cups:d=-3.365940328886318E-5, LHH:1:state:t:IsOn:s=-0.007892696117091607, LHT:1:In:t:lo=-0.007892696117091607, LHH:1:In:t:floor:lo=-0.007892696117091607, LEX:880=0.06924368150548003, LEX:519=-1.5957858105730315E-5, LEX:15=-0.9943363133600216, LEX:606=0.015530179213841335, LEX:608=0.022489169691180606, LEX:131=-0.009980451322436855, LEX:172=-4.2521448003489234E-5, LEX:311=-1.5003316316336038E-5, LEX:365=-3.082982043662512E-5, LEX:373=-1.8656086972527137E-5, LEX:547=-2.0313153917490004E-5, LEX:559=-2.8257246559591283E-5, LEX:875=-5.072949644241554E-4, LEX:1027=-0.8434660981637172, LEX:1028=-0.140218639854571, LEX:9=-1.8190845916235934E-5, LEX:518=-2.8539500916968185E-5, LEX:546=-3.228511713786993E-5, LEX:570=-0.010052671831847266, LEX:600=-0.008367719578074561, LEX:977=-7.61808512923524E-5, LEX:1020=-0.9757970923659774, LEX:930=-0.0013620907767730903, LEX:942=-0.00848829256069505, LEX:978=-1.3864012658901175E-4, LEX:988=-1.7179364497760713E-4, LEX:1022=-0.00840000469521243, LEX:1023=0.15532347693616055, LEX:1024=-0.15468195644992627, LEX:1025=0.06800592979490941, LEX:1026=-0.08810436951851577, LEX:57=-0.007892707189900742, LEX:1013=0.6325506812414677, LEX:1017=0.16307792736048018, LEX:1019=-3.5325725301498304E-4, LEX:1021=-1.5568075279081027E-4, LEX:1085=-0.4106491524790586, LEX:1087=-0.41459719246929616, LEX:879=0.9251065380868737}
20: =========== r:0.9 p:0.9 (epoch:6 file:0 0)
if the plate is dirty and in the refrigerator
(exists $0 (and (object:t $0 plate:d) (state:t $0 dirty:s) (In:t $0 (the $1 (object:t $1 refrigerator:f)))))
MakeLex parse time: 0.006 sec.
Adding:
if  :- S/NP/(NP|NP)/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and (In:t $4 ($2 $3)) ($0 $4) (state:t $4 $1))))))) : 0.0
dirty  :- NP : dirty:s : 0.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1.9135499999999999
in  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
the refrigerator  :- NP : refrigerator:f : 0.0
the plate  :- NP : plate:d : 0.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1.9135499999999999
in  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1107
First parse time: 0.018 sec.
WRONG: (and (exists $0 (and (object:t $0 plate:d) (state:t $0 dirty:s))) (exists $0 (object:t $0 refrigerator:f)))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.4513614647262156
the plate  :- NP : plate:d : 18 : 20.000186835361497
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.1068302797972405
dirty  :- NP : dirty:s : 55 : 10.0
and  :- S/NP\S/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 ($0 $3 $2)))))) : 930 : -3.0838559276267663
in  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1047 : -0.16002170921970243
the refrigerator  :- NP : refrigerator:f : 75 : 20.000064119849167
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/(NP|NP)/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and (In:t $4 ($2 $3)) ($0 $4) (state:t $4 $1))))))) : 1027 : -1.0184366938209106
the plate  :- NP : plate:d : 18 : 20.000186835361497
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.80291726857397
dirty  :- NP : dirty:s : 55 : 10.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1023 : 2.9238770412156443
in  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1047 : -0.16002170921970243
the refrigerator  :- NP : refrigerator:f : 75 : 20.000064119849167
]
Scale: 0.9972873783309398
Update:
{BB:object:t:state:t=0.7815913966689116, BB:In:t:object:t=1.5527719358184695, BB:In:t:state:t=1.5527544994521587, LHT:0:object:t:e=-0.041483260042657344, LHH:0:object:t:var=-0.041483260042657344, LHT:1:object:t:d=-0.014582706502019326, LHT:0:state:t:e=0.005184594812670166, LHH:0:state:t:var=0.005184594812670166, LHT:1:state:t:s=0.0052054326025537225, LHH:1:state:t:dirty:s=0.005729114940689111, LHT:0:In:t:e=0.7763772497260794, LHH:0:In:t:var=0.7763772497260794, LHT:1:In:t:e=0.7763772497260794, LHH:1:In:t:the=0.7763772497260794, LHT:1:object:t:f=-0.03087797027551978, LHH:1:object:t:refrigerator:f=8.777985066176702E-4, BB:exists:exists=-0.8443398191973112, LHT:0:object:t:f=-8.777985065529252E-4, LHH:0:object:t:refrigerator:f=-8.777985065529252E-4, LHT:1:object:t:e=-8.778068288041578E-4, LHH:1:object:t:var=-8.778068288041578E-4, BB:object:t:object:t=-0.031755779327026175, LHH:1:object:t:tv:f=-0.031755768782138476, BB:exists:object:t=-0.009815240406054264, LHT:1:object:t:p=-0.0017516747635233773, LHH:1:object:t:you:p=-0.0017516747635233773, BB:exists:state:t=-2.9555967379038305E-5, BB:In:t:exists=-1.743636631082565E-5, LHT:1:state:t:e=-2.083779756652332E-5, LHH:1:state:t:var=-2.083779756652332E-5, LHT:0:object:t:s=-0.005729107376866741, LHH:0:object:t:dirty:s=-0.005729107376866741, LHH:1:object:t:bowl:d=-5.236823381355383E-4, LHH:1:state:t:yellow:s=-5.236823381355383E-4, LHH:1:object:t:cups:d=-0.014059022887438138, LEX:509=-2.2175984174415436E-5, LEX:519=-3.9722362551596116E-5, LEX:561=-8.86568262152096E-5, LEX:18=1.709997581401778E-4, LEX:610=0.02028415368000856, LEX:612=0.06321219316481144, LEX:123=-0.0547777393281242, LEX:131=-0.49133311037770133, LEX:172=-5.236823381355383E-4, LEX:311=-1.9538996371211832E-4, LEX:365=-0.0015562847998112585, LEX:373=-0.013863632923726023, LEX:547=-0.04559692354539352, LEX:559=-0.16836501014764857, LEX:1027=0.5524308465332721, LEX:1028=0.22394620287032257, LEX:12=-1.7120008062418998E-4, LEX:518=-0.16844334749095674, LEX:558=-1.0319480967974035E-5, LEX:570=-0.5420090968311584, LEX:977=-0.014582705225573677, LEX:1020=0.7250452687061727, LEX:930=-0.74377765601733, LEX:942=-8.438249266101932E-4, LEX:978=-0.03174417401419588, LEX:988=-1.1594767942582137E-5, LEX:1023=0.3230283038035706, LEX:1024=-1.3289397900971624E-5, LEX:1025=0.3698749838562946, LEX:1047=-0.08349634684494743}
21: =========== r:0.8571428571428571 p:0.8571428571428571 (epoch:6 file:0 0)
for all mugs that contain water
(forall $0 (and (object:t $0 mugs:d) (has:t $0 (the $1 (object:t $1 water:q)))))
MakeLex parse time: 0.008 sec.
Adding:
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
water  :- NP : water:q : 0.0
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
Lex Size: 1107
First parse time: 0.009 sec.
CORRECT:(forall $0 (and (object:t $0 mugs:d) (has:t $0 (the $1 (object:t $1 water:q)))))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.3468247407337781
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 883 : 1.121320841164207
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 2.765304996492551
contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 812 : 0.6722445887436607
water  :- NP : water:q : 32 : 10.0
]
Second parse time: 0.011 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.3468247407337781
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 883 : 1.121320841164207
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 2.765304996492551
contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 812 : 0.6722445887436607
water  :- NP : water:q : 32 : 10.0
]
Scale: 0.9972774326089776
Update:
{BB:has:t:object:t=0.3185179942144978, LHT:0:object:t:e=0.3490350022021128, LHH:0:object:t:var=0.3490350022021128, LHT:1:object:t:d=0.2465955559109257, LHH:1:object:t:mugs:d=0.26512180055411466, LHT:0:has:t:e=0.2576758837449544, LHH:0:has:t:var=0.2576758837449544, LHT:1:has:t:e=0.25972564888675675, LHH:1:has:t:the=0.25973019617383186, LHT:1:object:t:q=0.05239300473561143, LHH:1:object:t:water:q=0.05239300473561143, LHT:0:object:t:q=-0.0503295594336646, LHH:0:object:t:water:q=-0.0503295594336646, LHT:1:object:t:e=-2.8311787808924606E-4, LHH:1:object:t:var=-1.8876223824011346E-4, BB:object:t:object:t=-0.022359186677965055, LHH:1:object:t:mug:d=-0.0185262446431888, LHH:1:object:t:the=-9.435563984913262E-5, LHT:1:has:t:q=-0.0020578664824402915, LHH:1:has:t:water:q=-0.0020578664824402915, LEX:290=5.847509096971742E-5, LEX:619=-0.005050659378806869, LEX:627=5.905407079506905E-5, LEX:635=1.2640794601001708E-4, LEX:643=-0.00699251973538822, LEX:651=4.625764469496953E-5, LEX:659=-0.025307571876466747, LEX:667=4.625764469496953E-5, LEX:675=-0.025622971609622347, LEX:683=5.9159822357646884E-5, LEX:691=-0.005006211615648008, LEX:699=5.9442710768869574E-5, LEX:707=5.956561657876457E-5, LEX:715=-6.932275267795888E-4, LEX:723=-7.476663355577605E-4, LEX:731=-0.0027943564779764683, LEX:739=-7.476663355577605E-4, LEX:747=-0.002830702038965561, LEX:755=1.2396808386967487E-4, LEX:763=5.960000041826622E-5, LEX:771=-4.6347122301787687E-4, LEX:779=4.5292885198335814E-5, LEX:787=-0.006935973100593568, LEX:795=2.044688221977508E-4, LEX:803=-0.006935973100593568, LEX:811=2.072600335632253E-4, LEX:614=2.2650298293710306E-4, LEX:622=-0.005594519767978553, LEX:630=6.820408816435472E-4, LEX:638=2.6323219413036197E-5, LEX:646=-0.006991110781683518, LEX:654=9.505240286473486E-5, LEX:662=-0.006991110781683518, LEX:670=3.006357095038177E-4, LEX:678=-0.019011282663931567, LEX:686=5.785068244133559E-5, LEX:694=5.959469684959918E-5, LEX:702=5.942004733599004E-5, LEX:710=-4.656248846338914E-4, LEX:718=-6.916926312525261E-4, LEX:726=-0.001362477207210891, LEX:734=-6.916926312525261E-4, LEX:742=-0.004190275250663156, LEX:750=6.0778686390427236E-5, LEX:758=5.960000041826622E-5, LEX:766=1.8922971514564947E-4, LEX:774=-0.004553282847644486, LEX:782=4.5345628439320304E-5, LEX:790=-0.011424406930915124, LEX:798=4.5345628439320304E-5, LEX:806=-0.034326473445830216, LEX:617=-0.005050659378806869, LEX:625=2.9357298775475884E-5, LEX:633=1.2640794601001708E-4, LEX:641=-0.00699483609535217, LEX:649=4.625764469496953E-5, LEX:657=-0.014161845016233368, LEX:665=4.625764469496953E-5, LEX:673=-0.01425977005821751, LEX:681=5.9159822357646884E-5, LEX:689=-0.0024827326464502623, LEX:697=5.9442710768869574E-5, LEX:713=-6.921372033581095E-4, LEX:721=-7.476663355577605E-4, LEX:729=-0.0014149717809799932, LEX:737=-7.476663355577605E-4, LEX:745=-0.0014235912781717327, LEX:753=0.007227501807453147, LEX:761=5.960000041826622E-5, LEX:769=-1.6337556260487848E-4, LEX:777=4.528920681487523E-5, LEX:785=-0.006935973100593568, LEX:793=9.258805315419791E-5, LEX:801=-0.006935973100593568, LEX:809=9.309061657175443E-5, LEX:616=3.524677379060714E-5, LEX:624=-0.005594519767978553, LEX:632=8.636220706235038E-5, LEX:640=3.269604149504574E-5, LEX:648=-0.006991067824862205, LEX:656=7.74318040395838E-5, LEX:664=-0.006991067824862205, LEX:672=2.441990856932111E-4, LEX:680=-0.002985690669978941, LEX:688=5.785068244133559E-5, LEX:696=1.6688437673922654E-5, LEX:704=5.943010275540795E-5, LEX:712=-5.522680904069214E-4, LEX:720=-6.916871089724573E-4, LEX:728=-0.0011395938072601185, LEX:736=-6.916871089724573E-4, LEX:744=-0.003509612229782306, LEX:752=6.0778686390427236E-5, LEX:760=5.960000041826622E-5, LEX:768=1.8922971514564947E-4, LEX:776=-0.005243189348022466, LEX:784=4.534678262877979E-5, LEX:792=-0.009811901893393968, LEX:800=4.534678262877979E-5, LEX:808=-0.029556050438592232, LEX:615=-0.007513269237301979, LEX:623=5.905407079506905E-5, LEX:631=-0.006202179503176391, LEX:639=-0.00521586671618781, LEX:647=4.625767030977301E-5, LEX:655=-0.02069965810919092, LEX:663=4.625767030977301E-5, LEX:671=-0.020839097310490422, LEX:679=3.546894787744772E-5, LEX:687=-0.005006211615648008, LEX:695=-0.007693700904534988, LEX:703=5.9594832972072955E-5, LEX:711=-5.92840294022491E-4, LEX:719=-7.476669895450458E-4, LEX:727=-0.0011445184415121185, LEX:735=-7.476669895450458E-4, LEX:743=-0.001144199991674028, LEX:751=1.2396808386967487E-4, LEX:759=5.960000041826622E-5, LEX:767=-4.6347122301787687E-4, LEX:775=4.547116817867304E-5, LEX:783=-0.006935977430723085, LEX:791=6.651266103866645E-5, LEX:799=-0.006935977430723085, LEX:807=6.574342741361254E-5, LEX:883=0.32875228255493627, LEX:618=6.033316122656931E-5, LEX:626=-0.01039778036559218, LEX:634=1.8913482985862546E-4, LEX:642=4.625688944631013E-5, LEX:650=-0.006991110781683518, LEX:658=4.6396091714997536E-5, LEX:666=-0.006991110781683518, LEX:674=1.4448745275365374E-4, LEX:682=-0.0051145596015244, LEX:690=3.453497059005274E-5, LEX:698=5.959469684959918E-5, LEX:706=-0.010807596386853966, LEX:714=-7.476626686602613E-4, LEX:722=-6.916926312525261E-4, LEX:730=-7.515230170237579E-4, LEX:738=-6.916926312525261E-4, LEX:746=-0.002314092055237082, LEX:754=0.002987343513618259, LEX:762=5.960000041826622E-5, LEX:770=0.0029682816962878127, LEX:778=-0.006935964038012814, LEX:786=4.5345628439320304E-5, LEX:794=-0.006983376012518217, LEX:802=4.5345628439320304E-5, LEX:810=-0.02122068475452501, LEX:613=0.16986349612956209, LEX:621=5.905407079506905E-5, LEX:629=0.14073089936546304, LEX:637=-0.004449446690204103, LEX:645=4.625764469496953E-5, LEX:653=-0.024453035287873046, LEX:661=4.625764469496953E-5, LEX:669=-0.024600900364122092, LEX:677=5.514826055990738E-5, LEX:685=-0.005006211615648008, LEX:693=5.9442710768869574E-5, LEX:701=5.959486178539461E-5, LEX:709=-5.870144261316477E-4, LEX:717=-7.476663355577605E-4, LEX:725=-9.90958757199621E-4, LEX:733=-7.476663355577605E-4, LEX:741=-9.892008239284619E-4, LEX:749=1.2396808386967487E-4, LEX:757=5.960000041826622E-5, LEX:765=-4.6347122301787687E-4, LEX:773=4.5256278508864315E-5, LEX:781=-0.006935973100593568, LEX:789=6.27032549860523E-5, LEX:797=-0.006935973100593568, LEX:805=6.189276639847976E-5, LEX:27=-0.018526244643188805, LEX:868=0.3300603070974918, LEX:620=6.033316122656931E-5, LEX:628=-0.005594519767978553, LEX:636=1.8913482985862546E-4, LEX:644=4.4819273665267265E-5, LEX:652=-0.006991110781683518, LEX:660=-0.002186216436817588, LEX:668=-0.006991110781683518, LEX:676=-0.002172906040810272, LEX:684=-0.0051145596015244, LEX:692=5.785068244133559E-5, LEX:700=5.959469684959918E-5, LEX:708=5.7770192127245974E-5, LEX:716=-7.434513773608742E-4, LEX:724=-6.916926312525261E-4, LEX:732=-0.01816826569870111, LEX:740=-6.916926312525261E-4, LEX:748=-0.01997467300124774, LEX:756=6.0778686390427236E-5, LEX:764=5.960000041826622E-5, LEX:772=1.8922971514564947E-4, LEX:780=-0.00702262780665784, LEX:788=4.5345628439320304E-5, LEX:796=0.16950280383513106, LEX:804=4.5345628439320304E-5, LEX:812=0.14699829225050295}
22: =========== r:0.8636363636363636 p:0.8636363636363636 (epoch:6 file:0 0)
for all bowls that are green
(forall $0 (and (object:t $0 bowls:d) (state:t $0 green:s)))
MakeLex parse time: 0.002 sec.
Adding:
green  :- NP : green:s : 0.0
Lex Size: 1107
First parse time: 0.003 sec.
CORRECT:(forall $0 (and (object:t $0 bowls:d) (state:t $0 green:s)))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.5166882368633403
all bowls that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 814 : 0.6403788820525744
green  :- NP : green:s : 51 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.5166882368633403
all bowls that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 814 : 0.6403788820525744
green  :- NP : green:s : 51 : 10.0
]
Scale: 0.997267487085386
Update:
{BB:object:t:state:t=-0.13350946851548748, LHT:0:object:t:e=-0.0591055012925127, LHH:0:object:t:var=-0.0591055012925127, LHT:1:object:t:d=-0.05910550515290344, BB:object:t:object:t=-0.08900631234365841, LHH:1:object:t:mugs:d=-0.05910550515290356, BB:has:t:object:t=-0.014602348981074362, LHT:0:has:t:e=-0.014602354853712878, LHH:0:has:t:var=-0.014602354853712878, LHT:1:has:t:e=-0.014602354853712878, LHH:1:has:t:the=-0.014602354853712878, LEX:291=0.0016490829608683632, LEX:813=0.007931875618201486, LEX:814=0.03501315257832943, LEX:815=-0.005126467293574776, LEX:817=-0.01506322655736216, LEX:816=-0.0062810024047818104, LEX:818=-0.01812348055769118, LEX:655=0.003306075336561507, LEX:671=0.0032636992636385343, LEX:727=-0.011884771028404448, LEX:743=-0.011672020736914134, LEX:791=-0.0037594469083011514, LEX:807=-0.0036580137995281575, LEX:613=0.020435091717340606, LEX:629=0.02250994235182887, LEX:653=0.003975644828876056, LEX:669=0.003965915437209212, LEX:725=-0.010516963567845058, LEX:741=-0.010429397632428136, LEX:789=-0.003623461987804072, LEX:805=-0.003561426285440981}
23: =========== r:0.8695652173913043 p:0.8695652173913043 (epoch:6 file:0 0)
for all glasses that are empty
(forall $0 (and (object:t $0 glasses:d) (state:t $0 empty:s)))
MakeLex parse time: 0.002 sec.
Adding:
empty  :- NP : empty:s : 0.0
Lex Size: 1107
First parse time: 0.003 sec.
CORRECT:(forall $0 (and (object:t $0 glasses:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.537123328580681
all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 820 : 0.24193347426820833
empty  :- NP : empty:s : 53 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.537123328580681
all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 820 : 0.24193347426820833
empty  :- NP : empty:s : 53 : 10.0
]
Scale: 0.9972575417601596
Update:
{BB:object:t:state:t=-0.14198925046391603, LHT:0:object:t:e=-0.06208559586773371, LHH:0:object:t:var=-0.06208559586773371, LHT:1:object:t:d=-0.062085722337001194, BB:object:t:object:t=-0.09465950030927742, LHH:1:object:t:mugs:d=-0.06208572233700122, BB:has:t:object:t=-0.014755972182362515, LHT:0:has:t:e=-0.014755978714989255, LHH:0:has:t:var=-0.014755978714989255, LHT:1:has:t:e=-0.014755978714989255, LHH:1:has:t:the=-0.014755978714989255, LEX:292=0.0019072198658542554, LEX:819=0.009125129137385352, LEX:820=0.0301675154636076, LEX:821=-0.004788656329981971, LEX:823=-0.013192475526484955, LEX:822=-0.006209588836148154, LEX:824=-0.01700922622051735, LEX:655=0.004855036702617344, LEX:671=0.004666829416816034, LEX:727=-0.012877917077418175, LEX:743=-0.012318098634410132, LEX:791=-0.0038738308742314377, LEX:807=-0.003670764447232141, LEX:613=0.019883600899863102, LEX:629=0.01940905023375661, LEX:653=0.005781137193266694, LEX:669=0.005582867957377929, LEX:725=-0.011292090257109746, LEX:741=-0.010841607030015559, LEX:789=-0.0036951715213537233, LEX:805=-0.003516205339545213}
24: =========== r:0.875 p:0.875 (epoch:6 file:0 0)
for every cup that is dry
(forall $0 (and (object:t $0 cup:d) (state:t $0 dry:s)))
MakeLex parse time: 0.003 sec.
Adding:
dry  :- NP : dry:s : 0.0
Lex Size: 1107
First parse time: 0.003 sec.
CORRECT:(forall $0 (and (object:t $0 cup:d) (state:t $0 dry:s)))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.557006929480544
every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 826 : 0.08411572711319129
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.557006929480544
every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 826 : 0.08411572711319129
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.997247596633292
Update:
{BB:object:t:state:t=-0.06965071330033551, LHT:0:object:t:e=-0.03040074291381726, LHH:0:object:t:var=-0.03040074291381726, LHT:1:object:t:d=-0.030400801820973274, BB:object:t:object:t=-0.04643380886689046, LHH:1:object:t:mugs:d=-0.030400801820973267, BB:has:t:object:t=-0.007183897387528042, LHT:0:has:t:e=-0.007183905094137464, LHH:0:has:t:var=-0.007183905094137464, LHT:1:has:t:e=-0.007183905094137464, LHH:1:has:t:the=-0.007183905094137464, LEX:293=0.0011463671162101532, LEX:825=0.005522038270108648, LEX:826=0.01637290184985592, LEX:827=-0.005990733733003281, LEX:828=-0.017050624883145866, LEX:613=0.011362800075604714, LEX:629=0.010532147750969226, LEX:653=0.0037153861091551365, LEX:669=0.003644107309645006, LEX:725=-0.011750848680662262, LEX:741=-0.011466039352993665, LEX:789=-0.003652540452240195, LEX:805=-0.003531356935287845}
25: =========== r:0.88 p:0.88 (epoch:6 file:0 0)
for every plate that is on the table
(forall $0 (and (object:t $0 plate:d) (On:t $0 (the $1 (object:t $1 table:f)))))
MakeLex parse time: 0.005 sec.
Adding:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
every plate that is  :- S|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($0 $3 $1))))))) : 0.0
Lex Size: 1108
First parse time: 0.006 sec.
WRONG: (forall $0 (and (object:t $0 plate:d) (On:t $0 (the $1 (On:t $1 (the $2 (object:t $2 table:f)))))))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.5683697295561487
every plate that is  :- S|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($0 $3 $1))))))) : 1107 : 0.0
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (On:t $0 (the $2 (object:t $2 $1))))) : 1085 : -1.9825364070685518
the table  :- NP : table:f : 73 : 20.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.5683697295561487
every plate that is  :- S|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($0 $3 $1))))))) : 1107 : 0.0
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 1.0350162247198997
the table  :- NP : table:f : 73 : 20.0
]
Scale: 0.9972376517047778
Update:
{BB:On:t:object:t=-0.007379221696604606, LHT:0:object:t:e=-0.003197403025180117, LHH:0:object:t:var=-0.003197403025180117, LHT:1:object:t:d=-0.003205172709369769, LHT:0:On:t:e=-0.607184102750034, LHH:0:On:t:var=-0.607184102750034, LHT:1:On:t:e=-0.6071976372101867, LHH:1:On:t:the=-0.6071976372101867, LHT:1:object:t:f=3.488318808649994E-5, LHH:1:object:t:table:f=3.488318808649994E-5, LHT:0:object:t:f=-2.1504106472323274E-5, LHH:0:object:t:table:f=-2.1504106472323274E-5, LHT:1:object:t:e=-4.861761036845344E-5, LHH:1:object:t:var=-4.861761036845344E-5, LHT:0:On:t:f=-1.3534460152770742E-5, LHH:0:On:t:table:f=-1.3534460152770742E-5, BB:object:t:object:t=-0.004919481131069958, LHH:1:object:t:mugs:d=-0.0032051727093697236, BB:has:t:object:t=-7.454321438347445E-4, LHT:0:has:t:e=-7.591665661168086E-4, LHH:0:has:t:var=-7.591665661168086E-4, LHT:1:has:t:e=-7.591665661168086E-4, LHH:1:has:t:the=-7.591665661168086E-4, BB:forall:has:t=-1.3734422282063911E-5, LEX:294=0.006609125162707796, LEX:829=0.0333288741918774, LEX:830=0.10894934097924804, LEX:831=0.01015894753430773, LEX:832=0.031511009955207336, LEX:1048=-0.1111198279140023, LEX:1107=-0.07943746992290175, LEX:613=-0.06566874331598385, LEX:629=0.01740339507248751, LEX:653=0.022208960816310797, LEX:669=0.02266628086714082, LEX:677=-1.3734422282063911E-5, LEX:725=-0.0012202775336853941, LEX:741=-0.0012394307902294263, LEX:789=-3.715538327102605E-4, LEX:805=-3.7386665877277585E-4, LEX:1013=0.41666222988439616, LEX:1017=-2.189051111349839E-5, LEX:1085=-0.6071763350768297, LEX:1087=-2.1302133356972214E-5}
26: =========== r:0.8461538461538461 p:0.8461538461538461 (epoch:6 file:0 0)
for all mugs that are in the sink
(forall $0 (and (object:t $0 mugs:d) (In:t $0 (the $1 (object:t $1 sink:f)))))
MakeLex parse time: 0.004 sec.
Adding:
the sink  :- NP : sink:f : 0.0
Lex Size: 1108
First parse time: 0.008 sec.
CORRECT:(forall $0 (and (object:t $0 mugs:d) (In:t $0 (the $1 (object:t $1 sink:f)))))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.5027009862401648
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 834 : 0.08145626215711832
the sink  :- NP : sink:f : 74 : 20.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.5027009862401648
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 834 : 0.08145626215711832
the sink  :- NP : sink:f : 74 : 20.0
]
Scale: 0.9972277069746106
Update:
{BB:In:t:object:t=-0.040738950299051425, LHT:0:object:t:e=-0.026373273574986936, LHH:0:object:t:var=-0.026373273574986936, LHT:1:object:t:d=-0.02651216661304912, LHH:1:object:t:mugs:d=-0.02651216661304912, LHT:0:In:t:e=1.4172955641470928E-4, LHH:0:In:t:var=1.4172955641470928E-4, LHT:1:object:t:f=1.4172955641470928E-4, LHH:1:object:t:sink:f=1.4172955641470928E-4, BB:object:t:object:t=-0.02038404841004395, BB:has:t:object:t=-0.00615726472404153, LHT:0:has:t:e=-0.006160101242394201, LHH:0:has:t:var=-0.006160101242394201, LHT:1:has:t:e=-0.006160101242394201, LHH:1:has:t:the=-0.006160101242394201, LHT:0:object:t:f=-1.417295564147077E-4, LHH:0:object:t:sink:f=-1.417295564147077E-4, LHT:0:In:t:f=-1.417295564147077E-4, LHH:0:In:t:sink:f=-1.417295564147077E-4, LHT:1:object:t:e=-1.445660747673789E-4, LHH:1:object:t:var=-1.445660747673789E-4, LEX:295=0.0010079764043221455, LEX:833=0.004588345625841387, LEX:834=0.014334865023502221, LEX:835=-0.005130036503984695, LEX:836=-0.014801150551777598, LEX:613=0.009436706102899511, LEX:629=0.00948934106479679, LEX:637=-1.0208121358682282E-4, LEX:653=0.003353732767859735, LEX:669=0.0033293280030139206, LEX:709=-2.914652103639201E-5, LEX:725=-0.010226845083667375, LEX:741=-0.010098910284303793, LEX:773=-1.0501821791492859E-5, LEX:789=-0.0031070954562296108, LEX:805=-0.0030396674460204266}
27: =========== r:0.8518518518518519 p:0.8518518518518519 (epoch:6 file:0 0)
if the robot is grasping the mug
(exists $0 (and (object:t $0 robot:p) (IsGrasping:t $0 (the $1 (object:t $1 mug:d)))))
MakeLex parse time: 0.004 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
the mug  :- NP : mug:d : 0.0
the robot  :- NP : robot:p : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsGrasping:t $4 ($2 $3)))))))) : 0.0
Lex Size: 1108
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsGrasping:t $0 (the $1 (object:t $1 mug:d)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0019678178945924645
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.7998958410124368
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsGrasping:t $4 ($2 $3)))))))) : 1030 : 0.0010110195438648945
the mug  :- NP : mug:d : 16 : 19.999839038370787
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0019678178945924645
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.7998958410124368
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsGrasping:t $4 ($2 $3)))))))) : 1030 : 0.0010110195438648945
the mug  :- NP : mug:d : 16 : 19.999839038370787
]
Scale: 0.9972177624427846
Update:
{LHT:0:object:t:e=0.008991306970442718, LHH:0:object:t:var=0.008991306970442718, LHT:1:object:t:p=0.00899130697044283, LHH:1:object:t:robot:p=0.00899130697044283, LHT:0:object:t:p=-0.008991306970442859, LHH:0:object:t:robot:p=-0.008991306970442859, LHT:1:object:t:e=-0.008991306970442859, LHH:1:object:t:var=-0.008991306970442859, LEX:884=0.0019585934740320495, LEX:1014=-7.738154144764003E-4, LEX:1018=-0.0011607539846286102, LEX:1020=-2.402409340881119E-5, LEX:1029=-0.0029820859057455708, LEX:1030=0.0010234924132316609}
28: =========== r:0.8571428571428571 p:0.8571428571428571 (epoch:6 file:0 0)
if the robot is near the refrigerator
(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 refrigerator:f)))))
MakeLex parse time: 0.005 sec.
Adding:
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
near  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 0.0
Lex Size: 1109
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 refrigerator:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0019678178945924645
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.7987350870278083
near  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 1108 : 0.0
the refrigerator  :- NP : refrigerator:f : 75 : 20.000064119849167
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0019678178945924645
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.7987350870278083
near  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 1108 : 0.0
the refrigerator  :- NP : refrigerator:f : 75 : 20.000064119849167
]
Scale: 0.997207818109294
Update:
{BB:IsNear:t:object:t=0.24692352998668607, LHT:0:object:t:e=0.006302442452593511, LHH:0:object:t:var=0.006302442452593511, LHT:1:object:t:p=0.006302442452593401, LHH:1:object:t:robot:p=0.006302442452593401, LHT:0:IsNear:t:e=0.24692352998668607, LHH:0:IsNear:t:var=0.24692352998668607, LHT:1:IsNear:t:e=0.24692352998668607, LHH:1:IsNear:t:the=0.24692352998668607, BB:On:t:object:t=-0.24692352998668599, LHT:0:On:t:e=-0.24692352998668599, LHH:0:On:t:var=-0.24692352998668599, LHT:1:On:t:e=-0.24692352998668599, LHH:1:On:t:the=-0.24692352998668599, LHT:0:object:t:p=-0.006302442452593268, LHH:0:object:t:robot:p=-0.006302442452593268, LHT:1:object:t:e=-0.006302442452593268, LHH:1:object:t:var=-0.006302442452593268, LEX:885=0.09436553058322562, LEX:1012=-0.10411904902905439, LEX:1014=-0.00209457951214974, LEX:1016=-0.14280448095763157, LEX:1018=0.105845995808453, LEX:1020=0.0021931833150863815, LEX:1031=0.02120667944194757, LEX:1033=0.025406719896884797, LEX:1032=-0.08345785098093697, LEX:1034=-0.11685227966691662, LEX:1108=0.10594459961138959}
29: =========== r:0.8620689655172413 p:0.8620689655172413 (epoch:6 file:0 0)
if the robot is close to the stove
(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
MakeLex parse time: 0.006 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
the stove  :- NP : stove:f : 0.0
the robot  :- NP : robot:p : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
close to  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 0.0
Lex Size: 1109
First parse time: 0.007 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0019678178945924645
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.9045810828362613
close to  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 1099 : 6.351782868179248E-4
the stove  :- NP : stove:f : 76 : 19.002046401367956
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0019678178945924645
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.9045810828362613
close to  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 1099 : 6.351782868179248E-4
the stove  :- NP : stove:f : 76 : 19.002046401367956
]
Scale: 0.9971978739741327
Update:
{BB:IsNear:t:object:t=0.1309969627667106, LHT:0:object:t:e=0.008800546607692406, LHH:0:object:t:var=0.008800546607692406, LHT:1:object:t:p=0.008800546607692295, LHH:1:object:t:robot:p=0.008800546607692295, LHT:0:IsNear:t:e=0.1309969627667106, LHH:0:IsNear:t:var=0.1309969627667106, LHT:1:IsNear:t:e=0.1309969627667106, LHH:1:IsNear:t:the=0.1309969627667106, BB:On:t:object:t=-0.1309969627667107, LHT:0:On:t:e=-0.1309969627667107, LHH:0:On:t:var=-0.1309969627667107, LHT:1:On:t:e=-0.1309969627667107, LHH:1:On:t:the=-0.1309969627667107, LHT:0:object:t:p=-0.008800546607692316, LHH:0:object:t:robot:p=-0.008800546607692316, LHT:1:object:t:e=-0.008800546607692316, LHH:1:object:t:var=-0.008800546607692316, LEX:886=0.010155285559443833, LEX:1035=-0.0019355467679963826, LEX:1036=-0.003016414283810746, LEX:1099=0.02454779800740419, LEX:1012=-0.056552864478318345, LEX:1014=-8.774982426335922E-4, LEX:1016=-0.07444409828839237, LEX:1018=0.024959052787697205, LEX:1020=4.662434623405645E-4, LEX:1031=0.04377049865171175, LEX:1033=0.05252338045221804, LEX:1049=-0.009914965797642816, LEX:1051=-0.0049605955078439795, LEX:1053=-0.009914965797642816, LEX:1055=-0.0049605955078439795, LEX:1050=-0.009914965797642871, LEX:1052=-0.0049605955078439795, LEX:1054=-0.009914965797642871, LEX:1056=-0.0049605955078439795}
30: =========== r:0.8666666666666667 p:0.8666666666666667 (epoch:6 file:0 0)
if the microwave is on and the robot is close to the microwave
(and (exists $0 (and (object:t $0 microwave:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 microwave:f))))))
MakeLex parse time: 0.026 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the microwave  :- NP : microwave:f : 0.0
on  :- NP : IsOn:s : 0.0
the microwave  :- NP : microwave:f : 0.0
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 1.2756999999999998
the robot  :- NP : robot:p : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
close to  :- S/NP\S\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 t (lambda $4 e (and $3 (exists $5 (and ($0 $1 $5) (IsNear:t $5 ($2 $4)))))))))) : 0.0
Lex Size: 1109
First parse time: 0.06 sec.
CORRECT:(and (exists $0 (and (object:t $0 microwave:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 microwave:f))))))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.6197264748738642
the microwave  :- NP : microwave:f : 77 : 19.999988669463704
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.2752736272881973
on  :- NP : IsOn:s : 57 : 8.990587950392912
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 2.116002631710274
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.9295401356239584
close to  :- S/NP\S\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 t (lambda $4 e (and $3 (exists $5 (and ($0 $1 $5) (IsNear:t $5 ($2 $4)))))))))) : 1057 : -0.003819596873763274
]
Second parse time: 0.023 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.6197264748738642
the microwave  :- NP : microwave:f : 77 : 19.999988669463704
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.2752736272881973
on  :- NP : IsOn:s : 57 : 8.990587950392912
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 2.116002631710274
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.9295401356239584
close to  :- S/NP\S\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 t (lambda $4 e (and $3 (exists $5 (and ($0 $1 $5) (IsNear:t $5 ($2 $4)))))))))) : 1057 : -0.003819596873763274
]
Scale: 0.9971879300372948
Update:
{BB:exists:exists=-0.22946352101332518, BB:object:t:state:t=-1.184218265998247E-4, LHT:0:object:t:e=-0.0444379582584675, LHH:0:object:t:var=-0.0444379582584675, LHT:0:state:t:e=-1.403577538993317E-4, LHH:0:state:t:var=-1.403577538993317E-4, LHT:1:state:t:s=-1.1825045856958115E-4, LHH:1:state:t:IsOn:s=0.001590273844997988, LHT:1:object:t:p=-1.036655343213712E-4, LHH:1:object:t:robot:p=0.003612627851328188, LHT:0:object:t:p=-0.0036126278513285886, LHH:0:object:t:robot:p=-0.0036126278513285886, LHT:1:object:t:e=-0.0036126315357667017, LHH:1:object:t:var=-0.0036126315357667017, LHH:1:state:t:var=-2.2996993582779116E-5, BB:exists:object:t=-0.00959912085712041, LHH:1:object:t:you:p=-0.00371629338564979, BB:exists:state:t=-2.255202090336933E-5, LHT:1:object:t:d=-0.04592476133097472, LHT:1:state:t:e=-2.2552268903873476E-5, LHT:0:object:t:s=-0.0015901505805329022, LHH:0:object:t:IsOn:s=-0.0015901505805329022, LHH:1:object:t:bowl:d=-0.0017080795788887043, LHH:1:state:t:yellow:s=-0.0017080795788887043, LHH:1:object:t:cups:d=-0.044216476470537065, LEX:1037=0.0010148138276789636, LEX:77=-1.701965425900015E-5, LEX:1057=-0.0010148138300407974, LEX:123=0.0017114275982012385, LEX:131=0.02136664852865193, LEX:172=-0.001708079578888704, LEX:311=-8.545175721012249E-4, LEX:365=-0.0028617758135485653, LEX:373=-0.043361958898435846, LEX:547=0.01102014721213651, LEX:559=0.01467196703301089, LEX:72=1.7019654258042356E-5, LEX:518=0.014701343963863753, LEX:558=-2.023129450797455E-5, LEX:570=0.021807359097479478, LEX:977=-0.045924556049425774, LEX:1014=-0.0036126278513285894, LEX:1018=0.0025513078665994823, LEX:1020=0.009482590437278674}
31: =========== r:0.8709677419354839 p:0.8709677419354839 (epoch:6 file:0 0)
if the stove is not on and the mug contains coffee
(and (exists $0 (and (object:t $0 stove:f) (not (state:t $0 IsOn:s)))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coffee:q))))))
MakeLex parse time: 0.009 sec.
Adding:
if  :- S/S/NP/(S|NP|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 t (and (exists $4 (and ($0 $4) ($1 $2 $4))) $3))))) : 0.0
if  :- S/S/(S|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (lambda $2 t (and (exists $3 (and ($0 $3) ($1 $3))) $2)))) : 0.0
not  :- S|NP/NP : (lambda $0 e (lambda $1 e (not (state:t $1 $0)))) : 3.333333333333333
on  :- NP : IsOn:s : 0.0
coffee  :- NP : coffee:q : 0.0
the stove  :- NP : stove:f : 0.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
not  :- S|NP/NP : (lambda $0 e (lambda $1 e (not (state:t $1 $0)))) : 3.333333333333333
on  :- NP : IsOn:s : 0.0
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 1.2756999999999998
coffee  :- NP : coffee:q : 0.0
the mug  :- NP : mug:d : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1109
First parse time: 0.012 sec.
CORRECT:(and (exists $0 (and (object:t $0 stove:f) (not (state:t $0 IsOn:s)))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coffee:q))))))
Using:
[LexEntries and scores:
if  :- S/S/NP/(S|NP|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 t (and (exists $4 (and ($0 $4) ($1 $2 $4))) $3))))) : 1100 : 0.0
if  :- S/S/(S|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (lambda $2 t (and (exists $3 (and ($0 $3) ($1 $3))) $2)))) : 1101 : 0.0
the stove  :- NP : stove:f : 76 : 19.002046401367956
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.065754006746501
not  :- S|NP/NP : (lambda $0 e (lambda $1 e (not (state:t $1 $0)))) : 1063 : 3.5936973586618945
on  :- NP : IsOn:s : 57 : 8.990587950392912
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 2.116002631710274
the mug  :- NP : mug:d : 16 : 19.999839038370787
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9994018845729205
coffee  :- NP : coffee:q : 35 : 10.0
]
Second parse time: 0.015 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S/NP/(S|NP|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 t (and (exists $4 (and ($0 $4) ($1 $2 $4))) $3))))) : 1100 : 0.0
if  :- S/S/(S|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (lambda $2 t (and (exists $3 (and ($0 $3) ($1 $3))) $2)))) : 1101 : 0.0
the stove  :- NP : stove:f : 76 : 19.002046401367956
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.065754006746501
not  :- S|NP/NP : (lambda $0 e (lambda $1 e (not (state:t $1 $0)))) : 1063 : 3.5936973586618945
on  :- NP : IsOn:s : 57 : 8.990587950392912
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 2.116002631710274
the mug  :- NP : mug:d : 16 : 19.999839038370787
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9994018845729205
coffee  :- NP : coffee:q : 35 : 10.0
]
Scale: 0.9971779862987744
Update:
{BB:not:object:t=1.131043608651853E-5, LHT:0:state:t:e=-1.0238507409670313E-5, LHH:0:state:t:var=-1.0238507409670313E-5, BB:exists:not=-1.1310373047887806E-5, BB:object:t:state:t=-1.1310373061581906E-5, LHT:1:state:t:e=-1.2382238848341836E-5, LHH:1:state:t:var=-1.2382238834647735E-5, LEX:570=-1.1304415138110522E-5, LEX:1020=1.1304476204444273E-5}
32: =========== r:0.875 p:0.875 (epoch:6 file:0 0)
if the mug is green and the TV is on
(and (exists $0 (and (object:t $0 mug:d) (state:t $0 green:s))) (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s))))
MakeLex parse time: 0.038 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the mug  :- NP : mug:d : 0.0
green  :- NP : green:s : 0.0
on  :- NP : IsOn:s : 0.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 0.0
the TV  :- NP : tv:f : 0.0
Lex Size: 1109
First parse time: 0.094 sec.
CORRECT:(and (exists $0 (and (object:t $0 mug:d) (state:t $0 green:s))) (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s))))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.6050545078408534
the mug  :- NP : mug:d : 16 : 19.999839038370787
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.2605722833243336
green  :- NP : green:s : 51 : 10.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 966 : 0.4041869136735903
the TV  :- NP : tv:f : 79 : 20.0
is  :- S/NP\S\(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 901 : 0.15606738935218012
on  :- NP : IsOn:s : 57 : 8.990587950392912
]
Second parse time: 0.036 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.6050545078408534
the mug  :- NP : mug:d : 16 : 19.999839038370787
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.2605722833243336
green  :- NP : green:s : 51 : 10.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 966 : 0.4041869136735903
the TV  :- NP : tv:f : 79 : 20.0
is  :- S/NP\S\(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 901 : 0.15606738935218012
on  :- NP : IsOn:s : 57 : 8.990587950392912
]
Scale: 0.9971680427585657
Update:
{BB:exists:exists=-0.20700857174324513, BB:object:t:state:t=0.037863643884350665, LHT:0:object:t:e=-0.046666154060857154, LHH:0:object:t:var=-0.046666154060857154, LHT:1:object:t:d=-0.04652610766899081, LHT:0:state:t:e=0.0015058269904972528, LHH:0:state:t:var=0.0015058269904972528, LHT:1:state:t:s=0.0015655167090343634, LHH:1:state:t:green:s=0.0032617429700929367, LHH:1:state:t:IsOn:s=1.069248990798735E-5, BB:has:t:object:t=-0.03712238227896192, LHT:0:has:t:e=-0.03712238227896192, LHH:0:has:t:var=-0.03712238227896192, LHT:1:has:t:e=-0.03712238227896192, LHH:1:has:t:the=-0.03712238227896192, LHH:1:object:t:cup:d=-0.005110909073308426, BB:state:t:state:t=-2.9210177795159366E-5, LHT:1:state:t:e=-5.9689830477774464E-5, LHH:1:state:t:var=-5.968993322887909E-5, BB:exists:object:t=-0.015318375554616548, LHT:0:object:t:s=-0.003272053542593016, LHH:0:object:t:IsOn:s=-1.069222916143313E-5, BB:exists:state:t=-2.0012808570188078E-4, LHH:1:state:t:yellow:s=-0.0017069186482166641, LHH:1:object:t:bowl:d=-0.0014852393822298415, LHH:1:object:t:cups:d=-0.03992995921510129, LHT:1:object:t:p=-0.0034130914916041814, LHH:1:object:t:you:p=-0.0034130914916041814, LHH:0:object:t:green:s=-0.003261361313431583, BB:In:t:state:t=-0.0011202918623365197, LHT:0:In:t:e=-5.601459311682599E-4, LHH:0:In:t:var=-5.601459311682599E-4, BB:In:t:object:t=-0.001120088621401481, LHT:1:In:t:f=-5.599951555421622E-4, LHH:1:In:t:tv:f=-5.599951555421622E-4, LEX:16=-1.4034146666638654E-5, LEX:123=0.0011196610035401058, LEX:131=0.023206658646672738, LEX:151=-1.27744119344157E-5, LEX:172=-0.001484929499434434, LEX:218=-2.218452524318079E-4, LEX:311=-6.508710148045519E-4, LEX:349=-0.004550726166143638, LEX:365=-0.0026051834688793807, LEX:373=-0.034727969157124755, LEX:397=-1.5697764601547854E-4, LEX:547=0.008781921236661355, LEX:559=0.011850777692223327, LEX:1028=-5.601459311682599E-4, LEX:10=1.4034146666901639E-5, LEX:518=0.026580141512786353, LEX:522=-0.0049295491315167195, LEX:546=-1.8131454980365878E-4, LEX:558=-4.088050114204798E-5, LEX:570=0.021760506543759783, LEX:600=-0.036955761009630196, LEX:901=0.02700590972292184, LEX:929=-0.008119470882836821, LEX:977=-0.03032184883981659, LEX:1020=0.005203844389195491, LEX:858=-0.03712238227896193, LEX:890=0.0039253921226686615, LEX:918=-4.170581831215307E-5, LEX:954=2.463117587134051E-4, LEX:966=0.033567348432888236, LEX:972=-5.599957943239321E-4, LEX:1022=-1.460428133594747E-5}
33: =========== r:0.8787878787878788 p:0.8787878787878788 (epoch:6 file:0 0)
if there exists a mug and the mug contains sugar
(and (exists $0 (object:t $0 mug:d)) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 sugar:q))))))
MakeLex parse time: 0.041 sec.
Adding:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
a mug  :- NP : mug:d : 0.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 0.5467285714285715
the mug  :- NP : mug:d : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
sugar  :- NP : sugar:q : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
sugar  :- NP : sugar:q : 0.0
Lex Size: 1109
First parse time: 0.058 sec.
CORRECT:(and (exists $0 (object:t $0 mug:d)) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 sugar:q))))))
Using:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.29540093647813565
a mug  :- NP : mug:d : 22 : 20.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : -1.0093394871692207
the mug  :- NP : mug:d : 16 : 19.99982500422412
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.3359859116096904
sugar  :- NP : sugar:q : 30 : 10.0
]
Second parse time: 0.04 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.29540093647813565
a mug  :- NP : mug:d : 22 : 20.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : -1.0093394871692207
the mug  :- NP : mug:d : 16 : 19.99982500422412
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.3359859116096904
sugar  :- NP : sugar:q : 30 : 10.0
]
Scale: 0.9971580994166624
Update:
{LHT:0:object:t:e=-0.002203490478755951, LHH:0:object:t:var=-0.002203490478755951, LHT:1:object:t:d=-0.0018762068762288775, LHH:1:object:t:mug:d=1.2837582226008778E-4, BB:has:t:object:t=3.224661058519949E-4, LHT:0:has:t:e=-0.023440535732134442, LHH:0:has:t:var=-0.023440535732134442, LHT:1:has:t:e=-0.023440538475713462, LHH:1:has:t:the=-0.02344053575708753, LHT:0:object:t:d=-1.2661052414101112E-4, LHH:0:object:t:mug:d=-1.2661052414101112E-4, LHT:1:state:t:e=-3.23062727717728E-4, BB:object:t:state:t=-9.76110895080931E-4, LHT:0:state:t:e=-9.761061314193121E-4, LHH:0:state:t:var=-9.761061314193121E-4, LHH:1:state:t:the=-3.224787328772288E-4, BB:exists:object:t=-0.0019169994530410857, LHT:1:object:t:p=-4.482735749266602E-4, LHH:1:object:t:you:p=-4.482735749266602E-4, LHT:1:state:t:s=-6.548083918323335E-4, LHH:1:state:t:yellow:s=-6.548083729185211E-4, BB:object:t:object:t=-9.112782143004321E-4, LHH:1:object:t:bowl:d=-8.149193381974713E-4, LHH:1:object:t:cups:d=-0.001001647697203808, LHH:1:object:t:cup:d=-1.8801566308641093E-4, LEX:122=5.194291262741079E-4, LEX:125=2.769678556563729E-4, LEX:129=4.492981325217932E-5, LEX:133=4.977479925930163E-4, LEX:137=7.413220396918382E-5, LEX:141=1.283189218218964E-4, LEX:145=3.226850059849287E-4, LEX:149=1.2826100284216795E-4, LEX:153=6.971154477104534E-5, LEX:200=-2.866072497003426E-4, LEX:220=-1.9987610506627185E-4, LEX:240=-5.50114203172312E-4, LEX:423=-5.794198057324385E-5, LEX:124=2.4937688140753573E-5, LEX:128=-8.10356542607667E-4, LEX:132=-1.1688169226960498E-4, LEX:140=3.1191448639194137E-4, LEX:148=3.095714784889426E-4, LEX:152=-4.4147190881685465E-4, LEX:123=4.7756691292710346E-5, LEX:127=2.550200082792444E-5, LEX:131=2.0258220229690265E-4, LEX:135=4.639131391271569E-5, LEX:139=3.1195721733059555E-4, LEX:143=6.649408399222771E-5, LEX:147=3.097754655632621E-4, LEX:151=3.5287749463034706E-5, LEX:198=-1.252076928731197E-4, LEX:208=-2.4387045740800188E-5, LEX:218=-4.176497890538538E-5, LEX:238=-2.3342501467282136E-4, LEX:333=-2.6479160984620756E-4, LEX:349=-7.106163369186617E-4, LEX:365=-3.7502134992571125E-4, LEX:381=-4.332496602581421E-5, LEX:389=-2.6080056744447893E-5, LEX:397=-2.6661421236835944E-5, LEX:571=-4.5107863510028246E-5, LEX:583=-5.664859764258756E-5, LEX:595=-2.5898938293003825E-5, LEX:419=-2.3702786788752983E-4, LEX:126=1.6179366928241015E-4, LEX:130=-2.2048655809228237E-4, LEX:134=5.898955818383553E-4, LEX:138=6.552708449803964E-5, LEX:142=1.2816024036967452E-4, LEX:146=2.8760758083880853E-4, LEX:150=1.2810191120192932E-4, LEX:154=-9.468374655571805E-4, LEX:858=3.2247873192996023E-4, LEX:966=-3.224692701636127E-4, LEX:454=-0.023762922233322995, LEX:472=-3.224787280546983E-4, LEX:502=0.02408540096754372}
34: =========== r:0.8823529411764706 p:0.8823529411764706 (epoch:6 file:0 0)
if the television is on
(exists $0 (and (object:t $0 television:f) (state:t $0 IsOn:s)))
MakeLex parse time: 0.004 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 0.0
on  :- NP : IsOn:s : 0.0
Lex Size: 1109
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 television:f) (state:t $0 IsOn:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -1.0240218405727168
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 845 : 4.252958935996646
on  :- NP : IsOn:s : 57 : 8.990587950392912
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -1.0240218405727168
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 845 : 4.252958935996646
on  :- NP : IsOn:s : 57 : 8.990587950392912
]
Scale: 0.997148156273059
Update:
{BB:object:t:state:t=7.797680410683215E-5, LHT:0:object:t:e=-0.007105201113791978, LHH:0:object:t:var=-0.007105201113791978, LHH:1:object:t:television:f=0.08263558545057884, LHT:0:state:t:e=6.688592807013807E-5, LHH:0:state:t:var=6.688592807013807E-5, LHT:1:state:t:s=7.797680410683215E-5, LHH:1:state:t:IsOn:s=2.0146382576581256E-4, LHH:1:object:t:tv:f=-0.08263558545057874, BB:exists:object:t=-0.004447508471369334, LHT:1:object:t:p=-0.004447508471369334, LHH:1:object:t:you:p=-0.004447508471369334, LHT:0:object:t:s=-2.014638257657835E-4, LHH:0:object:t:IsOn:s=-2.014638257657835E-4, BB:exists:exists=-0.0028591564681882176, LHT:1:object:t:d=-0.0028591564681882176, LHH:1:object:t:bowl:d=-1.2348702165894884E-4, LHH:1:state:t:yellow:s=-1.2348702165894884E-4, LHH:1:object:t:cups:d=-0.002735669446529268, BB:exists:state:t=-1.1090876036773717E-5, LHT:1:state:t:e=-1.1090876036773717E-5, LHH:1:state:t:var=-1.1090876036773717E-5, LEX:304=0.002643575036201529, LEX:845=0.07999182936175862, LEX:78=-0.08263558545057874, LEX:123=0.007282927855059601, LEX:131=0.05052636689228833, LEX:172=-1.2348702165894884E-4, LEX:311=-4.692061562729557E-5, LEX:365=-0.004400587855742039, LEX:373=-0.0026887488309019726, LEX:547=-0.022371956177189605, LEX:559=-0.030821350335048084, LEX:518=-0.03081918357114528, LEX:570=-0.026390582756521012, LEX:977=-0.002859156468188217, LEX:1020=-0.02256449589082142}
35: =========== r:0.8857142857142857 p:0.8857142857142857 (epoch:6 file:0 0)
if you find any cups
(exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d))))
MakeLex parse time: 0.004 sec.
Adding:
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 0.0
you  :- NP : you:p : 0.0
find any cups  :- S\S : (lambda $0 t $0) : 0.0
Lex Size: 1109
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d))))
Using:
[LexEntries and scores:
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 349 : 0.9845387550746151
you  :- NP : you:p : 2 : 10.893265828230275
find any cups  :- S\S : (lambda $0 t $0) : 314 : 0.21244572729246172
]
Second parse time: 0.007 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 349 : 0.9845387550746151
you  :- NP : you:p : 2 : 10.893265828230275
find any cups  :- S\S : (lambda $0 t $0) : 314 : 0.21244572729246172
]
Scale: 0.9971382133277494
Update:
{BB:exists:object:t=0.04969627177188102, LHT:0:object:t:e=0.049776172289260255, LHH:0:object:t:var=0.049776172289260255, LHT:1:object:t:p=-0.012360995201074617, LHH:1:object:t:you:p=-0.012360995201074617, LHT:1:object:t:d=0.06214176916145114, LHH:1:object:t:cups:d=0.07541682671804376, BB:object:t:state:t=-0.03970276362109482, LHH:1:object:t:bowl:d=-6.568239328553682E-4, LHT:0:state:t:e=-0.039807063321357035, LHH:0:state:t:var=-0.039807063321357035, LHT:1:state:t:s=-0.03979667548963806, LHH:1:state:t:yellow:s=-0.03979667548963806, BB:object:t:object:t=-2.2013701515181697E-5, LHT:1:state:t:e=-1.0387831718973228E-5, LHH:1:state:t:var=-1.0387831718973228E-5, LHH:1:object:t:cup:d=-0.012618233623737525, LEX:309=-8.107709592037705E-4, LEX:323=-9.181791203172797E-4, LEX:339=-3.1438664396665E-5, LEX:347=-1.1176804192438503E-4, LEX:355=-0.010413717744294107, LEX:379=-8.107709592037705E-4, LEX:395=-8.381251152655075E-4, LEX:403=-0.0021631829619304993, LEX:411=-3.1348286420119324E-5, LEX:312=-2.1070943945972017E-4, LEX:326=-0.0014161803964328145, LEX:334=-1.1974437902473115E-4, LEX:342=-4.854672487149475E-5, LEX:358=-5.940155556344151E-5, LEX:366=-3.0686904968146953E-4, LEX:382=-8.978078607916832E-4, LEX:398=-8.127566008339346E-5, LEX:307=-8.107709592037705E-4, LEX:321=-9.181791203172797E-4, LEX:337=-3.1438664396665E-5, LEX:345=-1.1176800101134771E-4, LEX:353=-3.14281875814501E-5, LEX:377=-8.107709592037705E-4, LEX:393=-8.381248087665779E-4, LEX:409=-3.1348286420119324E-5, LEX:314=0.009599777041010319, LEX:328=-9.181036874036701E-4, LEX:336=-1.1176791192755081E-4, LEX:344=-3.164745646056664E-5, LEX:360=0.025853914808011552, LEX:368=-8.107709592037705E-4, LEX:376=-0.0021393331180979422, LEX:384=-8.381241413273978E-4, LEX:400=-3.134828653749339E-5, LEX:408=-0.007839077617906413, LEX:305=-8.107709592037705E-4, LEX:319=-9.183442187446286E-4, LEX:335=-3.144433779923743E-5, LEX:343=-1.1057258738471889E-4, LEX:351=-3.142733279586938E-5, LEX:375=-0.0010020198401450575, LEX:391=-8.291706762924769E-4, LEX:407=-9.097593588249432E-5, LEX:316=-8.107709592037705E-4, LEX:330=-9.181791203172797E-4, LEX:338=-1.1176800101134771E-4, LEX:346=-3.1438664396665E-5, LEX:362=-3.14281875814501E-5, LEX:370=-8.107709592037705E-4, LEX:386=-8.381248087665779E-4, LEX:402=-3.1348286420119324E-5, LEX:131=0.019066670463589022, LEX:151=-9.570217901285822E-4, LEX:198=-1.0775434844940306E-5, LEX:208=-5.900129975481135E-4, LEX:218=-0.03966227459925256, LEX:228=-2.812309000523059E-5, LEX:238=-1.9666765427638723E-5, LEX:248=-1.0462244350983277E-4, LEX:333=-2.3925807571358797E-5, LEX:341=-7.484214630979092E-5, LEX:349=0.07273143401773897, LEX:365=-0.0012684165259132679, LEX:373=-1.9907471901914602E-4, LEX:389=-6.292085730391226E-4, LEX:397=-0.024688552076316986, LEX:405=-3.1344310954926986E-5, LEX:553=-5.622131210363876E-5, LEX:559=-1.0368186177333154E-5, LEX:2=0.026556713078370445, LEX:25=-0.012557206213995578, LEX:318=-8.107709592037705E-4, LEX:332=-9.181404945771911E-4, LEX:340=-1.1176800101134771E-4, LEX:348=-3.143733275382306E-5, LEX:364=-3.14281875814501E-5, LEX:372=-8.107709592037705E-4, LEX:388=-8.381248087665779E-4, LEX:404=-1.7335371390473804E-5}
36: =========== r:0.8888888888888888 p:0.8888888888888888 (epoch:6 file:0 0)
When the water is boiling
(exists $0 (and (object:t $0 water:q) (state:t $0 IsBoiling:s)))
MakeLex parse time: 0.002 sec.
Adding:
boiling  :- NP : IsBoiling:s : 0.0
water  :- NP : water:q : 0.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
Lex Size: 1109
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 water:q) (state:t $0 IsBoiling:s)))
Using:
[LexEntries and scores:
When  :- S/NP/(S|NP)/(S|NP|(S|NP)) : (lambda $0 <<e,t>,<e,t>> (lambda $1 <e,t> (lambda $2 e ($0 $1 $2)))) : 1064 : 0.006918934982993733
the  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 1069 : 0.010310252202208233
water  :- NP : water:q : 32 : 10.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.0831033537719224
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
When  :- S/NP/(S|NP)/(S|NP|(S|NP)) : (lambda $0 <<e,t>,<e,t>> (lambda $1 <e,t> (lambda $2 e ($0 $1 $2)))) : 1064 : 0.006918934982993733
the  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 1069 : 0.010310252202208233
water  :- NP : water:q : 32 : 10.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.0831033537719224
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Scale: 0.9971282705807275
Update:
{BB:object:t:state:t=0.022088029081977784, LHT:0:object:t:e=0.022088029081977784, LHH:0:object:t:var=0.022088029081977784, LHT:0:state:t:e=0.022085176219334833, LHH:0:state:t:var=0.022085176219334833, LHT:1:state:t:s=0.022094436969165968, LHH:1:state:t:IsBoiling:s=0.022094436969165968, LHT:1:state:t:e=-1.5668637019172495E-5, LHH:1:state:t:var=-1.5668637019172495E-5, LHT:0:object:t:s=-0.02208802908197777, LHH:0:object:t:IsBoiling:s=-0.02208802908197777, LEX:846=0.0015860086557318374, LEX:1039=0.0016565364128725874, LEX:1064=0.0033478246809855294, LEX:1066=0.0015887646568211245, LEX:1068=-0.018148514585548933, LEX:1070=0.0016624001983816135, LEX:1072=0.0016624001983816135, LEX:1074=0.001660684545900824, LEX:1076=0.0016607886947265854, LEX:1078=0.001660681072438491, LEX:1080=0.0016607886947265854, LEX:1065=0.001668176062395276, LEX:1067=-0.019770265826608936, LEX:1069=0.004890164516471411, LEX:1071=0.0016624001983816135, LEX:1073=0.0016624001983816135, LEX:1075=0.0016606845425567074, LEX:1077=0.0016607886947265854, LEX:1079=0.001660681075782594, LEX:1081=0.0016607886947265854, LEX:570=0.0023057465044484925, LEX:1020=-0.0023073832790306056}
37: =========== r:0.8918918918918919 p:0.8918918918918919 (epoch:6 file:0 0)
when the water in the pot is boiling
(exists $0 (and (object:t $0 water:q) (In:t $0 (the $1 (object:t $1 pot:d))) (state:t $0 IsBoiling:s)))
MakeLex parse time: 0.007 sec.
Adding:
when  :- NP|(S|NP)/(NP|(S|NP)) : (lambda $0 <<e,t>,e> (lambda $1 <e,t> ($0 $1))) : 0.0
the  :- NP|(S|NP) : (lambda $0 <e,t> (the $1 ($0 $1))) : 0.820255
Lex Size: 1111
First parse time: 0.007 sec.
CORRECT:(exists $0 (and (object:t $0 water:q) (In:t $0 (the $1 (object:t $1 pot:d))) (state:t $0 IsBoiling:s)))
Using:
[LexEntries and scores:
when  :- NP|(S|NP)/(NP|(S|NP)) : (lambda $0 <<e,t>,e> (lambda $1 <e,t> ($0 $1))) : 1109 : 0.0
the  :- NP|(S|NP) : (lambda $0 <e,t> (the $1 ($0 $1))) : 1110 : 0.820255
water  :- NP : water:q : 32 : 10.0
in  :- S/NP/(S|NP)\(NP|(S|NP))\NP : (lambda $0 e (lambda $1 <<e,t>,e> (lambda $2 <e,t> (lambda $3 e (exists $4 (and (In:t $4 ($1 $2)) (object:t $4 $0) (state:t $4 $3))))))) : 1102 : 0.0
the pot  :- NP : pot:d : 19 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.085410737050953
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Second parse time: 0.007 sec.
Best LexEntries:
[LexEntries and scores:
when  :- NP|(S|NP)/(NP|(S|NP)) : (lambda $0 <<e,t>,e> (lambda $1 <e,t> ($0 $1))) : 1109 : 0.0
the  :- NP|(S|NP) : (lambda $0 <e,t> (the $1 ($0 $1))) : 1110 : 0.820255
water  :- NP : water:q : 32 : 10.0
in  :- S/NP/(S|NP)\(NP|(S|NP))\NP : (lambda $0 e (lambda $1 <<e,t>,e> (lambda $2 <e,t> (lambda $3 e (exists $4 (and (In:t $4 ($1 $2)) (object:t $4 $0) (state:t $4 $3))))))) : 1102 : 0.0
the pot  :- NP : pot:d : 19 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.085410737050953
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Scale: 0.9971183280319875
Update:
{BB:object:t:state:t=-0.003459556983479791, LHT:1:In:t:e=0.0034595569834795694, LHT:0:state:t:e=-0.0034595569908733807, LHH:0:state:t:var=-0.0034595569908733807, LHT:1:state:t:s=-0.003459556983479791, LHT:1:In:t:s=-0.003459556983479654, LHH:1:state:t:var=-0.003459556990873178, LEX:570=-0.0034588932900830533, LEX:1020=0.0034588932393992363}
38: =========== r:0.8947368421052632 p:0.8947368421052632 (epoch:6 file:0 0)
if there exists a cup and there exists a cup and there exists a cup and there exists a cup and there exists a cup
(and (exists $0 (object:t $0 cup:d)))
MakeLex parse time: 0.224 sec.
Adding:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 0.048352000000000006
and there exists a cup and there exists a cup and there exists a cup  :- S\S : (lambda $0 t $0) : 0.0
Lex Size: 1111
First parse time: 71.723 sec.
CORRECT:(and (exists $0 (object:t $0 cup:d)))
Using:
[LexEntries and scores:
if there exists a cup and there exists a cup and there exists a cup and there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 118 : 0.5109239901033563
]
Second parse time: 0.261 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 9.872497293656988
and there exists a cup and there exists a cup and there exists a cup  :- S\S : (lambda $0 t $0) : 999 : 2.8560088840410693
]
Scale: 0.9971083856815237
Update:
{LEX:118=-0.9971044183297484, LHT:1:has:t:e=-1.1902055324487491E-5, LHH:1:has:t:the=-1.1902055324487491E-5, LHT:0:has:t:e=-1.1850172675321809E-5, LHH:0:has:t:var=-1.1850125738605661E-5, LHT:0:state:t:e=-1.5869407099316656E-5, LHH:0:state:t:var=-1.5869407099316656E-5, LHT:1:state:t:e=-1.588527808318094E-5, LHH:1:state:t:var=-1.9836758874145813E-5, LEX:1092=-1.2107900638273713E-5, LEX:455=-1.1602142498146475E-5, LEX:869=-1.1602142498146473E-5, LEX:999=0.9969799973565484, LEX:82=0.9971034578265425, LEX:155=3.703814099827345E-4}
39: =========== r:0.8974358974358975 p:0.8974358974358975 (epoch:6 file:0 0)
if the mug is on the table or on the stove
(exists $0 (and (object:t $0 mug:d) (or (On:t $0 (the $1 (object:t $1 table:f))) (On:t $0 (the $1 (object:t $1 stove:f))))))
MakeLex parse time: 0.011 sec.
Adding:
if the mug is  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (On:t $2 (the $3 ($0 $3 $1)))))) : 0.13670916666666666
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1112
First parse time: 0.017 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (or (On:t $0 (the $1 (object:t $1 table:f))) (On:t $0 (the $1 (object:t $1 stove:f))))))
Using:
[LexEntries and scores:
if the mug is  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (On:t $2 (the $3 ($0 $3 $1)))))) : 1111 : 0.13670916666666666
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 1.4516784546042958
the table  :- NP : table:f : 73 : 20.0
or  :- S/NP\(S|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and (object:t $3 mug:d) (or ($1 $3) (On:t $3 (the $4 ($0 $4 $2))))))))) : 1103 : 1.307960564976561
the stove  :- NP : stove:f : 76 : 19.002046401367956
]
Second parse time: 0.012 sec.
Best LexEntries:
[LexEntries and scores:
if the mug is  :- S|NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e (On:t $2 (the $3 ($0 $3 $1)))))) : 1111 : 0.13670916666666666
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 1.4516784546042958
the table  :- NP : table:f : 73 : 20.0
or  :- S/NP\(S|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and (object:t $3 mug:d) (or ($1 $3) (On:t $3 (the $4 ($0 $4 $2))))))))) : 1103 : 1.307960564976561
the stove  :- NP : stove:f : 76 : 19.002046401367956
]
Scale: 0.9970984435293296
Update:
{LHT:0:object:t:e=-0.11622593074080921, LHH:0:object:t:var=0.00103169070300813, BB:On:t:On:t=0.1162491444984497, LHT:0:On:t:e=0.11625233458616335, LHH:0:On:t:var=0.09120287508066313, LHT:1:On:t:null=0.09058982147281601, LHH:1:On:t:the=0.09058982147281601, LHT:0:object:t:null=0.11622593074080877, LHT:1:object:t:null=2.6403845354578718E-5, LHH:1:object:t:table:f=0.001323057640855676, LHH:1:object:t:stove:f=3.216866699997921E-4, BB:On:t:object:t=-0.11624914449845, LHH:0:object:t:stove:f=-2.0723185757423588E-4, LHT:1:object:t:e=-2.6403845355112806E-5, LHH:1:object:t:var=-0.0016447443108554883, LHT:0:On:t:null=-0.025662513113348367, LHH:0:On:t:stove:f=-1.144548124254425E-4, LHH:0:object:t:table:f=-8.244588454338601E-4, LHH:0:On:t:table:f=-4.985987954219503E-4, LEX:1000=0.0013477126027173817, LEX:1111=-0.0057770826569477065, LEX:1041=0.004429370049630166, LEX:505=0.004429370049630166, LEX:851=0.012117963069246961, LEX:1013=0.01920833642856138, LEX:1017=-0.02501994715948105, LEX:1085=-0.02262902913030147, LEX:1087=0.01054559413323679, LEX:1084=-0.08980432579263518, LEX:1086=-0.012868930677245266, LEX:1103=0.09055529339884423}
40: =========== r:0.9 p:0.9 (epoch:6 file:0 0)
if the glass is empty or dry
(exists $0 (and (object:t $0 glass:d) (or (state:t $0 empty:s) (state:t $0 dry:s))))
MakeLex parse time: 0.006 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 2.0
if  :- S/S : (lambda $0 t $0) : 0.0
dry  :- NP : dry:s : 0.0
the glass  :- NP : glass:d : 0.0
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 2.0
dry  :- NP : dry:s : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
empty  :- S/(S|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,t> (exists $3 (and ($0 $1 $3) ($2 $3)))))) : 0.0
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 2.0
dry  :- NP : dry:s : 0.0
Lex Size: 1112
First parse time: 0.013 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (or (state:t $0 empty:s) (state:t $0 dry:s))))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.9544288032168395
the glass  :- NP : glass:d : 15 : 16.011416780327057
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.932091443490558
empty  :- S/(S|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,t> (exists $3 (and ($0 $1 $3) ($2 $3)))))) : 1104 : -3.486870486710459E-5
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 857 : 2.0519971387566933
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.9544288032168395
the glass  :- NP : glass:d : 15 : 16.011416780327057
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.932091443490558
empty  :- S/(S|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,t> (exists $3 (and ($0 $1 $3) ($2 $3)))))) : 1104 : -3.486870486710459E-5
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 857 : 2.0519971387566933
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9970885015753997
Update:
{BB:object:t:or=1.2455519740769494E-5, LHT:0:object:t:e=-0.0035778748174707074, LHH:0:object:t:var=-0.0035778748174707074, LHT:1:object:t:d=2.017357330508651E-4, LHH:1:object:t:glass:d=2.0173763311501238E-4, BB:or:state:t=-1.2353099453559403E-5, LHT:0:object:t:d=-1.8939178088659924E-4, LHH:0:object:t:glass:d=-1.8939178088659924E-4, LHT:0:state:t:d=-1.2349475840935705E-5, LHH:0:state:t:glass:d=-1.2349475840935705E-5, LHT:1:state:t:e=-1.4065860696578834E-5, LHH:1:state:t:var=-1.4065860696578834E-5, LHT:1:object:t:e=-1.8938815796558093E-4, LHH:1:object:t:var=-1.8938815796558093E-4, BB:exists:object:t=-0.0037796125183524472, LHT:1:object:t:p=-0.0037796121045263194, LHH:1:object:t:you:p=-0.0037796121045263194, LEX:519=2.2641251488807222E-5, LEX:15=-2.752460985981743E-5, LEX:1088=5.6296287561180764E-5, LEX:123=1.9594340628063667E-4, LEX:131=0.0035581595038865553, LEX:365=-0.00377961210452632, LEX:9=2.7524296791636392E-5, LEX:576=-1.2345852228311997E-5, LEX:1014=-1.8938815727397552E-4, LEX:1018=1.4297221330756773E-4, LEX:1104=-5.62966006293618E-5}
41: =========== r:0.9024390243902439 p:0.9024390243902439 (epoch:6 file:0 0)
if the refrigerator is on and the mug contains coke
(and (exists $0 (and (object:t $0 refrigerator:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coke:q))))))
MakeLex parse time: 0.017 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the refrigerator  :- NP : refrigerator:f : 0.0
on  :- NP : IsOn:s : 0.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 0.5467285714285715
the mug  :- NP : mug:d : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
coke  :- NP : coke:q : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
coke  :- NP : coke:q : 0.0
Lex Size: 1112
First parse time: 0.043 sec.
CORRECT:(and (exists $0 (and (object:t $0 refrigerator:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coke:q))))))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.624035448669855
the refrigerator  :- NP : refrigerator:f : 75 : 20.000064119849167
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.2648113253826925
on  :- NP : IsOn:s : 57 : 8.990587950392912
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : -1.0090170084372907
the mug  :- NP : mug:d : 16 : 19.99982500422412
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.3600713125772341
coke  :- NP : coke:q : 34 : 10.0
]
Second parse time: 0.017 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.624035448669855
the refrigerator  :- NP : refrigerator:f : 75 : 20.000064119849167
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.2648113253826925
on  :- NP : IsOn:s : 57 : 8.990587950392912
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : -1.0090170084372907
the mug  :- NP : mug:d : 16 : 19.99982500422412
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.3600713125772341
coke  :- NP : coke:q : 34 : 10.0
]
Scale: 0.9970785598197281
Update:
{BB:exists:exists=-0.1717845534597452, BB:object:t:state:t=5.811510707713659E-4, LHT:0:object:t:e=-0.03492798974182172, LHH:0:object:t:var=-0.034927989741811535, LHT:0:state:t:e=5.57722656010141E-4, LHH:0:state:t:var=5.577226560353802E-4, LHT:1:state:t:s=9.293516391332377E-4, LHH:1:state:t:IsOn:s=0.0021970259801960654, BB:has:t:object:t=3.4765859373405594E-4, LHT:1:object:t:d=-0.03466982545699576, LHT:0:has:t:e=-0.020339580256936513, LHH:0:has:t:var=-0.020339580256936513, LHT:1:has:t:e=-0.020339580256936513, LHH:1:has:t:the=-0.020339580256936513, LHT:1:state:t:e=-3.7162927511025316E-4, LHH:1:state:t:the=-3.476585889377773E-4, BB:exists:object:t=-0.00655154969184547, LHH:1:state:t:var=-2.3970686172476192E-5, BB:exists:state:t=-2.3972492806349022E-5, LHT:1:object:t:p=-0.0024549472461665015, LHH:1:object:t:you:p=-0.0024549472461665015, LHT:0:object:t:s=-0.002196904533983026, LHH:0:object:t:IsOn:s=-0.002196904533983026, LHH:1:object:t:bowl:d=-0.0012676743410629573, LHH:1:state:t:yellow:s=-0.0012676743410629573, LHH:1:object:t:cups:d=-0.03340197055486801, LEX:75=-1.2867698489179682E-5, LEX:123=-7.709832900455156E-4, LEX:131=0.01551312751694895, LEX:172=-0.001267674341062957, LEX:311=-5.556035526915422E-4, LEX:365=-0.0018993436934749593, LEX:373=-0.032846367002176476, LEX:547=0.009276013372627942, LEX:559=0.012538603627462518, LEX:70=1.2867698488935098E-5, LEX:518=0.012567915424936186, LEX:558=-2.1463393453407815E-5, LEX:570=0.015038416136881241, LEX:977=-0.03466964489593097, LEX:1020=0.007084776727566561, LEX:858=3.476585918638139E-4, LEX:966=-3.47648399059321E-4, LEX:454=-0.02068723885066982, LEX:472=-3.4765859373435957E-4, LEX:502=0.021034897445002726}
Testing

File #0: 0
0: ==================(0 -- 0)
if you find any
(dummy:t)
Test parse time: 0.002 sec.
WRONG
1 parses: [(exists $0 (object:t $0 cups:d))]
[LexEntries and scores:
if you find any  :- S : (exists $0 (object:t $0 cups:d)) : 379 : -0.002147489055936486
]
Had correct parse: false
Feats: {RN:true=1.0, LHT:0:object:t:e=1.0, LHH:0:object:t:var=1.0, LHT:1:object:t:d=1.0, LHH:1:object:t:cups:d=1.0, LEX:379=1.0}
-----------------------------
Recall : 0/1 = 0.0
Precision : 0/1 = 0.0
F1: NaN
No Parses : 0
EMPTY Recall : 0/1 = 0.0
EMPTY Precision : 0/1 = 0.0
EMPTY F1: NaN
-----------
Training, iteration 7
---------------------
DataSet: 0
---------------------
0: ===========
if there exists a mug
(exists $0 (object:t $0 mug:d))
MakeLex parse time: 0.01 sec.
Adding:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
a mug  :- NP : mug:d : 0.0
Lex Size: 1112
First parse time: 0.017 sec.
CORRECT:(exists $0 (object:t $0 mug:d))
Using:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.29592036560440976
a mug  :- NP : mug:d : 22 : 20.0
]
Second parse time: 0.009 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.29592036560440976
a mug  :- NP : mug:d : 22 : 20.0
]
Scale: 0.9970686182623089
Update:
{LHT:0:object:t:e=-0.0021935738540726116, LHH:0:object:t:var=-0.0021935738540726116, LHT:1:object:t:d=-0.00202501144053028, LHH:1:object:t:mug:d=1.4735765476115478E-4, LHT:0:object:t:d=-1.4549847906685558E-4, LHH:0:object:t:mug:d=-1.4549847906685558E-4, BB:object:t:state:t=-6.318882590195831E-4, LHT:0:state:t:e=-6.318855843319632E-4, LHH:0:state:t:var=-6.318855843319632E-4, LHT:1:state:t:s=-6.3314294856877E-4, LHH:1:state:t:yellow:s=-6.3314294856877E-4, BB:object:t:object:t=-9.349948716881327E-4, LHH:1:object:t:bowl:d=-8.409398844727879E-4, BB:exists:object:t=-0.0014059257800114926, LHH:1:object:t:cups:d=-0.001132806538256655, LHT:1:object:t:p=-3.0780474980740915E-4, LHH:1:object:t:you:p=-3.0780474980740915E-4, LHH:1:object:t:cup:d=-1.9862267256238837E-4, LEX:122=5.524449271141798E-4, LEX:125=3.106422315750537E-4, LEX:129=4.775242998411225E-5, LEX:133=3.688981100273422E-4, LEX:137=7.875136708667515E-5, LEX:141=1.3640789086015982E-4, LEX:145=3.431588038583074E-4, LEX:149=1.3634630486137112E-4, LEX:153=7.403905755306858E-5, LEX:200=-2.7766399918735323E-4, LEX:220=-1.937967090319028E-4, LEX:240=-5.650370660132118E-4, LEX:423=-6.590164357373985E-5, LEX:124=2.6689354647103952E-5, LEX:128=-9.208325977138324E-4, LEX:132=-3.818255735645143E-5, LEX:140=3.3169664623392664E-4, LEX:144=1.0469287503405796E-5, LEX:148=3.2921219530286487E-4, LEX:152=-4.5361822624083697E-4, LEX:123=5.444108178761597E-5, LEX:127=2.708759851639225E-5, LEX:131=1.650491620398704E-4, LEX:135=4.9301896305073457E-5, LEX:139=3.317446072297866E-4, LEX:143=7.066754202322464E-5, LEX:147=3.2942223836949624E-4, LEX:151=3.745035242388491E-5, LEX:198=-1.2134871526985885E-4, LEX:208=-2.7982247810605496E-5, LEX:218=-3.8903185930535294E-5, LEX:238=-2.3988705991445883E-4, LEX:333=-2.835509049633247E-4, LEX:349=-8.179048126297909E-4, LEX:365=-2.376522916168942E-4, LEX:381=-4.164679616671128E-5, LEX:389=-3.1180368785751316E-5, LEX:397=-2.5000513227713764E-5, LEX:571=-4.5939771303122786E-5, LEX:583=-5.768631242265963E-5, LEX:595=-2.6359520863365066E-5, LEX:419=-2.2363412738002006E-4, LEX:126=1.8291949554270453E-4, LEX:130=-2.206207833626988E-4, LEX:134=4.92223091706936E-4, LEX:138=7.756883576130108E-5, LEX:142=1.3624633868196425E-4, LEX:146=3.059034494055939E-4, LEX:150=1.361844495866526E-4, LEX:154=-9.515955822615183E-4}
1: =========== r:1.0 p:1.0 (epoch:7 file:0 0)
if there exists a cup
(exists $0 (object:t $0 cup:d))
MakeLex parse time: 0.014 sec.
Adding:
if there exists  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1113
First parse time: 0.032 sec.
CORRECT:(exists $0 (object:t $0 cup:d))
Using:
[LexEntries and scores:
if there exists  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 1112 : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.8481833324972237
cup  :- NP : cup:d : 8 : 4.894100973139533
]
Second parse time: 0.014 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 1112 : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.8481833324972237
cup  :- NP : cup:d : 8 : 4.894100973139533
]
Scale: 0.9970586769031358
Update:
{LHT:0:object:t:e=7.42394005594499E-5, LHH:0:object:t:var=7.42394005594499E-5, LHH:1:object:t:cup:d=0.0011127974188665422, LHT:0:object:t:d=-4.873113898593287E-4, LHH:0:object:t:cup:d=-4.873113898593287E-4, LHT:1:object:t:e=-5.654293159605211E-5, LHH:1:object:t:var=-5.654293159605211E-5, LHT:0:state:t:d=-4.683495539523355E-5, LHH:0:state:t:cup:d=-4.683495539523355E-5, LHT:1:state:t:e=-8.605308541429707E-5, LHH:1:state:t:var=-8.605308541429707E-5, LHT:0:has:t:e=-0.003121818975073723, LHH:0:has:t:var=-0.003121818975073723, LHT:1:has:t:e=-0.004174491102765342, LHH:1:has:t:the=-0.0011584063626087172, LHT:0:has:t:d=-0.001052672127691616, LHH:0:has:t:cup:d=-0.001052672127691616, LHH:1:has:t:var=-0.0030160847401566222, BB:object:t:state:t=-3.4255023178969037E-4, LHT:0:state:t:e=-3.616323253029241E-4, LHH:0:state:t:var=-3.616323253029241E-4, LHT:1:state:t:s=-3.224141952838607E-4, LHH:1:state:t:yellow:s=-3.224141952838607E-4, BB:exists:state:t=-1.9091683514654273E-5, BB:object:t:object:t=-0.002331657679991745, LHH:1:object:t:bowl:d=-4.977605857116058E-4, BB:exists:object:t=-8.502359626193078E-4, LHH:1:object:t:cups:d=-6.146856266858805E-4, BB:exists:exists=-4.7728953462596705E-5, LHT:1:object:t:p=-3.568802641737616E-4, LHH:1:object:t:you:p=-3.568802641737616E-4, BB:has:t:object:t=-2.4633018894481087E-4, LEX:1105=0.0011295566383390185, LEX:122=6.262604189773087E-4, LEX:159=-8.758883363227202E-4, LEX:161=-0.0013067856854519777, LEX:1112=0.002631673489391419, LEX:1043=4.012335746217715E-4, LEX:125=3.5434836786873053E-4, LEX:129=5.409367048508497E-5, LEX:133=4.215268588609453E-4, LEX:137=8.666723833669047E-5, LEX:141=1.533080288498326E-4, LEX:145=3.8869259178146416E-4, LEX:149=1.5323879320585884E-4, LEX:153=8.445485212402577E-5, LEX:200=-1.1780283766006304E-4, LEX:210=-2.6837432846995724E-5, LEX:220=-8.165187325043509E-5, LEX:240=-2.385267660274747E-4, LEX:250=-1.571688238069892E-5, LEX:423=-2.203555161352864E-4, LEX:124=3.0241223477802203E-5, LEX:128=-5.769564179138526E-4, LEX:132=8.756031698998723E-5, LEX:136=3.5806850648034965E-5, LEX:140=3.7187818921505174E-4, LEX:144=4.432380385487628E-5, LEX:148=3.6919143204762933E-4, LEX:152=-1.6641795017845675E-4, LEX:1089=-0.0036719282442424636, LEX:20=0.0016757103912258616, LEX:469=-0.0019723938203947827, LEX:481=-1.0390528365404406E-5, LEX:493=-1.0378698066148803E-5, LEX:123=2.006030439875889E-4, LEX:127=3.066255962855384E-5, LEX:131=-0.0010162649039903873, LEX:135=-1.9814992169230146E-5, LEX:139=3.730066369020505E-4, LEX:143=7.954106024681131E-5, LEX:147=3.7036359902379575E-4, LEX:151=-0.0018393687947866244, LEX:198=-7.062415469738844E-5, LEX:208=-9.344233757154574E-5, LEX:218=-1.6382044263517493E-5, LEX:238=-1.3893837978691393E-4, LEX:248=-2.022073355308193E-5, LEX:333=-1.6760005125695997E-4, LEX:341=-1.1161098159300226E-5, LEX:349=-3.424281240384726E-4, LEX:365=-3.0996610580855355E-4, LEX:381=-2.468504630128628E-5, LEX:389=-1.0409124389723768E-4, LEX:397=-1.0501806411411009E-5, LEX:571=-1.9803679424588127E-5, LEX:583=-2.4591626241938347E-5, LEX:595=-1.5672201960073853E-5, LEX:419=-5.899714086287693E-5, LEX:1092=-4.0715429533993164E-5, LEX:1096=-4.0293982188416206E-5, LEX:126=2.2382100288393148E-4, LEX:130=-2.9093519293082944E-4, LEX:134=5.748384387402243E-4, LEX:138=9.899589669828669E-5, LEX:142=1.492187781017789E-4, LEX:146=3.440793356991806E-4, LEX:150=1.4915321929378432E-4, LEX:154=-3.1224142584209617E-4, LEX:1003=-1.103401198980889E-5, LEX:1004=-1.1034205346552016E-5, LEX:1098=-3.772195896989564E-5, LEX:431=-9.001032775002899E-4, LEX:443=-2.5355456308049176E-4, LEX:467=-0.0010436909197618402, LEX:479=0.0019739095327227403, LEX:491=-0.001061368156457843, LEX:1001=8.310752853670998E-5, LEX:8=3.1375989706688604E-4}
2: =========== r:1.0 p:1.0 (epoch:7 file:0 0)
if there exists a cup and there exists a cup
(and (exists $0 (object:t $0 cup:d)))
MakeLex parse time: 0.06 sec.
Adding:
Lex Size: 1113
First parse time: 0.946 sec.
CORRECT:(and (exists $0 (object:t $0 cup:d)))
Using:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 10.86960075148353
]
Second parse time: 0.062 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 10.86960075148353
]
Scale: 0.997048735742203
Update:
{LEX:82=0.030470730705185408, LHT:0:object:t:e=-0.030048692327986563, LHH:0:object:t:var=-0.030045053076166242, LHT:1:object:t:d=-0.029899585492955693, LHH:1:object:t:cup:d=-0.028689848117420442, BB:object:t:state:t=-6.747752799867474E-4, LHT:1:object:t:e=-7.465733292323058E-5, LHH:1:object:t:the=-1.0963309746095643E-4, LHT:1:state:t:e=-1.6322568039091483E-4, LHH:1:state:t:var=-3.8168005021767856E-4, LHT:1:object:t:s=-7.936135180131388E-5, LHT:0:state:t:e=-0.001117250405388304, LHH:0:state:t:var=-0.0011171807925160386, LHT:1:state:t:s=-9.540801562995131E-4, BB:has:t:state:t=-7.297326316840725E-4, LHT:1:has:t:e=-0.03024797606216444, LHH:1:has:t:the=-0.030230736879713758, LHH:1:object:t:var=-4.438558726358807E-5, LHT:0:has:t:e=-0.030239281342451966, LHH:0:has:t:var=-0.03023928098705084, LHH:1:state:t:the=-1.3855399244747454E-4, LHH:1:has:t:var=-1.723918245070591E-5, LHH:1:state:t:yellow:s=-5.970717940252748E-4, BB:exists:object:t=-1.2045424888737315E-5, LHH:1:object:t:bowl:d=-0.001209515203493771, BB:has:t:object:t=-0.02977246031726578, BB:exists:has:t=-5.687127084168463E-5, BB:object:t:object:t=-1.0540516895484534E-4, LEX:161=-0.001793552069503904, LEX:163=-0.008396480833971917, LEX:129=-2.777506157311293E-5, LEX:141=-1.6838746359068364E-5, LEX:149=-3.381720125869987E-5, LEX:190=-1.0567359456092498E-4, LEX:210=-0.0011034470454026875, LEX:250=-4.909595074526732E-4, LEX:423=-0.0182637667689013, LEX:128=-4.4072645094244133E-4, LEX:136=-0.022511443484441725, LEX:144=-0.005782017865485043, LEX:152=-0.0011344500650599955, LEX:1090=-1.3513084888773725E-4, LEX:1094=-5.8358363969632515E-5, LEX:865=-4.0649551709225034E-5, LEX:866=-4.0495924212757836E-5, LEX:20=-0.02941591576228627, LEX:457=-7.028409885048266E-4, LEX:469=-1.7738312470509974E-4, LEX:135=-1.3436907125550477E-5, LEX:139=-4.960517660144412E-5, LEX:143=-1.504691257072746E-5, LEX:577=-1.3111679545293735E-4, LEX:419=-2.453017121116938E-4, LEX:1092=-1.7081676615293492E-4, LEX:1096=-2.1728954398041276E-4, LEX:154=-2.496814050615905E-4, LEX:424=-0.020020742241169676, LEX:1003=-6.446682241823647E-5, LEX:1004=-6.465239624679676E-5, LEX:1098=-1.9971853200548284E-4, LEX:431=-1.3874802369305076E-5, LEX:455=-0.029342204275372093, LEX:479=-4.41698951789274E-4, LEX:491=-5.483896194299003E-5, LEX:1001=-6.99548491788201E-4, LEX:8=-0.0013026679878849756, LEX:869=-0.0293422042753721, LEX:887=-4.52716371252834E-4, LEX:1023=-0.013970382603603032, LEX:1024=-0.0052827868022327865, LEX:1025=-0.00889033892697392, LEX:1026=-0.00187022938114472}
3: =========== r:1.0 p:1.0 (epoch:7 file:0 0)
if there exists an empty kettle
(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s)))
MakeLex parse time: 0.007 sec.
Adding:
if  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 0.0
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 0.40293333333333337
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
empty  :- NP : empty:s : 0.0
kettle  :- NP : kettle:d : 0.0
Lex Size: 1113
First parse time: 0.012 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 1106 : 0.0110466159800971
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1092 : 0.012813684762381306
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1098 : 0.39779754712677906
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1010 : 0.019021433481777986
empty  :- NP : empty:s : 53 : 10.0
kettle  :- NP : kettle:d : 11 : 10.000012500088278
]
Second parse time: 0.008 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 1106 : 0.0110466159800971
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1092 : 0.012813684762381306
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1098 : 0.39779754712677906
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1010 : 0.019021433481777986
empty  :- NP : empty:s : 53 : 10.0
kettle  :- NP : kettle:d : 11 : 10.000012500088278
]
Scale: 0.997038794779505
Update:
{BB:object:t:state:t=0.0013921778671487448, LHT:0:object:t:e=-0.0021207991364675335, LHH:0:object:t:var=-0.0021207991364675335, LHT:0:state:t:e=0.0014045868221214154, LHH:0:state:t:var=0.0014045868221214154, LHT:1:state:t:s=0.001404592943267548, LHH:1:state:t:empty:s=0.001404592943267548, LHT:0:state:t:s=-1.252953017080897E-5, LHH:0:state:t:empty:s=-1.252953017080897E-5, LHT:1:state:t:e=-1.2632713904008352E-5, LHH:1:state:t:var=-1.2632713904008352E-5, BB:exists:object:t=-7.330803879014838E-4, LHT:1:object:t:p=-7.330803879014838E-4, LHH:1:object:t:you:p=-7.330803879014838E-4, BB:object:t:object:t=-0.0013920632656745477, LHT:1:object:t:s=-0.0013882149659474976, LHH:1:object:t:empty:s=-0.0013882149659474976, LEX:421=9.722326641529567E-5, LEX:1045=8.563686811756871E-5, LEX:1044=9.895381861533201E-5, LEX:141=-3.0486711047253927E-4, LEX:149=-5.329236559932544E-4, LEX:861=1.6473728801149264E-4, LEX:863=2.9221983652677035E-4, LEX:136=-5.545997973170048E-5, LEX:144=-5.5856907667645636E-5, LEX:152=-1.0958818287589378E-5, LEX:1090=-3.198828313087377E-4, LEX:1094=1.074781345329719E-4, LEX:862=-3.4360366667452134E-5, LEX:864=-3.257283975655603E-5, LEX:1093=1.1010936352192747E-4, LEX:1097=1.0904468916320367E-4, LEX:123=1.0116427172862111E-4, LEX:131=3.7022992006931606E-4, LEX:139=1.0612483200910105E-4, LEX:365=-7.330803879014838E-4, LEX:1006=-5.551238084165826E-5, LEX:1008=-6.913114406360465E-5, LEX:1106=4.7861372980254096E-4, LEX:1092=3.2045013106527664E-4, LEX:1096=1.1563145531886832E-4, LEX:1003=-2.7175059690951936E-5, LEX:1004=-2.5762555465693093E-5, LEX:1098=-4.403528664782027E-5, LEX:1010=-5.655518261773277E-4, LEX:1091=1.0855459613267247E-4, LEX:1095=1.0859526892057789E-4}
4: =========== r:1.0 p:1.0 (epoch:7 file:0 0)
if there exists a green glass
(exists $0 (and (object:t $0 glass:d) (state:t $0 green:s)))
MakeLex parse time: 0.01 sec.
Adding:
if  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 0.0
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 0.40293333333333337
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
green  :- NP : green:s : 0.0
glass  :- NP : glass:d : 0.0
Lex Size: 1113
First parse time: 0.018 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (state:t $0 green:s)))
Using:
[LexEntries and scores:
if  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 1106 : 0.01152522970989964
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1092 : 0.013134134893446583
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1098 : 0.39775351184013125
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.8497155430781571
green  :- NP : green:s : 51 : 10.0
glass  :- NP : glass:d : 9 : 9.99988422535212
]
Second parse time: 0.011 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 1106 : 0.01152522970989964
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1092 : 0.013134134893446583
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1098 : 0.39775351184013125
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.8497155430781571
green  :- NP : green:s : 51 : 10.0
glass  :- NP : glass:d : 9 : 9.99988422535212
]
Scale: 0.9970288540150352
Update:
{BB:object:t:state:t=0.01165343650229153, LHT:0:object:t:e=-0.0014310079711982746, LHH:0:object:t:var=-0.0014310079711982746, LHT:1:object:t:d=0.0012064625437000515, LHH:1:object:t:glass:d=0.001206462549428164, LHT:0:state:t:e=0.0016187832960510983, LHH:0:state:t:var=0.0016187832960510983, LHT:1:state:t:s=0.0016188575386258928, LHH:1:state:t:green:s=0.0016188575386258928, LHT:0:object:t:d=-1.4640825268850513E-4, LHH:0:object:t:glass:d=-1.4640825268850513E-4, LHT:1:object:t:s=-0.0016134259230463186, LHH:1:object:t:green:s=-0.0016134259230463186, BB:has:t:state:t=-0.01003736405739904, LHT:0:has:t:e=-0.009038947971766648, LHH:0:has:t:var=-0.009038947971766648, LHT:1:has:t:e=-0.01009967658820113, LHH:1:has:t:the=-0.009056816577020394, LHT:0:has:t:d=-0.0010598067118461829, LHH:0:has:t:glass:d=-0.0010598067118461829, LHT:1:object:t:e=-1.6415174945924092E-4, LHH:1:object:t:var=-1.6415174945924092E-4, LHH:1:has:t:var=-0.0010428600111807363, BB:object:t:object:t=-0.0015517375825978101, LHT:1:object:t:p=-0.0010078460605229683, LHH:1:object:t:you:p=-0.0010078460605229683, BB:exists:object:t=-0.0010078453354126669, BB:has:t:object:t=-6.231253080209083E-5, LEX:422=5.188731583233583E-4, LEX:1045=8.207377603962522E-4, LEX:141=-2.4951559408015406E-4, LEX:149=-5.002009550823565E-4, LEX:861=0.0012277292465711495, LEX:863=0.0024410316416258082, LEX:136=-6.0783813330206214E-5, LEX:144=-6.12088737965647E-5, LEX:152=-1.2091281702228393E-5, LEX:1090=-4.93355328785975E-4, LEX:1094=-2.3441455045512073E-4, LEX:865=0.0013164105027842386, LEX:866=0.0013193587182558193, LEX:123=-3.8844344370644304E-4, LEX:131=-0.005843680065945147, LEX:139=-7.271796650618268E-4, LEX:365=-0.0010078460605229683, LEX:1006=-5.965853337663053E-5, LEX:1008=-7.470442850502187E-5, LEX:1106=0.003845150390424559, LEX:1092=7.786554388476202E-4, LEX:1096=-0.00417101236315074, LEX:1003=-8.426481489765743E-4, LEX:1004=-8.117276531133497E-4, LEX:1098=-0.0014568657090026536, LEX:431=-0.008999907105299274, LEX:443=-5.690947172111735E-5, LEX:467=-0.0010428600111807359, LEX:479=0.007282714295577437, LEX:491=-3.379082465543788E-4}
5: =========== r:1.0 p:1.0 (epoch:7 file:0 0)
if there exists a cup that contains syrup
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
MakeLex parse time: 0.083 sec.
Adding:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 0.40293333333333337
syrup  :- NP : syrup:q : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
syrup  :- NP : syrup:q : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
Lex Size: 1113
First parse time: 0.137 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
Using:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 2.323951270385328
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.43798220368316865
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 1.779220498622494
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 1.3769925715698867
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 3.095365303590043
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.3811062100222369
syrup  :- NP : syrup:q : 33 : 10.0
]
Second parse time: 0.085 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 2.323951270385328
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.43798220368316865
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 1.779220498622494
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 1.3769925715698867
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 3.095365303590043
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.3811062100222369
syrup  :- NP : syrup:q : 33 : 10.0
]
Scale: 0.9970189134487881
Update:
{BB:has:t:object:t=0.024520043850179505, LHT:0:object:t:e=0.025198507239374227, LHH:0:object:t:var=0.02519870442596841, LHT:1:object:t:d=0.02683431397423471, LHH:1:object:t:cup:d=0.0691053159961408, LHT:0:has:t:e=-0.014834699344538018, LHH:0:has:t:var=-0.01483249587524566, LHT:1:has:t:e=-0.01597897622106419, LHH:1:has:t:the=-0.015986614462611553, LHT:1:object:t:q=0.0016340901645869527, LHH:1:object:t:syrup:q=0.0016340901645869527, LHT:1:object:t:e=-0.003301469253444905, LHH:1:object:t:the=-3.891500602740329E-5, LHH:1:object:t:var=-0.003262554247417502, LHT:0:state:t:e=-0.026348498268621373, LHH:0:state:t:var=-0.026348471811647282, LHT:1:state:t:e=-0.002036927407640109, LHH:1:state:t:var=-0.002036821648206041, LHH:1:has:t:var=-2.6162765638809288E-5, LHT:0:object:t:q=-4.8962979246973836E-5, LHH:0:object:t:syrup:q=-4.8962979246973836E-5, LHT:0:has:t:q=-0.0013813155135515903, LHH:0:has:t:syrup:q=-0.0013813155135515903, LHT:1:has:t:q=-2.370390958584963E-4, LHH:1:has:t:syrup:q=-2.0323808867214315E-4, BB:object:t:state:t=-0.013857271978168002, BB:has:t:state:t=-0.03088651956161093, LHT:1:state:t:s=-0.02431214444409799, LHH:1:state:t:yellow:s=-0.02431214444409799, BB:object:t:object:t=-0.004469112957858561, LHH:1:object:t:bowl:d=-0.04227089453717598, BB:exists:object:t=-3.4559578369344116E-5, BB:exists:has:t=-0.003871062233123996, LHT:1:object:t:p=-1.7390881580985487E-5, LHH:1:object:t:you:p=-1.7390881580985487E-5, LEX:160=-2.1201749674096986E-5, LEX:161=0.008671914089826602, LEX:163=0.01942129300919599, LEX:1112=-0.0012814360519075563, LEX:429=-0.0014445482843760062, LEX:435=-2.650297275857823E-5, LEX:441=-0.0010335874996045076, LEX:447=-2.7774872930613135E-5, LEX:453=-0.0013102218980688752, LEX:471=-1.0701511684366127E-4, LEX:483=-2.2464760732154225E-4, LEX:495=-2.2230127662981871E-4, LEX:426=-5.07307443861274E-5, LEX:432=-4.2978066390607003E-4, LEX:438=-4.843805290101855E-5, LEX:444=-3.9004527292093503E-4, LEX:450=-6.829604927523729E-5, LEX:456=1.1579558992182544E-5, LEX:468=-1.8714735932573146E-5, LEX:474=-3.3224729526177773E-4, LEX:486=-3.26551258083356E-4, LEX:492=-1.0014637771848497E-5, LEX:498=-6.966493395810434E-4, LEX:129=-0.0018322612945930075, LEX:190=-0.006802776909640534, LEX:210=-0.03545381421478407, LEX:220=-2.3365812951772585E-5, LEX:250=-0.01748593398601731, LEX:260=-1.4188506350998193E-5, LEX:423=0.041000664737024906, LEX:1089=-0.00417697498717195, LEX:427=-6.015300892546312E-4, LEX:433=-2.655617136444534E-5, LEX:439=-5.043898405117433E-4, LEX:445=-2.7816170046749704E-5, LEX:451=-3.702593054919559E-4, LEX:457=2.1876152092246837E-4, LEX:469=-1.0204137267259635E-4, LEX:481=-2.25101875906738E-4, LEX:487=-1.858971494561908E-5, LEX:493=-2.2303828008848244E-4, LEX:499=-1.7583255587007502E-5, LEX:867=5.064267979475784E-5, LEX:428=-4.97208600712853E-5, LEX:434=-2.9350106490124686E-4, LEX:440=-4.7490204925889796E-5, LEX:446=-2.78283798583444E-4, LEX:452=-6.76977696665936E-5, LEX:458=1.0308217257636284E-4, LEX:476=-3.322196226356473E-4, LEX:482=-1.570275687390246E-5, LEX:488=-3.265214216747841E-4, LEX:494=-1.7208119917843513E-5, LEX:500=-6.974002830558585E-4, LEX:123=-2.2645301749227548E-5, LEX:131=-0.004142396998339861, LEX:135=-9.504709201813678E-4, LEX:143=-0.0010635718917085413, LEX:365=-1.7376892595955632E-5, LEX:1092=-0.0010189736528231294, LEX:1096=-0.0010037126325917523, LEX:424=-0.022629982651146692, LEX:425=-6.031968915949696E-4, LEX:431=-1.535498676274666E-5, LEX:437=-5.05194831732156E-4, LEX:443=-2.7618976808386834E-5, LEX:449=-3.698599187712002E-4, LEX:455=0.008698943117299143, LEX:467=-1.172101964655798E-5, LEX:479=-5.708698282710298E-4, LEX:485=-1.8605875058874247E-5, LEX:491=-2.2343532751131848E-4, LEX:497=-1.7357381073529564E-5, LEX:869=0.008623962481600779, LEX:868=0.008730027344992165, LEX:430=-8.005193634494163E-5, LEX:436=-2.9538178580679794E-4, LEX:442=-0.01528706492705076, LEX:448=-2.795645685276187E-4, LEX:454=-0.00888668267272818, LEX:478=-5.094797719684638E-4, LEX:484=-1.6135424937188417E-5, LEX:490=0.012833462997880213, LEX:496=-1.773138701711653E-5, LEX:502=0.016922816255272675, LEX:159=2.3650904352286968E-5}
6: =========== r:1.0 p:1.0 (epoch:7 file:0 0)
if there exists a cup that contains coke
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 coke:q)))))
MakeLex parse time: 0.084 sec.
Adding:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 0.40293333333333337
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
coke  :- NP : coke:q : 0.0
Lex Size: 1113
First parse time: 0.141 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 coke:q)))))
Using:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 2.364951935122353
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.41535222103202196
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 1.7879194417397932
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 1.3856165340514874
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 3.104095330935035
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.3980290262775095
coke  :- NP : coke:q : 34 : 10.0
]
Second parse time: 0.084 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 2.364951935122353
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.41535222103202196
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 1.7879194417397932
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 1.3856165340514874
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 3.104095330935035
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.3980290262775095
coke  :- NP : coke:q : 34 : 10.0
]
Scale: 0.9970089730807579
Update:
{BB:has:t:object:t=0.02042239679140969, LHT:0:object:t:e=0.019704846762343114, LHH:0:object:t:var=0.01970518224655448, LHT:1:object:t:d=0.021061295855577845, LHH:1:object:t:cup:d=0.056156055216610525, LHT:0:has:t:e=-0.013278848365439688, LHH:0:has:t:var=-0.01327698173936586, LHT:1:has:t:e=-0.014175052000528907, LHH:1:has:t:the=-0.014181280073225668, LHT:1:object:t:q=0.0014786325917125116, LHH:1:object:t:coke:q=0.0014786325917125116, LHT:1:object:t:e=-0.0028696450076279526, LHH:1:object:t:the=-3.617118779161917E-5, LHH:1:object:t:var=-0.002833473819836334, LHT:0:state:t:e=-0.019963110364386267, LHH:0:state:t:var=-0.019963087693919315, LHT:1:state:t:e=-0.001617298147830119, LHH:1:state:t:var=-0.0016172072448380863, LHH:1:has:t:var=-2.198485718117693E-5, LHT:0:object:t:q=-5.064843201524647E-5, LHH:0:object:t:coke:q=-5.064843201524647E-5, LHT:0:has:t:q=-0.0011759305636881935, LHH:0:has:t:coke:q=-0.0011759305636881935, LHT:1:has:t:q=-2.7972735723621664E-4, LHH:1:has:t:coke:q=-2.5151442735724935E-4, BB:object:t:state:t=-0.010718804530059833, BB:has:t:state:t=-0.02342854369722549, LHT:1:state:t:s=-0.01834635138520872, LHH:1:state:t:yellow:s=-0.01834635138520872, BB:object:t:object:t=-0.004604938686173214, LHH:1:object:t:bowl:d=-0.03509466174166865, BB:exists:object:t=-3.081263402645391E-5, BB:exists:has:t=-0.003225394022371003, LHT:1:object:t:p=-1.6085344321358886E-5, LHH:1:object:t:you:p=-1.6085344321358886E-5, LEX:160=-1.7415641070091324E-5, LEX:161=0.007118879831492752, LEX:163=0.01576983485696331, LEX:1112=-0.0010924466099706462, LEX:429=-0.0012903691844448045, LEX:435=-2.2290939030026254E-5, LEX:441=-0.0010236450815324927, LEX:447=-2.3331572542105093E-5, LEX:453=-0.0013583486761445688, LEX:471=-1.2819802757677883E-4, LEX:483=-2.134734117647517E-4, LEX:495=-2.1017907297871813E-4, LEX:426=-4.2253020446166234E-5, LEX:432=-4.16891994388914E-4, LEX:438=-4.040234950197323E-5, LEX:444=-3.5961496982018766E-4, LEX:450=-5.8109689030318637E-5, LEX:456=1.0376123373155508E-5, LEX:468=-1.7346801667206634E-5, LEX:474=-3.0632013293836556E-4, LEX:486=-3.0241769986124554E-4, LEX:498=-6.79721144091588E-4, LEX:129=-0.0016078849493615492, LEX:190=-0.005260430980477628, LEX:210=-0.02982244866287149, LEX:220=-1.856226099843436E-5, LEX:250=-0.013067305974361626, LEX:260=-1.1681021781506627E-5, LEX:423=0.033257040842931684, LEX:1089=-0.0036588622284556708, LEX:427=-5.366351167180756E-4, LEX:433=-2.2332787431676337E-5, LEX:439=-4.667358216917338E-4, LEX:445=-2.3363980751603638E-5, LEX:451=-3.778893287903372E-4, LEX:457=2.0566295072119324E-4, LEX:469=-1.1956895018359731E-4, LEX:481=-2.1389092167537467E-4, LEX:493=-2.1089051945202226E-4, LEX:499=-1.5910479454289E-5, LEX:867=4.7642773752645264E-5, LEX:428=-4.0761244538059735E-5, LEX:434=-2.8320638206350484E-4, LEX:440=-3.610327807842305E-5, LEX:446=-2.772502517848051E-4, LEX:452=-5.396425680472053E-5, LEX:458=9.312922823815567E-5, LEX:476=-3.03505803039302E-4, LEX:482=-1.364647345636805E-5, LEX:488=-2.9948945901588574E-4, LEX:494=-1.8558975382655853E-5, LEX:500=-6.778267768968797E-4, LEX:123=-1.9300366082954927E-5, LEX:131=-0.003628496750624901, LEX:135=-7.541513699503575E-4, LEX:143=-8.438258549316892E-4, LEX:365=-1.6073025202689172E-5, LEX:1092=-8.08856489301145E-4, LEX:1096=-7.967115923421111E-4, LEX:424=-0.01813316904500298, LEX:425=-5.382535845834358E-4, LEX:431=-1.2916341748618716E-5, LEX:437=-4.733629129382883E-4, LEX:443=-2.321760978146506E-5, LEX:449=-3.7736724458551057E-4, LEX:455=0.008318250275195675, LEX:467=-1.5143113393450361E-5, LEX:479=-5.407598824976946E-4, LEX:485=-1.6858146609010654E-5, LEX:491=-2.1169398353852552E-4, LEX:497=-1.550313488044814E-5, LEX:869=0.008248799276889826, LEX:868=0.008352647721915258, LEX:430=-6.544868007148429E-5, LEX:436=-2.854297209530287E-4, LEX:442=-0.013942901393086312, LEX:448=-2.79326715764099E-4, LEX:454=-0.008157206336856836, LEX:478=-4.618066759130696E-4, LEX:484=-1.4007068281417534E-5, LEX:490=0.011833465139675342, LEX:496=-1.9205788836605635E-5, LEX:502=0.015522898649861967, LEX:159=2.2282039241287782E-5}
7: =========== r:1.0 p:1.0 (epoch:7 file:0 0)
if there is a red glass
(exists $0 (and (object:t $0 glass:d) (state:t $0 red:s)))
MakeLex parse time: 0.011 sec.
Adding:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 0.0
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
red  :- NP : red:s : 0.0
glass  :- NP : glass:d : 0.0
Lex Size: 1113
First parse time: 0.016 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (state:t $0 red:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.1875807509397675
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.2632559799288911
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.8558866276629659
red  :- NP : red:s : 47 : 10.0
glass  :- NP : glass:d : 9 : 9.99988422535212
]
Second parse time: 0.011 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.1875807509397675
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.2632559799288911
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.8558866276629659
red  :- NP : red:s : 47 : 10.0
glass  :- NP : glass:d : 9 : 9.99988422535212
]
Scale: 0.9969990329109382
Update:
{BB:object:t:state:t=0.02639289066223194, LHT:0:object:t:e=0.003062222771169896, LHH:0:object:t:var=0.003062222771169896, LHT:1:object:t:d=0.0038992503986611856, LHH:1:object:t:glass:d=0.003899538885620377, LHT:0:state:t:e=0.0016222419845024043, LHH:0:state:t:var=0.0016222419845024043, LHT:1:state:t:s=4.298884414499943E-4, LHH:1:state:t:red:s=4.298884414499943E-4, LHT:0:object:t:d=-1.5497987443752033E-4, LHH:0:object:t:glass:d=-1.5497987443752033E-4, LHT:0:state:t:d=-0.0011925983040476744, LHH:0:state:t:glass:d=-0.0011925983040476744, LHT:0:state:t:s=-1.1649291988159665E-5, LHH:0:state:t:red:s=-1.1649291988159665E-5, LHT:1:state:t:e=-1.1894052983682945E-5, LHH:1:state:t:var=-1.1894052983682945E-5, BB:object:t:object:t=-4.182394126722616E-4, LHT:1:object:t:p=-4.0210438369655947E-4, LHH:1:object:t:you:p=-4.0210438369655947E-4, BB:exists:object:t=-4.0155935738649996E-4, LHT:1:object:t:e=-1.7426888672209098E-4, LHH:1:object:t:var=-1.7426888672209098E-4, LHT:1:object:t:s=-4.1693668704930305E-4, LHH:1:object:t:red:s=-4.1693668704930305E-4, BB:has:t:state:t=-0.024782530597256904, LHT:0:has:t:e=-0.022230638374278227, LHH:0:has:t:var=-0.022230638374278227, LHT:1:has:t:e=-0.024782530597256904, LHH:1:has:t:the=-0.022248723887591818, LHT:0:has:t:d=-0.002551892222978678, LHH:0:has:t:glass:d=-0.002551892222978678, LHH:1:has:t:var=-0.0025338067096650893, LEX:503=0.0019938241554013016, LEX:1005=-0.0027897954262980653, LEX:125=-0.0010415882657949151, LEX:141=-2.0922103042380897E-4, LEX:149=-2.0901811903772694E-4, LEX:861=0.001509755331588551, LEX:863=0.0015160999510550046, LEX:1007=-0.003296206565858229, LEX:1009=-0.0031300075577483802, LEX:870=0.004218464895468016, LEX:871=0.004228532499194783, LEX:123=6.346481193111577E-4, LEX:131=0.002292811684673495, LEX:365=-4.021043836965595E-4, LEX:1006=-0.0032665606906265065, LEX:1008=-0.0031916560294865514, LEX:1106=0.0031630931163382143, LEX:419=-2.409664736999097E-4, LEX:1092=0.0029709358177689538, LEX:1096=0.0029263361680588653, LEX:600=-0.0012823012920158926, LEX:1014=6.081190914686306E-5, LEX:431=-0.022230638374278227, LEX:443=-1.8085513313588636E-5, LEX:467=-0.0025338067096650893, LEX:479=0.015628410904875534, LEX:491=-1.5192357641861704E-4, LEX:1001=-0.0011348463271269023}
8: =========== r:1.0 p:1.0 (epoch:7 file:0 0)
if there is a yellow bowl
(exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s)))
MakeLex parse time: 0.022 sec.
Adding:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 0.0
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
yellow  :- NP : yellow:s : 0.0
bowl  :- NP : bowl:d : 0.0
Lex Size: 1113
First parse time: 0.054 sec.
CORRECT:(exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.184314190249141
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.2599597733630329
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.8715150385678414
yellow  :- NP : yellow:s : 50 : 10.057959237427104
bowl  :- NP : bowl:d : 227 : 1.61664443525909
]
Second parse time: 0.025 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.184314190249141
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.2599597733630329
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.8715150385678414
yellow  :- NP : yellow:s : 50 : 10.057959237427104
bowl  :- NP : bowl:d : 227 : 1.61664443525909
]
Scale: 0.9969890929393233
Update:
{BB:object:t:state:t=0.04817335666769812, LHT:0:object:t:e=0.017009588955729814, LHH:0:object:t:var=0.017009588955729814, LHT:1:object:t:d=0.02950824130230347, LHH:1:object:t:bowl:d=0.029879297437188042, LHT:0:state:t:e=0.008111193160972795, LHH:0:state:t:var=0.008111193160972795, LHT:1:state:t:s=0.007158742259133612, LHH:1:state:t:yellow:s=0.007158742259133612, LHT:1:object:t:e=-8.470545316213366E-4, LHH:1:object:t:var=-8.470545316213366E-4, BB:exists:state:t=-4.466198623862484E-5, BB:exists:object:t=-5.086455427622837E-4, LHT:1:state:t:e=-5.551209333098937E-4, LHH:1:state:t:var=-5.551209333098937E-4, LHH:1:object:t:cup:d=-2.9545889330922923E-4, LHT:0:object:t:d=-3.5948634239337314E-5, LHH:0:object:t:bowl:d=-3.5948634239337314E-5, BB:object:t:object:t=-0.005490063440828901, LHT:0:object:t:s=-1.2717654613251958E-4, LHH:0:object:t:yellow:s=-1.2717654613251958E-4, LHT:1:object:t:f=-2.442077654860375E-5, LHH:1:object:t:tv:f=-2.442077654860375E-5, LHT:0:state:t:d=-2.8922030653750775E-4, LHH:0:state:t:bowl:d=-2.8922030653750775E-4, LHT:0:state:t:s=-0.0012183255437655952, LHH:0:state:t:yellow:s=-0.0012183255437655952, LHT:1:object:t:s=-0.011389821163490226, LHH:1:object:t:yellow:s=-0.011389821163490226, BB:state:t:state:t=-9.977495673365767E-5, LHT:1:object:t:p=-4.0048105528577515E-4, LHH:1:object:t:you:p=-4.0048105528577515E-4, LHH:1:object:t:cups:d=-7.559724157590766E-5, BB:exists:exists=-1.3086642650962136E-5, LHT:0:has:t:e=-0.021221584840576874, LHH:0:has:t:var=-0.021221584840576874, LHT:1:has:t:e=-0.02664891968371598, LHH:1:has:t:the=-0.018591051902118377, BB:has:t:state:t=-0.026629321118847304, LHH:1:has:t:var=-0.008057867781597606, LHT:0:has:t:d=-0.00295956475231819, LHH:0:has:t:bowl:d=-0.00295956475231819, LHT:0:has:t:s=-0.0024677700908209235, LHH:0:has:t:yellow:s=-0.0024677700908209235, LEX:186=-5.558958259628868E-5, LEX:216=-3.576321000356388E-5, LEX:256=-1.3054549828931644E-5, LEX:173=-1.2654068628639793E-5, LEX:189=-8.263549331792451E-5, LEX:199=-4.47117594998802E-5, LEX:239=-1.632268793654729E-5, LEX:168=0.0010082268200295704, LEX:184=-5.453827058232824E-5, LEX:214=-4.1780273367395204E-5, LEX:224=-8.725063340020772E-5, LEX:254=-1.5251317199730187E-5, LEX:264=2.9907901709654917E-4, LEX:503=0.003540092066550995, LEX:191=-5.224937997214433E-5, LEX:201=-4.6594847417794216E-5, LEX:241=-1.70110081692313E-5, LEX:261=-2.7555620899588505E-5, LEX:182=-1.8016928350853478E-4, LEX:212=-4.19664418355539E-5, LEX:252=-1.531929100685099E-5, LEX:1005=3.641717198549887E-4, LEX:193=-1.0084150192494459E-4, LEX:203=-4.1100821433193095E-5, LEX:223=-1.9550889320664146E-4, LEX:243=-1.50032419922705E-5, LEX:263=-1.8557046081112447E-4, LEX:125=-0.002736148345449677, LEX:129=-2.98392092353698E-5, LEX:133=-0.0018837336558088608, LEX:137=-5.935009924286622E-4, LEX:141=-0.0027853658475295424, LEX:145=-0.0012520003697243788, LEX:149=-0.0027826896641397563, LEX:153=-0.0011302891321728452, LEX:200=-1.115410797594275E-5, LEX:423=-1.6626437986922994E-4, LEX:861=0.002070427809847043, LEX:863=0.0020792048163882477, LEX:1007=-4.5006899161038487E-4, LEX:1009=-5.549341868814431E-4, LEX:870=0.005194893042933225, LEX:871=0.005213400649297659, LEX:195=-5.808529511193975E-5, LEX:205=-1.3339744839616576E-4, LEX:245=-4.975223920408531E-5, LEX:123=9.359843510359475E-4, LEX:131=0.0014388051693539378, LEX:135=-9.050861934530742E-4, LEX:143=-0.0010432332669707827, LEX:151=-3.0832798928676113E-4, LEX:208=-3.291540528065787E-5, LEX:365=-3.9446200985601064E-4, LEX:373=-2.3511174362437932E-5, LEX:389=-3.96587504248466E-5, LEX:1006=3.0921412003590454E-4, LEX:1008=3.0655618330566875E-4, LEX:1106=0.004357835280375924, LEX:419=-6.369920872879281E-4, LEX:859=-2.2686144434833362E-4, LEX:1092=0.0033294479546194687, LEX:1096=0.003258706442007796, LEX:518=-4.584277205075107E-4, LEX:522=-1.5888192044191355E-5, LEX:532=-0.0024510084614370996, LEX:542=-0.0024443029299894684, LEX:546=-3.576658135241357E-5, LEX:552=-2.2770336033611026E-5, LEX:558=-4.040136973454335E-5, LEX:576=-6.901838717331131E-4, LEX:582=-1.3802053504199644E-5, LEX:588=-6.06197223026882E-4, LEX:594=-1.3789344701602236E-5, LEX:600=-0.006592551667343019, LEX:959=-1.9349422127528476E-5, LEX:1014=-5.111943782219936E-5, LEX:1018=-2.83409927391181E-4, LEX:431=-0.018517287397764984, LEX:443=-5.687049280013702E-5, LEX:449=-1.1100916741328099E-4, LEX:467=-0.008057867781597606, LEX:479=0.027701888927672464, LEX:491=-1.6127107746412165E-4, LEX:497=-1.689401155324803E-5, LEX:1001=-0.014883890747412119, LEX:50=0.0011988814257275831, LEX:181=-0.009835632108546065, LEX:197=-0.007221262085959488, LEX:207=-4.200744703391529E-5, LEX:217=-8.876431855965253E-5, LEX:227=0.025649642861817104, LEX:237=-3.869988046048608E-4, LEX:247=-1.5334261262958644E-5, LEX:257=-7.783994313953423E-5, LEX:267=-0.00828934052937961, LEX:277=0.0013998797355977883}
9: =========== r:1.0 p:1.0 (epoch:7 file:0 0)
if there is an empty cup
(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
MakeLex parse time: 0.007 sec.
Adding:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 0.0
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
empty  :- NP : empty:s : 0.0
cup  :- NP : cup:d : 0.0
Lex Size: 1113
First parse time: 0.01 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.1846234043691769
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.2595097043714225
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1010 : 0.018455881655600657
empty  :- NP : empty:s : 53 : 10.0
cup  :- NP : cup:d : 8 : 4.893112065048715
]
Second parse time: 0.009 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.1846234043691769
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.2595097043714225
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1010 : 0.018455881655600657
empty  :- NP : empty:s : 53 : 10.0
cup  :- NP : cup:d : 8 : 4.893112065048715
]
Scale: 0.9969791531659072
Update:
{BB:object:t:state:t=8.082969845807044E-4, LHT:0:object:t:e=-0.0014283292526773154, LHH:0:object:t:var=-0.0014283292526773154, LHT:1:object:t:d=1.0789314047810434E-5, LHH:1:object:t:cup:d=1.0789314047810434E-5, LHT:0:state:t:e=8.100197523665176E-4, LHH:0:state:t:var=8.100197523665176E-4, LHT:1:state:t:s=8.100197523665176E-4, LHH:1:state:t:empty:s=8.100197523665176E-4, LHT:0:state:t:s=-1.251208183336291E-5, LHH:0:state:t:empty:s=-1.251208183336291E-5, LHT:1:state:t:e=-2.330139588084556E-5, LHH:1:state:t:var=-2.330139588084556E-5, BB:exists:object:t=-6.43562477601315E-4, LHT:1:object:t:p=-6.43562477601315E-4, LHH:1:object:t:you:p=-6.43562477601315E-4, BB:object:t:object:t=-7.97507670532828E-4, LHT:1:object:t:s=-7.955560891236106E-4, LHH:1:object:t:empty:s=-7.955560891236106E-4, BB:state:t:state:t=-1.0789314047482646E-5, LHT:0:state:t:d=-1.0789314047482646E-5, LHH:0:state:t:cup:d=-1.0789314047482646E-5, LEX:504=1.2985020457159533E-4, LEX:1005=1.6978988035490087E-4, LEX:141=-3.989404579111975E-4, LEX:149=-3.985672126216305E-4, LEX:861=1.2172642535599975E-4, LEX:863=1.222437060610168E-4, LEX:1007=1.9746749354685413E-4, LEX:1009=1.8734553096655282E-4, LEX:872=-3.477758907648824E-4, LEX:873=-3.420447722481318E-4, LEX:123=5.402725839582401E-5, LEX:131=1.9560809447092246E-4, LEX:365=-6.435624776013149E-4, LEX:1006=1.9733623906962222E-4, LEX:1008=1.928384815227133E-4, LEX:1106=2.57644000837214E-4, LEX:1092=-6.864538136511709E-5, LEX:1096=-6.763774253217189E-5, LEX:1010=5.707539149947287E-4, LEX:1095=-1.078931404748265E-5}
10: =========== r:1.0 p:1.0 (epoch:7 file:0 0)
if the cup contains water
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 water:q)))))
MakeLex parse time: 0.004 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
water  :- NP : water:q : 0.0
the cup  :- NP : cup:d : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1113
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 water:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0019678178945924645
the cup  :- NP : cup:d : 14 : 19.002225585194495
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9994018845729205
water  :- NP : water:q : 32 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0019678178945924645
the cup  :- NP : cup:d : 14 : 19.002225585194495
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9994018845729205
water  :- NP : water:q : 32 : 10.0
]
Scale: 0.9969692135906844
Update:
{BB:has:t:object:t=3.742237956714054E-5, LHT:0:object:t:e=2.8986765168641738E-5, LHH:0:object:t:var=2.8986765168641738E-5, LHT:1:object:t:d=2.898174889779361E-5, LHH:1:object:t:cup:d=2.898174889779361E-5, LHT:0:has:t:e=3.679424345415839E-5, LHH:0:has:t:var=3.679424345415839E-5, LHT:1:has:t:e=3.6794187076558584E-5, LHH:1:has:t:the=3.6794187076558584E-5, LEX:535=-1.2468813343102973E-5, LEX:545=-1.4582880516538763E-5, LEX:14=2.907175950872905E-5, LEX:875=3.742227936249508E-5, LEX:502=-2.170346032412074E-5, LEX:874=3.7422379539026335E-5}
11: =========== r:1.0 p:1.0 (epoch:7 file:0 0)
if it contains coffee
(exists $0 (and (object:t $0 it:e) (has:t $0 (the $1 (object:t $1 coffee:q)))))
MakeLex parse time: 0.002 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
coffee  :- NP : coffee:q : 0.0
it  :- NP : it:e : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1113
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 it:e) (has:t $0 (the $1 (object:t $1 coffee:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0019303956152299695
it  :- NP : it:e : 5 : 10.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9994393069524594
coffee  :- NP : coffee:q : 35 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0019303956152299695
it  :- NP : it:e : 5 : 10.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9994393069524594
coffee  :- NP : coffee:q : 35 : 10.0
]
Scale: 0.9969592742136484
Update:
{LEX:472=-1.3565536127657007E-5}
12: =========== r:1.0 p:1.0 (epoch:7 file:0 0)
if the plate contains syrup
(exists $0 (and (object:t $0 plate:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
MakeLex parse time: 0.002 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
syrup  :- NP : syrup:q : 0.0
the plate  :- NP : plate:d : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1113
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 plate:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0019303956152299695
the plate  :- NP : plate:d : 18 : 20.000357835119637
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9994393069524594
syrup  :- NP : syrup:q : 33 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0019303956152299695
the plate  :- NP : plate:d : 18 : 20.000357835119637
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9994393069524594
syrup  :- NP : syrup:q : 33 : 10.0
]
Scale: 0.9969493350347934
Update:
{}
13: =========== r:1.0 p:1.0 (epoch:7 file:0 0)
if the cup is empty
(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
MakeLex parse time: 0.008 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the cup  :- NP : cup:d : 0.0
empty  :- NP : empty:s : 0.0
Lex Size: 1113
First parse time: 0.012 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.6114968450423928
the cup  :- NP : cup:d : 14 : 19.002254656954005
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.2527018376782637
empty  :- NP : empty:s : 53 : 10.0
]
Second parse time: 0.008 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.6114968450423928
the cup  :- NP : cup:d : 14 : 19.002254656954005
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.2527018376782637
empty  :- NP : empty:s : 53 : 10.0
]
Scale: 0.996939396054114
Update:
{BB:object:t:state:t=0.02142700433558152, LHT:0:object:t:e=-0.013960898592280621, LHH:0:object:t:var=-0.013960898592280621, LHT:1:object:t:d=-0.033844498681514436, LHH:1:object:t:cup:d=7.313818338522371E-4, LHT:0:state:t:e=0.02067941450771681, LHH:0:state:t:var=0.02067941450771681, LHT:1:state:t:s=0.02070422194612319, LHH:1:state:t:empty:s=0.021826605771066272, LHT:1:state:t:e=-2.4890868870702455E-5, LHH:1:state:t:var=-2.4890868870702455E-5, BB:exists:state:t=-2.6638497481597978E-5, LHH:1:state:t:yellow:s=-0.0011223838249433266, BB:exists:object:t=-0.0019379306829687226, LHH:1:object:t:bowl:d=-0.001125774145861795, BB:exists:exists=-0.03456774701794614, LHH:1:object:t:cups:d=-0.033450106369504795, LHT:1:object:t:p=-0.0019381311753869472, LHH:1:object:t:you:p=-0.0019381311753869472, LHT:0:object:t:s=-0.021824362971602153, LHH:0:object:t:empty:s=-0.021824362971602153, LEX:525=-2.8160985773299426E-5, LEX:535=-4.5867869476916355E-5, LEX:545=-3.295881905152151E-5, LEX:581=-2.674553583316268E-5, LEX:593=-2.6743382374214077E-5, LEX:528=-2.2343234387477434E-5, LEX:538=-2.2319530675968868E-5, LEX:572=-2.538259826158213E-5, LEX:584=-2.838177473360335E-5, LEX:596=-9.388368442465635E-5, LEX:523=-2.960307822600461E-5, LEX:533=-5.9196785436861404E-5, LEX:543=-5.919510782423295E-5, LEX:579=-2.9598504581157615E-5, LEX:591=-2.9598504637226443E-5, LEX:14=7.309422821743709E-4, LEX:516=-5.4153720720944264E-5, LEX:530=-8.62823524104497E-5, LEX:540=-8.627958531672858E-5, LEX:574=-2.959983110848096E-5, LEX:586=-2.95992284230954E-5, LEX:598=-8.879710382427193E-5, LEX:123=-0.019338834112249553, LEX:131=0.017995195940422436, LEX:135=-5.071622622988594E-5, LEX:143=-8.502178410924144E-5, LEX:151=-6.148161821615286E-5, LEX:172=-0.0011216549715182534, LEX:311=-5.593511778913548E-4, LEX:365=-0.0013782912617732602, LEX:373=-0.032886740793000344, LEX:547=0.01606205402897396, LEX:559=0.021905917442054716, LEX:577=-2.2508983793515215E-5, LEX:589=-2.2485348697873983E-5, LEX:1106=-6.0891158973418736E-5, LEX:1075=-8.237282187713162E-5, LEX:1079=-8.538699933928289E-5, LEX:518=0.021928380324049954, LEX:532=-2.6739102520380497E-5, LEX:542=-2.673443439775037E-5, LEX:558=-2.232589343443387E-5, LEX:570=0.019151781628456252, LEX:576=-2.7670232706797623E-5, LEX:588=-2.8535071372849227E-5, LEX:600=-4.934217037448713E-5, LEX:977=-0.03456774694240995, LEX:1020=-0.005759043675858555}
14: =========== r:1.0 p:1.0 (epoch:7 file:0 0)
if they are used
(exists $0 (and (object:t $0 they:e) (state:t $0 used:s)))
MakeLex parse time: 0.002 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
used  :- NP : used:s : 0.0
they  :- NP : they:e : 0.0
are  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
used  :- NP : used:s : 0.0
Lex Size: 1113
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 they:e) (state:t $0 used:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.9275306549438743
they  :- NP : they:e : 7 : 10.953867643188563
are  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 1046 : -3.2415901374314734E-5
used  :- NP : used:s : 54 : 10.308179051436102
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.9275306549438743
they  :- NP : they:e : 7 : 10.953867643188563
are  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 1046 : -3.2415901374314734E-5
used  :- NP : used:s : 54 : 10.308179051436102
]
Scale: 0.9969294572716035
Update:
{LHT:0:object:t:e=-0.003966573637465812, LHH:0:object:t:var=-0.003966573637465812, LHT:1:object:t:e=0.02487496875983598, LHH:1:object:t:they:e=0.02487496875983598, LHT:1:object:t:p=-0.02884154239730177, LHH:1:object:t:they:p=-0.024874968759835973, BB:exists:object:t=-0.003966573637465794, LHH:1:object:t:you:p=-0.003966573637465794, LEX:123=4.6657729545354957E-4, LEX:131=0.003507542488476668, LEX:365=-0.003966573637465794, LEX:4=-0.024874968759835966, LEX:7=0.02487378407212873}
15: =========== r:1.0 p:1.0 (epoch:7 file:0 0)
if the kettle is white
(exists $0 (and (object:t $0 kettle:d) (state:t $0 white:s)))
MakeLex parse time: 0.004 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the kettle  :- NP : kettle:d : 0.0
white  :- NP : white:s : 0.0
Lex Size: 1113
First parse time: 0.004 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 white:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.589590927600338
the kettle  :- NP : kettle:d : 17 : 19.9999874990419
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.2307734573542137
white  :- NP : white:s : 52 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.589590927600338
the kettle  :- NP : kettle:d : 17 : 19.9999874990419
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.2307734573542137
white  :- NP : white:s : 52 : 10.0
]
Scale: 0.9969195186872564
Update:
{BB:object:t:state:t=0.026039331816542763, LHT:0:object:t:e=-0.0029997289078493744, LHH:0:object:t:var=-0.0029997289078493744, LHT:1:object:t:d=-0.028376982336236332, LHT:0:state:t:e=0.026014178404540605, LHH:0:state:t:var=0.026014178404540605, LHT:1:state:t:s=0.02603993352996742, LHH:1:state:t:white:s=0.027079504984970814, BB:exists:object:t=-0.0016999834103508978, LHT:1:object:t:p=-0.0016999831541840797, LHH:1:object:t:you:p=-0.0016999831541840797, BB:exists:state:t=-2.575511433913663E-5, LHT:1:state:t:e=-2.5756188003271454E-5, LHH:1:state:t:var=-2.5756188003271454E-5, LHT:0:object:t:s=-0.02707837151967378, LHH:0:object:t:white:s=-0.02707837151967378, BB:exists:exists=-0.028376782122985333, LHH:1:object:t:bowl:d=-0.0010395714550034084, LHH:1:state:t:yellow:s=-0.0010395714550034084, LHH:1:object:t:cups:d=-0.02733721066797931, LEX:509=-1.0660605148758904E-5, LEX:561=1.2993794687428182E-5, LEX:123=-0.024727019072742835, LEX:131=0.017638309086729406, LEX:172=-0.0010395714550034084, LEX:311=-4.3945652835614417E-4, LEX:365=-0.0012605266258279356, LEX:373=-0.026897754139623163, LEX:547=0.01523422051782462, LEX:559=0.02148368025455369, LEX:518=0.02151967511230673, LEX:558=-2.3000823634517088E-5, LEX:570=0.01871729830338413, LEX:977=-0.028376782122982717, LEX:1020=-0.011837192491495755}
16: =========== r:1.0 p:1.0 (epoch:7 file:0 0)
if the mug is on the stove
(exists $0 (and (object:t $0 mug:d) (On:t $0 (the $1 (object:t $1 stove:f)))))
MakeLex parse time: 0.009 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
the stove  :- NP : stove:f : 0.0
the mug  :- NP : mug:d : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
on  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (On:t $4 ($2 $3)))))))) : 0.0
Lex Size: 1113
First parse time: 0.008 sec.
WRONG: (exists $0 (and (object:t $0 mug:d) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0019303956152299695
the mug  :- NP : mug:d : 16 : 19.99982500422412
is  :- S/NP\(NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $4 $1) (IsNear:t $4 ($2 $3)))))))) : 1031 : -0.36782394681007224
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 1.4708867910328571
the stove  :- NP : stove:f : 76 : 19.002046401367956
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : -0.0019303956152299695
the mug  :- NP : mug:d : 16 : 19.99982500422412
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 0.9319510057764744
on  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (On:t $4 ($2 $3)))))))) : 1019 : 0.9709039164610653
the stove  :- NP : stove:f : 76 : 19.002046401367956
]
Scale: 0.9969095803010666
Update:
{BB:On:t:object:t=0.5607715039716635, LHT:0:object:t:e=0.011565813690713305, LHH:0:object:t:var=0.011565813690713305, LHT:1:object:t:d=4.793318780230749E-5, LHH:1:object:t:mug:d=4.793319214613393E-5, LHT:0:On:t:e=0.5012791260871556, LHH:0:On:t:var=0.5012791260871556, LHT:1:On:t:e=0.5012431906090388, LHH:1:On:t:the=0.5012431906090388, LHT:1:object:t:f=0.011553815973742925, LHH:1:object:t:stove:f=0.011553815976684225, BB:object:t:state:t=-0.02310758702695228, LHT:0:object:t:d=-1.1892298607264609E-5, LHH:0:object:t:mug:d=-1.1892298607264609E-5, LHT:0:state:t:e=-0.011554044716501363, LHH:0:state:t:var=-0.011554044716501363, LHT:1:object:t:e=-4.782776943914701E-5, LHH:1:object:t:var=-4.782776943914701E-5, BB:On:t:On:t=-0.004419844959708621, LHT:0:On:t:d=-3.5935478117082506E-5, LHH:0:On:t:mug:d=-3.5935478117082506E-5, BB:IsNear:t:object:t=-0.49410921959206316, LHT:0:IsNear:t:e=-0.544797645727719, LHH:0:IsNear:t:var=-0.544797645727719, LHT:1:IsNear:t:e=-0.544797645727719, LHH:1:IsNear:t:the=-0.544797645727719, BB:IsNear:t:On:t=-0.05068842613565582, BB:In:t:state:t=-0.02310763195336832, LHT:1:state:t:s=-0.01155381597668416, LHH:1:state:t:IsOn:s=-0.01155381597668416, LHT:0:In:t:e=-0.01155381597668416, LHH:0:In:t:var=-0.01155381597668416, LHT:1:In:t:f=-0.01155381597668416, LHH:1:In:t:stove:f=-0.01155381597668416, BB:In:t:object:t=-0.023107358272564996, LEX:876=0.09068271520604677, LEX:875=0.011551931940025111, LEX:1028=-0.01155381597668416, LEX:1012=0.040338290430936806, LEX:1014=0.11021585988906077, LEX:1016=0.008410644234980674, LEX:1018=0.2967258515038816, LEX:1020=-0.0015753818241510478, LEX:1031=-0.3947271948148656, LEX:1033=-0.15007045091285337, LEX:57=-0.01155381597668416, LEX:1013=-0.3456819969227712, LEX:1015=0.11021525388977534, LEX:1017=-0.09525844304366596, LEX:1019=0.3020299483653862, LEX:1021=0.0046746091545631354, LEX:1085=-0.008692078929488499, LEX:1087=-0.04641619216587595}
17: =========== r:0.9411764705882353 p:0.9411764705882353 (epoch:7 file:0 0)
if the mug is red and dry
(exists $0 (and (object:t $0 mug:d) (state:t $0 red:s) (state:t $0 dry:s)))
MakeLex parse time: 0.006 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
dry  :- NP : dry:s : 0.0
the mug  :- NP : mug:d : 0.0
dry  :- NP : dry:s : 0.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
red  :- NP : red:s : 0.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 0.0
Lex Size: 1113
First parse time: 0.011 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (state:t $0 red:s) (state:t $0 dry:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.9063848033686683
the mug  :- NP : mug:d : 16 : 19.99982500422412
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.5875722955927977
red  :- NP : red:s : 47 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.13024859838740058
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.007 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.9063848033686683
the mug  :- NP : mug:d : 16 : 19.99982500422412
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.5875722955927977
red  :- NP : red:s : 47 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.13024859838740058
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9968996421130285
Update:
{BB:object:t:state:t=-0.018179306337481722, BB:state:t:state:t=6.364359443824709E-4, LHT:0:object:t:e=-0.008801144319417897, LHH:0:object:t:var=-0.008801144319417897, LHT:1:object:t:d=-0.004703937399714676, LHT:0:state:t:e=2.952483842202557E-4, LHH:0:state:t:var=2.952483842202557E-4, LHT:1:state:t:s=3.037952987988051E-4, LHH:1:state:t:dry:s=3.0379549659040865E-4, BB:object:t:object:t=-0.009407872894936197, LHH:1:object:t:cup:d=-0.004703936508284327, BB:exists:exists=-1.4448078544730805E-5, LHT:1:object:t:s=-3.037954965176554E-4, LHH:1:object:t:dry:s=-3.037954965176554E-4, BB:exists:object:t=-0.003778990756860801, LHT:1:object:t:p=-0.0037789889221136307, LHH:1:object:t:you:p=-0.0037789889221136307, LHT:1:object:t:f=-1.442250106393378E-5, LHH:1:object:t:tv:f=-1.442250106393378E-5, BB:In:t:state:t=-6.07548241558828E-4, LHT:0:In:t:e=-3.03774120779414E-4, LHH:0:In:t:var=-3.03774120779414E-4, LHT:1:In:t:e=-3.03774120779414E-4, LHH:1:In:t:the=-3.03774120779414E-4, BB:In:t:object:t=-6.075411992006148E-4, LEX:123=4.4857717533538453E-4, LEX:131=0.0036421212346427157, LEX:365=-0.0037789888471971866, LEX:1027=-3.03774120779414E-4, LEX:546=-0.0047039364474681005, LEX:570=-1.444737195364645E-5, LEX:600=0.005021687060797714, LEX:1020=-3.037706002379931E-4, LEX:887=-3.03774120779414E-4, LEX:902=-1.442250106393378E-5, LEX:1022=3.1775061332957484E-4}
18: =========== r:0.9444444444444444 p:0.9444444444444444 (epoch:7 file:0 0)
if the kettle is empty and cool
(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s) (state:t $0 cool:s)))
MakeLex parse time: 0.005 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
cool  :- NP : cool:s : 0.0
the kettle  :- NP : kettle:d : 0.0
cool  :- NP : cool:s : 0.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
empty  :- NP : empty:s : 0.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 0.0
Lex Size: 1113
First parse time: 0.013 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s) (state:t $0 cool:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.9027426821340256
the kettle  :- NP : kettle:d : 17 : 19.9999874990419
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.5825506085319999
empty  :- NP : empty:s : 53 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.129930847774071
cool  :- NP : cool:s : 49 : 10.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.9027426821340256
the kettle  :- NP : kettle:d : 17 : 19.9999874990419
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.5825506085319999
empty  :- NP : empty:s : 53 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.129930847774071
cool  :- NP : cool:s : 49 : 10.0
]
Scale: 0.9968897041231358
Update:
{BB:object:t:state:t=-0.017303626985442157, BB:state:t:state:t=8.345582249719534E-4, LHT:0:object:t:e=-0.008611033984029678, LHH:0:object:t:var=-0.008611033984029678, LHT:1:object:t:d=-0.004534548705685813, LHT:0:state:t:e=3.946893609601177E-4, LHH:0:state:t:var=3.946893609601177E-4, LHT:1:state:t:s=4.0322163577944504E-4, LHH:1:state:t:cool:s=4.032218992502261E-4, BB:object:t:object:t=-0.00906909493766863, LHH:1:object:t:cup:d=-0.004534547545477133, BB:exists:exists=-1.4090780497860272E-5, LHT:1:object:t:s=-4.032218991418035E-4, LHH:1:object:t:cool:s=-4.032218991418035E-4, BB:exists:object:t=-0.003659208515071855, LHT:1:object:t:p=-0.003659206131894488, LHH:1:object:t:you:p=-0.003659206131894488, LHT:1:object:t:f=-1.4057247299672322E-5, LHH:1:object:t:tv:f=-1.4057247299672322E-5, BB:In:t:state:t=-8.063869618709743E-4, LHT:0:In:t:e=-4.0319348093548717E-4, LHH:0:In:t:var=-4.0319348093548717E-4, LHT:1:In:t:e=-4.0319348093548717E-4, LHH:1:In:t:the=-4.0319348093548717E-4, BB:In:t:object:t=-8.063776064595963E-4, LEX:123=4.452995920020643E-4, LEX:131=0.003625024706518807, LEX:365=-0.003659206034667556, LEX:1027=-4.0319348093548706E-4, LEX:546=-0.004534547468834317, LEX:570=-1.4090308409837979E-5, LEX:600=0.004951368220832118, LEX:1020=-4.031888040764104E-4, LEX:887=-4.0319348093548706E-4, LEX:902=-1.4057247299672322E-5, LEX:1022=4.168207519980833E-4}
19: =========== r:0.9473684210526315 p:0.9473684210526315 (epoch:7 file:0 0)
if the glass is used and on the floor
(exists $0 (and (object:t $0 kettle:d) (state:t $0 used:s) (On:t $0 (the $1 (object:t $1 floor:lo)))))
MakeLex parse time: 0.009 sec.
Adding:
if the glass is  :- S/NP/(NP|NP)/NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (On:t $3 ($1 $2)) (object:t $3 kettle:d) (state:t $3 $0)))))) : 0.0
used  :- NP : used:s : 0.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1.9135499999999999
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
the floor  :- NP : floor:lo : 0.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1.9135499999999999
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1113
First parse time: 0.027 sec.
WRONG: (exists $0 (and (state:t $0 used:s) (object:t $0 glass:d) (In:t $0 (the $1 (object:t $1 floor:lo)))))
Using:
[LexEntries and scores:
if  :- S/NP/(NP|NP)/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and (In:t $4 ($2 $3)) ($0 $4) (state:t $4 $1))))))) : 1027 : -0.4667128148893534
the glass  :- NP : glass:d : 15 : 16.011389255717198
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.0947456444798074
used  :- NP : used:s : 54 : 10.308179051436102
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1023 : 3.232934962415612
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 1.125204794110086
the floor  :- NP : floor:lo : 67 : 20.0
]
Second parse time: 0.01 sec.
Best LexEntries:
[LexEntries and scores:
if the glass is  :- S/NP/(NP|NP)/NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (On:t $3 ($1 $2)) (object:t $3 kettle:d) (state:t $3 $0)))))) : 879 : 3.2229519594266995
used  :- NP : used:s : 54 : 10.308179051436102
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1023 : 3.232934962415612
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 1.125204794110086
the floor  :- NP : floor:lo : 67 : 20.0
]
Scale: 0.9968797663313826
Update:
{BB:object:t:state:t=-0.036940070302261936, BB:On:t:object:t=1.8166624480310891, BB:On:t:state:t=1.8167351015594473, LHT:0:object:t:e=0.02059591238740914, LHH:0:object:t:var=0.02059591238740914, LHT:1:object:t:d=-1.3227225999200789E-4, LHH:1:object:t:kettle:d=0.9083675507797236, LHT:0:state:t:e=-0.043311738276192654, LHH:0:state:t:var=-0.043311738276192654, LHT:1:state:t:s=-0.021069492820534972, LHT:0:On:t:e=0.6322645085704941, LHH:0:On:t:var=0.6322645085704941, LHT:1:On:t:e=0.6322121757493128, LHH:1:On:t:the=0.6322121757493128, LHT:1:object:t:lo=0.021594356218352213, LHH:1:object:t:floor:lo=0.021594356218352213, BB:exists:exists=-0.008121828900868124, LHH:1:object:t:glass:d=-0.9083675507797238, LHT:0:object:t:lo=-4.8811267255612534E-4, LHH:0:object:t:floor:lo=-4.8811267255612534E-4, LHT:1:object:t:e=-5.404454936368856E-4, LHH:1:object:t:var=-5.404454936368856E-4, LHT:0:On:t:lo=-5.233282118126814E-5, LHH:0:On:t:floor:lo=-5.233282118126814E-5, BB:object:t:object:t=-8.980993908028536E-4, LHT:1:object:t:f=-7.781280080539076E-4, LHH:1:object:t:tv:f=-7.781280080539076E-4, BB:exists:object:t=-1.2322596388260733E-4, LHT:1:object:t:p=-3.562544142944253E-5, LHH:1:object:t:you:p=-3.562544142944253E-5, BB:exists:state:t=-0.042133631119775895, BB:In:t:state:t=-1.7985509005541087, BB:In:t:exists=-0.04213359994019319, LHT:1:state:t:e=-0.022242245462930833, LHH:1:state:t:var=-0.022242245462930833, LHT:0:In:t:e=-0.8992754502770544, LHH:0:In:t:var=-0.8992754502770544, LHT:1:In:t:e=-0.8782215395596127, LHH:1:In:t:the=-0.8782215395596127, BB:In:t:object:t=-1.756422481951395, BB:On:t:exists=-0.0011780127551808133, BB:state:t:state:t=-0.04445837962504545, LHH:1:object:t:cup:d=-9.762566405400649E-5, LHH:1:object:t:bowl:d=-1.5596295434447273E-5, LHH:1:state:t:yellow:s=-1.5596295434447273E-5, LHH:1:object:t:cups:d=-1.905030050318944E-5, LHH:1:state:t:IsOn:s=-0.021053910717441865, LHT:1:In:t:lo=-0.021053910717441865, LHH:1:In:t:floor:lo=-0.021053910717441865, LEX:880=-0.05691156240406321, LEX:505=-1.0155455380974071E-5, LEX:519=-4.4565262187917784E-5, LEX:15=-0.908301787833068, LEX:606=0.0034903813555702437, LEX:608=-0.0033710728752609264, LEX:123=-4.350424057977592E-5, LEX:131=-0.007401317257080978, LEX:172=-1.5596295434447283E-5, LEX:365=-2.969624558267743E-5, LEX:373=-1.3121104656424313E-5, LEX:547=-1.418414899559631E-4, LEX:559=-2.0832013291096867E-4, LEX:875=-0.0011677500564998735, LEX:1027=-0.7019398690606734, LEX:1028=-0.19733558121638098, LEX:9=-6.57629466559137E-5, LEX:518=-2.149503441902027E-4, LEX:546=-9.762566395349863E-5, LEX:570=-0.007532815260578869, LEX:600=-0.022131564148569226, LEX:977=-3.464659593763673E-5, LEX:1020=-0.8783559231135848, LEX:930=-9.229511762786978E-4, LEX:942=-0.006215642730526783, LEX:978=-5.46839744614442E-4, LEX:988=-2.2866184663947905E-4, LEX:1022=-0.022229189812522723, LEX:1023=0.20411437248017247, LEX:1024=-0.054184476654394034, LEX:1025=-0.06531618069530537, LEX:1026=-0.05458701743816193, LEX:57=-0.021054010210170955, LEX:1013=0.2749897089777949, LEX:1017=0.022100362734986532, LEX:1019=-8.873897115907734E-4, LEX:1021=-2.905158002900743E-4, LEX:1085=-0.13761580660728712, LEX:1087=-0.1373616629112429, LEX:879=0.9652787081171463}
20: =========== r:0.9 p:0.9 (epoch:7 file:0 0)
if the plate is dirty and in the refrigerator
(exists $0 (and (object:t $0 plate:d) (state:t $0 dirty:s) (In:t $0 (the $1 (object:t $1 refrigerator:f)))))
MakeLex parse time: 0.008 sec.
Adding:
if  :- S/NP/(NP|NP)/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and (In:t $4 ($2 $3)) ($0 $4) (state:t $4 $1))))))) : 0.0
dirty  :- NP : dirty:s : 0.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1.9135499999999999
in  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
the refrigerator  :- NP : refrigerator:f : 0.0
the plate  :- NP : plate:d : 0.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1.9135499999999999
in  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1113
First parse time: 0.019 sec.
WRONG: (and (exists $0 (and (object:t $0 plate:d) (state:t $0 dirty:s))) (exists $0 (object:t $0 refrigerator:f)))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.5683155674786957
the plate  :- NP : plate:d : 18 : 20.000357835119637
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.209468732586097
dirty  :- NP : dirty:s : 55 : 10.0
and  :- S/NP\S/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 t (lambda $2 e (and $1 (exists $3 ($0 $3 $2)))))) : 930 : -3.828556534820375
in  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1047 : -0.24351805606464988
the refrigerator  :- NP : refrigerator:f : 75 : 20.000051252150676
]
Second parse time: 0.008 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/(NP|NP)/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and (In:t $4 ($2 $3)) ($0 $4) (state:t $4 $1))))))) : 1027 : -1.1686526839500269
the plate  :- NP : plate:d : 18 : 20.000357835119637
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.973101567593392
dirty  :- NP : dirty:s : 55 : 10.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1023 : 3.4370493348957845
in  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1047 : -0.24351805606464988
the refrigerator  :- NP : refrigerator:f : 75 : 20.000051252150676
]
Scale: 0.9968698287377635
Update:
{BB:object:t:state:t=0.5879535222591328, BB:In:t:object:t=1.1654312286496487, BB:In:t:state:t=1.1654110711512013, LHT:0:object:t:e=-0.05202702027975025, LHH:0:object:t:var=-0.05202702027975025, LHT:1:object:t:d=-0.012558210199321643, LHT:0:state:t:e=0.005216344912122582, LHH:0:state:t:var=0.005216344912122582, LHT:1:state:t:s=0.005238025035456293, LHH:1:state:t:dirty:s=0.005692968344839421, LHT:0:In:t:e=0.5827055355756007, LHH:0:In:t:var=0.5827055355756007, LHT:1:In:t:e=0.5827055355756007, LHH:1:In:t:the=0.5827055355756007, LHT:1:object:t:f=-0.04372211913502074, LHH:1:object:t:refrigerator:f=0.001157497402482637, BB:exists:exists=-0.6404229032124107, LHT:0:object:t:f=-0.0011574974024068513, LHH:0:object:t:refrigerator:f=-0.0011574974024068513, LHT:1:object:t:e=-0.001157509978590366, LHH:1:object:t:var=-0.001157509978590366, BB:object:t:object:t=-0.0448799490691793, LHH:1:object:t:tv:f=-0.04487961653750254, BB:exists:object:t=-0.008989541479536362, LHT:1:object:t:p=-0.0014391387310967202, LHH:1:object:t:you:p=-0.0014391387310967202, BB:exists:state:t=-3.1758867606018865E-5, BB:In:t:exists=-2.0157498447141028E-5, LHT:1:state:t:e=-2.1680141115434184E-5, LHH:1:state:t:var=-2.1680141115434184E-5, LHT:0:object:t:s=-0.005692714344567851, LHH:0:object:t:dirty:s=-0.005692714344567851, LHH:1:object:t:bowl:d=-4.5494330938286446E-4, LHH:1:state:t:yellow:s=-4.5494330938286446E-4, LHH:1:object:t:cups:d=-0.012103227863877054, LEX:509=-1.8974071299626727E-5, LEX:519=-3.293211654755028E-5, LEX:561=-1.0726480166705949E-4, LEX:18=1.815810373632036E-4, LEX:610=0.011065881492432532, LEX:612=0.0402523551188419, LEX:123=-0.04300602445289233, LEX:131=-0.2932442478926184, LEX:172=-4.5494330938286446E-4, LEX:311=-2.0071164590641698E-4, LEX:365=-0.0012384270851903034, LEX:373=-0.011902516217970636, LEX:547=-0.051187307792111184, LEX:559=-0.18129500926282535, LEX:1027=0.4126886454337708, LEX:1028=0.17001669238973777, LEX:12=-1.817787894560797E-4, LEX:518=-0.1813919187897212, LEX:558=-1.0355270926996691E-5, LEX:570=-0.3318578156799764, LEX:977=-0.012558171173259917, LEX:1020=0.5258180631617917, LEX:930=-0.536706902036464, LEX:942=-0.0011190170016346084, LEX:978=-0.04486474487153788, LEX:988=-1.487166596462828E-5, LEX:1023=0.2653788430105262, LEX:1024=-1.3519538279071515E-5, LEX:1025=0.26603207509921356, LEX:1026=-1.0099607228525362E-5, LEX:1047=-0.05131823661136902}
21: =========== r:0.8571428571428571 p:0.8571428571428571 (epoch:7 file:0 0)
for all mugs that contain water
(forall $0 (and (object:t $0 mugs:d) (has:t $0 (the $1 (object:t $1 water:q)))))
MakeLex parse time: 0.01 sec.
Adding:
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
water  :- NP : water:q : 0.0
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
Lex Size: 1113
First parse time: 0.012 sec.
CORRECT:(forall $0 (and (object:t $0 mugs:d) (has:t $0 (the $1 (object:t $1 water:q)))))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.5121376923430643
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 883 : 1.4500731237191433
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 3.11244797865695
contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 812 : 0.8192428809941636
water  :- NP : water:q : 32 : 10.0
]
Second parse time: 0.011 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.5121376923430643
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 883 : 1.4500731237191433
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 3.11244797865695
contain  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 812 : 0.8192428809941636
water  :- NP : water:q : 32 : 10.0
]
Scale: 0.9968598913422718
Update:
{BB:has:t:object:t=0.12364616110364515, LHT:0:object:t:e=0.1311993340269014, LHH:0:object:t:var=0.1311993340269014, LHT:1:object:t:d=0.09670873627605837, LHH:1:object:t:mugs:d=0.10459555748572821, LHT:0:has:t:e=0.06981741319404229, LHH:0:has:t:var=0.06981741319404229, LHT:1:has:t:e=0.07061375519043941, LHH:1:has:t:the=0.0706160517584721, LHT:1:object:t:q=0.017723742973843774, LHH:1:object:t:water:q=0.017723742973843774, LHT:0:object:t:q=-0.01691795986565211, LHH:0:object:t:water:q=-0.01691795986565211, LHT:1:object:t:e=-1.5110508865291404E-4, LHH:1:object:t:var=-1.0787051891335438E-4, BB:object:t:object:t=-0.010440970821672814, LHH:1:object:t:mug:d=-0.007886821209670105, LHH:1:object:t:the=-4.323456973955964E-5, LHT:1:has:t:q=-8.018949412330001E-4, LHH:1:has:t:water:q=-8.018949412330001E-4, LEX:290=1.0613077491719655E-5, LEX:619=-0.0016082455095697173, LEX:627=1.0658013666433862E-5, LEX:635=2.2948613244191157E-5, LEX:643=-0.002818191374629143, LEX:659=-0.011622791400904846, LEX:675=-0.011640113669990727, LEX:683=1.068185469569302E-5, LEX:691=-0.0015849391681773798, LEX:699=1.0748925813605642E-5, LEX:707=1.081164142626303E-5, LEX:715=-3.295970975210852E-4, LEX:723=-3.373526127880722E-4, LEX:731=-0.0015231223807797027, LEX:739=-3.373526127880722E-4, LEX:747=-0.0015257324764364666, LEX:755=2.2504200725431753E-5, LEX:763=1.0817902538003673E-5, LEX:771=-2.0714081796239551E-4, LEX:787=-0.002810509958933636, LEX:795=3.5762465154131976E-5, LEX:803=-0.002810509958933636, LEX:811=3.572577497516659E-5, LEX:614=4.8507514688539836E-5, LEX:622=-0.0018143275212542003, LEX:630=1.5147499706441475E-4, LEX:646=-0.0028185881455449636, LEX:654=1.4355676268985123E-5, LEX:662=-0.0028185881455449636, LEX:670=4.547356153287558E-5, LEX:678=-0.007016751332473704, LEX:686=1.0037167673014401E-5, LEX:694=1.081693813681756E-5, LEX:702=1.0738095331702796E-5, LEX:710=-2.1434313519593415E-4, LEX:718=-3.2915203964113633E-4, LEX:726=-6.103286178543454E-4, LEX:734=-3.2915203964113633E-4, LEX:742=-0.001871605233400576, LEX:750=1.1032567104380337E-5, LEX:758=1.0817902538003673E-5, LEX:766=3.434001472889641E-5, LEX:774=-0.0018648649356605498, LEX:790=-0.004644188576600968, LEX:806=-0.013638917112610111, LEX:617=-0.0016082455095697173, LEX:633=2.2948613244191157E-5, LEX:641=-0.002819620347752254, LEX:657=-0.005633490199523172, LEX:673=-0.005637066167024136, LEX:681=1.068185469569302E-5, LEX:689=-7.850137718684398E-4, LEX:697=1.0748925813605642E-5, LEX:713=-3.292936322664781E-4, LEX:721=-3.373526127880722E-4, LEX:729=-6.683058524122534E-4, LEX:737=-3.373526127880722E-4, LEX:745=-6.678827674861491E-4, LEX:753=0.001791930234142151, LEX:761=1.0817902538003673E-5, LEX:769=-9.041270801136827E-5, LEX:785=-0.002810509958933636, LEX:801=-0.002810509958933636, LEX:624=-0.0018143275212542003, LEX:632=1.5569201024401823E-5, LEX:648=-0.002818569094869889, LEX:656=1.013968411145451E-5, LEX:664=-0.002818569094869889, LEX:672=3.2039123473123865E-5, LEX:680=-9.453727449980264E-4, LEX:688=1.0037167673014401E-5, LEX:704=1.0743803454078276E-5, LEX:712=-2.516555679586472E-4, LEX:720=-3.291492690418161E-4, LEX:728=-5.003187487183932E-4, LEX:736=-3.291492690418161E-4, LEX:744=-0.0015366482974834461, LEX:752=1.1032567104380337E-5, LEX:760=1.0817902538003673E-5, LEX:768=3.434001472889641E-5, LEX:776=-0.0021383337593452825, LEX:792=-0.0039058705213075692, LEX:808=-0.011533363913439698, LEX:615=-0.0028799137485414385, LEX:623=1.0658013666433862E-5, LEX:631=-0.002653592576241161, LEX:639=-0.002109344979516668, LEX:655=-0.008208227191711952, LEX:671=-0.008189891877877253, LEX:687=-0.0015849391681773798, LEX:695=-0.003280186420061507, LEX:703=1.0816962709282143E-5, LEX:711=-2.8250276179310496E-4, LEX:719=-3.3735292194849234E-4, LEX:727=-5.248324043732298E-4, LEX:735=-3.3735292194849234E-4, LEX:743=-5.202458936643793E-4, LEX:751=2.2504200725431753E-5, LEX:759=1.0817902538003673E-5, LEX:767=-2.0714081796239551E-4, LEX:783=-0.0028105119093566017, LEX:799=-0.0028105119093566017, LEX:883=0.13589090965326742, LEX:618=1.0894807736431427E-5, LEX:626=-0.004139821191325877, LEX:634=3.4277132319397535E-5, LEX:650=-0.0028185881455449636, LEX:666=-0.0028185881455449636, LEX:674=1.1030893827915843E-5, LEX:682=-0.001619786981685662, LEX:698=1.081693813681756E-5, LEX:706=-0.004610057458264706, LEX:714=-3.3734937802500564E-4, LEX:722=-3.2915203964113633E-4, LEX:730=-3.368279001868129E-4, LEX:738=-3.2915203964113633E-4, LEX:746=-0.0010355075703840932, LEX:754=9.064829150182564E-4, LEX:762=1.0817902538003673E-5, LEX:770=8.702296765067891E-4, LEX:778=-0.0028104864615357346, LEX:794=-0.0028119812891767727, LEX:810=-0.00842455103101946, LEX:613=0.06918356412607699, LEX:621=1.0658013666433862E-5, LEX:629=0.05988175217798027, LEX:637=-0.0018016787139109448, LEX:653=-0.009935353096557928, LEX:669=-0.009896057532645374, LEX:685=-0.0015849391681773798, LEX:693=1.0748925813605642E-5, LEX:701=1.0816967830684545E-5, LEX:709=-2.799016807946133E-4, LEX:717=-3.373526127880722E-4, LEX:725=-4.439970441866007E-4, LEX:733=-3.373526127880722E-4, LEX:741=-4.3883353733122576E-4, LEX:749=2.2504200725431753E-5, LEX:757=1.0817902538003673E-5, LEX:765=-2.0714081796239551E-4, LEX:781=-0.002810509958933636, LEX:797=-0.002810509958933636, LEX:27=-0.007886821209670105, LEX:868=0.13588664393018854, LEX:620=1.0894807736431427E-5, LEX:628=-0.0018143275212542003, LEX:636=3.4277132319397535E-5, LEX:652=-0.0028185881455449636, LEX:660=-0.0031000596717540518, LEX:668=-0.0028185881455449636, LEX:676=-0.003206148093351, LEX:684=-0.001619786981685662, LEX:692=1.0037167673014401E-5, LEX:700=1.081693813681756E-5, LEX:716=-3.370894614451662E-4, LEX:724=-3.2915203964113633E-4, LEX:732=-0.021536622190285896, LEX:740=-3.2915203964113633E-4, LEX:748=-0.022608897655929057, LEX:756=1.1032567104380337E-5, LEX:764=1.0817902538003673E-5, LEX:772=3.434001472889641E-5, LEX:780=-0.002881863382178842, LEX:796=0.08620604044934162, LEX:812=0.07396647055701223}
22: =========== r:0.8636363636363636 p:0.8636363636363636 (epoch:7 file:0 0)
for all bowls that are green
(forall $0 (and (object:t $0 bowls:d) (state:t $0 green:s)))
MakeLex parse time: 0.003 sec.
Adding:
green  :- NP : green:s : 0.0
Lex Size: 1113
First parse time: 0.003 sec.
CORRECT:(forall $0 (and (object:t $0 bowls:d) (state:t $0 green:s)))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.5813212564691412
all bowls that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 814 : 0.6753920346309039
green  :- NP : green:s : 51 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.5813212564691412
all bowls that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 814 : 0.6753920346309039
green  :- NP : green:s : 51 : 10.0
]
Scale: 0.9968499541449021
Update:
{BB:object:t:state:t=-0.063762841675168, LHT:0:object:t:e=-0.0248645286276017, LHH:0:object:t:var=-0.0248645286276017, LHT:1:object:t:d=-0.0248645376336743, BB:object:t:object:t=-0.042508561116778504, LHH:1:object:t:mugs:d=-0.024864537633674428, BB:has:t:object:t=-0.0036102570752851795, LHT:0:has:t:e=-0.003610258967195667, LHH:0:has:t:var=-0.003610258967195667, LHT:1:has:t:e=-0.003610258967195667, LHH:1:has:t:the=-0.003610258967195667, LEX:291=6.286382259829333E-4, LEX:813=0.0032458806801592293, LEX:814=0.015454369851594221, LEX:815=-0.0021996550830093433, LEX:817=-0.006410688883660947, LEX:816=-0.0027797445847930905, LEX:818=-0.007938825193415119, LEX:655=0.0012430519497083135, LEX:671=0.0012194630897284038, LEX:727=-0.005737856849934785, LEX:743=-0.005605529286138989, LEX:791=-9.340488769192153E-4, LEX:807=-9.036440630997637E-4, LEX:613=0.008502900258937088, LEX:629=0.010197352164726744, LEX:653=0.0015421526490664958, LEX:669=0.0015309648279742928, LEX:725=-0.004986288424845923, LEX:741=-0.004924603727167888, LEX:789=-8.95971101432768E-4, LEX:805=-8.765930338334324E-4}
23: =========== r:0.8695652173913043 p:0.8695652173913043 (epoch:7 file:0 0)
for all glasses that are empty
(forall $0 (and (object:t $0 glasses:d) (state:t $0 empty:s)))
MakeLex parse time: 0.003 sec.
Adding:
empty  :- NP : empty:s : 0.0
Lex Size: 1113
First parse time: 0.003 sec.
CORRECT:(forall $0 (and (object:t $0 glasses:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.5898241567280784
all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 820 : 0.2721009897318159
empty  :- NP : empty:s : 53 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.5898241567280784
all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 820 : 0.2721009897318159
empty  :- NP : empty:s : 53 : 10.0
]
Scale: 0.9968400171456484
Update:
{BB:object:t:state:t=-0.08004486210155899, LHT:0:object:t:e=-0.031167402986556944, LHH:0:object:t:var=-0.031167402986556944, LHT:1:object:t:d=-0.031167544934614745, BB:object:t:object:t=-0.05336324140103914, LHH:1:object:t:mugs:d=-0.031167544934614898, BB:has:t:object:t=-0.004485924234095334, LHT:0:has:t:e=-0.004485926584381372, LHH:0:has:t:var=-0.004485926584381372, LHT:1:has:t:e=-0.004485926584381372, LHH:1:has:t:the=-0.004485926584381372, LEX:292=8.898546608574229E-4, LEX:819=0.004520430060314431, LEX:820=0.016018698325909457, LEX:821=-0.0024545997501663453, LEX:823=-0.006718727375025515, LEX:822=-0.003299650765787908, LEX:824=-0.008956043549903057, LEX:655=0.0022306606739745695, LEX:671=0.002131692198807319, LEX:727=-0.007336930865960883, LEX:743=-0.006983299389068529, LEX:791=-0.0011829024340215192, LEX:807=-0.0011148380319340766, LEX:613=0.00996332354514628, LEX:629=0.010575807191363707, LEX:653=0.0027406718652473435, LEX:669=0.0026356153000196307, LEX:725=-0.006317191808470463, LEX:741=-0.006044170882992482, LEX:789=-0.0011234284289935086, LEX:805=-0.0010647553391462292}
24: =========== r:0.875 p:0.875 (epoch:7 file:0 0)
for every cup that is dry
(forall $0 (and (object:t $0 cup:d) (state:t $0 dry:s)))
MakeLex parse time: 0.003 sec.
Adding:
dry  :- NP : dry:s : 0.0
Lex Size: 1113
First parse time: 0.003 sec.
CORRECT:(forall $0 (and (object:t $0 cup:d) (state:t $0 dry:s)))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.5997874802732246
every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 826 : 0.10048862896304721
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.5997874802732246
every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 826 : 0.10048862896304721
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9968300803445045
Update:
{BB:object:t:state:t=-0.0434781150206464, LHT:0:object:t:e=-0.01702524679223452, LHH:0:object:t:var=-0.01702524679223452, LHT:1:object:t:d=-0.017025316315265323, BB:object:t:object:t=-0.02898541001376439, LHH:1:object:t:mugs:d=-0.017025316315265455, BB:has:t:object:t=-0.0025326113083832627, LHT:0:has:t:e=-0.002532614388075859, LHH:0:has:t:var=-0.002532614388075859, LHT:1:has:t:e=-0.002532614388075859, LHH:1:has:t:the=-0.002532614388075859, LEX:293=5.990476950094652E-4, LEX:825=0.003024940675110778, LEX:826=0.009522963614182908, LEX:827=-0.0034428785376146597, LEX:828=-0.009704100265140181, LEX:613=0.00625938184026318, LEX:629=0.006288525528723084, LEX:653=0.0019632145987042078, LEX:669=0.0019151820850282562, LEX:725=-0.007353172657852576, LEX:741=-0.007139518917528041, LEX:789=-0.001291097023701716, LEX:805=-0.001241514284681546}
25: =========== r:0.88 p:0.88 (epoch:7 file:0 0)
for every plate that is on the table
(forall $0 (and (object:t $0 plate:d) (On:t $0 (the $1 (object:t $1 table:f)))))
MakeLex parse time: 0.007 sec.
Adding:
every  :- S|NP/(S|NP|NP)/(S|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e ($0 $1 $2)))) : 0.0
plate that is  :- S|NP|(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($0 $3 $1))))))) : 0.0
every plate  :- S|NP/(S|NP|NP)/(S|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e ($0 $1 $2)))) : 0.0
that is  :- S|NP|(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($0 $3 $1))))))) : 0.0
every plate that  :- S|NP/(S|NP|NP)/(S|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e ($0 $1 $2)))) : 0.0
is  :- S|NP|(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($0 $3 $1))))))) : 0.0
every  :- S|NP|(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($0 $3 $1))))))) : 0.0
plate that is  :- S|NP/(S|NP|NP)\(S|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e ($0 $1 $2)))) : 0.0
every plate  :- S|NP|(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($0 $3 $1))))))) : 0.0
that is  :- S|NP/(S|NP|NP)\(S|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e ($0 $1 $2)))) : 0.0
every plate that  :- S|NP|(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($0 $3 $1))))))) : 0.0
is  :- S|NP/(S|NP|NP)\(S|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e ($0 $1 $2)))) : 0.0
every  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
plate that is  :- S|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($0 $3 $1))))))) : 0.0
every plate  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
that is  :- S|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($0 $3 $1))))))) : 0.0
every plate that  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 0.0
is  :- S|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($0 $3 $1))))))) : 0.0
every  :- S|NP/(S|NP|NP)/(S|(S|NP|NP)|NP) : (lambda $0 <e,<<e,<e,t>>,t>> (lambda $1 <e,<e,t>> (lambda $2 e ($0 $2 $1)))) : 0.0
plate that is  :- S|(S|NP|NP)|NP : (lambda $0 e (lambda $1 <e,<e,t>> (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($1 $3 $0))))))) : 0.0
every plate  :- S|NP/(S|NP|NP)/(S|(S|NP|NP)|NP) : (lambda $0 <e,<<e,<e,t>>,t>> (lambda $1 <e,<e,t>> (lambda $2 e ($0 $2 $1)))) : 0.0
that is  :- S|(S|NP|NP)|NP : (lambda $0 e (lambda $1 <e,<e,t>> (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($1 $3 $0))))))) : 0.0
every plate that  :- S|NP/(S|NP|NP)/(S|(S|NP|NP)|NP) : (lambda $0 <e,<<e,<e,t>>,t>> (lambda $1 <e,<e,t>> (lambda $2 e ($0 $2 $1)))) : 0.0
is  :- S|(S|NP|NP)|NP : (lambda $0 e (lambda $1 <e,<e,t>> (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($1 $3 $0))))))) : 0.0
every  :- S|(S|NP|NP)|NP : (lambda $0 e (lambda $1 <e,<e,t>> (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($1 $3 $0))))))) : 0.0
plate that is  :- S|NP/(S|NP|NP)\(S|(S|NP|NP)|NP) : (lambda $0 <e,<<e,<e,t>>,t>> (lambda $1 <e,<e,t>> (lambda $2 e ($0 $2 $1)))) : 0.0
every plate  :- S|(S|NP|NP)|NP : (lambda $0 e (lambda $1 <e,<e,t>> (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($1 $3 $0))))))) : 0.0
that is  :- S|NP/(S|NP|NP)\(S|(S|NP|NP)|NP) : (lambda $0 <e,<<e,<e,t>>,t>> (lambda $1 <e,<e,t>> (lambda $2 e ($0 $2 $1)))) : 0.0
every plate that  :- S|(S|NP|NP)|NP : (lambda $0 e (lambda $1 <e,<e,t>> (forall $2 (and (object:t $2 plate:d) (On:t $2 (the $3 ($1 $3 $0))))))) : 0.0
is  :- S|NP/(S|NP|NP)\(S|(S|NP|NP)|NP) : (lambda $0 <e,<<e,<e,t>>,t>> (lambda $1 <e,<e,t>> (lambda $2 e ($0 $2 $1)))) : 0.0
every  :- S|NP/(S|NP|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and ($0 $3) (On:t $3 (the $4 ($1 $4 $2)))))))) : 0.0
plate that is  :- S|NP : (lambda $0 e (object:t $0 plate:d)) : 0.0
every plate  :- S|NP/(S|NP|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and ($0 $3) (On:t $3 (the $4 ($1 $4 $2)))))))) : 0.0
that is  :- S|NP : (lambda $0 e (object:t $0 plate:d)) : 0.0
every plate that  :- S|NP/(S|NP|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and ($0 $3) (On:t $3 (the $4 ($1 $4 $2)))))))) : 0.0
is  :- S|NP : (lambda $0 e (object:t $0 plate:d)) : 0.0
every  :- S|NP : (lambda $0 e (object:t $0 plate:d)) : 0.0
plate that is  :- S|NP/(S|NP|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and ($0 $3) (On:t $3 (the $4 ($1 $4 $2)))))))) : 0.0
every plate  :- S|NP : (lambda $0 e (object:t $0 plate:d)) : 0.0
that is  :- S|NP/(S|NP|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and ($0 $3) (On:t $3 (the $4 ($1 $4 $2)))))))) : 0.0
every plate that  :- S|NP : (lambda $0 e (object:t $0 plate:d)) : 0.0
is  :- S|NP/(S|NP|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and ($0 $3) (On:t $3 (the $4 ($1 $4 $2)))))))) : 0.0
every  :- S|NP/(S|NP|NP)/NP : (lambda $0 e (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 $0) (On:t $3 (the $4 ($1 $4 $2)))))))) : 0.0
plate that is  :- NP : plate:d : 0.0
every plate  :- S|NP/(S|NP|NP)/NP : (lambda $0 e (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 $0) (On:t $3 (the $4 ($1 $4 $2)))))))) : 0.0
that is  :- NP : plate:d : 0.0
every plate that  :- S|NP/(S|NP|NP)/NP : (lambda $0 e (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 $0) (On:t $3 (the $4 ($1 $4 $2)))))))) : 0.0
is  :- NP : plate:d : 0.0
every  :- NP : plate:d : 0.0
plate that is  :- S|NP/(S|NP|NP)\NP : (lambda $0 e (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 $0) (On:t $3 (the $4 ($1 $4 $2)))))))) : 0.0
every plate  :- NP : plate:d : 0.0
that is  :- S|NP/(S|NP|NP)\NP : (lambda $0 e (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 $0) (On:t $3 (the $4 ($1 $4 $2)))))))) : 0.0
every plate that  :- NP : plate:d : 0.0
is  :- S|NP/(S|NP|NP)\NP : (lambda $0 e (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 $0) (On:t $3 (the $4 ($1 $4 $2)))))))) : 0.0
every  :- S|NP/(S|NP|NP)/(NP|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,e>> (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 plate:d) (On:t $3 ($0 $1 $2))))))) : 0.0
plate that is  :- NP|NP|(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 0.0
every plate  :- S|NP/(S|NP|NP)/(NP|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,e>> (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 plate:d) (On:t $3 ($0 $1 $2))))))) : 0.0
that is  :- NP|NP|(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 0.0
every plate that  :- S|NP/(S|NP|NP)/(NP|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,e>> (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 plate:d) (On:t $3 ($0 $1 $2))))))) : 0.0
is  :- NP|NP|(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 0.0
every  :- NP|NP|(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 0.0
plate that is  :- S|NP/(S|NP|NP)\(NP|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,e>> (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 plate:d) (On:t $3 ($0 $1 $2))))))) : 0.0
every plate  :- NP|NP|(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 0.0
that is  :- S|NP/(S|NP|NP)\(NP|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,e>> (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 plate:d) (On:t $3 ($0 $1 $2))))))) : 0.0
every plate that  :- NP|NP|(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 0.0
is  :- S|NP/(S|NP|NP)\(NP|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,e>> (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 plate:d) (On:t $3 ($0 $1 $2))))))) : 0.0
every  :- S|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 ($0 $1)))))) : 0.0
plate that is  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 0.0
every plate  :- S|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 ($0 $1)))))) : 0.0
that is  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 0.0
every plate that  :- S|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 ($0 $1)))))) : 0.0
is  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 0.0
every  :- S|NP/(S|NP|NP)/(NP|(S|NP|NP)|NP) : (lambda $0 <e,<<e,<e,t>>,e>> (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 plate:d) (On:t $3 ($0 $2 $1))))))) : 0.0
plate that is  :- NP|(S|NP|NP)|NP : (lambda $0 e (lambda $1 <e,<e,t>> (the $2 ($1 $2 $0)))) : 0.0
every plate  :- S|NP/(S|NP|NP)/(NP|(S|NP|NP)|NP) : (lambda $0 <e,<<e,<e,t>>,e>> (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 plate:d) (On:t $3 ($0 $2 $1))))))) : 0.0
that is  :- NP|(S|NP|NP)|NP : (lambda $0 e (lambda $1 <e,<e,t>> (the $2 ($1 $2 $0)))) : 0.0
every plate that  :- S|NP/(S|NP|NP)/(NP|(S|NP|NP)|NP) : (lambda $0 <e,<<e,<e,t>>,e>> (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 plate:d) (On:t $3 ($0 $2 $1))))))) : 0.0
is  :- NP|(S|NP|NP)|NP : (lambda $0 e (lambda $1 <e,<e,t>> (the $2 ($1 $2 $0)))) : 0.0
every  :- NP|(S|NP|NP)|NP : (lambda $0 e (lambda $1 <e,<e,t>> (the $2 ($1 $2 $0)))) : 0.0
plate that is  :- S|NP/(S|NP|NP)\(NP|(S|NP|NP)|NP) : (lambda $0 <e,<<e,<e,t>>,e>> (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 plate:d) (On:t $3 ($0 $2 $1))))))) : 0.0
every plate  :- NP|(S|NP|NP)|NP : (lambda $0 e (lambda $1 <e,<e,t>> (the $2 ($1 $2 $0)))) : 0.0
that is  :- S|NP/(S|NP|NP)\(NP|(S|NP|NP)|NP) : (lambda $0 <e,<<e,<e,t>>,e>> (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 plate:d) (On:t $3 ($0 $2 $1))))))) : 0.0
every plate that  :- NP|(S|NP|NP)|NP : (lambda $0 e (lambda $1 <e,<e,t>> (the $2 ($1 $2 $0)))) : 0.0
is  :- S|NP/(S|NP|NP)\(NP|(S|NP|NP)|NP) : (lambda $0 <e,<<e,<e,t>>,e>> (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 plate:d) (On:t $3 ($0 $2 $1))))))) : 0.0
Lex Size: 1197
First parse time: 0.028 sec.
WRONG: (forall $0 (and (object:t $0 plate:d) (On:t $0 (the $1 (On:t $1 (the $2 (object:t $2 table:f)))))))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.6060468621134878
every  :- S|NP/(S|NP|NP)/(S|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e ($0 $1 $2)))) : 1113 : 0.0
every  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 1125 : 0.0
every  :- S|NP/(S|NP|NP)/NP : (lambda $0 e (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 $0) (On:t $3 (the $4 ($1 $4 $2)))))))) : 1155 : 0.0
plate  :- NP : plate:d : 12 : 9.999460081371984
that is  :- S|NP/(S|NP|NP)\(S|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e ($0 $1 $2)))) : 1122 : 0.0
that is  :- S|NP/(S|NP|NP)\NP : (lambda $0 e (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 $0) (On:t $3 (the $4 ($1 $4 $2)))))))) : 1164 : 0.0
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (On:t $0 (the $2 (object:t $2 $1))))) : 1085 : -2.7586496568124588
the table  :- NP : table:f : 73 : 20.0
]
Second parse time: 0.012 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.6060468621134878
every  :- S|NP/(S|NP|NP)/(S|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e ($0 $1 $2)))) : 1113 : 0.0
every  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 1125 : 0.0
every  :- S|NP/(S|NP|NP)/NP : (lambda $0 e (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 $0) (On:t $3 (the $4 ($1 $4 $2)))))))) : 1155 : 0.0
plate  :- NP : plate:d : 12 : 9.999460081371984
that is  :- S|NP/(S|NP|NP)\(S|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e ($0 $1 $2)))) : 1122 : 0.0
that is  :- S|NP/(S|NP|NP)\NP : (lambda $0 e (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 $0) (On:t $3 (the $4 ($1 $4 $2)))))))) : 1164 : 0.0
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 1.4001945030878808
the table  :- NP : table:f : 73 : 20.0
]
Scale: 0.9968201437414647
Update:
{BB:On:t:object:t=7.92533744115095E-4, LHT:0:object:t:e=0.0015408463887051737, LHH:0:object:t:var=0.0015408463887051737, LHT:1:object:t:d=7.827254206690352E-4, LHH:1:object:t:plate:d=7.932255263015431E-4, LHT:0:On:t:e=-0.6397383040423843, LHH:0:On:t:var=-0.6397383040423843, LHT:1:On:t:e=-0.6397513622798425, LHH:1:On:t:the=-0.6397534723972278, LHT:1:object:t:f=7.762051656366629E-4, LHH:1:object:t:table:f=7.765127061203927E-4, LHT:0:object:t:f=-3.170108403510573E-5, LHH:0:object:t:table:f=-3.170108403510573E-5, LHT:1:object:t:e=-4.9785385701611625E-5, LHH:1:object:t:var=-4.9785385701611625E-5, LHT:0:On:t:f=-1.5168354843854752E-5, LHH:0:On:t:table:f=-1.5168354843854752E-5, LHT:0:has:t:e=-6.472704945534794E-5, LHH:0:has:t:var=-6.472704945534794E-5, LHT:1:has:t:e=-6.472704945534794E-5, LHH:1:has:t:the=-6.472704945534794E-5, BB:object:t:state:t=-1.0384227419089027E-5, LHH:1:object:t:cup:d=-1.0487050255211252E-5, LHT:0:state:t:f=-7.395129428736287E-4, LHH:0:state:t:table:f=-7.395129428736287E-4, LHT:1:state:t:s=-7.940650299111926E-4, LHH:1:state:t:IsOn:s=-7.91954912525438E-4, LHT:0:state:t:e=-5.458444328864813E-5, LHH:0:state:t:var=-5.458444328864813E-5, BB:forall:has:t=-1.228278415840096E-5, BB:has:t:state:t=-5.269331394742334E-5, LEX:1129=-7.919626368840626E-4, LEX:1115=-7.435714943399828E-4, LEX:1127=-0.0014873641915804075, LEX:1169=-7.444498538588512E-4, LEX:1181=-7.453282133777202E-4, LEX:1122=0.0011269220873040958, LEX:1164=0.003380662866940666, LEX:613=6.572080193526539E-5, LEX:677=-6.472512247519981E-5, LEX:1113=0.001126973274793413, LEX:1125=0.002253725346686311, LEX:1155=0.0011269220873040958, LEX:12=0.004507482579266183, LEX:868=-0.0037210044263426894, LEX:546=-1.0120753138003219E-5, LEX:600=-7.818458868872314E-4, LEX:1124=-0.0014872965511479332, LEX:1178=-0.002230970421659507, LEX:57=-7.91954912525438E-4, LEX:1013=0.6411416489918595, LEX:1017=1.923476937788128E-4, LEX:1085=-0.6365867960198467, LEX:1087=-0.003956598746337729, LEX:629=1.1049899949208698E-5}
26: =========== r:0.8461538461538461 p:0.8461538461538461 (epoch:7 file:0 0)
for all mugs that are in the sink
(forall $0 (and (object:t $0 mugs:d) (In:t $0 (the $1 (object:t $1 sink:f)))))
MakeLex parse time: 0.006 sec.
Adding:
the sink  :- NP : sink:f : 0.0
Lex Size: 1197
First parse time: 0.006 sec.
CORRECT:(forall $0 (and (object:t $0 mugs:d) (In:t $0 (the $1 (object:t $1 sink:f)))))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.606112582915423
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 834 : 0.09579112718062054
the sink  :- NP : sink:f : 74 : 20.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.606112582915423
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 834 : 0.09579112718062054
the sink  :- NP : sink:f : 74 : 20.0
]
Scale: 0.996810207336523
Update:
{BB:In:t:object:t=-0.027273008717503985, LHT:0:object:t:e=-0.015712169426392544, LHH:0:object:t:var=-0.015712169426392544, LHT:1:object:t:d=-0.015983188008247266, LHH:1:object:t:mugs:d=-0.015983188008247266, LHT:0:In:t:e=2.721945644111138E-4, LHH:0:In:t:var=2.721945644111138E-4, LHT:1:object:t:f=2.721945644111138E-4, LHH:1:object:t:sink:f=2.721945644111138E-4, BB:object:t:object:t=-0.013659570208357686, BB:has:t:object:t=-0.002369749499101558, LHT:0:has:t:e=-0.002370925481657398, LHH:0:has:t:var=-0.002370925481657398, LHT:1:has:t:e=-0.002370925481657398, LHH:1:has:t:the=-0.002370925481657398, LHT:0:object:t:f=-2.7219456441117737E-4, LHH:0:object:t:sink:f=-2.7219456441117737E-4, LHT:0:In:t:f=-2.7219456441117737E-4, LHH:0:In:t:sink:f=-2.7219456441117737E-4, LHT:1:object:t:e=-2.7337054696701724E-4, LHH:1:object:t:var=-2.7337054696701724E-4, LEX:295=5.681040088304667E-4, LEX:833=0.002878354862167164, LEX:834=0.009038249697542014, LEX:835=-0.003279381337989704, LEX:836=-0.009205327231730162, LEX:613=0.005948989697547183, LEX:629=0.005968790844717643, LEX:637=-2.167120545264568E-4, LEX:653=0.0018690812309006476, LEX:669=0.0018461102621535129, LEX:709=-4.6131699211674545E-5, LEX:725=-0.006840703901328202, LEX:741=-0.006726602908606138, LEX:789=-0.0011959295325375905, LEX:805=-0.0011644691558909215}
27: =========== r:0.8518518518518519 p:0.8518518518518519 (epoch:7 file:0 0)
if the robot is grasping the mug
(exists $0 (and (object:t $0 robot:p) (IsGrasping:t $0 (the $1 (object:t $1 mug:d)))))
MakeLex parse time: 0.007 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
the mug  :- NP : mug:d : 0.0
the robot  :- NP : robot:p : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsGrasping:t $4 ($2 $3)))))))) : 0.0
Lex Size: 1197
First parse time: 0.007 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsGrasping:t $0 (the $1 (object:t $1 mug:d)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.00845378626829527
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 1.228676857280356
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsGrasping:t $4 ($2 $3)))))))) : 1030 : 0.0020345119570965554
the mug  :- NP : mug:d : 16 : 19.99982500422412
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.00845378626829527
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 1.228676857280356
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsGrasping:t $4 ($2 $3)))))))) : 1030 : 0.0020345119570965554
the mug  :- NP : mug:d : 16 : 19.99982500422412
]
Scale: 0.9968002711296738
Update:
{LHT:0:object:t:e=0.010362443297758279, LHH:0:object:t:var=0.010362443297758279, LHT:1:object:t:p=0.01036244329775839, LHH:1:object:t:robot:p=0.01036244329775839, LHT:0:object:t:p=-0.01036244329775835, LHH:0:object:t:robot:p=-0.01036244329775835, LHT:1:object:t:e=-0.01036244329775835, LHH:1:object:t:var=-0.01036244329775835, LEX:884=0.001758437769875912, LEX:1014=-5.93849452517379E-4, LEX:1018=-0.0011538385124267414, LEX:1020=-1.0749821376815005E-5, LEX:1029=-0.004585612308112889, LEX:1030=0.002827174521791741}
28: =========== r:0.8571428571428571 p:0.8571428571428571 (epoch:7 file:0 0)
if the robot is near the refrigerator
(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 refrigerator:f)))))
MakeLex parse time: 0.008 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
the refrigerator  :- NP : refrigerator:f : 0.0
the robot  :- NP : robot:p : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
near  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 0.0
Lex Size: 1197
First parse time: 0.011 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 refrigerator:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.00845378626829527
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 1.2275230187679291
near  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 1108 : 0.10594459961138959
the refrigerator  :- NP : refrigerator:f : 75 : 20.000051252150676
]
Second parse time: 0.008 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.00845378626829527
the robot  :- NP : robot:p : 1 : 20.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 1.2275230187679291
near  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 1108 : 0.10594459961138959
the refrigerator  :- NP : refrigerator:f : 75 : 20.000051252150676
]
Scale: 0.9967903351209106
Update:
{BB:IsNear:t:object:t=0.5299457222322466, LHT:0:object:t:e=0.006427030063135332, LHH:0:object:t:var=0.006427030063135332, LHT:1:object:t:p=0.006381698847656736, LHH:1:object:t:robot:p=0.006381698847656736, LHT:0:IsNear:t:e=0.5299457222322466, LHH:0:IsNear:t:var=0.5299457222322466, LHT:1:IsNear:t:e=0.5299457222322466, LHH:1:IsNear:t:the=0.5299457222322466, LHT:1:object:t:f=4.535800936437998E-5, LHH:1:object:t:refrigerator:f=4.535800936437998E-5, BB:On:t:object:t=-0.5299457222322463, LHT:0:On:t:e=-0.5299457222322463, LHH:0:On:t:var=-0.5299457222322463, LHT:1:On:t:e=-0.5299457222322463, LHH:1:On:t:the=-0.5299457222322463, LHT:0:object:t:f=-4.535800916525692E-5, LHH:0:object:t:refrigerator:f=-4.535800916525692E-5, LHT:1:object:t:e=-0.006427083650705822, LHH:1:object:t:var=-0.006427083650705822, LHT:0:object:t:p=-0.006381698847656659, LHH:0:object:t:robot:p=-0.006381698847656659, LEX:505=2.4141522361669444E-5, LEX:509=-6.895705781821161E-5, LEX:1=5.122838775759338E-5, LEX:885=0.17114929545593488, LEX:123=-0.14960746430996139, LEX:875=0.14965230647198438, LEX:0=-5.1229130548539197E-5, LEX:1012=-0.17167273701402916, LEX:1014=-0.001348180207839821, LEX:1016=-0.20859653705655132, LEX:1018=0.29818453887203683, LEX:1020=0.0027812355732788462, LEX:1031=0.023690783403156914, LEX:1033=0.03548804839288766, LEX:1166=-0.1496764481616659, LEX:1032=-0.2983166739076668, LEX:1034=-0.17245021652853493, LEX:1108=0.29961759423747597}
29: =========== r:0.8620689655172413 p:0.8620689655172413 (epoch:7 file:0 0)
if the robot is close to the stove
(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
MakeLex parse time: 0.014 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
the stove  :- NP : stove:f : 0.0
the robot  :- NP : robot:p : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
close to  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 0.0
Lex Size: 1197
First parse time: 0.018 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.15810609274027965
the robot  :- NP : robot:p : 1 : 20.000051228387758
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 1.525707557639966
close to  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 1099 : 0.025182976294222115
the stove  :- NP : stove:f : 76 : 19.002046401367956
]
Second parse time: 0.022 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.15810609274027965
the robot  :- NP : robot:p : 1 : 20.000051228387758
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 1.525707557639966
close to  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 1099 : 0.025182976294222115
the stove  :- NP : stove:f : 76 : 19.002046401367956
]
Scale: 0.9967803993102279
Update:
{BB:IsNear:t:object:t=0.06009348604889223, LHT:0:object:t:e=0.007778602862892788, LHH:0:object:t:var=0.007778602862892788, LHT:1:object:t:p=0.007778037544555064, LHH:1:object:t:robot:p=0.007778037544555064, LHT:0:IsNear:t:e=0.06009348604889223, LHH:0:IsNear:t:var=0.06009348604889223, LHT:1:IsNear:t:e=0.06009348604889223, LHH:1:IsNear:t:the=0.06009348604889223, BB:On:t:object:t=-0.06009348604889273, LHT:0:On:t:e=-0.06009348604889273, LHH:0:On:t:var=-0.06009348604889273, LHT:1:On:t:e=-0.06009348604889273, LHH:1:On:t:the=-0.06009348604889273, LHT:1:object:t:e=-0.007778608708269609, LHH:1:object:t:var=-0.007778608708269609, LHT:0:object:t:p=-0.00777803754455508, LHH:0:object:t:robot:p=-0.00777803754455508, LEX:886=0.004819258427925887, LEX:1035=-0.003321929163832249, LEX:1036=-4.6520219850344817E-4, LEX:1099=0.021393722239747868, LEX:123=-0.013840175018158433, LEX:875=0.013845662407554197, LEX:1012=-0.02095603372191899, LEX:1014=-0.0011239168992870324, LEX:1016=-0.025289866977604557, LEX:1018=0.022362407874863894, LEX:1020=1.5523126417102252E-4, LEX:1031=0.013213573760910615, LEX:1033=0.020666931581777074, LEX:1166=-0.013847585349369185, LEX:1049=-0.007448982971327524, LEX:1051=-0.0037639417006072222, LEX:1053=-0.007448982971327524, LEX:1055=-0.0037639417006072222, LEX:1050=-0.007448982971327524, LEX:1052=-0.0037639417006072222, LEX:1054=-0.007448982971327524, LEX:1056=-0.0037639417006072222}
30: =========== r:0.8666666666666667 p:0.8666666666666667 (epoch:7 file:0 0)
if the microwave is on and the robot is close to the microwave
(and (exists $0 (and (object:t $0 microwave:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 microwave:f))))))
MakeLex parse time: 0.068 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the microwave  :- NP : microwave:f : 0.0
on  :- NP : IsOn:s : 0.0
the microwave  :- NP : microwave:f : 0.0
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 1.2756999999999998
the robot  :- NP : robot:p : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
close to  :- S/NP\S\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 t (lambda $4 e (and $3 (exists $5 (and ($0 $1 $5) (IsNear:t $5 ($2 $4)))))))))) : 0.0
Lex Size: 1197
First parse time: 0.336 sec.
CORRECT:(and (exists $0 (and (object:t $0 microwave:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 microwave:f))))))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.749610576741521
the microwave  :- NP : microwave:f : 77 : 19.999971649809446
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.3908606513758184
on  :- NP : IsOn:s : 57 : 8.95718816929353
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 2.1148429477373063
the robot  :- NP : robot:p : 1 : 20.000051228387758
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 1.5480699655148298
close to  :- S/NP\S\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 t (lambda $4 e (and $3 (exists $5 (and ($0 $1 $5) (IsNear:t $5 ($2 $4)))))))))) : 1057 : -0.004834410703804071
]
Second parse time: 0.064 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.749610576741521
the microwave  :- NP : microwave:f : 77 : 19.999971649809446
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.3908606513758184
on  :- NP : IsOn:s : 57 : 8.95718816929353
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 2.1148429477373063
the robot  :- NP : robot:p : 1 : 20.000051228387758
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 1.5480699655148298
close to  :- S/NP\S\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 t (lambda $4 e (and $3 (exists $5 (and ($0 $1 $5) (IsNear:t $5 ($2 $4)))))))))) : 1057 : -0.004834410703804071
]
Scale: 0.9967704636976198
Update:
{BB:exists:exists=-0.15444483657879307, BB:object:t:state:t=4.7089281004349896E-4, LHT:0:object:t:e=-0.02950866602788677, LHH:0:object:t:var=-0.02950866602788677, LHT:0:state:t:e=4.470585740720267E-4, LHH:0:state:t:var=4.470585740720267E-4, LHT:1:state:t:s=4.7088072637926394E-4, LHH:1:state:t:IsOn:s=0.0016351854037486263, BB:IsNear:t:object:t=1.006168317864828E-4, LHT:1:object:t:p=-1.350114507987043E-4, LHH:1:object:t:robot:p=0.002720600520852574, LHT:0:IsNear:t:e=1.006168317864828E-4, LHH:0:IsNear:t:var=1.006168317864828E-4, LHT:1:IsNear:t:e=1.0068247799753318E-4, LHH:1:IsNear:t:the=1.006168317864828E-4, LHT:0:object:t:p=-0.0027206005208532083, LHH:0:object:t:robot:p=-0.0027206005208532083, LHT:1:object:t:e=-0.0027230385034086087, LHH:1:object:t:var=-0.0027230385034086087, BB:exists:forall=-1.0630409730381606E-4, BB:On:t:object:t=-1.0295102137784552E-4, LHT:0:On:t:e=-1.0302493632333743E-4, LHH:0:On:t:var=-1.0302493632333743E-4, LHT:1:On:t:e=-1.0302493632333743E-4, LHH:1:On:t:the=-1.0302493632333743E-4, LHH:1:state:t:var=-2.395344472901183E-5, BB:exists:object:t=-0.007978418018735629, BB:exists:state:t=-2.381388357235494E-5, LHT:1:state:t:e=-2.3887798517846867E-5, LHH:1:object:t:you:p=-0.00285561197165171, LHH:1:state:t:yellow:s=-0.001164239031158246, LHT:1:object:t:d=-0.031004119295991468, LHH:1:object:t:bowl:d=-0.0011642643336270036, LHH:1:object:t:cups:d=-0.029839848746032967, LHT:0:object:t:s=-0.001632777299211992, LHH:0:object:t:IsOn:s=-0.001632777299211992, LEX:1037=4.959286720002566E-4, LEX:77=-1.3503906647298346E-5, LEX:1035=-1.4647558548083284E-5, LEX:1057=-3.9531184136694543E-4, LEX:123=3.403396318977211E-4, LEX:131=0.014111769606320396, LEX:172=-0.0011642186787593298, LEX:311=-5.287221364157228E-4, LEX:365=-0.002326880991080711, LEX:373=-0.029311069843581148, LEX:547=0.007469169047990736, LEX:559=0.011399027015495996, LEX:72=1.3503906646668458E-5, LEX:518=0.011428798799708323, LEX:558=-2.1681503805698922E-5, LEX:570=0.013758008022380572, LEX:977=-0.031004010658756204, LEX:1014=-0.0027206005208532105, LEX:1018=0.002309608373939636, LEX:1020=0.0058569737505562835, LEX:1166=-1.0295102137784556E-4, LEX:887=1.0068247786208074E-4, LEX:918=-1.0037499922753537E-4, LEX:1049=-2.8483428002191222E-5, LEX:1051=-1.4499030003135724E-5, LEX:1053=-2.8483428002191222E-5, LEX:1055=-1.4499030003135724E-5, LEX:1050=-2.848342800219122E-5, LEX:1052=-1.4499030003135724E-5, LEX:1054=-2.848342800219122E-5, LEX:1056=-1.4499030003135724E-5}
31: =========== r:0.8709677419354839 p:0.8709677419354839 (epoch:7 file:0 0)
if the stove is not on and the mug contains coffee
(and (exists $0 (and (object:t $0 stove:f) (not (state:t $0 IsOn:s)))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coffee:q))))))
MakeLex parse time: 0.023 sec.
Adding:
if  :- S/S/(S|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (lambda $2 t (and (exists $3 (and ($0 $3) ($1 $3))) $2)))) : 0.0
the stove  :- NP : stove:f : 0.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
not  :- S|NP/NP : (lambda $0 e (lambda $1 e (not (state:t $1 $0)))) : 3.333333333333333
on  :- NP : IsOn:s : 0.0
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 1.2756999999999998
coffee  :- NP : coffee:q : 0.0
the mug  :- NP : mug:d : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1197
First parse time: 0.058 sec.
CORRECT:(and (exists $0 (and (object:t $0 stove:f) (not (state:t $0 IsOn:s)))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coffee:q))))))
Using:
[LexEntries and scores:
if  :- S/S/(S|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (lambda $2 t (and (exists $3 (and ($0 $3) ($1 $3))) $2)))) : 1101 : 0.0
the stove  :- NP : stove:f : 76 : 19.002046401367956
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.438500813664971
not  :- S|NP/NP : (lambda $0 e (lambda $1 e (not (state:t $1 $0)))) : 1063 : 3.5936973586618945
on  :- NP : IsOn:s : 57 : 8.95718816929353
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 2.1149436302151683
the mug  :- NP : mug:d : 16 : 19.99982500422412
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9994393069524594
coffee  :- NP : coffee:q : 35 : 10.0
]
Second parse time: 0.021 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S/(S|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (lambda $2 t (and (exists $3 (and ($0 $3) ($1 $3))) $2)))) : 1101 : 0.0
the stove  :- NP : stove:f : 76 : 19.002046401367956
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.438500813664971
not  :- S|NP/NP : (lambda $0 e (lambda $1 e (not (state:t $1 $0)))) : 1063 : 3.5936973586618945
on  :- NP : IsOn:s : 57 : 8.95718816929353
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 2.1149436302151683
the mug  :- NP : mug:d : 16 : 19.99982500422412
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 1.9994393069524594
coffee  :- NP : coffee:q : 35 : 10.0
]
Scale: 0.99676052828308
Update:
{BB:exists:exists=0.016647283641931746, BB:not:object:t=0.017830812612711567, LHT:0:state:t:e=-0.001091130175817638, LHH:0:state:t:var=-0.001091130175817638, LHT:1:state:t:s=-0.001170759173442209, LHH:1:state:t:IsOn:s=9.83100278682334E-5, LHT:0:has:t:e=-2.4136928770877083E-4, LHH:0:has:t:var=-2.4136928770877083E-4, LHT:1:has:t:e=-2.4136928770877083E-4, LHH:1:has:t:the=-2.4136928770877083E-4, BB:forall:state:t=-0.0011732568591081476, BB:On:t:object:t=-0.017820539890942958, LHT:0:On:t:e=-0.01782053998614464, LHH:0:On:t:var=-0.01782053998614464, LHT:1:On:t:e=-0.016551470784834793, LHH:1:On:t:the=-0.01782053998614464, LHT:1:state:t:e=-1.8679259179542295E-5, LHH:1:state:t:var=-0.0012818371383603333, LHT:1:On:t:s=-0.0012690692013098527, BB:exists:not=-1.0272626567593022E-5, BB:object:t:state:t=-1.6188718536750188E-5, BB:exists:forall=-0.016647283644437877, LHT:0:state:t:s=-9.83081616018467E-5, LHH:0:state:t:IsOn:s=-9.83081616018467E-5, LEX:509=-2.4461599602553465E-5, LEX:76=2.7714390563084714E-5, LEX:123=-0.0166229153065055, LEX:547=-0.0011720633959909008, LEX:1100=0.008117123186948029, LEX:1101=0.009703411464307676, LEX:71=-2.7719725452012458E-5, LEX:570=-1.026767740327959E-5, LEX:1020=0.017830802328658867, LEX:1166=-0.017820539890942965, LEX:1059=-0.01655269038177281, LEX:1061=0.002755958706115539, LEX:1063=0.013796692838323464, LEX:858=-0.017814628537552175, LEX:887=0.017820539986143923, LEX:454=-2.472806098377551E-4, LEX:502=-0.017567348054177097, LEX:874=0.017820539986143705}
32: =========== r:0.875 p:0.875 (epoch:7 file:0 0)
if the mug is green and the TV is on
(and (exists $0 (and (object:t $0 mug:d) (state:t $0 green:s))) (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s))))
MakeLex parse time: 0.049 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the mug  :- NP : mug:d : 0.0
green  :- NP : green:s : 0.0
on  :- NP : IsOn:s : 0.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 0.0
the TV  :- NP : tv:f : 0.0
Lex Size: 1197
First parse time: 0.187 sec.
CORRECT:(and (exists $0 (and (object:t $0 mug:d) (state:t $0 green:s))) (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s))))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.738211549726025
the mug  :- NP : mug:d : 16 : 19.99982500422412
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.37943185257611
green  :- NP : green:s : 51 : 10.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 966 : 0.4370841444372556
the TV  :- NP : tv:f : 79 : 20.0
is  :- S/NP\S\(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 901 : 0.18307329907510195
on  :- NP : IsOn:s : 57 : 8.95718816929353
]
Second parse time: 0.05 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.738211549726025
the mug  :- NP : mug:d : 16 : 19.99982500422412
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.37943185257611
green  :- NP : green:s : 51 : 10.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 966 : 0.4370841444372556
the TV  :- NP : tv:f : 79 : 20.0
is  :- S/NP\S\(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 901 : 0.18307329907510195
on  :- NP : IsOn:s : 57 : 8.95718816929353
]
Scale: 0.9967505930666029
Update:
{BB:exists:exists=-0.14797826222873528, BB:object:t:state:t=0.021127615887486188, LHT:0:object:t:e=-0.0342875288836912, LHH:0:object:t:var=-0.0342875288836912, LHT:1:object:t:d=-0.034661478023820635, LHT:0:state:t:e=0.0018088128476243673, LHH:0:state:t:var=0.0018088128476243673, LHT:1:state:t:s=0.0018661920209006207, LHH:1:state:t:green:s=0.0031504363159299865, BB:has:t:object:t=-0.019631429216467197, LHT:0:has:t:e=-0.019631429216467197, LHH:0:has:t:var=-0.019631429216467197, LHT:1:has:t:e=-0.019631429216467197, LHH:1:has:t:the=-0.019631429216467197, LHH:1:object:t:cup:d=-0.0050389512909100095, BB:state:t:state:t=-2.9089233641682057E-5, LHT:1:state:t:e=-5.737925208397284E-5, LHH:1:state:t:var=-5.737932249033102E-5, BB:exists:object:t=-0.013887646241888022, LHT:0:object:t:s=-0.003160104013866732, BB:exists:state:t=-1.0923703945081233E-4, LHH:1:state:t:yellow:s=-0.0012939215887331503, LHH:1:object:t:bowl:d=-0.0010735402111710184, LHH:1:object:t:cups:d=-0.028548983096695107, LHT:1:object:t:p=-0.002788216537342604, LHH:1:object:t:you:p=-0.002788216537342604, LHH:0:object:t:green:s=-0.003150427490415857, BB:In:t:state:t=-4.835163348799873E-4, LHT:0:In:t:e=-2.4175816743999366E-4, LHH:0:In:t:var=-2.4175816743999366E-4, BB:In:t:object:t=-4.834422773600553E-4, LHT:1:In:t:f=-2.4169814709600914E-4, LHH:1:In:t:tv:f=-2.4169814709600914E-4, LEX:16=-1.2036686305111426E-5, LEX:123=-6.11728756979042E-4, LEX:131=0.015891941238779864, LEX:151=-1.239680676434323E-5, LEX:172=-0.0010733125629117392, LEX:218=-2.2049820399696915E-4, LEX:311=-4.4686957279429026E-4, LEX:349=-0.004574631218272387, LEX:365=-0.002184024184592456, LEX:373=-0.023527207255299495, LEX:397=-1.5727737478443178E-4, LEX:547=0.0068161841986823365, LEX:559=0.010330654037198718, LEX:1028=-2.4175816743999369E-4, LEX:10=1.2036686305312487E-5, LEX:518=0.017791960656708072, LEX:522=-0.004952406873851957, LEX:546=-8.650941359631732E-5, LEX:558=-3.9825475970012995E-5, LEX:570=0.01612421781850752, LEX:600=-0.019559587284054988, LEX:901=0.01565561534054927, LEX:929=-0.005077359714380849, LEX:977=-0.023369621865555367, LEX:1020=0.003515603264316126, LEX:858=-0.019631429216467208, LEX:890=0.0018073251796447928, LEX:954=9.431308247406325E-5, LEX:966=0.01799234727036509, LEX:972=-2.4169880260137145E-4, LEX:1022=-1.4543695100537458E-5}
33: =========== r:0.8787878787878788 p:0.8787878787878788 (epoch:7 file:0 0)
if there exists a mug and the mug contains sugar
(and (exists $0 (object:t $0 mug:d)) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 sugar:q))))))
MakeLex parse time: 0.052 sec.
Adding:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
a mug  :- NP : mug:d : 0.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 0.5467285714285715
the mug  :- NP : mug:d : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
sugar  :- NP : sugar:q : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
sugar  :- NP : sugar:q : 0.0
Lex Size: 1197
First parse time: 0.067 sec.
CORRECT:(and (exists $0 (object:t $0 mug:d)) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 sugar:q))))))
Using:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.29709907095050125
a mug  :- NP : mug:d : 22 : 20.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : -1.0461154075994463
the mug  :- NP : mug:d : 16 : 19.999812967537817
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.3959628734128702
sugar  :- NP : sugar:q : 30 : 10.0
]
Second parse time: 0.048 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.29709907095050125
a mug  :- NP : mug:d : 22 : 20.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : -1.0461154075994463
the mug  :- NP : mug:d : 16 : 19.999812967537817
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.3959628734128702
sugar  :- NP : sugar:q : 30 : 10.0
]
Scale: 0.9967406580481823
Update:
{BB:exists:exists=4.48803104068442E-5, LHT:0:object:t:e=-0.00171724750168812, LHH:0:object:t:var=-0.00171724750168812, LHT:1:object:t:d=-0.0015036282782878874, LHH:1:object:t:mug:d=1.5077836257527537E-4, BB:has:t:object:t=4.5629798486763583E-4, LHT:0:has:t:e=-0.012550215261089554, LHH:0:has:t:var=-0.012550215261089554, LHT:1:has:t:e=-0.012550217694579752, LHH:1:has:t:the=-0.012550215278218904, LHT:0:object:t:d=-1.4886401295925337E-4, LHH:0:object:t:mug:d=-1.4886401295925337E-4, LHT:1:state:t:e=-4.568935775247727E-4, BB:object:t:state:t=-9.786001768411635E-4, LHT:0:state:t:e=-9.785956753179722E-4, LHH:0:state:t:var=-9.785956753179722E-4, LHH:1:state:t:the=-4.5630504772879954E-4, BB:exists:object:t=-0.0015725476060217793, LHT:1:object:t:p=-3.559752469423452E-4, LHH:1:object:t:you:p=-3.559752469423452E-4, LHT:1:state:t:s=-5.236163330857623E-4, LHH:1:state:t:yellow:s=-5.236163248447517E-4, BB:object:t:object:t=-7.340743273348143E-4, LHH:1:object:t:bowl:d=-6.533678043248721E-4, LHH:1:object:t:cups:d=-8.086803551702736E-4, LHH:1:object:t:cup:d=-1.9235848136745553E-4, LEX:122=4.350593333186632E-4, LEX:125=2.2204051118261263E-4, LEX:129=3.7415028334812666E-5, LEX:133=4.031674504776933E-4, LEX:137=6.163755848221812E-5, LEX:141=1.0678882040858557E-4, LEX:145=2.697918412951975E-4, LEX:149=1.0668802581124196E-4, LEX:153=5.809371071051076E-5, LEX:200=-2.2945929418713142E-4, LEX:220=-1.6032689534522997E-4, LEX:240=-4.352294115384193E-4, LEX:423=-7.538711840949074E-5, LEX:124=1.6114593015162985E-5, LEX:128=-6.722818891438802E-4, LEX:132=-1.0925481103410394E-4, LEX:140=2.607362130810129E-4, LEX:148=2.5896304146753635E-4, LEX:152=-3.4735785029116974E-4, LEX:123=2.9385885607166998E-5, LEX:127=2.1266758171294924E-5, LEX:131=1.4085171107101194E-4, LEX:135=3.774095257658346E-5, LEX:139=2.607867139353986E-4, LEX:143=5.508657704143302E-5, LEX:147=2.591287684655059E-4, LEX:151=2.9329798738337183E-5, LEX:198=-1.0023650793498968E-4, LEX:208=-2.6322829723368777E-5, LEX:218=-3.213982419556773E-5, LEX:238=-1.8473280608774522E-4, LEX:333=-2.0192658093606938E-4, LEX:349=-5.794956515903052E-4, LEX:365=-2.9587786540280785E-4, LEX:381=-3.531155235602215E-5, LEX:389=-2.712405735209316E-5, LEX:397=-2.1198684744311487E-5, LEX:571=-3.98235632627911E-5, LEX:583=-5.0887658059379675E-5, LEX:595=-2.3323198637166676E-5, LEX:419=-1.9104319580708401E-4, LEX:126=1.3312788602781012E-4, LEX:130=-2.0602358675487104E-4, LEX:134=4.690766440544456E-4, LEX:138=5.331593897979221E-5, LEX:142=1.0661395757310114E-4, LEX:146=2.403222925250439E-4, LEX:150=1.065122777057225E-4, LEX:154=-7.46176378233127E-4, LEX:858=4.5630504579986797E-4, LEX:966=-4.562918967077075E-4, LEX:454=-0.013006473165566855, LEX:472=-4.56305045785099E-4, LEX:502=0.013462778214729515}
34: =========== r:0.8823529411764706 p:0.8823529411764706 (epoch:7 file:0 0)
if the television is on
(exists $0 (and (object:t $0 television:f) (state:t $0 IsOn:s)))
MakeLex parse time: 0.004 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
on  :- NP : IsOn:s : 0.0
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 0.0
on  :- NP : IsOn:s : 0.0
Lex Size: 1197
First parse time: 0.008 sec.
CORRECT:(exists $0 (and (object:t $0 television:f) (state:t $0 IsOn:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -1.1696186600210348
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 845 : 4.3329507653584045
on  :- NP : IsOn:s : 57 : 8.95718816929353
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -1.1696186600210348
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 845 : 4.3329507653584045
on  :- NP : IsOn:s : 57 : 8.95718816929353
]
Scale: 0.9967307232278129
Update:
{BB:object:t:state:t=5.816535903716405E-5, LHT:0:object:t:e=-0.005312140986794173, LHH:0:object:t:var=-0.005312140986794173, LHH:1:object:t:television:f=0.04817790670858814, LHT:0:state:t:e=4.8046889103069706E-5, LHH:0:state:t:var=4.8046889103069706E-5, LHT:1:state:t:s=5.8164359609811554E-5, LHH:1:state:t:IsOn:s=1.1210616087386452E-4, LHH:1:object:t:tv:f=-0.04817790670858817, LHH:1:state:t:yellow:s=-5.394180126429231E-5, LHT:1:object:t:d=-0.0012981238878317046, LHH:1:object:t:bowl:d=-5.3942638836924976E-5, LHH:1:object:t:cups:d=-0.0012441809994264265, BB:exists:object:t=-0.0041258886552152955, LHT:1:object:t:p=-0.0041258886552152955, LHH:1:object:t:you:p=-0.0041258886552152955, LHT:0:object:t:s=-1.1198885856347764E-4, LHH:0:object:t:IsOn:s=-1.1198885856347764E-4, BB:exists:exists=-0.0012981196422775783, BB:exists:state:t=-1.0117470506607674E-5, LHT:1:state:t:e=-1.0117470506607674E-5, LHH:1:state:t:var=-1.0117470506607674E-5, LEX:304=0.0017199018127050018, LEX:845=0.04645788342447305, LEX:78=-0.04817790670858815, LEX:123=0.004147571476232782, LEX:131=0.03217062664771952, LEX:172=-5.394080183659712E-5, LEX:311=-2.0189471027674502E-5, LEX:365=-0.004105698805971166, LEX:373=-0.0012239893694133066, LEX:547=-0.012827635597775376, LEX:559=-0.019806650059733113, LEX:518=-0.019805322134025888, LEX:570=-0.014142184792727854, LEX:977=-0.0012981196422775785, LEX:1020=-0.012930834911539471}
35: =========== r:0.8857142857142857 p:0.8857142857142857 (epoch:7 file:0 0)
if you find any cups
(exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d))))
MakeLex parse time: 0.006 sec.
Adding:
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 0.0
you  :- NP : you:p : 0.0
find any cups  :- S\S : (lambda $0 t $0) : 0.0
Lex Size: 1197
First parse time: 0.006 sec.
CORRECT:(exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d))))
Using:
[LexEntries and scores:
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 349 : 1.0509557292858231
you  :- NP : you:p : 2 : 10.919822541308646
find any cups  :- S\S : (lambda $0 t $0) : 314 : 0.22204550433347203
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 349 : 1.0509557292858231
you  :- NP : you:p : 2 : 10.919822541308646
find any cups  :- S\S : (lambda $0 t $0) : 314 : 0.22204550433347203
]
Scale: 0.996720788605488
Update:
{BB:exists:object:t=0.051985807277288944, LHT:0:object:t:e=0.05208863920626884, LHH:0:object:t:var=0.05208863920626884, LHT:1:object:t:p=-0.009010754169774338, LHH:1:object:t:you:p=-0.009010754169774338, LHT:1:object:t:d=0.06110475315229842, LHH:1:object:t:cups:d=0.07501367367948027, BB:object:t:state:t=-0.039087428106430344, LHH:1:object:t:bowl:d=-7.709762208694756E-4, LHT:0:state:t:e=-0.03921348038694507, LHH:0:state:t:var=-0.03921348038694507, LHT:1:state:t:s=-0.0392037012377325, LHH:1:state:t:yellow:s=-0.0392037012377325, BB:object:t:object:t=-2.076903458115981E-5, LHH:1:object:t:cup:d=-0.013137944306312441, LEX:309=-9.47281677500062E-4, LEX:323=-0.0010810137910062776, LEX:339=-2.8203979984654746E-5, LEX:347=-1.3808553133849594E-4, LEX:355=-0.010689184764978581, LEX:379=-9.47281677500062E-4, LEX:395=-9.714492255793676E-4, LEX:403=-0.002384619140514351, LEX:411=-2.816532946369509E-5, LEX:312=-2.0993778428008238E-4, LEX:326=-0.0016984585819539064, LEX:334=-1.4701049574700615E-4, LEX:342=-4.43861683564001E-5, LEX:358=-5.4454629780125033E-5, LEX:366=-3.0486030706216753E-4, LEX:382=-0.0010340341270101059, LEX:398=-7.709823606791863E-5, LEX:307=-9.47281677500062E-4, LEX:321=-0.0010810137910062776, LEX:337=-2.8203979984654746E-5, LEX:345=-1.3808547526760923E-4, LEX:353=-2.8243935884407993E-5, LEX:377=-9.47281677500062E-4, LEX:393=-9.714488317185522E-4, LEX:409=-2.816532946369509E-5, LEX:314=0.014353514195878068, LEX:328=-0.0010786604692498514, LEX:336=-1.380853422886778E-4, LEX:344=-2.833180259285821E-5, LEX:360=0.02233232411141153, LEX:368=-9.47281677500062E-4, LEX:376=-0.0017965674355227168, LEX:384=-9.71447897430791E-4, LEX:400=-2.816532958943038E-5, LEX:408=-0.006855760120127125, LEX:305=-9.47281677500062E-4, LEX:319=-0.001081183482709538, LEX:335=-2.82084300858004E-5, LEX:343=-1.366006170134551E-4, LEX:351=-2.8243090336766876E-5, LEX:375=-0.0011830745891314933, LEX:391=-9.610217393899575E-4, LEX:407=-8.331810547953683E-5, LEX:316=-9.47281677500062E-4, LEX:330=-0.0010810137910062776, LEX:338=-1.3808547526760923E-4, LEX:346=-2.8203979984654746E-5, LEX:362=-2.8243935884407993E-5, LEX:370=-9.47281677500062E-4, LEX:386=-9.714488317185522E-4, LEX:402=-2.816532946369509E-5, LEX:131=0.01624960258834744, LEX:151=-0.00112509495870623, LEX:198=-1.006959895313416E-5, LEX:208=-7.083648098731059E-4, LEX:218=-0.03904921943472484, LEX:228=-2.618330677456429E-5, LEX:238=-1.828627299015319E-5, LEX:248=-1.2628859764759424E-4, LEX:333=-2.1465883388049948E-5, LEX:341=-9.242159036666159E-5, LEX:349=0.07795487582630725, LEX:365=-9.952494237574826E-4, LEX:373=-1.98714474232313E-4, LEX:389=-7.289443001998031E-4, LEX:397=-0.025243247148821635, LEX:405=-2.816108685897762E-5, LEX:553=-7.679428673241048E-5, LEX:2=0.029288982073895777, LEX:25=-0.013056064606959737, LEX:318=-9.47281677500062E-4, LEX:332=-0.001080975009736137, LEX:340=-1.3808547526760923E-4, LEX:348=-2.8202958964121377E-5, LEX:364=-2.8243935884407993E-5, LEX:372=-9.47281677500062E-4, LEX:388=-9.714488317185522E-4, LEX:404=-1.549197497487054E-5}
36: =========== r:0.8888888888888888 p:0.8888888888888888 (epoch:7 file:0 0)
When the water is boiling
(exists $0 (and (object:t $0 water:q) (state:t $0 IsBoiling:s)))
MakeLex parse time: 0.003 sec.
Adding:
boiling  :- NP : IsBoiling:s : 0.0
water  :- NP : water:q : 0.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
Lex Size: 1197
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 water:q) (state:t $0 IsBoiling:s)))
Using:
[LexEntries and scores:
When  :- S/NP/(S|NP)/(S|NP|(S|NP)) : (lambda $0 <<e,t>,<e,t>> (lambda $1 <e,t> (lambda $2 e ($0 $1 $2)))) : 1064 : 0.010266759663979262
the  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 1069 : 0.015200416718679645
water  :- NP : water:q : 32 : 10.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.430085242983535
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Second parse time: 0.008 sec.
Best LexEntries:
[LexEntries and scores:
When  :- S/NP/(S|NP)/(S|NP|(S|NP)) : (lambda $0 <<e,t>,<e,t>> (lambda $1 <e,t> (lambda $2 e ($0 $1 $2)))) : 1064 : 0.010266759663979262
the  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 1069 : 0.015200416718679645
water  :- NP : water:q : 32 : 10.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.430085242983535
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Scale: 0.996710854181202
Update:
{BB:object:t:state:t=0.023955509919788308, LHT:0:object:t:e=0.023955509919788308, LHH:0:object:t:var=0.023955509919788308, LHT:0:state:t:e=0.02395398923035161, LHH:0:state:t:var=0.02395398923035161, LHT:1:state:t:s=0.023962301383859717, LHH:1:state:t:IsBoiling:s=0.023962301383859717, LHT:1:state:t:e=-1.5103617579330279E-5, LHH:1:state:t:var=-1.5103617579330279E-5, LHT:0:object:t:s=-0.023955509919788332, LHH:0:object:t:IsBoiling:s=-0.023955509919788332, LEX:846=0.0018451330817170146, LEX:1039=0.0017881139182019735, LEX:1064=0.0036317714276650525, LEX:1066=0.001681272915495002, LEX:1068=-0.019726036923702263, LEX:1070=0.0017974395638568153, LEX:1072=0.0017974395638568153, LEX:1074=0.0017954646449444963, LEX:1076=0.0017957255282780072, LEX:1078=0.0017954554551841088, LEX:1080=0.0017957255282780072, LEX:1065=0.0018067375832335633, LEX:1067=-0.021458984533301563, LEX:1069=0.005239254369525819, LEX:1071=0.0017974395638568153, LEX:1073=0.0017974395638568153, LEX:1075=0.001795464636283072, LEX:1077=0.0017957255282780072, LEX:1079=0.001795455463845533, LEX:1081=0.0017957255282780072, LEX:570=0.0026520733992007506, LEX:1020=-0.002654568695425816}
37: =========== r:0.8918918918918919 p:0.8918918918918919 (epoch:7 file:0 0)
when the water in the pot is boiling
(exists $0 (and (object:t $0 water:q) (In:t $0 (the $1 (object:t $1 pot:d))) (state:t $0 IsBoiling:s)))
MakeLex parse time: 0.006 sec.
Adding:
when  :- NP|(S|NP)/(NP|(S|NP)) : (lambda $0 <<e,t>,e> (lambda $1 <e,t> ($0 $1))) : 0.0
the  :- NP|(S|NP) : (lambda $0 <e,t> (the $1 ($0 $1))) : 0.820255
when  :- S/S : (lambda $0 t $0) : 0.0
when  :- S/S : (lambda $0 t $0) : 0.0
boiling  :- NP : IsBoiling:s : 0.0
water  :- NP : water:q : 0.0
in  :- S/NP/(S|NP)\(NP|(S|NP))\NP : (lambda $0 e (lambda $1 <<e,t>,e> (lambda $2 <e,t> (lambda $3 e (exists $4 (and (In:t $4 ($1 $2)) (object:t $4 $0) (state:t $4 $3))))))) : 0.0
the pot  :- NP : pot:d : 0.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
Lex Size: 1198
First parse time: 0.007 sec.
CORRECT:(exists $0 (and (object:t $0 water:q) (In:t $0 (the $1 (object:t $1 pot:d))) (state:t $0 IsBoiling:s)))
Using:
[LexEntries and scores:
when  :- NP|(S|NP)/(NP|(S|NP)) : (lambda $0 <<e,t>,e> (lambda $1 <e,t> ($0 $1))) : 1109 : 0.0
when  :- S/S : (lambda $0 t $0) : 1197 : 0.0
the  :- NP|(S|NP) : (lambda $0 <e,t> (the $1 ($0 $1))) : 1110 : 0.820255
water  :- NP : water:q : 32 : 10.0
in  :- S/NP/(S|NP)\(NP|(S|NP))\NP : (lambda $0 e (lambda $1 <<e,t>,e> (lambda $2 <e,t> (lambda $3 e (exists $4 (and (In:t $4 ($1 $2)) (object:t $4 $0) (state:t $4 $3))))))) : 1102 : 0.0
the pot  :- NP : pot:d : 19 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.432739811678961
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
when  :- NP|(S|NP)/(NP|(S|NP)) : (lambda $0 <<e,t>,e> (lambda $1 <e,t> ($0 $1))) : 1109 : 0.0
when  :- S/S : (lambda $0 t $0) : 1197 : 0.0
the  :- NP|(S|NP) : (lambda $0 <e,t> (the $1 ($0 $1))) : 1110 : 0.820255
water  :- NP : water:q : 32 : 10.0
in  :- S/NP/(S|NP)\(NP|(S|NP))\NP : (lambda $0 e (lambda $1 <<e,t>,e> (lambda $2 <e,t> (lambda $3 e (exists $4 (and (In:t $4 ($1 $2)) (object:t $4 $0) (state:t $4 $3))))))) : 1102 : 0.0
the pot  :- NP : pot:d : 19 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.432739811678961
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Scale: 0.9967009199549492
Update:
{BB:object:t:state:t=-0.004186609598120186, LHT:1:In:t:e=0.004186609598120739, LHT:0:state:t:e=-0.004186609605709198, LHH:0:state:t:var=-0.004186609605709198, LHT:1:state:t:s=-0.0041866095981206285, LHT:1:In:t:s=-0.0041866095981206684, LHH:1:state:t:var=-0.004186609605709075, LEX:570=-0.00418586108797307, LEX:1020=0.004185861048555201}
38: =========== r:0.8947368421052632 p:0.8947368421052632 (epoch:7 file:0 0)
if there exists a cup and there exists a cup and there exists a cup and there exists a cup and there exists a cup
(and (exists $0 (object:t $0 cup:d)))
MakeLex parse time: 0.266 sec.
Adding:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 0.048352000000000006
and there exists a cup and there exists a cup and there exists a cup  :- S\S : (lambda $0 t $0) : 0.0
Lex Size: 1198
First parse time: 66.949 sec.
CORRECT:(and (exists $0 (object:t $0 cup:d)))
Using:
[LexEntries and scores:
if there exists a cup and there exists a cup and there exists a cup and there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 118 : -0.48618042822639207
]
Second parse time: 0.283 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 10.900071482188714
and there exists a cup and there exists a cup and there exists a cup  :- S\S : (lambda $0 t $0) : 999 : 3.852988881397618
]
Scale: 0.9966909859267233
Update:
{LEX:118=-0.9966874587720274, LHT:1:has:t:e=-1.0581464091275664E-5, LHH:1:has:t:the=-1.0581464091275664E-5, LHT:0:has:t:e=-1.0541117992778853E-5, LHH:0:has:t:var=-1.0541066111526575E-5, LHT:0:state:t:e=-1.4108618788367564E-5, LHH:0:state:t:var=-1.4108618788367564E-5, LHT:1:state:t:e=-1.41235294358062E-5, LHH:1:state:t:var=-1.7635773485459435E-5, LEX:1092=-1.0853707745433204E-5, LEX:455=-1.0309602768842878E-5, LEX:869=-1.030960276884288E-5, LEX:999=0.9966451546502763, LEX:82=0.9966907459205705, LEX:155=1.367738108828611E-4}
39: =========== r:0.8974358974358975 p:0.8974358974358975 (epoch:7 file:0 0)
if the mug is on the table or on the stove
(exists $0 (and (object:t $0 mug:d) (or (On:t $0 (the $1 (object:t $1 table:f))) (On:t $0 (the $1 (object:t $1 stove:f))))))
MakeLex parse time: 0.017 sec.
Adding:
if the  :- NP|NP|(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 0.4101275
mug is  :- S|NP/NP/(S|NP|NP)\(NP|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,e>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (On:t $3 ($0 $1 $2)))))) : 0.0
if the  :- NP|(S|NP|NP)|NP : (lambda $0 e (lambda $1 <e,<e,t>> (the $2 ($1 $2 $0)))) : 0.4101275
mug is  :- S|NP/NP/(S|NP|NP)\(NP|(S|NP|NP)|NP) : (lambda $0 <e,<<e,<e,t>>,e>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (On:t $3 ($0 $2 $1)))))) : 0.0
Lex Size: 1202
First parse time: 0.02 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (or (On:t $0 (the $1 (object:t $1 table:f))) (On:t $0 (the $1 (object:t $1 stove:f))))))
Using:
[LexEntries and scores:
if the  :- NP|NP|(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1198 : 0.4101275
if the  :- NP|(S|NP|NP)|NP : (lambda $0 e (lambda $1 <e,<e,t>> (the $2 ($1 $2 $0)))) : 1200 : 0.4101275
mug is  :- S|NP/NP/(S|NP|NP)\(NP|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,e>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (On:t $3 ($0 $1 $2)))))) : 1199 : 0.0
mug is  :- S|NP/NP/(S|NP|NP)\(NP|(S|NP|NP)|NP) : (lambda $0 <e,<<e,<e,t>>,e>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (On:t $3 ($0 $2 $1)))))) : 1201 : 0.0
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 2.04133615207974
the table  :- NP : table:f : 73 : 20.0
or  :- S/NP\(S|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and (object:t $3 mug:d) (or ($1 $3) (On:t $3 (the $4 ($0 $4 $2))))))))) : 1103 : 1.3985158583754054
the stove  :- NP : stove:f : 76 : 19.002074115758518
]
Second parse time: 0.017 sec.
Best LexEntries:
[LexEntries and scores:
if the  :- NP|NP|(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1198 : 0.4101275
if the  :- NP|(S|NP|NP)|NP : (lambda $0 e (lambda $1 <e,<e,t>> (the $2 ($1 $2 $0)))) : 1200 : 0.4101275
mug is  :- S|NP/NP/(S|NP|NP)\(NP|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,e>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (On:t $3 ($0 $1 $2)))))) : 1199 : 0.0
mug is  :- S|NP/NP/(S|NP|NP)\(NP|(S|NP|NP)|NP) : (lambda $0 <e,<<e,<e,t>>,e>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (On:t $3 ($0 $2 $1)))))) : 1201 : 0.0
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 2.04133615207974
the table  :- NP : table:f : 73 : 20.0
or  :- S/NP\(S|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,t> (lambda $2 e (exists $3 (and (object:t $3 mug:d) (or ($1 $3) (On:t $3 (the $4 ($0 $4 $2))))))))) : 1103 : 1.3985158583754054
the stove  :- NP : stove:f : 76 : 19.002074115758518
]
Scale: 0.9966810520965186
Update:
{LHT:0:object:t:e=-0.22146839961694573, LHH:0:object:t:var=6.077568753830812E-5, BB:On:t:On:t=0.22147822196955844, LHT:0:On:t:e=0.221479258305243, LHH:0:On:t:var=0.20934171151259376, LHT:1:On:t:null=0.20929044758413562, LHH:1:On:t:the=0.20929044758413562, LHT:0:object:t:null=0.22152917530448404, LHT:1:object:t:null=0.2336168050978927, LHH:1:object:t:stove:f=1.1203961599624109E-4, BB:On:t:object:t=-0.22147822196955838, LHT:1:object:t:f=-0.233605946409595, LHT:0:object:t:f=-6.077568753852717E-5, LHH:0:object:t:stove:f=-6.077568753852717E-5, LHT:1:object:t:e=-1.0858688297225706E-5, LHH:1:object:t:var=-1.1203961599622849E-4, LHT:0:On:t:f=-5.126392845770131E-5, LHH:0:On:t:stove:f=-5.126392845770131E-5, LHT:0:On:t:null=-0.012137546792649457, LEX:851=0.012436506998945586, LEX:1013=0.01687400783876909, LEX:1017=-0.027479583961802664, LEX:1085=-0.011134961154976796, LEX:1087=0.009304030278244791, LEX:1084=-0.19303978643447844, LEX:1086=-0.018081592026389155, LEX:1103=0.19868487146148414}
40: =========== r:0.9 p:0.9 (epoch:7 file:0 0)
if the glass is empty or dry
(exists $0 (and (object:t $0 glass:d) (or (state:t $0 empty:s) (state:t $0 dry:s))))
MakeLex parse time: 0.006 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 2.0
if  :- S/S : (lambda $0 t $0) : 0.0
dry  :- NP : dry:s : 0.0
the glass  :- NP : glass:d : 0.0
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 2.0
dry  :- NP : dry:s : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
empty  :- S/(S|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,t> (exists $3 (and ($0 $1 $3) ($2 $3)))))) : 0.0
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 2.0
dry  :- NP : dry:s : 0.0
Lex Size: 1202
First parse time: 0.013 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (or (state:t $0 empty:s) (state:t $0 dry:s))))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -1.1211984307849678
the glass  :- NP : glass:d : 15 : 15.10308746788413
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 1.5503795738887693
empty  :- S/(S|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,t> (exists $3 (and ($0 $1 $3) ($2 $3)))))) : 1104 : -9.116530549646639E-5
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 857 : 2.0519971387566933
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -1.1211984307849678
the glass  :- NP : glass:d : 15 : 15.10308746788413
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 1.5503795738887693
empty  :- S/(S|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,t> (exists $3 (and ($0 $1 $3) ($2 $3)))))) : 1104 : -9.116530549646639E-5
or  :- S|NP/NP : (lambda $0 e (lambda $1 e (or (state:t $1 empty:s) (state:t $1 $0)))) : 857 : 2.0519971387566933
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9966711184643292
Update:
{BB:object:t:or=2.3560580583887066E-5, LHT:0:object:t:e=-0.0027352586197284742, LHH:0:object:t:var=-0.0027352586197284742, LHT:1:object:t:d=4.290971725549361E-4, LHH:1:object:t:glass:d=4.291008020510922E-4, BB:or:state:t=-2.3532954036807438E-5, LHT:0:object:t:d=-4.055796062660783E-4, LHH:0:object:t:glass:d=-4.055796062660783E-4, LHT:0:state:t:d=-2.352707491117196E-5, LHH:0:state:t:glass:d=-2.352707491117196E-5, LHT:1:state:t:e=-2.513628277174141E-5, LHH:1:state:t:var=-2.513628277174141E-5, LHT:1:object:t:e=-4.055737287306787E-4, LHH:1:object:t:var=-4.055737287306787E-4, BB:exists:object:t=-0.003164359552655507, LHT:1:object:t:p=-0.0031643586843958277, LHH:1:object:t:you:p=-0.0031643586843958277, LEX:509=1.0648330461677713E-5, LEX:519=5.508714938096041E-5, LEX:15=-6.64628263816033E-5, LEX:1088=7.470120689482406E-5, LEX:123=1.4553101940970346E-4, LEX:131=0.0029546509741950814, LEX:365=-0.0031643586843958277, LEX:9=6.646230631160202E-5, LEX:576=-2.352119578553649E-5, LEX:1014=-4.0557372714044253E-4, LEX:1018=3.520219361439462E-4, LEX:1104=-7.470172696513654E-5}
41: =========== r:0.9024390243902439 p:0.9024390243902439 (epoch:7 file:0 0)
if the refrigerator is on and the mug contains coke
(and (exists $0 (and (object:t $0 refrigerator:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coke:q))))))
MakeLex parse time: 0.034 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the refrigerator  :- NP : refrigerator:f : 0.0
on  :- NP : IsOn:s : 0.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 0.5467285714285715
the mug  :- NP : mug:d : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
coke  :- NP : coke:q : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
coke  :- NP : coke:q : 0.0
Lex Size: 1202
First parse time: 0.09 sec.
CORRECT:(and (exists $0 (and (object:t $0 refrigerator:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coke:q))))))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.7476875457485592
the refrigerator  :- NP : refrigerator:f : 75 : 20.000051252150676
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.381445214053428
on  :- NP : IsOn:s : 57 : 8.95718816929353
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : -1.0456591025536464
the mug  :- NP : mug:d : 16 : 19.999812967537817
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.4094256516275996
coke  :- NP : coke:q : 34 : 10.0
]
Second parse time: 0.031 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.7476875457485592
the refrigerator  :- NP : refrigerator:f : 75 : 20.000051252150676
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.381445214053428
on  :- NP : IsOn:s : 57 : 8.95718816929353
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : -1.0456591025536464
the mug  :- NP : mug:d : 16 : 19.999812967537817
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.4094256516275996
coke  :- NP : coke:q : 34 : 10.0
]
Scale: 0.996661185030149
Update:
{BB:exists:exists=-0.12237453426073396, BB:object:t:state:t=9.665806089166405E-4, LHT:0:object:t:e=-0.024373320125270995, LHH:0:object:t:var=-0.024373320125259043, LHT:0:state:t:e=9.417144464071689E-4, LHH:0:state:t:var=9.417144464401431E-4, LHT:1:state:t:s=0.0014369081056809364, LHH:1:state:t:IsOn:s=0.0023142869012923025, BB:has:t:object:t=4.6990946574827053E-4, LHT:1:object:t:d=-0.024837527311187022, LHT:0:has:t:e=-0.011586613936098038, LHH:0:has:t:var=-0.011586613936098038, LHT:1:has:t:e=-0.011586613936098038, LHH:1:has:t:the=-0.011586613936098038, LHT:1:state:t:e=-4.951939920207432E-4, LHH:1:state:t:the=-4.6990946011527066E-4, BB:exists:object:t=-0.005646997049342557, LHH:1:state:t:var=-2.528453190847908E-5, LHT:1:object:t:p=-0.001841600790556831, LHH:1:object:t:you:p=-0.001841600790556831, BB:exists:state:t=-2.5286839228606725E-5, LHH:1:state:t:yellow:s=-8.773787956086398E-4, LHH:1:object:t:bowl:d=-8.774098845680683E-4, LHH:1:object:t:cups:d=-0.02395995910090661, LHT:0:object:t:s=-0.0023100474534512683, LHH:0:object:t:IsOn:s=-0.0023100474534512683, LEX:75=-1.05343099192279E-5, LEX:123=-0.0014347888551756566, LEX:131=0.010513440637595224, LEX:172=-8.773468822435516E-4, LEX:311=-3.4662390480677215E-4, LEX:365=-0.0014949650543798164, LEX:373=-0.023613255416543917, LEX:547=0.00684827814939745, LEX:559=0.010399234944722021, LEX:70=1.0534309919411706E-5, LEX:518=0.01042959364098145, LEX:558=-2.2993199760264792E-5, LEX:570=0.009891954248586418, LEX:977=-0.024837226203594243, LEX:1020=0.004542793402797745, LEX:858=4.699094626776881E-4, LEX:966=-4.698959207016341E-4, LEX:454=-0.012056523401846682, LEX:472=-4.6990946574744085E-4, LEX:502=0.012526432867985845}
Testing

File #0: 0
0: ==================(0 -- 0)
if you find any
(dummy:t)
Test parse time: 0.002 sec.
WRONG
1 parses: [(exists $0 (object:t $0 cups:d))]
[LexEntries and scores:
if you find any  :- S : (exists $0 (object:t $0 cups:d)) : 379 : -0.003094770733436548
]
Had correct parse: false
Feats: {RN:true=1.0, LHT:0:object:t:e=1.0, LHH:0:object:t:var=1.0, LHT:1:object:t:d=1.0, LHH:1:object:t:cups:d=1.0, LEX:379=1.0}
-----------------------------
Recall : 0/1 = 0.0
Precision : 0/1 = 0.0
F1: NaN
No Parses : 0
EMPTY Recall : 0/1 = 0.0
EMPTY Precision : 0/1 = 0.0
EMPTY F1: NaN
-----------
Training, iteration 8
---------------------
DataSet: 0
---------------------
0: ===========
if there exists a mug
(exists $0 (object:t $0 mug:d))
MakeLex parse time: 0.009 sec.
Adding:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
a mug  :- NP : mug:d : 0.0
Lex Size: 1202
First parse time: 0.017 sec.
CORRECT:(exists $0 (object:t $0 mug:d))
Using:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.2975341302838199
a mug  :- NP : mug:d : 22 : 20.0
]
Second parse time: 0.009 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.2975341302838199
a mug  :- NP : mug:d : 22 : 20.0
]
Scale: 0.9966512517939722
Update:
{LHT:0:object:t:e=-0.001596343918361944, LHH:0:object:t:var=-0.001596343918361944, LHT:1:object:t:d=-0.00154063927884575, LHH:1:object:t:mug:d=1.856649153853011E-4, LHT:0:object:t:d=-1.8351858014189373E-4, LHH:0:object:t:mug:d=-1.8351858014189373E-4, BB:object:t:state:t=-5.089319633981756E-4, LHT:0:state:t:e=-5.089292179313351E-4, LHH:0:state:t:var=-5.089292179313351E-4, LHT:1:state:t:s=-5.104360944672144E-4, LHH:1:state:t:yellow:s=-5.104360944672144E-4, BB:object:t:object:t=-7.098779982596701E-4, LHH:1:object:t:bowl:d=-6.416111256637948E-4, BB:exists:object:t=-0.0010721246256520608, LHH:1:object:t:cups:d=-8.798780968863475E-4, LHT:1:object:t:p=-2.315249677643678E-4, LHH:1:object:t:you:p=-2.315249677643678E-4, LHH:1:object:t:cup:d=-2.0481497168161903E-4, LEX:122=4.4496517497632246E-4, LEX:125=2.4931592202416617E-4, LEX:129=3.824383547969172E-5, LEX:133=2.968998815582272E-4, LEX:137=6.281453319152553E-5, LEX:141=1.0909355931093305E-4, LEX:145=2.758515744134632E-4, LEX:149=1.0899056707694719E-4, LEX:153=5.9349747523028676E-5, LEX:200=-2.240558128143779E-4, LEX:220=-1.5664680960890347E-4, LEX:240=-4.2148910824793486E-4, LEX:423=-9.192052371830967E-5, LEX:124=1.6522244799960324E-5, LEX:128=-7.418900597945062E-4, LEX:132=-3.907027682784598E-5, LEX:140=2.664382830690457E-4, LEX:148=2.6462462727629924E-4, LEX:152=-3.410440567016789E-4, LEX:123=3.367789140207161E-5, LEX:127=2.1727369440014612E-5, LEX:131=1.1160390804156525E-4, LEX:135=3.8536270932698075E-5, LEX:139=2.6649838382628266E-4, LEX:143=5.6272253882544205E-5, LEX:147=2.6480079625137434E-4, LEX:151=2.9935130335205848E-5, LEX:198=-9.790653143481786E-5, LEX:208=-3.2413453704545806E-5, LEX:218=-3.0189295974946024E-5, LEX:238=-1.7897666952776677E-4, LEX:333=-2.0594604064195032E-4, LEX:349=-6.386265626891808E-4, LEX:365=-1.767537326109635E-4, LEX:381=-3.1951390454623724E-5, LEX:389=-3.515944155601912E-5, LEX:397=-1.8700840133925994E-5, LEX:571=-3.818903795619049E-5, LEX:583=-4.879418714778151E-5, LEX:595=-2.2354495759768093E-5, LEX:419=-1.7069508373930418E-4, LEX:126=1.452905003114226E-4, LEX:130=-2.1977973909037443E-4, LEX:134=3.949528973436838E-4, LEX:138=6.111980013370282E-5, LEX:142=1.0890432365832269E-4, LEX:146=2.4565592742764944E-4, LEX:150=1.0880055325584343E-4, LEX:154=-7.218565573419473E-4}
1: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if there exists a cup
(exists $0 (object:t $0 cup:d))
MakeLex parse time: 0.014 sec.
Adding:
if there exists  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
cup  :- NP : cup:d : 0.0
Lex Size: 1202
First parse time: 0.03 sec.
CORRECT:(exists $0 (object:t $0 cup:d))
Using:
[LexEntries and scores:
if there exists  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 1112 : 2.577908275132165E-4
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.8992169274955139
cup  :- NP : cup:d : 8 : 4.893112065048715
]
Second parse time: 0.014 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (exists $2 ($0 $2 $1)))) : 1112 : 2.577908275132165E-4
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.8992169274955139
cup  :- NP : cup:d : 8 : 4.893112065048715
]
Scale: 0.9966413187557929
Update:
{LHT:0:object:t:e=3.7364250788966065E-4, LHH:0:object:t:var=3.7364250788966065E-4, LHT:1:object:t:d=1.3971023199393253E-4, LHH:1:object:t:cup:d=0.0010200072752871473, LHT:0:object:t:d=-5.553555745451716E-4, LHH:0:object:t:cup:d=-5.553555745451716E-4, LHT:1:object:t:e=-5.2252432385314165E-5, LHH:1:object:t:var=-5.2252432385314165E-5, LHT:0:state:t:d=-4.88579525809331E-5, LHH:0:state:t:cup:d=-4.88579525809331E-5, LHT:1:state:t:e=-7.870466530897062E-5, LHH:1:state:t:var=-7.870466530897062E-5, LHT:0:has:t:e=-0.0022879965539949264, LHH:0:has:t:var=-0.0022879965539949264, LHT:1:has:t:e=-0.003199502573398534, LHH:1:has:t:the=-6.281158983516398E-4, LHT:0:has:t:d=-9.115060194036072E-4, LHH:0:has:t:cup:d=-9.115060194036072E-4, LHH:1:has:t:var=-0.0025713866750468927, BB:object:t:state:t=-2.778590550027057E-4, LHT:0:state:t:e=-2.9095864538577235E-4, LHH:0:state:t:var=-2.9095864538577235E-4, LHT:1:state:t:s=-2.6111193265773486E-4, LHH:1:state:t:yellow:s=-2.6111193265773486E-4, BB:exists:state:t=-1.3116174695544996E-5, BB:object:t:object:t=-0.001999202159622019, LHH:1:object:t:bowl:d=-3.967120965135076E-4, BB:exists:object:t=-6.318999015315049E-4, LHH:1:object:t:cups:d=-4.8358494677947536E-4, BB:exists:exists=-2.9559904004042538E-5, LHT:1:object:t:p=-2.6917086626323665E-4, LHH:1:object:t:you:p=-2.6917086626323665E-4, BB:has:t:object:t=-1.4126032191734314E-4, LEX:1105=9.391999740571973E-4, LEX:122=5.073248869810022E-4, LEX:159=-7.87901456816055E-4, LEX:161=-0.0010582993017768522, LEX:1112=0.002300737498275418, LEX:1043=2.7061442526085146E-4, LEX:125=2.860455566865532E-4, LEX:129=4.357621451034061E-5, LEX:133=3.412155041117326E-4, LEX:137=6.888290120827551E-5, LEX:141=1.2300580376645485E-4, LEX:145=3.1403113718645663E-4, LEX:149=1.2288965052762937E-4, LEX:153=6.811604393174341E-5, LEX:200=-9.305890125115078E-5, LEX:210=-2.636580667839147E-5, LEX:220=-6.45902077948994E-5, LEX:240=-1.7444294929207065E-4, LEX:250=-1.5997796329769605E-5, LEX:423=-2.7773376416463685E-4, LEX:124=1.883032228561497E-5, LEX:128=-5.056252702892338E-4, LEX:132=5.475274051309401E-5, LEX:136=2.7497793617205357E-5, LEX:140=2.99339289597664E-4, LEX:144=3.479154366489367E-5, LEX:148=2.973777255665933E-4, LEX:152=-1.206180648823557E-4, LEX:1089=-0.002884788232868536, LEX:20=0.0012152640375964478, LEX:469=-0.0016655980701100824, LEX:123=1.290756010788224E-4, LEX:127=2.474350877595602E-5, LEX:131=-7.333778806988159E-4, LEX:135=-2.3757569150157457E-5, LEX:139=3.005944369348075E-4, LEX:143=6.352410509690101E-5, LEX:147=2.986467678317889E-4, LEX:151=-0.001579073271224271, LEX:198=-5.38154885149837E-5, LEX:208=-9.784776141802462E-5, LEX:218=-1.2443033862270055E-5, LEX:238=-9.804104387650438E-5, LEX:248=-2.1191969656144916E-5, LEX:333=-1.1491203483105139E-4, LEX:341=-1.2014333472007326E-5, LEX:349=-2.621221132527376E-4, LEX:365=-2.3115582206568037E-4, LEX:381=-1.7866011700038028E-5, LEX:389=-1.0611160507406186E-4, LEX:553=-1.0498108042827852E-5, LEX:571=-1.6118790265650876E-5, LEX:583=-2.03839097638251E-5, LEX:595=-1.2545303482608324E-5, LEX:419=-4.512100394480193E-5, LEX:1092=-3.685039405828583E-5, LEX:1096=-3.627194696838576E-5, LEX:126=1.7813306685066522E-4, LEX:130=-3.416265783575941E-4, LEX:134=4.633617164277517E-4, LEX:138=7.780840109223057E-5, LEX:142=1.1867264179181688E-4, LEX:146=2.773025575977048E-4, LEX:150=1.1856525068477798E-4, LEX:154=-2.254515939089333E-4, LEX:1098=-3.3968754490722114E-5, LEX:431=-4.793216624175149E-4, LEX:443=-1.4587767669452129E-4, LEX:467=-9.057886049368091E-4, LEX:479=0.001652424038135435, LEX:491=-9.177619384347243E-4, LEX:1001=6.517239163644949E-5, LEX:8=4.655011715904268E-4}
2: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if there exists a cup and there exists a cup
(and (exists $0 (object:t $0 cup:d)))
MakeLex parse time: 0.059 sec.
Adding:
Lex Size: 1202
First parse time: 0.92 sec.
CORRECT:(and (exists $0 (object:t $0 cup:d)))
Using:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 11.896762228109285
]
Second parse time: 0.059 sec.
Best LexEntries:
[LexEntries and scores:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 82 : 11.896762228109285
]
Scale: 0.9966313859156053
Update:
{LEX:82=0.0076156307412856795, LHT:0:object:t:e=-0.0075269978191300725, LHH:0:object:t:var=-0.00752582906464591, LHT:1:object:t:d=-0.0074900010129539864, LHH:1:object:t:cup:d=-0.007257795201431952, BB:object:t:state:t=-2.348441505171076E-4, LHT:1:object:t:e=-1.7148726896860574E-5, LHH:1:object:t:the=-2.999219341569068E-5, LHT:1:state:t:e=-4.178565519743472E-5, LHH:1:state:t:var=-1.3810635984293763E-4, LHT:1:object:t:s=-2.1358805133554646E-5, LHT:0:state:t:e=-3.370599153447921E-4, LHH:0:state:t:var=-3.3703779647675775E-4, LHT:1:state:t:s=-2.953012151971306E-4, BB:has:t:state:t=-1.4749171493348638E-4, LHT:1:has:t:e=-0.00751527229170256, LHH:1:has:t:the=-0.007510931876651094, LHT:0:has:t:e=-0.00751286523364175, LHH:0:has:t:var=-0.007512865162371967, LHH:1:state:t:the=-7.47458512972207E-5, LHH:1:state:t:yellow:s=-1.2423465925440696E-4, LHH:1:object:t:bowl:d=-2.3216871990109654E-4, BB:has:t:object:t=-0.007405810347610117, BB:exists:has:t=-1.2982829743509896E-5, BB:object:t:object:t=-2.9391209501144667E-5, LEX:161=-4.52948557640103E-4, LEX:163=-0.002157832372030727, LEX:190=-1.7352415827401967E-5, LEX:210=-2.1474780505086738E-4, LEX:250=-1.0680389352858141E-4, LEX:423=-0.0045449410072218276, LEX:128=-8.738601169985615E-5, LEX:136=-0.0061009367794265575, LEX:144=-0.0010464597627034597, LEX:152=-2.0612674363586594E-4, LEX:1090=-6.259673315220359E-5, LEX:1094=-2.4971815458445864E-5, LEX:865=-1.4327993860014044E-5, LEX:866=-1.4218911255326285E-5, LEX:20=-0.007311401978612381, LEX:457=-1.7884667109599594E-4, LEX:469=-3.999414028726361E-5, LEX:139=-1.3292276342873486E-5, LEX:577=-7.286910540768827E-5, LEX:419=-4.453928286547276E-5, LEX:1092=-5.399626002020685E-5, LEX:1096=-8.563731520127814E-5, LEX:154=-4.599579465837941E-5, LEX:424=-0.004896831348129317, LEX:1003=-2.297754563335409E-5, LEX:1004=-2.289734428065219E-5, LEX:1098=-7.243132646255698E-5, LEX:455=-0.007291285952009831, LEX:479=-1.7674891699186773E-4, LEX:491=-2.4381725431506518E-5, LEX:1001=-1.7475809982906018E-4, LEX:8=-4.0955809748380946E-4, LEX:869=-0.007291285952009832, LEX:887=-8.848105294305715E-5, LEX:1023=-0.004152336892657177, LEX:1024=-9.548581931369043E-4, LEX:1025=-0.0020792069945767353, LEX:1026=-3.395427244053238E-4}
3: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if there exists an empty kettle
(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s)))
MakeLex parse time: 0.007 sec.
Adding:
if  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 0.0
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 0.40293333333333337
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
empty  :- NP : empty:s : 0.0
kettle  :- NP : kettle:d : 0.0
Lex Size: 1202
First parse time: 0.011 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 1106 : 0.023088061338902136
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1092 : 0.018214998219369307
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1098 : 0.3961902460501753
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1010 : 0.019026635570595387
empty  :- NP : empty:s : 53 : 10.0
kettle  :- NP : kettle:d : 11 : 10.000012500088278
]
Second parse time: 0.007 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 1106 : 0.023088061338902136
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1092 : 0.018214998219369307
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1098 : 0.3961902460501753
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1010 : 0.019026635570595387
empty  :- NP : empty:s : 53 : 10.0
kettle  :- NP : kettle:d : 11 : 10.000012500088278
]
Scale: 0.9966214532734031
Update:
{BB:object:t:state:t=0.0013713738596737705, LHT:0:object:t:e=-0.0019516430014549961, LHH:0:object:t:var=-0.0019516430014549961, LHT:0:state:t:e=0.001384465209954521, LHH:0:state:t:var=0.001384465209954521, LHT:1:state:t:s=0.0013844664765660889, LHH:1:state:t:empty:s=0.0013844664765660889, LHT:0:state:t:s=-1.3139970522922196E-5, LHH:0:state:t:empty:s=-1.3139970522922196E-5, LHT:1:state:t:e=-1.318512153277589E-5, LHH:1:state:t:var=-1.318512153277589E-5, BB:exists:object:t=-5.843511181380917E-4, LHT:1:object:t:p=-5.843511181380917E-4, LHH:1:object:t:you:p=-5.843511181380917E-4, BB:object:t:object:t=-0.0013713264404427363, LHT:1:object:t:s=-0.0013675229661837093, LHH:1:object:t:empty:s=-0.0013675229661837093, LEX:421=9.26407806235142E-5, LEX:1045=8.167003153662879E-5, LEX:1044=9.434537838398546E-5, LEX:141=-3.0018898216043567E-4, LEX:149=-5.242290733549681E-4, LEX:861=1.5742320419418596E-4, LEX:863=2.798145321690595E-4, LEX:136=-5.433421878435888E-5, LEX:144=-5.500291812861739E-5, LEX:152=-1.0792247289128017E-5, LEX:1090=-3.199629171995977E-4, LEX:1094=1.0230941940406474E-4, LEX:862=-2.960993134841913E-5, LEX:864=-2.70344024246173E-5, LEX:1093=1.0545239576530613E-4, LEX:1097=1.0387410366019652E-4, LEX:123=7.421542889388915E-5, LEX:131=2.9706715889714103E-4, LEX:139=8.621770209640154E-5, LEX:365=-5.84351118138092E-4, LEX:1006=-5.438668617404419E-5, LEX:1008=-6.806979674862868E-5, LEX:1106=4.623759107848937E-4, LEX:1092=3.2356723344423874E-4, LEX:1096=1.350666464191333E-4, LEX:1003=-2.3391048508916905E-5, LEX:1004=-2.1358045263962484E-5, LEX:1098=-3.647951116836439E-5, LEX:1010=-5.464388732031138E-4, LEX:1091=1.0330910709121667E-4, LEX:1095=1.0345760193389033E-4}
4: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if there exists a green glass
(exists $0 (and (object:t $0 glass:d) (state:t $0 green:s)))
MakeLex parse time: 0.01 sec.
Adding:
if  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 0.0
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 0.40293333333333337
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
green  :- NP : green:s : 0.0
glass  :- NP : glass:d : 0.0
Lex Size: 1202
First parse time: 0.018 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (state:t $0 green:s)))
Using:
[LexEntries and scores:
if  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 1106 : 0.02355043724968703
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1092 : 0.018538565452813547
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1098 : 0.3961537665390069
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.9006926026166575
green  :- NP : green:s : 51 : 10.0
glass  :- NP : glass:d : 9 : 9.999884924711775
]
Second parse time: 0.01 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S|NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 e ($0 $2 $1)))) : 1106 : 0.02355043724968703
there  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1092 : 0.018538565452813547
exists  :- S/NP/NP/(S|NP|NP)\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $2 $4))))))) : 1098 : 0.3961537665390069
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.9006926026166575
green  :- NP : green:s : 51 : 10.0
glass  :- NP : glass:d : 9 : 9.999884924711775
]
Scale: 0.9966115208291807
Update:
{BB:object:t:state:t=0.009196700233498894, LHT:0:object:t:e=2.2120465399359769E-4, LHH:0:object:t:var=2.2120465399359769E-4, LHT:1:object:t:d=0.0027137350085746233, LHH:1:object:t:glass:d=0.002713735025653624, LHT:0:state:t:e=0.0016399738672300255, LHH:0:state:t:var=0.0016399738672300255, LHT:1:state:t:s=0.0016400655425964136, LHH:1:state:t:green:s=0.0016400655425964136, LHT:0:object:t:d=-3.8642022078241893E-4, LHH:0:object:t:glass:d=-3.8642022078241893E-4, LHT:1:object:t:s=-0.0016345324777299198, LHH:1:object:t:green:s=-0.0016345324777299198, BB:has:t:state:t=-0.007559656725260526, LHT:0:has:t:e=-0.005276007463419852, LHH:0:has:t:var=-0.005276007463419852, LHT:1:has:t:e=-0.007603700812421342, LHH:1:has:t:the=-0.00532720823266067, LHT:0:has:t:d=-0.002326959539144868, LHH:0:has:t:glass:d=-0.002326959539144868, LHT:1:object:t:e=-4.33679301629233E-4, LHH:1:object:t:var=-4.33679301629233E-4, LHH:1:has:t:var=-0.002276492579760671, BB:object:t:object:t=-0.001587018782480021, LHT:1:object:t:p=-8.123523748878932E-4, LHH:1:object:t:you:p=-8.123523748878932E-4, BB:exists:object:t=-8.123505482376384E-4, BB:has:t:object:t=-4.4044087160817166E-5, LEX:422=4.254110053954405E-4, LEX:1045=6.652420315321708E-4, LEX:141=-2.5299427405406165E-4, LEX:149=-5.118461746722408E-4, LEX:861=0.001037875575827331, LEX:863=0.002026845085766795, LEX:136=-6.258104218040549E-5, LEX:144=-6.334097362160608E-5, LEX:152=-1.2635412558430444E-5, LEX:1090=-5.046879349116282E-4, LEX:1094=-2.2059756083145571E-4, LEX:865=0.0010027952523244186, LEX:866=0.0010075677012014274, LEX:123=-3.1100252434107913E-4, LEX:131=-0.004639599568930089, LEX:139=-7.236442377939904E-4, LEX:365=-8.123523748878935E-4, LEX:1006=-6.225432490452751E-5, LEX:1008=-7.80981741759574E-5, LEX:1106=0.0032432247914640773, LEX:1092=6.973911522496887E-4, LEX:1096=-0.003215731346352118, LEX:1003=-5.815427109968895E-4, LEX:1004=-5.432603088508636E-4, LEX:1098=-0.001104606599729237, LEX:431=-0.005247985507320565, LEX:443=-7.922272534010431E-5, LEX:467=-0.002276492579760671, LEX:479=0.005742547175814919, LEX:491=-5.69330306445132E-4}
5: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if there exists a cup that contains syrup
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
MakeLex parse time: 0.082 sec.
Adding:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 0.40293333333333337
syrup  :- NP : syrup:q : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
syrup  :- NP : syrup:q : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
Lex Size: 1202
First parse time: 0.153 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
Using:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 2.3930527291719006
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.39232222063888966
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 1.7889360964602103
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 1.3865637377735986
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 3.244613618160796
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.4219520844955855
syrup  :- NP : syrup:q : 33 : 10.0
]
Second parse time: 0.086 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 2.3930527291719006
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.39232222063888966
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 1.7889360964602103
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 1.3865637377735986
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 3.244613618160796
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.4219520844955855
syrup  :- NP : syrup:q : 33 : 10.0
]
Scale: 0.9966015885829322
Update:
{BB:has:t:object:t=0.0235300686370018, LHT:0:object:t:e=0.021462065431738977, LHH:0:object:t:var=0.0214624115878679, LHT:1:object:t:d=0.022806253779838165, LHH:1:object:t:cup:d=0.05429671435686589, LHT:0:has:t:e=-0.006508053508977525, LHH:0:has:t:var=-0.006506215957929375, LHT:1:has:t:e=-0.007833427233781571, LHH:1:has:t:the=-0.00783997971141623, LHT:1:object:t:q=0.0018112129369286, LHH:1:object:t:syrup:q=0.0018112129369286, LHT:1:object:t:e=-0.003189914955494851, LHH:1:object:t:the=-3.9404126240374854E-5, LHH:1:object:t:var=-0.0031505108292544763, LHT:0:state:t:e=-0.02005585653236034, LHH:0:state:t:var=-0.020055830183721104, LHT:1:state:t:e=-0.0017594080323856173, LHH:1:state:t:var=-0.001759310889277291, LHH:1:has:t:var=-2.4851746831582674E-5, LHT:0:object:t:q=-5.015067790150178E-5, LHH:0:object:t:syrup:q=-5.015067790150178E-5, LHT:0:has:t:q=-0.001558655047108794, LHH:0:has:t:syrup:q=-0.001558655047108794, LHT:1:has:t:q=-2.3328164803973492E-4, LHH:1:has:t:syrup:q=-2.018774235728836E-4, BB:object:t:state:t=-0.00892805472168366, BB:has:t:state:t=-0.022464315421486258, LHT:1:state:t:s=-0.018296978288320404, LHH:1:state:t:yellow:s=-0.018296978288320404, BB:object:t:object:t=-0.005068865516985368, LHH:1:object:t:bowl:d=-0.03149037625274863, BB:exists:object:t=-3.23076324023489E-5, BB:exists:has:t=-0.0033027101716277636, LHT:1:object:t:p=-1.563726669861694E-5, LHH:1:object:t:you:p=-1.563726669861694E-5, LEX:160=-1.5613931784841208E-5, LEX:161=0.00692416913187084, LEX:163=0.01532368007537268, LEX:1112=-0.0014676765606596546, LEX:429=-0.0014871177813472925, LEX:435=-1.8320960018581653E-5, LEX:441=-0.001135061202548424, LEX:447=-1.9260900819277962E-5, LEX:453=-0.0015161527661508634, LEX:471=-1.066593356457418E-4, LEX:483=-2.3767069937916707E-4, LEX:495=-2.3443318981857588E-4, LEX:426=-3.606260260263151E-5, LEX:432=-4.7122414490978216E-4, LEX:438=-3.4329606533332825E-5, LEX:444=-4.123115305527913E-4, LEX:450=-4.651027576997642E-5, LEX:468=-2.4774838957953253E-5, LEX:474=-3.442263805903134E-4, LEX:486=-3.393651007338338E-4, LEX:498=-7.513710789614603E-4, LEX:129=-0.0015482955114625371, LEX:190=-0.004359194656173021, LEX:210=-0.027121307199259512, LEX:220=-1.586900656568737E-5, LEX:250=-0.013921856369601518, LEX:423=0.0320412994732047, LEX:1089=-0.0040905398344248944, LEX:427=-5.915363836005323E-4, LEX:433=-1.8363317207781726E-5, LEX:439=-5.195012343462467E-4, LEX:445=-1.9290540897931036E-5, LEX:451=-4.129711825502898E-4, LEX:457=2.2649888064423958E-4, LEX:469=-1.1097973443729838E-4, LEX:481=-2.3817741863540158E-4, LEX:487=-1.1105557457780283E-5, LEX:493=-2.35227186319064E-4, LEX:499=-1.0497748249021963E-5, LEX:867=4.587191001420357E-5, LEX:428=-3.524012264704254E-5, LEX:434=-3.0001189871983096E-4, LEX:440=-3.355782627684667E-5, LEX:446=-2.882835554607288E-4, LEX:452=-4.5942521763782714E-5, LEX:458=6.805955310418277E-5, LEX:476=-3.4420065056023916E-4, LEX:482=-1.1916735130580356E-5, LEX:488=-3.3933699925445444E-4, LEX:494=-1.2005180021617404E-5, LEX:500=-7.525516708570987E-4, LEX:123=-1.970832406447579E-5, LEX:131=-0.00405990724216635, LEX:135=-8.222101876652668E-4, LEX:143=-9.198034872009455E-4, LEX:365=-1.5625649149789234E-5, LEX:1092=-8.832322708113512E-4, LEX:1096=-8.663436416147606E-4, LEX:424=-0.01668034825283344, LEX:425=-5.928264095915636E-4, LEX:431=-1.0136046407205194E-5, LEX:437=-5.200928004724844E-4, LEX:443=-1.9127531320458738E-5, LEX:449=-4.1234970186832686E-4, LEX:455=0.009173045546479248, LEX:467=-1.2397751211039898E-5, LEX:479=-6.325613401076479E-4, LEX:485=-1.1115275315000933E-5, LEX:491=-2.3543254332742232E-4, LEX:497=-1.0263281392148657E-5, LEX:869=0.009111251728330366, LEX:868=0.009263344379688497, LEX:430=-6.019902660642573E-5, LEX:436=-3.018808523166314E-4, LEX:442=-0.010635500833372964, LEX:448=-2.8976143727547476E-4, LEX:454=-0.006101339832994401, LEX:478=-5.382109442587635E-4, LEX:484=-1.233385035871847E-5, LEX:490=0.009830952938125484, LEX:496=-1.2429855237828164E-5, LEX:502=0.012677902660656394, LEX:159=1.876972408969547E-5}
6: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if there exists a cup that contains coke
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 coke:q)))))
MakeLex parse time: 0.083 sec.
Adding:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 0.0
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 0.40293333333333337
coke  :- NP : coke:q : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 0.0
coke  :- NP : coke:q : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 0.0
Lex Size: 1202
First parse time: 0.128 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 coke:q)))))
Using:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 2.4250940286451055
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.37564187238605623
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 1.7981091420066897
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 1.395674989501929
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 3.2538769625404846
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.434629987156242
coke  :- NP : coke:q : 34 : 10.0
]
Second parse time: 0.083 sec.
Best LexEntries:
[LexEntries and scores:
if there  :- S|NP : (lambda $0 e (object:t $0 cup:d)) : 423 : 2.4250940286451055
exists  :- S/(S|NP)\(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (exists $2 (and ($0 $2) ($1 $2))))) : 424 : 0.37564187238605623
a  :- S|NP/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (lambda $2 e (has:t $2 ($0 $1))))) : 455 : 1.7981091420066897
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 1.395674989501929
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 3.2538769625404846
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.434629987156242
coke  :- NP : coke:q : 34 : 10.0
]
Scale: 0.9965916565346515
Update:
{BB:has:t:object:t=0.02018308141455069, LHT:0:object:t:e=0.017596709092057024, LHH:0:object:t:var=0.01759704252148406, LHT:1:object:t:d=0.018726725950089604, LHH:1:object:t:cup:d=0.04603554843739201, LHT:0:has:t:e=-0.006461669104715488, LHH:0:has:t:var=-0.006460098391612853, LHT:1:has:t:e=-0.00752058206806621, LHH:1:has:t:the=-0.007526074943848967, LHT:1:object:t:q=0.0016431230721399817, LHH:1:object:t:coke:q=0.0016431230721399817, LHT:1:object:t:e=-0.0028111862509672034, LHH:1:object:t:the=-3.60219203111571E-5, LHH:1:object:t:var=-0.0027751643306560456, LHT:0:state:t:e=-0.016109649542111047, LHH:0:state:t:var=-0.016109626935118877, LHT:1:state:t:e=-0.001459050338002921, LHH:1:state:t:var=-0.001458966024704795, LHH:1:has:t:var=-2.1154277902538646E-5, LHT:0:object:t:q=-5.235417618381302E-5, LHH:0:object:t:coke:q=-5.235417618381302E-5, LHT:0:has:t:q=-0.0013379085633352294, LHH:0:has:t:coke:q=-0.0013379085633352294, LHT:1:has:t:q=-2.7899590249210794E-4, LHH:1:has:t:coke:q=-2.523487488068292E-4, BB:object:t:state:t=-0.0073875164062864275, BB:has:t:state:t=-0.018107015740777548, LHT:1:state:t:s=-0.01465111078792133, LHH:1:state:t:yellow:s=-0.01465111078792133, BB:object:t:object:t=-0.005053152813725682, LHH:1:object:t:bowl:d=-0.02730874598106695, BB:exists:object:t=-2.8601736478319396E-5, BB:exists:has:t=-0.0028451479574028602, LHT:1:object:t:p=-1.4308089579597947E-5, LHH:1:object:t:you:p=-1.4308089579597947E-5, LEX:160=-1.315673180192817E-5, LEX:161=0.005920975824042408, LEX:163=0.012975430183659676, LEX:1112=-0.0012609172933018445, LEX:429=-0.0013140985405170969, LEX:435=-1.5810646116099953E-5, LEX:441=-0.0011002332127581851, LEX:447=-1.659897279573621E-5, LEX:453=-0.0015177821567186778, LEX:471=-1.290169162818172E-4, LEX:483=-2.22156398977875E-4, LEX:495=-2.1818259738646832E-4, LEX:426=-3.0795870860578473E-5, LEX:432=-4.5002417610981286E-4, LEX:438=-2.9359118648935543E-5, LEX:444=-3.758057569053643E-4, LEX:450=-4.061718973443274E-5, LEX:468=-2.2119788587523647E-5, LEX:474=-3.1343245249188255E-4, LEX:486=-3.1022303856059156E-4, LEX:498=-7.175761084153182E-4, LEX:129=-0.001390731797334365, LEX:190=-0.0036092872076991674, LEX:210=-0.023690972150654764, LEX:220=-1.3221846649188248E-5, LEX:250=-0.011028555502859645, LEX:423=0.027132197791552598, LEX:1089=-0.0035716037470480922, LEX:427=-5.258402469543174E-4, LEX:433=-1.5845331982649563E-5, LEX:439=-4.8152797389895306E-4, LEX:445=-1.6623662509893137E-5, LEX:451=-4.084877669791781E-4, LEX:457=2.1027770672047932E-4, LEX:469=-1.3177300120901063E-4, LEX:481=-2.2261713075445212E-4, LEX:487=-1.0464815968450615E-5, LEX:493=-2.1893974222985947E-4, LEX:867=4.258154108413571E-5, LEX:428=-3.0008886316799472E-5, LEX:434=-2.871122766401066E-4, LEX:440=-2.862077316598576E-5, LEX:446=-2.8504040166702545E-4, LEX:452=-4.008267383202764E-5, LEX:458=6.333748814834495E-5, LEX:476=-3.1340910953706427E-4, LEX:482=-1.0543668573996808E-5, LEX:488=-3.101978670733387E-4, LEX:494=-1.365527922757406E-5, LEX:500=-7.187822441864896E-4, LEX:123=-1.6915679692652747E-5, LEX:131=-0.003544649181197368, LEX:135=-6.815081249285874E-4, LEX:143=-7.623562383324537E-4, LEX:365=-1.4297862183002629E-5, LEX:1092=-7.32313449147594E-4, LEX:1096=-7.18286018100576E-4, LEX:424=-0.014055976991152306, LEX:425=-5.271017574691494E-4, LEX:437=-4.8208610824803137E-4, LEX:443=-1.6494841982668498E-5, LEX:449=-4.077912971749034E-4, LEX:455=0.008670324248302802, LEX:467=-1.591490194106238E-5, LEX:479=-5.895196277609733E-4, LEX:485=-1.0473845891122638E-5, LEX:491=-2.1949097066340027E-4, LEX:869=0.00861305315508326, LEX:868=0.008754087440523068, LEX:430=-5.076966195797339E-5, LEX:436=-2.893679396234591E-4, LEX:442=-0.010127640301902042, LEX:448=-2.8738984341644506E-4, LEX:454=-0.005836314943857544, LEX:478=-4.854659957592452E-4, LEX:484=-1.0897219055954874E-5, LEX:490=0.009348780781644424, LEX:496=-1.419571032467373E-5, LEX:502=0.012018529464200792, LEX:159=1.778336147775931E-5}
7: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if there is a red glass
(exists $0 (and (object:t $0 glass:d) (state:t $0 red:s)))
MakeLex parse time: 0.011 sec.
Adding:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 0.0
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
red  :- NP : red:s : 0.0
glass  :- NP : glass:d : 0.0
Lex Size: 1202
First parse time: 0.022 sec.
CORRECT:(exists $0 (and (object:t $0 glass:d) (state:t $0 red:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.18470409959716794
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.2597071718649694
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.9052130688246037
red  :- NP : red:s : 47 : 10.0
glass  :- NP : glass:d : 9 : 9.999884924711775
]
Second parse time: 0.012 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.18470409959716794
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.2597071718649694
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.9052130688246037
red  :- NP : red:s : 47 : 10.0
glass  :- NP : glass:d : 9 : 9.999884924711775
]
Scale: 0.9965817246843327
Update:
{BB:object:t:state:t=0.019974019690194498, LHT:0:object:t:e=0.003656140232049568, LHH:0:object:t:var=0.003656140232049568, LHT:1:object:t:d=0.004003364147303989, LHH:1:object:t:glass:d=0.004004266186315393, LHT:0:state:t:e=0.0035412460823117725, LHH:0:state:t:var=0.0035412460823117725, LHT:1:state:t:s=1.2140670737997618E-5, LHH:1:state:t:red:s=1.2140670737997618E-5, LHT:0:object:t:d=-4.374018650975128E-4, LHH:0:object:t:glass:d=-4.374018650975128E-4, LHT:0:state:t:d=-0.0035295225520694503, LHH:0:state:t:glass:d=-0.0035295225520694503, LHT:0:state:t:s=-1.214067073773429E-5, LHH:0:state:t:red:s=-1.214067073773429E-5, LHT:1:state:t:e=-1.2557811233447444E-5, LHH:1:state:t:var=-1.2557811233447444E-5, LHT:1:object:t:p=-3.1009107157460645E-4, LHH:1:object:t:you:p=-3.1009107157460645E-4, BB:exists:object:t=-3.0882539069315273E-4, LHT:1:object:t:e=-4.745346956978658E-4, LHH:1:object:t:var=-4.745346956978658E-4, BB:has:t:state:t=-0.016446186521188504, LHT:0:has:t:e=-0.016408422432461187, LHH:0:has:t:var=-0.016408422432461187, LHT:1:has:t:e=-0.016446186521188504, LHH:1:has:t:the=-0.016446186521188504, LHT:0:has:t:d=-3.776408872732299E-5, LHH:0:has:t:glass:d=-3.776408872732299E-5, LEX:503=0.0015225236723960898, LEX:1005=-0.0013433988498865515, LEX:125=-0.003159630253732692, LEX:861=0.0011627983325772136, LEX:863=0.0011690350620955482, LEX:1007=-0.0015825039991176606, LEX:1009=-0.0015030007416704898, LEX:870=0.003213760743127318, LEX:871=0.0032277027036546045, LEX:123=3.2828930198352147E-4, LEX:131=0.0012611034253064179, LEX:365=-3.1009107157460645E-4, LEX:1006=-0.0015640217814567345, LEX:1008=-0.0015268246552228872, LEX:1106=0.0024606443000049862, LEX:419=-4.1129479591671723E-4, LEX:1092=0.0020928518216094295, LEX:1096=0.0020528717134377203, LEX:600=-0.0035701055080268104, LEX:1014=5.049956301117867E-5, LEX:1018=-1.4194520433245232E-5, LEX:431=-0.016408422432461184, LEX:443=-3.776408872732298E-5, LEX:479=0.012398150262171118, LEX:491=-4.2247799819436645E-4, LEX:1001=-0.003493524536382254}
8: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if there is a yellow bowl
(exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s)))
MakeLex parse time: 0.025 sec.
Adding:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 0.0
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
yellow  :- NP : yellow:s : 0.0
bowl  :- NP : bowl:d : 0.0
Lex Size: 1202
First parse time: 0.064 sec.
CORRECT:(exists $0 (and (object:t $0 bowl:d) (state:t $0 yellow:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.1831400778157112
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.25812466786585175
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.9176112190867749
yellow  :- NP : yellow:s : 50 : 10.059158118852832
bowl  :- NP : bowl:d : 227 : 1.6422940781209072
]
Second parse time: 0.026 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.1831400778157112
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.25812466786585175
a  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 479 : 0.9176112190867749
yellow  :- NP : yellow:s : 50 : 10.059158118852832
bowl  :- NP : bowl:d : 227 : 1.6422940781209072
]
Scale: 0.99657179303197
Update:
{BB:object:t:state:t=0.03821393952680846, LHT:0:object:t:e=0.013100056523514814, LHH:0:object:t:var=0.013100056523514814, LHT:1:object:t:d=0.023738465071793276, LHH:1:object:t:bowl:d=0.029585034196082292, LHT:0:state:t:e=0.008926357655573309, LHH:0:state:t:var=0.008926357655573309, LHT:1:state:t:s=0.007772533254284296, LHH:1:state:t:yellow:s=0.007772533254284296, LHT:1:object:t:e=-8.03934770433447E-4, LHH:1:object:t:var=-8.03934770433447E-4, BB:exists:state:t=-1.1110753138165944E-5, BB:exists:object:t=-3.3063375838617644E-4, LHT:1:state:t:e=-6.240869252054954E-4, LHH:1:state:t:var=-6.240869252054954E-4, LHH:1:object:t:cup:d=-2.887301998456818E-4, LHT:0:object:t:d=-4.725183747919803E-5, LHH:0:object:t:bowl:d=-4.725183747919803E-5, BB:object:t:object:t=-2.2975564302483016E-5, LHT:0:object:t:s=-4.276921660759285E-4, LHH:0:object:t:yellow:s=-4.276921660759285E-4, LHT:1:object:t:f=-1.9926456997379485E-5, LHH:1:object:t:tv:f=-1.9926456997379485E-5, LHH:1:object:t:plate:d=-0.005482594318409373, LHT:0:state:t:d=-3.5826162367192163E-4, LHH:0:state:t:bowl:d=-3.582599436747892E-4, LHT:0:state:t:s=-0.001419614065812268, LHH:0:state:t:yellow:s=-0.001419614065812268, LHT:1:object:t:s=-0.009970076147476655, LHH:1:object:t:yellow:s=-0.009970076147476655, BB:On:t:object:t=-0.004864407034068543, LHT:0:On:t:e=-0.004864407034068543, LHH:0:On:t:var=-0.004864407034068543, LHT:1:On:t:e=-0.003683421362531146, LHH:1:On:t:the=-0.004864407034068543, LHT:0:has:t:e=-0.014274255863305848, LHH:0:has:t:var=-0.014274255863305848, LHT:1:has:t:e=-0.014307050642312299, LHH:1:has:t:the=-0.01430689140580261, LHT:0:has:t:s=-0.0011950073176738134, LHH:0:has:t:yellow:s=-0.0011950073176738134, LHT:1:On:t:q=-0.0011809856715373987, LHT:1:has:t:q=-0.0011809856715373987, LHH:1:has:t:var=-0.0011811449080470872, LHT:0:has:t:d=-1.8773132870037907E-5, LHH:0:has:t:bowl:d=-1.8773132870037907E-5, BB:state:t:state:t=-9.587484037406958E-5, LHT:1:object:t:p=-3.19415176925473E-4, LHH:1:object:t:you:p=-3.19415176925473E-4, LHH:1:object:t:cups:d=-7.524460603451459E-5, BB:exists:exists=-1.0184766163428517E-5, BB:has:t:state:t=-0.014283954483256266, LEX:186=-6.53824954545586E-5, LEX:216=-4.0959236794815884E-5, LEX:256=-1.566261379339297E-5, LEX:173=-1.2087265692800089E-5, LEX:189=-9.454472549737658E-5, LEX:199=-5.1225015198070116E-5, LEX:239=-1.959031666811529E-5, LEX:168=7.129071835971613E-4, LEX:184=-6.415254080942694E-5, LEX:214=-4.823421735819798E-5, LEX:224=-8.834988149406241E-5, LEX:254=-1.844505471866401E-5, LEX:264=2.3479172523399464E-4, LEX:503=0.002812990717138815, LEX:191=-6.964790367641703E-5, LEX:201=-5.3745872917011374E-5, LEX:241=-2.0555461993579974E-5, LEX:261=-3.345786381447842E-5, LEX:182=-2.0472605724551285E-4, LEX:212=-4.8447443359045554E-5, LEX:252=-1.8526614624525244E-5, LEX:1005=0.002612419949639929, LEX:177=-1.3386856719033126E-4, LEX:193=-2.810436562619105E-4, LEX:203=-4.744236245764592E-5, LEX:223=-3.316471076140962E-4, LEX:243=-1.814217566220265E-5, LEX:263=-2.2901015472304704E-4, LEX:125=-0.006801196359316487, LEX:129=-3.118294412016702E-5, LEX:133=-0.002236929028754734, LEX:137=-7.173429368659693E-4, LEX:141=-5.647647875478533E-5, LEX:145=-0.0017380032212907439, LEX:149=-5.639145137990062E-5, LEX:153=-0.001386508436592826, LEX:200=-1.1485815822770534E-5, LEX:423=-1.8765956324859822E-4, LEX:861=0.001421391351192186, LEX:863=0.0014291148086375614, LEX:1007=0.002033513801820994, LEX:1009=0.0017811298968651893, LEX:870=0.005947662498351657, LEX:871=0.005972058792957907, LEX:195=-6.854015874992025E-5, LEX:205=-1.5111225031734057E-4, LEX:225=-1.4552554092019482E-5, LEX:245=-5.90443332738253E-5, LEX:123=4.4921003928171895E-4, LEX:131=-0.0015347787055212012, LEX:135=-0.0010494001880081826, LEX:143=-0.0012046938685438702, LEX:151=-3.605500084587537E-4, LEX:208=-3.7966838769013055E-5, LEX:365=-3.130444619161514E-4, LEX:373=-2.046760932666342E-5, LEX:389=-4.3672904322502154E-5, LEX:1006=0.0029126077240628967, LEX:1008=0.0028475959885559086, LEX:1106=0.003018116521484203, LEX:419=-0.0022313632205948493, LEX:859=-2.2849920478368926E-4, LEX:1092=0.0017541791094067291, LEX:1096=0.0016983225181678985, LEX:518=-5.061086664657264E-4, LEX:522=-1.04136612095602E-5, LEX:532=-0.0026828787824353393, LEX:542=-0.0026772807322245906, LEX:546=-2.9146527298354352E-5, LEX:552=-2.8331584681185615E-5, LEX:558=-2.412301387851116E-5, LEX:576=-7.748884602229827E-4, LEX:588=-7.185414510831519E-4, LEX:600=-0.007427657322670801, LEX:959=-1.642418669717316E-5, LEX:1014=-1.0667247998065033E-4, LEX:1018=-6.193627388714622E-4, LEX:1130=-0.004863481280214757, LEX:1148=-6.173802375559154E-4, LEX:431=-0.014241077394927488, LEX:443=-4.997531040827395E-5, LEX:449=-1.2948568583868737E-4, LEX:467=-0.0011811449080470877, LEX:479=0.019094678365183308, LEX:491=-1.6638657235351035E-4, LEX:497=-1.5838700466848194E-5, LEX:1001=-0.017245336336472027, LEX:50=0.0018232291931815235, LEX:181=-0.016407338591968072, LEX:197=-0.0051536233461374845, LEX:207=-4.849722741756597E-5, LEX:217=-5.337950139031525E-5, LEX:227=0.02870462552676413, LEX:237=-3.96029869339275E-4, LEX:247=-1.8545655094800156E-5, LEX:267=-0.0060478882489033445, LEX:277=0.0011120744578593368}
9: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if there is an empty cup
(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
MakeLex parse time: 0.008 sec.
Adding:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 0.0
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 0.0
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
empty  :- NP : empty:s : 0.0
cup  :- NP : cup:d : 0.0
Lex Size: 1202
First parse time: 0.015 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.1860526855397741
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.26015818166767274
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1010 : 0.018480196697392273
empty  :- NP : empty:s : 53 : 10.0
cup  :- NP : cup:d : 8 : 4.893168008122822
]
Second parse time: 0.01 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP/(S|NP|NP)/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 <e,<e,t>> (lambda $2 e (lambda $3 e (exists $4 (and ($1 $4 $3) ($0 $4 $2))))))) : 1006 : 0.1860526855397741
there is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $0 $1))) : 1007 : 0.26015818166767274
an  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1010 : 0.018480196697392273
empty  :- NP : empty:s : 53 : 10.0
cup  :- NP : cup:d : 8 : 4.893168008122822
]
Scale: 0.9965618615775574
Update:
{BB:object:t:state:t=8.308828810684043E-4, LHT:0:object:t:e=-0.0012317593665333586, LHH:0:object:t:var=-0.0012317593665333586, LHT:1:object:t:d=2.187268792824799E-5, LHH:1:object:t:cup:d=8.559053160217688E-5, LHT:0:state:t:e=6.91796001291316E-4, LHH:0:state:t:var=6.91796001291316E-4, LHT:1:state:t:s=6.951536201639601E-4, LHH:1:state:t:empty:s=7.579364230824508E-4, LHT:0:state:t:s=-1.264407361616888E-5, LHH:0:state:t:empty:s=-1.264407361616888E-5, LHT:1:state:t:e=-2.79185038641509E-5, LHH:1:state:t:var=-9.070130678262706E-5, BB:exists:object:t=-5.0265729406926E-4, LHT:1:object:t:p=-5.0265729406926E-4, LHH:1:object:t:you:p=-5.0265729406926E-4, BB:forall:state:t=-1.2743568734816711E-4, BB:In:t:state:t=-1.473474404530981E-4, BB:In:t:forall=-1.2743568734816711E-4, BB:On:t:object:t=-6.371784367408356E-5, LHH:1:object:t:plate:d=-6.371784367408356E-5, LHT:0:On:t:e=-6.371784367408356E-5, LHH:0:On:t:var=-6.371784367408356E-5, LHH:1:On:t:the=-6.371784367408356E-5, LHT:0:In:t:e=-7.367372022654905E-5, LHH:0:In:t:var=-7.367372022654905E-5, LHT:1:In:t:d=-7.367372022654905E-5, LHH:1:In:t:cup:d=-7.367372022654905E-5, LHT:1:On:t:s=-6.278280291847617E-5, BB:exists:state:t=-1.991175310493099E-5, BB:In:t:exists=-1.991175310493099E-5, BB:object:t:object:t=-7.452923494662475E-4, LHT:1:object:t:s=-7.434414619564938E-4, LHH:1:object:t:empty:s=-7.434414619564938E-4, BB:state:t:state:t=-1.1916811375451847E-5, LHT:0:state:t:d=-1.1916811375451847E-5, LHH:0:state:t:cup:d=-1.1916811375451847E-5, LEX:504=1.227153454282831E-4, LEX:1005=1.6016072383859023E-4, LEX:141=-3.7290946430928995E-4, LEX:149=-3.7238288515695754E-4, LEX:861=1.152970890257321E-4, LEX:863=1.1591816163542017E-4, LEX:1007=1.861673006329514E-4, LEX:1009=1.7656248868760919E-4, LEX:872=-2.9159765524623265E-4, LEX:873=-2.85160596652944E-4, LEX:123=3.9245825977376117E-5, LEX:131=1.5510563703362355E-4, LEX:365=-5.0265729406926E-4, LEX:1006=1.8603290275027905E-4, LEX:1008=1.8151746518592075E-4, LEX:1028=-7.367372022654904E-5, LEX:1106=2.456246779641567E-4, LEX:419=-5.889726505843834E-5, LEX:1092=-3.163655304199272E-5, LEX:1096=-3.1044600052136495E-5, LEX:1130=-6.371784367408354E-5, LEX:1010=5.32094604714564E-4, LEX:1095=-7.628955095753051E-5}
10: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if the cup contains water
(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 water:q)))))
MakeLex parse time: 0.006 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
water  :- NP : water:q : 0.0
the cup  :- NP : cup:d : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1202
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (has:t $0 (the $1 (object:t $1 water:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.17195175514783384
the cup  :- NP : cup:d : 14 : 19.00298559923618
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 2.017259846938603
water  :- NP : water:q : 32 : 10.0
]
Second parse time: 0.007 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.17195175514783384
the cup  :- NP : cup:d : 14 : 19.00298559923618
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 2.017259846938603
water  :- NP : water:q : 32 : 10.0
]
Scale: 0.996551930321089
Update:
{BB:has:t:object:t=4.044315928300233E-5, LHT:0:object:t:e=3.3801454830660965E-5, LHH:0:object:t:var=3.3801454830660965E-5, LHT:1:object:t:d=3.379541239632129E-5, LHH:1:object:t:cup:d=3.379541239632129E-5, LHT:0:has:t:e=3.9862165818297575E-5, LHH:0:has:t:var=3.9862165818297575E-5, LHT:1:has:t:e=3.986211338380928E-5, LHH:1:has:t:the=3.986211338380928E-5, LEX:535=-1.4532935874849125E-5, LEX:545=-1.71157100874572E-5, LEX:14=3.388765437947857E-5, LEX:875=4.044306832782669E-5, LEX:502=-2.55274777395952E-5, LEX:874=4.0443159245495546E-5}
11: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if it contains coffee
(exists $0 (and (object:t $0 it:e) (has:t $0 (the $1 (object:t $1 coffee:q)))))
MakeLex parse time: 0.003 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
coffee  :- NP : coffee:q : 0.0
it  :- NP : it:e : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1202
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 it:e) (has:t $0 (the $1 (object:t $1 coffee:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.17199219821616166
it  :- NP : it:e : 5 : 10.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 2.0173002900978485
coffee  :- NP : coffee:q : 35 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.17199219821616166
it  :- NP : it:e : 5 : 10.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 2.0173002900978485
coffee  :- NP : coffee:q : 35 : 10.0
]
Scale: 0.9965419992625588
Update:
{LEX:472=-1.085449814860159E-5}
12: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if the plate contains syrup
(exists $0 (and (object:t $0 plate:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
MakeLex parse time: 0.004 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
syrup  :- NP : syrup:q : 0.0
the plate  :- NP : plate:d : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1202
First parse time: 0.003 sec.
CORRECT:(exists $0 (and (object:t $0 plate:d) (has:t $0 (the $1 (object:t $1 syrup:q)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.17199219821616166
the plate  :- NP : plate:d : 18 : 20.000539416157
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 2.0173002900978485
syrup  :- NP : syrup:q : 33 : 10.0
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.17199219821616166
the plate  :- NP : plate:d : 18 : 20.000539416157
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 2.0173002900978485
syrup  :- NP : syrup:q : 33 : 10.0
]
Scale: 0.9965320684019613
Update:
{}
13: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if the cup is empty
(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
MakeLex parse time: 0.009 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the cup  :- NP : cup:d : 0.0
empty  :- NP : empty:s : 0.0
Lex Size: 1202
First parse time: 0.013 sec.
CORRECT:(exists $0 (and (object:t $0 cup:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.7372883108038373
the cup  :- NP : cup:d : 14 : 19.003019486890558
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.3715217290789121
empty  :- NP : empty:s : 53 : 10.0
]
Second parse time: 0.009 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.7372883108038373
the cup  :- NP : cup:d : 14 : 19.003019486890558
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.3715217290789121
empty  :- NP : empty:s : 53 : 10.0
]
Scale: 0.9965221377392899
Update:
{BB:object:t:state:t=0.019526616466805192, LHT:0:object:t:e=-0.008520507550009208, LHH:0:object:t:var=-0.008520507550009208, LHT:1:object:t:d=-0.026239667176009552, LHH:1:object:t:cup:d=0.0011788178432222325, LHT:0:state:t:e=0.01833932513270758, LHH:0:state:t:var=0.01833932513270758, LHT:1:state:t:s=0.018366106061396086, LHH:1:state:t:empty:s=0.019269141811782367, LHT:1:state:t:e=-2.679693870658805E-5, LHH:1:state:t:var=-2.679693870658805E-5, BB:exists:state:t=-2.7864915963536738E-5, LHH:1:state:t:yellow:s=-9.030357503862018E-4, BB:exists:object:t=-0.0015408062968917053, LHH:1:object:t:bowl:d=-9.077056501460321E-4, BB:exists:exists=-0.02740369682139448, LHH:1:object:t:cups:d=-0.026504629227034348, LHT:1:object:t:p=-0.0015410388289182216, LHH:1:object:t:you:p=-0.0015410388289182216, LHT:0:object:t:s=-0.019264905820094776, LHH:0:object:t:empty:s=-0.019264905820094776, LEX:525=-4.59418958585531E-5, LEX:535=-7.456560934155092E-5, LEX:545=-5.1564532161501E-5, LEX:581=-4.3591368953319106E-5, LEX:593=-4.358810116581126E-5, LEX:528=-3.6463257483554856E-5, LEX:538=-3.642757827501486E-5, LEX:572=-4.137623174466064E-5, LEX:584=-4.625618078070384E-5, LEX:596=-1.501550752450304E-4, LEX:523=-4.837888368231851E-5, LEX:533=-9.673838277730411E-5, LEX:543=-9.673277261262439E-5, LEX:579=-4.83695071151193E-5, LEX:591=-4.836950734024772E-5, LEX:14=0.0011784161730990358, LEX:516=-8.839668353561897E-5, LEX:530=-1.343663079702653E-4, LEX:540=-1.3436269179536197E-4, LEX:574=-4.8374409835392804E-5, LEX:586=-4.8371997001519484E-5, LEX:598=-1.4510548054813509E-4, LEX:123=-0.017548299792352267, LEX:131=0.013560870498441211, LEX:135=-8.277770449102916E-5, LEX:143=-1.3869522195849787E-4, LEX:151=-1.0020488642981238E-4, LEX:172=-9.026505849745536E-4, LEX:311=-4.039416079060846E-4, LEX:365=-0.001136501840947138, LEX:373=-0.02609710456783958, LEX:547=0.013275733023692943, LEX:559=0.020358677372506965, LEX:577=-3.6500715182010726E-5, LEX:589=-3.646504715141196E-5, LEX:1106=-1.0061929355765164E-4, LEX:1075=-1.278888080459094E-4, LEX:1079=-1.3280118418472177E-4, LEX:518=0.020383235852494686, LEX:532=-4.358158142159072E-5, LEX:542=-4.3574978860360294E-5, LEX:558=-2.4447026563763354E-5, LEX:570=0.014209042892847846, LEX:576=-4.518496702766345E-5, LEX:588=-4.6599413700589626E-5, LEX:600=-7.720311801905576E-5, LEX:977=-0.02740369676072022, LEX:1020=-0.00598568598346311}
14: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if they are used
(exists $0 (and (object:t $0 they:e) (state:t $0 used:s)))
MakeLex parse time: 0.003 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
used  :- NP : used:s : 0.0
they  :- NP : they:e : 0.0
are  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
Lex Size: 1202
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 they:e) (state:t $0 used:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -1.1068569011239713
they  :- NP : they:e : 7 : 10.978741427260692
are  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 1046 : -3.2415901374314734E-5
used  :- NP : used:s : 54 : 10.308179051436102
]
Second parse time: 0.002 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -1.1068569011239713
they  :- NP : they:e : 7 : 10.978741427260692
are  :- S/NP\NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 1046 : -3.2415901374314734E-5
used  :- NP : used:s : 54 : 10.308179051436102
]
Scale: 0.996512207274539
Update:
{LHT:0:object:t:e=-0.00368426075129915, LHH:0:object:t:var=-0.00368426075129915, LHT:1:object:t:e=0.02195105864788803, LHH:1:object:t:they:e=0.02195105864788803, LHT:1:object:t:p=-0.025635319399187433, LHH:1:object:t:they:p=-0.021951058647887944, BB:exists:object:t=-0.003684260751299483, LHH:1:object:t:you:p=-0.003684260751299483, LEX:123=4.032741444101505E-4, LEX:131=0.003288708193839292, LEX:365=-0.003684260751299483, LEX:4=-0.021951058647887947, LEX:7=0.021949903003790534}
15: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if the kettle is white
(exists $0 (and (object:t $0 kettle:d) (state:t $0 white:s)))
MakeLex parse time: 0.003 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the kettle  :- NP : kettle:d : 0.0
white  :- NP : white:s : 0.0
Lex Size: 1202
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 white:s)))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.7169296334313304
the kettle  :- NP : kettle:d : 17 : 19.9999874990419
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.3511384932264174
white  :- NP : white:s : 52 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.7169296334313304
the kettle  :- NP : kettle:d : 17 : 19.9999874990419
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.3511384932264174
white  :- NP : white:s : 52 : 10.0
]
Scale: 0.9965022770077031
Update:
{BB:object:t:state:t=0.022915857784282654, LHT:0:object:t:e=-0.0010930011483735178, LHH:0:object:t:var=-0.0010930011483735178, LHT:1:object:t:d=-0.023474533933394007, LHT:0:state:t:e=0.02288878780527734, LHH:0:state:t:var=0.02288878780527734, LHT:1:state:t:s=0.022916402328974534, LHH:1:state:t:white:s=0.02377243763792418, BB:exists:object:t=-0.0013887700630029625, LHT:1:object:t:p=-0.0013887698732685818, LHH:1:object:t:you:p=-0.0013887698732685818, BB:exists:state:t=-2.761451413594475E-5, LHT:1:state:t:e=-2.7615626153605835E-5, LHH:1:state:t:var=-2.7615626153605835E-5, LHT:0:object:t:s=-0.0237713707593377, LHH:0:object:t:white:s=-0.0237713707593377, BB:exists:exists=-0.023474352789170615, LHH:1:object:t:bowl:d=-8.560353089495145E-4, LHH:1:state:t:yellow:s=-8.560353089495145E-4, LHH:1:object:t:cups:d=-0.022618317480219335, LEX:509=-1.2370906008828716E-5, LEX:561=1.3966335942256047E-5, LEX:123=-0.022109978194807273, LEX:131=0.013476171687775767, LEX:172=-8.560353089495143E-4, LEX:311=-3.343523234596222E-4, LEX:365=-0.0010544175498089596, LEX:373=-0.022283965156759716, LEX:547=0.012823385847199446, LEX:559=0.02033263241125759, LEX:518=0.020371681179954297, LEX:558=-2.5082257403038237E-5, LEX:570=0.014069796665299228, LEX:977=-0.02347435278916885, LEX:1020=-0.010942045251152043}
16: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if the mug is on the stove
(exists $0 (and (object:t $0 mug:d) (On:t $0 (the $1 (object:t $1 stove:f)))))
MakeLex parse time: 0.01 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
the stove  :- NP : stove:f : 0.0
the mug  :- NP : mug:d : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
on  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (On:t $4 ($2 $3)))))))) : 0.0
Lex Size: 1202
First parse time: 0.015 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (On:t $0 (the $1 (object:t $1 stove:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.17199219821616166
the mug  :- NP : mug:d : 16 : 19.999812967537817
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 1.5500980385656085
on  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (On:t $4 ($2 $3)))))))) : 1019 : 1.2720464751148606
the stove  :- NP : stove:f : 76 : 19.002074115758518
]
Second parse time: 0.009 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.17199219821616166
the mug  :- NP : mug:d : 16 : 19.999812967537817
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 1.5500980385656085
on  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (On:t $4 ($2 $3)))))))) : 1019 : 1.2720464751148606
the stove  :- NP : stove:f : 76 : 19.002074115758518
]
Scale: 0.9964923469387755
Update:
{BB:On:t:object:t=0.4237303209746238, LHT:0:object:t:e=0.0023531578013499237, LHH:0:object:t:var=0.0023531578013499237, LHT:1:object:t:d=2.74534714847619E-5, LHH:1:object:t:mug:d=2.7453475589905348E-5, LHT:0:On:t:e=0.39111790758619663, LHH:0:On:t:var=0.39111790758619663, LHT:1:On:t:e=0.39110490657476077, LHH:1:On:t:the=0.39110490657476077, LHT:1:object:t:f=0.002338707511910858, LHH:1:object:t:stove:f=0.0023387075138454954, LHT:1:object:t:e=-2.751084906859249E-5, LHH:1:object:t:var=-2.751084906859249E-5, BB:object:t:state:t=-0.004677133394171656, LHT:0:object:t:d=-1.4364607378854751E-5, LHH:0:object:t:mug:d=-1.4364607378854751E-5, LHT:0:state:t:e=-0.002338628109855629, LHH:0:state:t:var=-0.002338628109855629, BB:On:t:On:t=-0.0021876837425372454, LHT:0:On:t:d=-1.2992327198112561E-5, LHH:0:On:t:mug:d=-1.2992327198112561E-5, BB:IsNear:t:object:t=-0.39107795008923185, LHT:0:IsNear:t:e=-0.4192039378361227, LHH:0:IsNear:t:var=-0.4192039378361227, LHT:1:IsNear:t:e=-0.4192039378361227, LHH:1:IsNear:t:the=-0.4192039378361227, BB:IsNear:t:On:t=-0.028125987746890766, BB:In:t:state:t=-0.00467711153992542, LHT:1:state:t:s=-0.00233855576996271, LHH:1:state:t:IsOn:s=-0.00233855576996271, LHT:0:In:t:e=-0.00233855576996271, LHH:0:In:t:var=-0.00233855576996271, LHT:1:In:t:f=-0.00233855576996271, LHH:1:In:t:stove:f=-0.00233855576996271, BB:In:t:object:t=-0.00467706104219883, LEX:509=-1.1584783320151342E-5, LEX:876=0.04157386052426055, LEX:123=-0.02024565188353353, LEX:875=0.022592698554987967, LEX:1028=-0.00233855576996271, LEX:1012=0.02632059758945225, LEX:1014=0.057169929248410155, LEX:1016=0.0016934117429620952, LEX:1018=0.31153658591497974, LEX:1020=0.0011669603926301516, LEX:1031=-0.33294767999332475, LEX:1033=-0.08625625784279788, LEX:1166=-0.020257238843503448, LEX:57=-0.00233855576996271, LEX:1013=-0.3245175620616022, LEX:1015=0.05716834563768686, LEX:1017=-0.05649201825428505, LEX:1019=0.3136560606402128, LEX:1021=0.0013874561662675468, LEX:1085=-0.0023655973978958466, LEX:1087=-0.028071989633428576}
17: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if the mug is red and dry
(exists $0 (and (object:t $0 mug:d) (state:t $0 red:s) (state:t $0 dry:s)))
MakeLex parse time: 0.006 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
dry  :- NP : dry:s : 0.0
the mug  :- NP : mug:d : 0.0
dry  :- NP : dry:s : 0.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
red  :- NP : red:s : 0.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 0.0
Lex Size: 1202
First parse time: 0.011 sec.
CORRECT:(exists $0 (and (object:t $0 mug:d) (state:t $0 red:s) (state:t $0 dry:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -1.0900920212423562
the mug  :- NP : mug:d : 16 : 19.999812967537817
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.6311472035793959
red  :- NP : red:s : 47 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.15175776052969617
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -1.0900920212423562
the mug  :- NP : mug:d : 16 : 19.999812967537817
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.6311472035793959
red  :- NP : red:s : 47 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.15175776052969617
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9964824170677508
Update:
{BB:object:t:state:t=-0.017075027448786393, BB:state:t:state:t=1.2712010024807638E-4, LHT:0:object:t:e=-0.007860762209416044, LHH:0:object:t:var=-0.007860762209416044, LHT:1:object:t:d=-0.004300537636025294, LHT:0:state:t:e=4.840485386916088E-5, LHH:0:state:t:var=4.840485386916088E-5, LHT:1:state:t:s=5.729505285085809E-5, LHH:1:state:t:dry:s=5.729518648009943E-5, BB:object:t:object:t=-0.008601074075748732, LHH:1:object:t:cup:d=-0.004300537082198991, LHT:1:object:t:s=-5.729518640439642E-5, LHH:1:object:t:dry:s=-5.729518640439642E-5, BB:exists:object:t=-0.0034966656884572187, LHT:1:object:t:p=-0.0034966644983971664, LHH:1:object:t:you:p=-0.0034966644983971664, BB:In:t:state:t=-1.1455681432688708E-4, LHT:0:In:t:e=-5.727840716344354E-5, LHH:0:In:t:var=-5.727840716344354E-5, LHT:1:In:t:e=-5.727840716344354E-5, LHH:1:In:t:the=-5.727840716344354E-5, BB:In:t:object:t=-1.145555846895812E-4, LEX:123=3.6360954414285424E-4, LEX:131=0.0031985783237359275, LEX:365=-0.0034966644514523425, LEX:1027=-5.727840716344355E-5, LEX:546=-0.004300537037874365, LEX:600=0.004363663659205291, LEX:1020=-5.7277792450343675E-5, LEX:887=-5.727840716344356E-5, LEX:1022=6.312662133103071E-5}
18: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if the kettle is empty and cool
(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s) (state:t $0 cool:s)))
MakeLex parse time: 0.007 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
cool  :- NP : cool:s : 0.0
the kettle  :- NP : kettle:d : 0.0
cool  :- NP : cool:s : 0.0
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 0.0
empty  :- NP : empty:s : 0.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 0.0
Lex Size: 1202
First parse time: 0.013 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 empty:s) (state:t $0 cool:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -1.0868934429186203
the kettle  :- NP : kettle:d : 17 : 19.9999874990419
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.6267835399201906
empty  :- NP : empty:s : 53 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.15169463390836513
cool  :- NP : cool:s : 49 : 10.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -1.0868934429186203
the kettle  :- NP : kettle:d : 17 : 19.9999874990419
is  :- S|NP/NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 600 : -0.6267835399201906
empty  :- NP : empty:s : 53 : 10.0
and  :- S/NP\NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 e (exists $3 (and (object:t $3 $1) ($0 $3) (state:t $3 $2)))))) : 1022 : -0.15169463390836513
cool  :- NP : cool:s : 49 : 10.0
]
Scale: 0.9964724873946229
Update:
{BB:object:t:state:t=-0.01648059856890358, BB:state:t:state:t=1.652164167343584E-4, LHT:0:object:t:e=-0.007640629697042836, LHH:0:object:t:var=-0.007640629697042836, LHT:1:object:t:d=-0.004161454729350209, LHT:0:state:t:e=6.761066019202418E-5, LHH:0:state:t:var=6.761066019202418E-5, LHT:1:state:t:s=7.648242311180494E-5, LHH:1:state:t:cool:s=7.648260160775297E-5, BB:object:t:object:t=-0.008322907897227852, LHH:1:object:t:cup:d=-0.004161454004348408, LHT:1:object:t:s=-7.648260149411693E-5, LHH:1:object:t:cool:s=-7.648260149411693E-5, BB:exists:object:t=-0.003396568279645772, LHT:1:object:t:p=-0.0033965667259833387, LHH:1:object:t:you:p=-0.0033965667259833387, BB:In:t:state:t=-1.5292041817211284E-4, LHT:0:In:t:e=-7.646020908605642E-5, LHH:0:In:t:var=-7.646020908605642E-5, LHT:1:In:t:e=-7.646020908605642E-5, LHH:1:In:t:the=-7.646020908605642E-5, BB:In:t:object:t=-1.529187764922616E-4, LEX:123=3.5442960380118897E-4, LEX:131=0.0031268403319363765, LEX:365=-0.003396566664694204, LEX:1027=-7.646020908605642E-5, LEX:546=-0.004161453948613927, LEX:600=0.004243642511306942, LEX:1020=-7.645938838699663E-5, LEX:887=-7.646020908605642E-5, LEX:1022=8.218856269285876E-5}
19: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if the glass is used and on the floor
(exists $0 (and (object:t $0 kettle:d) (state:t $0 used:s) (On:t $0 (the $1 (object:t $1 floor:lo)))))
MakeLex parse time: 0.01 sec.
Adding:
if the glass is  :- S/NP/(NP|NP)/NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (On:t $3 ($1 $2)) (object:t $3 kettle:d) (state:t $3 $0)))))) : 0.0
used  :- NP : used:s : 0.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1.9135499999999999
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
the floor  :- NP : floor:lo : 0.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1.9135499999999999
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1202
First parse time: 0.028 sec.
CORRECT:(exists $0 (and (object:t $0 kettle:d) (state:t $0 used:s) (On:t $0 (the $1 (object:t $1 floor:lo)))))
Using:
[LexEntries and scores:
if the glass is  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 kettle:d) (state:t $2 $0) (On:t $2 $1))))) : 880 : 0.7088075666623193
used  :- NP : used:s : 54 : 10.308179051436102
and  :- NP/NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1025 : 2.9403444130843712
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 1.733692597856907
the floor  :- NP : floor:lo : 67 : 20.0
]
Second parse time: 0.01 sec.
Best LexEntries:
[LexEntries and scores:
if the glass is  :- S/NP/(NP|NP)/NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (On:t $3 ($1 $2)) (object:t $3 kettle:d) (state:t $3 $0)))))) : 879 : 4.188230667543846
used  :- NP : used:s : 54 : 10.308179051436102
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1023 : 3.6982758410136536
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 1.733692597856907
the floor  :- NP : floor:lo : 67 : 20.0
]
Scale: 0.9964625579193862
Update:
{BB:object:t:state:t=-0.0077127752836393315, BB:On:t:object:t=0.2956600469789389, BB:On:t:state:t=0.2956682743417405, LHT:0:object:t:e=0.004330495374791432, LHH:0:object:t:var=0.004330495374791432, LHT:1:object:t:d=-2.9422514525344196E-5, LHH:1:object:t:kettle:d=0.14783413717087024, LHT:0:state:t:e=-0.009040254618428134, LHH:0:state:t:var=-0.009040254618428134, LHT:1:state:t:s=-0.004230629425452772, LHT:0:On:t:e=0.07209161968598025, LHH:0:On:t:var=0.07209161968598025, LHT:1:On:t:e=0.07206872674200365, LHH:1:On:t:the=0.07206872674200365, LHT:1:object:t:lo=0.004632732700640285, LHH:1:object:t:floor:lo=0.004632732700640285, BB:exists:exists=-0.002040345346582642, LHH:1:object:t:glass:d=-0.1478341371708701, LHT:0:object:t:lo=-3.837094873484072E-4, LHH:0:object:t:floor:lo=-3.837094873484072E-4, LHT:1:object:t:e=-4.06602431247942E-4, LHH:1:object:t:var=-4.06602431247942E-4, LHT:0:On:t:lo=-2.2892943976529943E-5, LHH:0:On:t:floor:lo=-2.2892943976529943E-5, BB:object:t:object:t=-2.7218208399553654E-4, LHT:1:object:t:f=-2.4175998583663037E-4, LHH:1:object:t:tv:f=-2.4175998583663037E-4, BB:exists:object:t=-2.748741729182256E-5, BB:exists:state:t=-0.008455860410965526, BB:In:t:state:t=-0.2905374540566446, BB:In:t:exists=-0.008455852940876805, LHT:1:state:t:e=-0.004809625198353011, LHH:1:state:t:var=-0.004809625198353011, LHT:0:In:t:e=-0.1452687270283223, LHH:0:In:t:var=-0.1452687270283223, LHT:1:In:t:e=-0.14104259676430705, LHH:1:In:t:the=-0.14104259676430705, BB:In:t:object:t=-0.2820820954976399, BB:On:t:exists=-5.818884244322663E-4, BB:state:t:state:t=-0.009615490349823227, LHH:1:object:t:cup:d=-1.9451616372971736E-5, LHH:1:state:t:IsOn:s=-0.004226130264015246, LHT:1:In:t:lo=-0.004226130264015246, LHH:1:In:t:floor:lo=-0.004226130264015246, LEX:607=-1.393474329728421E-5, LEX:880=-0.8388133731443366, LEX:505=-1.0247894586727945E-5, LEX:519=-3.1924383771235807E-5, LEX:15=-0.14778059306916608, LEX:606=0.0026385972943752107, LEX:608=-0.013597977103065269, LEX:123=-1.2815210742555866E-5, LEX:131=-0.0017772690163465094, LEX:547=-5.08378896295966E-5, LEX:559=-8.334094886550037E-5, LEX:875=-5.716207879413919E-4, LEX:1027=-0.10967981767025284, LEX:1028=-0.035588909358069507, LEX:9=-5.354410170402925E-5, LEX:518=-9.084431839653521E-5, LEX:546=-1.9451616295976536E-5, LEX:570=-0.0018312312163095055, LEX:600=-0.004788293558615638, LEX:1020=-0.14109433974172136, LEX:54=1.327359591181394E-5, LEX:930=-2.7504696760408635E-4, LEX:942=-0.0014669184957065, LEX:978=-2.0013882434439923E-4, LEX:988=-4.136738986047874E-5, LEX:1022=-0.004807745174911614, LEX:1023=0.5824128127707929, LEX:1024=0.011908391449614919, LEX:1025=-0.5318042672773637, LEX:1026=-0.04476601750768098, LEX:57=-0.004226200046519398, LEX:1013=0.08586179641074004, LEX:1017=0.005089193093445935, LEX:1019=-4.693620788852804E-4, LEX:1021=-1.125066036428396E-4, LEX:1085=-0.03572834031074732, LEX:1087=-0.03945520143559083, LEX:879=0.9866607839111186}
20: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
if the plate is dirty and in the refrigerator
(exists $0 (and (object:t $0 plate:d) (state:t $0 dirty:s) (In:t $0 (the $1 (object:t $1 refrigerator:f)))))
MakeLex parse time: 0.009 sec.
Adding:
if  :- S/NP/(NP|NP)/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and (In:t $4 ($2 $3)) ($0 $4) (state:t $4 $1))))))) : 0.0
dirty  :- NP : dirty:s : 0.0
the refrigerator  :- NP : refrigerator:f : 0.0
the plate  :- NP : plate:d : 0.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1.9135499999999999
in  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 0.0
Lex Size: 1202
First parse time: 0.022 sec.
CORRECT:(exists $0 (and (object:t $0 plate:d) (state:t $0 dirty:s) (In:t $0 (the $1 (object:t $1 refrigerator:f)))))
Using:
[LexEntries and scores:
if  :- S/NP/(NP|NP)/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and (In:t $4 ($2 $3)) ($0 $4) (state:t $4 $1))))))) : 1027 : -0.8657775948027583
the plate  :- NP : plate:d : 18 : 20.000539416157
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.5810000049921515
dirty  :- NP : dirty:s : 55 : 10.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1023 : 4.280688653784447
in  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1047 : -0.2948362926760189
the refrigerator  :- NP : refrigerator:f : 75 : 20.000040717840758
]
Second parse time: 0.009 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/(NP|NP)/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and (In:t $4 ($2 $3)) ($0 $4) (state:t $4 $1))))))) : 1027 : -0.8657775948027583
the plate  :- NP : plate:d : 18 : 20.000539416157
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.5810000049921515
dirty  :- NP : dirty:s : 55 : 10.0
and  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $2 $1)))) : 1023 : 4.280688653784447
in  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1047 : -0.2948362926760189
the refrigerator  :- NP : refrigerator:f : 75 : 20.000040717840758
]
Scale: 0.9964526286420343
Update:
{BB:object:t:state:t=0.035329082631234646, BB:In:t:object:t=0.06957472433060016, BB:In:t:state:t=0.06955163478913563, LHT:0:object:t:e=-0.002355269793341421, LHH:0:object:t:var=-0.002355269793341421, LHT:1:object:t:d=-5.640612956860482E-4, LHT:0:state:t:e=5.294156024086792E-4, LHH:0:state:t:var=5.294156024086792E-4, LHT:1:state:t:s=5.417324187411652E-4, LHH:1:state:t:dirty:s=5.639961778119126E-4, LHT:0:In:t:e=0.034775817394567816, LHH:0:In:t:var=0.034775817394567816, LHT:1:In:t:e=0.034775817394567816, LHH:1:In:t:the=0.034775817394567816, LHT:1:object:t:f=-0.0022920831785354498, LHH:1:object:t:refrigerator:f=2.259535752371194E-4, BB:exists:exists=-0.03705972112459351, LHT:0:object:t:f=-2.2595357522720288E-4, LHH:0:object:t:refrigerator:f=-2.2595357522720288E-4, LHT:1:object:t:e=-2.2595454693589078E-4, LHH:1:object:t:var=-2.2595454693589078E-4, BB:object:t:object:t=-0.0025180694387384873, LHH:1:object:t:tv:f=-0.002518036753772193, BB:exists:object:t=-7.098091153050253E-4, LHT:1:object:t:p=-6.30711355794952E-5, LHH:1:object:t:you:p=-6.30711355794952E-5, BB:exists:state:t=-2.3861586852212053E-5, BB:In:t:exists=-2.3089541464610472E-5, LHT:1:state:t:e=-1.2316842136579221E-5, LHH:1:state:t:var=-1.2316842136579221E-5, LHT:0:object:t:s=-5.639714701001882E-4, LHH:0:object:t:dirty:s=-5.639714701001882E-4, LHH:1:object:t:bowl:d=-2.2263759070640986E-5, LHH:1:state:t:yellow:s=-2.2263759070640986E-5, LHH:1:object:t:cups:d=-5.417935610282104E-4, LEX:18=1.3391527802453021E-5, LEX:610=4.801037348071393E-4, LEX:612=0.0016012843471201162, LEX:123=-0.002259993151061999, LEX:131=-0.014725146809832756, LEX:172=-2.2263759070640986E-5, LEX:365=-5.5175256446338977E-5, LEX:373=-5.338976818950541E-4, LEX:547=-0.005920808459416778, LEX:559=-0.011237710492768772, LEX:1027=0.02999954063072635, LEX:1028=0.004776270616414936, LEX:12=-1.339767522918196E-5, LEX:518=-0.011244599809934858, LEX:570=-0.016491140513844683, LEX:977=-5.640573200988513E-4, LEX:1020=0.02830049243785035, LEX:930=-0.032086592962918124, LEX:942=-1.7118767787782234E-4, LEX:978=-0.002516728168924502, LEX:1023=0.025148390101574238, LEX:1024=-3.2457456458661766E-5, LEX:1025=0.0075994973640040615, LEX:1026=-2.1000696481007462E-5, LEX:1047=-0.002081388081929352}
21: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
for all mugs that contain water
(forall $0 (and (object:t $0 mugs:d) (has:t $0 (the $1 (object:t $1 water:q)))))
MakeLex parse time: 0.01 sec.
Adding:
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
water  :- NP : water:q : 0.0
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 0.0
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 0.0
contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
Lex Size: 1202
First parse time: 0.012 sec.
CORRECT:(forall $0 (and (object:t $0 mugs:d) (has:t $0 (the $1 (object:t $1 water:q)))))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.6120615726129701
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 883 : 1.5859640333724108
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 3.2626310499810076
contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 796 : 0.9019602469988997
water  :- NP : water:q : 32 : 10.0
]
Second parse time: 0.011 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.6120615726129701
all mugs  :- S/NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 mugs:d) (has:t $2 ($0 $1)))))) : 883 : 1.5859640333724108
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 3.2626310499810076
contain  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 796 : 0.9019602469988997
water  :- NP : water:q : 32 : 10.0
]
Scale: 0.9964426995625616
Update:
{BB:has:t:object:t=0.10800739656024094, LHT:0:object:t:e=0.11590205859350518, LHH:0:object:t:var=0.11590205859350518, LHT:1:object:t:d=0.08435359276752297, LHH:1:object:t:mugs:d=0.08935314708297848, LHT:0:has:t:e=0.06666379073233508, LHH:0:has:t:var=0.06666379073233508, LHT:1:has:t:e=0.06726810365522617, LHH:1:has:t:the=0.06726940762970049, LHT:1:object:t:q=0.016140394863660007, LHH:1:object:t:water:q=0.016140394863660007, LHT:0:object:t:q=-0.015528810593470922, LHH:0:object:t:water:q=-0.015528810593470922, LHT:1:object:t:e=-1.2073963115052579E-4, LHH:1:object:t:var=-9.589380601946108E-5, BB:object:t:object:t=-0.008407615319726901, LHH:1:object:t:mug:d=-0.0049995543154554645, LHH:1:object:t:the=-2.484582513106472E-5, LHT:1:has:t:q=-6.085705371096089E-4, LHH:1:has:t:water:q=-6.085705371096089E-4, LEX:619=-0.0014247253249184235, LEX:635=1.2096157368182471E-5, LEX:643=-0.002399557933119572, LEX:659=-0.010730403761139857, LEX:675=-0.010681870900677336, LEX:691=-0.0013998550439952664, LEX:715=-2.631878809873813E-4, LEX:723=-2.4399990847937968E-4, LEX:731=-0.0013149330839018363, LEX:739=-2.4399990847937968E-4, LEX:747=-0.001309151238310435, LEX:755=1.1861768564626223E-5, LEX:771=-1.6243905224304014E-4, LEX:787=-0.002417942409520697, LEX:795=2.0966762464645334E-5, LEX:803=-0.002417942409520697, LEX:811=2.0786788476798993E-5, LEX:614=2.825488055765061E-5, LEX:622=-0.00157399326046747, LEX:630=8.783335526344908E-5, LEX:646=-0.002399365440420924, LEX:662=-0.002399365440420924, LEX:670=2.3177643986910285E-5, LEX:678=-0.006809898485941968, LEX:710=-1.5521747247439598E-4, LEX:718=-2.6285118876866436E-4, LEX:726=-4.407442022509742E-4, LEX:734=-2.6285118876866436E-4, LEX:742=-0.0013497312776739774, LEX:766=1.809776226150843E-5, LEX:774=-0.0016035574118618558, LEX:790=-0.004008018508752206, LEX:806=-0.011664555583794827, LEX:617=-0.0014247253249184235, LEX:633=1.2096157368182471E-5, LEX:641=-0.002400220143682147, LEX:657=-0.004768913404940325, LEX:673=-0.004758745849454852, LEX:689=-6.926741147914424E-4, LEX:713=-2.6295870165652806E-4, LEX:721=-2.4399990847937968E-4, LEX:729=-5.320463567398821E-4, LEX:737=-2.4399990847937968E-4, LEX:745=-5.302450095117498E-4, LEX:753=0.0012189159409737697, LEX:769=-7.387581987448119E-5, LEX:785=-0.002417942409520697, LEX:801=-0.002417942409520697, LEX:624=-0.00157399326046747, LEX:648=-0.0023993540302807157, LEX:664=-0.0023993540302807157, LEX:672=1.5787354824822075E-5, LEX:680=-8.346370533278921E-4, LEX:712=-1.821093691894166E-4, LEX:720=-2.6284961863797874E-4, LEX:728=-3.605920306810376E-4, LEX:736=-2.6284961863797874E-4, LEX:744=-0.0011062805670561176, LEX:768=1.809776226150843E-5, LEX:776=-0.0018404940144873172, LEX:792=-0.003359922239786285, LEX:808=-0.009845606720495904, LEX:615=-0.0020621827532794255, LEX:631=-0.001684197265551467, LEX:639=-0.0017981215631801262, LEX:655=-0.0069401833691506805, LEX:671=-0.0068975501323345284, LEX:687=-0.0013998550439952664, LEX:695=-0.0020780972652646246, LEX:711=-2.2575037571192325E-4, LEX:719=-2.4400012582519393E-4, LEX:727=-4.116140316601805E-4, LEX:735=-2.4400012582519393E-4, LEX:743=-4.0667146749536826E-4, LEX:751=1.1861768564626223E-5, LEX:767=-1.6243905224304014E-4, LEX:783=-0.0024179441677844664, LEX:799=-0.0024179441677844664, LEX:883=0.11649405300389554, LEX:626=-0.0028342649018841524, LEX:634=1.8057688587679714E-5, LEX:650=-0.002399365440420924, LEX:666=-0.002399365440420924, LEX:682=-0.0014307989545838062, LEX:706=-0.0029240938900249097, LEX:714=-2.4399723308574285E-4, LEX:722=-2.6285118876866436E-4, LEX:730=-2.4294912705929538E-4, LEX:738=-2.6285118876866436E-4, LEX:746=-7.463748860970145E-4, LEX:754=6.014824555826066E-4, LEX:770=5.780160942085801E-4, LEX:778=-0.002417917138579616, LEX:794=-0.002412727765230475, LEX:810=-0.007188000002478662, LEX:613=0.05870915706898431, LEX:629=0.05108662886552076, LEX:637=-0.0015364052599551026, LEX:653=-0.008413755376455837, LEX:669=-0.008341667910164718, LEX:685=-0.0013998550439952664, LEX:709=-2.2372284271364237E-4, LEX:717=-2.4399990847937968E-4, LEX:725=-3.434640036201619E-4, LEX:733=-2.4399990847937968E-4, LEX:741=-3.381703717871301E-4, LEX:749=1.1861768564626223E-5, LEX:765=-1.6243905224304014E-4, LEX:781=-0.002417942409520697, LEX:797=-0.002417942409520697, LEX:27=-0.0049995543154554645, LEX:868=0.1165211528204776, LEX:628=-0.00157399326046747, LEX:636=1.8057688587679714E-5, LEX:652=-0.002399365440420924, LEX:660=-0.002250563131974101, LEX:668=-0.002399365440420924, LEX:676=-0.002329677107656226, LEX:684=-0.0014307989545838062, LEX:716=-2.4402005691904978E-4, LEX:724=-2.6285118876866436E-4, LEX:732=-0.016799194991622305, LEX:740=-2.6285118876866436E-4, LEX:748=-0.017570197012811473, LEX:772=1.809776226150843E-5, LEX:780=-0.0024839740834094485, LEX:796=0.07186255270864346, LEX:812=0.05968156410480835, LEX:696=1.0034374517539296E-5}
22: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
for all bowls that are green
(forall $0 (and (object:t $0 bowls:d) (state:t $0 green:s)))
MakeLex parse time: 0.003 sec.
Adding:
green  :- NP : green:s : 0.0
Lex Size: 1202
First parse time: 0.004 sec.
CORRECT:(forall $0 (and (object:t $0 bowls:d) (state:t $0 green:s)))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.6707707296819545
all bowls that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 814 : 0.6908464044824981
green  :- NP : green:s : 51 : 10.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.6707707296819545
all bowls that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 bowls:d) (state:t $1 $0)))) : 814 : 0.6908464044824981
green  :- NP : green:s : 51 : 10.0
]
Scale: 0.9964327706809623
Update:
{BB:object:t:state:t=-0.049948874501874956, LHT:0:object:t:e=-0.018997669228520902, LHH:0:object:t:var=-0.018997669228520902, LHT:1:object:t:d=-0.018997678129268652, BB:object:t:object:t=-0.033299249667916433, LHH:1:object:t:mugs:d=-0.018997678129268395, BB:has:t:object:t=-0.0023480532953101775, LHT:0:has:t:e=-0.0023480545395179746, LHH:0:has:t:var=-0.0023480545395179746, LHT:1:has:t:e=-0.0023480545395179746, LHH:1:has:t:the=-0.0023480545395179746, LEX:291=4.461154268991175E-4, LEX:813=0.0025255913929493365, LEX:814=0.012129988674158675, LEX:815=-0.001716708960987153, LEX:817=-0.004986569821681843, LEX:816=-0.0021853673523527938, LEX:818=-0.006213067080059054, LEX:655=8.738927653917832E-4, LEX:671=8.549764131846137E-4, LEX:727=-0.004522628954338818, LEX:743=-0.004408820232505584, LEX:791=-6.085783301063889E-4, LEX:807=-5.872707430676999E-4, LEX:613=0.006666276325850743, LEX:629=0.007989304985465151, LEX:653=0.0010887165697494978, LEX:669=0.0010783874355080945, LEX:725=-0.003885939365048937, LEX:741=-0.0038322344067557084, LEX:789=-5.829696937167515E-4, LEX:805=-5.692345284193369E-4}
23: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
for all glasses that are empty
(forall $0 (and (object:t $0 glasses:d) (state:t $0 empty:s)))
MakeLex parse time: 0.003 sec.
Adding:
empty  :- NP : empty:s : 0.0
Lex Size: 1202
First parse time: 0.004 sec.
CORRECT:(forall $0 (and (object:t $0 glasses:d) (state:t $0 empty:s)))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.6774370060078052
all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 820 : 0.28811968805772536
empty  :- NP : empty:s : 53 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.6774370060078052
all glasses that are  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 glasses:d) (state:t $1 $0)))) : 820 : 0.28811968805772536
empty  :- NP : empty:s : 53 : 10.0
]
Scale: 0.99642284199723
Update:
{BB:object:t:state:t=-0.06499774084959589, LHT:0:object:t:e=-0.02470283577679981, LHH:0:object:t:var=-0.02470283577679981, LHT:1:object:t:d=-0.024702964987063734, BB:object:t:object:t=-0.04333182723306372, LHH:1:object:t:mugs:d=-0.024702964987063813, BB:has:t:object:t=-0.0030370513705319543, LHT:0:has:t:e=-0.003037052934124041, LHH:0:has:t:var=-0.003037052934124041, LHT:1:has:t:e=-0.003037052934124041, LHH:1:has:t:the=-0.003037052934124041, LEX:292=6.626233983554153E-4, LEX:819=0.0036876863648657564, LEX:820=0.013169351111019554, LEX:821=-0.002008219389508531, LEX:823=-0.005479473288546501, LEX:822=-0.0027107487362710075, LEX:824=-0.007321248024133094, LEX:655=0.0016433495168905136, LEX:671=0.0015656608438572928, LEX:727=-0.005994039275331285, LEX:743=-0.005690892964829097, LEX:791=-8.021691795126475E-4, LEX:807=-7.538363602285932E-4, LEX:613=0.008179251031945731, LEX:629=0.00867778800753166, LEX:653=0.0020283452691942775, LEX:669=0.0019460279870898878, LEX:725=-0.005104616412279847, LEX:741=-0.004876342258663132, LEX:789=-7.611470067512544E-4, LEX:805=-7.198988240394593E-4}
24: =========== r:1.0 p:1.0 (epoch:8 file:0 0)
for every cup that is dry
(forall $0 (and (object:t $0 cup:d) (state:t $0 dry:s)))
MakeLex parse time: 0.004 sec.
Adding:
dry  :- NP : dry:s : 0.0
Lex Size: 1202
First parse time: 0.007 sec.
WRONG: (forall $0 (and (object:t $0 plate:d) (On:t $0 (the $1 (state:t $1 dry:s)))))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.685616257039751
every  :- S|NP/(S|NP|NP)/(NP|NP|(S|NP|NP)) : (lambda $0 <<e,<e,t>>,<e,e>> (lambda $1 <e,<e,t>> (lambda $2 e (forall $3 (and (object:t $3 plate:d) (On:t $3 ($0 $1 $2))))))) : 1167 : 0.0
every  :- S|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e (forall $2 (and (object:t $2 plate:d) (On:t $2 ($0 $1)))))) : 1179 : 0.0
cup  :- NP|NP/(NP|NP) : (lambda $0 <e,e> (lambda $1 e ($0 $1))) : 869 : 1.4042880426570121
that  :- NP|NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (the $2 ($0 $1 $2)))) : 868 : 3.3791522028014853
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (state:t $1 $0))) : 588 : -0.03736942165158576
dry  :- NP : dry:s : 48 : 10.0
]
Second parse time: 0.004 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.685616257039751
every cup that is  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 cup:d) (state:t $1 $0)))) : 826 : 0.11001159257723012
dry  :- NP : dry:s : 48 : 10.0
]
Scale: 0.9964129135113591
Update:
{BB:object:t:state:t=0.9917140910450778, LHT:0:object:t:e=-0.05073127428711007, LHH:0:object:t:var=-0.05073127428711007, LHT:1:object:t:d=-0.0035378376001710832, LHH:1:object:t:cup:d=0.992859042364346, LHT:0:state:t:e=0.04749767988644002, LHH:0:state:t:var=0.04749767988644002, LHT:1:state:t:s=0.04607234940565499, LHH:1:state:t:dry:s=0.04749901029050978, BB:On:t:object:t=-0.9963966567738148, LHH:1:object:t:plate:d=-0.9963966567738148, LHT:0:On:t:e=-0.9963966567738148, LHH:0:On:t:var=-0.9963966567738148, LHT:1:On:t:s=-0.0014266608848547276, LHH:1:On:t:the=-0.9963966567738148, LHT:0:object:t:s=-2.4190969878884443E-5, LHH:0:object:t:dry:s=-2.4190969878884443E-5, LHT:0:state:t:s=-0.0014253358926313046, LHH:0:state:t:dry:s=-0.0014253358926313046, LHH:1:state:t:var=-0.0014266662967010765, LHT:1:On:t:e=-0.9949699958889597, LHT:1:object:t:s=-0.046050534310005435, LHH:1:object:t:dry:s=-0.046050534310005435, LHT:1:object:t:f=-0.0011438245001919728, LHH:1:object:t:tv:f=-0.0011438245001919728, LHT:1:object:t:e=-2.3268846620692526E-5, LHH:1:object:t:var=-2.3268846620692526E-5, LEX:867=-0.006472375144210832, LEX:613=-0.6202478266033317, LEX:1167=-0.20014231470732438, LEX:1179=-0.7962543420664903, LEX:869=-0.989924281629604, LEX:868=-0.989924281629604, LEX:536=-0.001877480617065765, LEX:546=-0.0016594781572071755, LEX:576=-0.0014250628468223162, LEX:588=-0.6074675475318154, LEX:600=-0.3367497203227481, LEX:947=-0.001143425266314811, LEX:1014=-2.316547292251305E-5, LEX:1018=-0.04584506248278302, LEX:1020=-2.041160381031766E-4, LEX:293=0.03284781928097039, LEX:825=0.1811718556904967, LEX:826=0.5718791526628982, LEX:827=0.05516879263393375, LEX:828=0.15534382357693838, LEX:629=0.3768970413829481, LEX:653=0.1067347189933213, LEX:669=0.10377789721755085}
25: =========== r:0.96 p:0.96 (epoch:8 file:0 0)
for every plate that is on the table
(forall $0 (and (object:t $0 plate:d) (On:t $0 (the $1 (object:t $1 table:f)))))
MakeLex parse time: 0.012 sec.
Adding:
that  :- S|NP/(S|NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,<e,t>> (lambda $3 e (forall $4 (and ($0 $1 $4) (On:t $4 (the $5 ($2 $5 $3))))))))) : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
Lex Size: 1203
First parse time: 0.04 sec.
CORRECT:(forall $0 (and (object:t $0 plate:d) (On:t $0 (the $1 (object:t $1 table:f)))))
Using:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.0653684304364193
every  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 1125 : 0.002253725346686311
plate  :- NP : plate:d : 12 : 10.00395416627602
that  :- S|NP/(S|NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,<e,t>> (lambda $3 e (forall $4 (and ($0 $1 $4) (On:t $4 (the $5 ($2 $5 $3))))))))) : 1202 : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 1.815789561997805
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 1.819554394267647
the table  :- NP : table:f : 73 : 20.0
]
Second parse time: 0.014 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 613 : 1.0653684304364193
every  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 1125 : 0.002253725346686311
plate  :- NP : plate:d : 12 : 10.00395416627602
that  :- S|NP/(S|NP|NP)\NP/(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,<e,t>> (lambda $3 e (forall $4 (and ($0 $1 $4) (On:t $4 (the $5 ($2 $5 $3))))))))) : 1202 : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 1.815789561997805
on  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $0 $1))) : 1013 : 1.819554394267647
the table  :- NP : table:f : 73 : 20.0
]
Scale: 0.9964029852233438
Update:
{BB:On:t:object:t=0.37806494293211385, LHT:0:object:t:e=0.7300428317897057, LHH:0:object:t:var=0.7300428317897057, LHT:1:object:t:d=0.3591974027171569, LHH:1:object:t:plate:d=0.3780954725169751, LHT:0:On:t:e=0.37751131312611463, LHH:0:On:t:var=0.37751131312611463, LHT:1:On:t:e=0.37751067370823516, LHH:1:On:t:the=0.37751063362969384, LHT:1:object:t:f=0.3523719716939003, LHH:1:object:t:table:f=0.35237216216558354, LHT:0:object:t:f=-0.018509278550129286, LHH:0:object:t:table:f=-0.018509278550129286, LHT:1:object:t:e=-6.531555920146335E-5, LHH:1:object:t:var=-6.531555920146335E-5, BB:has:t:object:t=-8.348564892744476E-4, LHT:0:has:t:e=-0.02535441200364258, LHH:0:has:t:var=-0.02535441200364258, LHT:1:has:t:e=-0.02535441200364258, LHH:1:has:t:the=-0.02535441200364258, BB:object:t:state:t=-0.019311697348795072, LHT:0:object:t:d=-2.949438772016714E-5, LHH:0:object:t:plate:d=-2.949438772016714E-5, LHH:1:object:t:cup:d=-0.01889806601049226, LHT:0:state:t:e=-0.02535180893218922, LHH:0:state:t:var=-0.02535180893218922, LHT:0:state:t:f=-0.35233901248930216, LHH:0:state:t:table:f=-0.35233901248930216, LHT:1:state:t:s=-0.3776907916494047, LHH:1:state:t:IsOn:s=-0.3776907515708637, BB:has:t:state:t=-0.025769164297364148, LEX:1117=-3.749290890626617E-4, LEX:1129=-0.3776931739460518, LEX:1122=0.016783426111697478, LEX:1164=0.050500292310139805, LEX:613=0.025352462550695034, LEX:677=-0.025354411519569235, LEX:1113=0.12032066783078306, LEX:1125=0.24091111374802632, LEX:1155=0.01678342611169748, LEX:12=0.37801141562676177, LEX:1202=0.31073389007105345, LEX:532=-3.2426350330101955E-4, LEX:542=-4.5229373200508125E-5, LEX:546=-0.018894237032806283, LEX:600=-0.3587965145380574, LEX:1014=-2.9493444912017862E-5, LEX:1018=0.3093236141080103, LEX:1020=0.0014415152728144852, LEX:57=-0.3776907515708636, LEX:1013=0.37831487013221476, LEX:1017=-7.237980331824345E-5, LEX:1085=-5.513670149966373E-4, LEX:1127=1.0017655446191487E-5, LEX:1163=1.4323650979163348E-5, LEX:868=1.5092654434310893E-5, LEX:1178=1.1042166190282131E-5}
26: =========== r:0.9615384615384616 p:0.9615384615384616 (epoch:8 file:0 0)
for all mugs that are in the sink
(forall $0 (and (object:t $0 mugs:d) (In:t $0 (the $1 (object:t $1 sink:f)))))
MakeLex parse time: 0.006 sec.
Adding:
for  :- S/S : (lambda $0 t $0) : 0.0
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 0.0
for  :- S/S : (lambda $0 t $0) : 0.0
the sink  :- NP : sink:f : 0.0
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 0.0
the sink  :- NP : sink:f : 0.0
Lex Size: 1203
First parse time: 0.006 sec.
CORRECT:(forall $0 (and (object:t $0 mugs:d) (In:t $0 (the $1 (object:t $1 sink:f)))))
Using:
[LexEntries and scores:
for  :- S/S : (lambda $0 t $0) : 629 : 2.0284303509024983
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 834 : 0.10482937687816254
the sink  :- NP : sink:f : 74 : 20.0
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
for  :- S/S : (lambda $0 t $0) : 629 : 2.0284303509024983
all mugs that are in  :- S/NP : (lambda $0 e (forall $1 (and (object:t $1 mugs:d) (In:t $1 (the $2 (object:t $2 $0)))))) : 834 : 0.10482937687816254
the sink  :- NP : sink:f : 74 : 20.0
]
Scale: 0.9963930571331779
Update:
{BB:In:t:object:t=-0.09501551654749195, LHT:0:object:t:e=-0.06780342778652934, LHH:0:object:t:var=-0.06780342778652934, LHT:1:object:t:d=-0.0679192368611239, LHH:1:object:t:mugs:d=-0.04298655459295656, LHT:0:In:t:e=0.025052155655052814, LHH:0:In:t:var=0.025052155655052814, LHT:1:In:t:e=0.02493268226816723, LHH:1:In:t:the=0.02493268226816723, LHT:1:object:t:f=1.1947338688536467E-4, LHH:1:object:t:sink:f=1.1947338688536467E-4, BB:object:t:object:t=-0.06000353602701515, BB:has:t:object:t=-0.007974574072479384, LHT:0:has:t:e=-0.007978238384770842, LHH:0:has:t:var=-0.007978238384770842, LHT:1:has:t:e=-0.007978238384770842, LHH:1:has:t:the=-0.007978238384770842, LHT:0:object:t:f=-1.1947338688557365E-4, LHH:0:object:t:sink:f=-1.1947338688557365E-4, LHT:0:In:t:f=-1.1947338688557365E-4, LHH:0:In:t:sink:f=-1.1947338688557365E-4, LHT:1:object:t:e=-1.23137699177031E-4, LHH:1:object:t:var=-1.23137699177031E-4, BB:On:t:exists=-0.024932682268167538, BB:object:t:state:t=-0.024932682268167538, LHH:1:object:t:mug:d=-0.024932682268167538, LHT:0:state:t:e=-0.024932682268167538, LHH:0:state:t:var=-0.024932682268167538, LHT:1:state:t:e=-0.024932682268167538, LHH:1:state:t:var=-0.024932682268167538, LHT:0:On:t:e=-0.024932682268167538, LHH:0:On:t:var=-0.024932682268167538, LHT:1:On:t:e=-0.024932682268167538, LHH:1:On:t:the=-0.024932682268167538, LEX:295=0.0029875402550763657, LEX:833=0.009062098210717753, LEX:834=0.05940013478213646, LEX:835=-0.012037525236085506, LEX:836=-0.03447956574988167, LEX:615=-0.024931566042223737, LEX:613=0.018788120207047385, LEX:629=0.049676660872154534, LEX:637=-5.1596274275984234E-5, LEX:653=0.010825494354541304, LEX:669=0.01062824779489106, LEX:709=-5.8873238370953723E-5, LEX:725=-0.030233947542206936, LEX:741=-0.0296518420080663, LEX:789=-0.004041714246108811, LEX:805=-0.0039238559521319345, LEX:27=-0.024932682268167538, LEX:1202=-0.024932682268167538, LEX:1046=-0.024932682268167538, LEX:1047=-0.024932682268167538}
27: =========== r:0.9629629629629629 p:0.9629629629629629 (epoch:8 file:0 0)
if the robot is grasping the mug
(exists $0 (and (object:t $0 robot:p) (IsGrasping:t $0 (the $1 (object:t $1 mug:d)))))
MakeLex parse time: 0.006 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
the mug  :- NP : mug:d : 0.0
the robot  :- NP : robot:p : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsGrasping:t $4 ($2 $3)))))))) : 0.0
Lex Size: 1203
First parse time: 0.007 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsGrasping:t $0 (the $1 (object:t $1 mug:d)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.19401327598320822
the robot  :- NP : robot:p : 1 : 20.000051228387758
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 2.1251131761058155
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsGrasping:t $4 ($2 $3)))))))) : 1030 : 0.004861686478888296
the mug  :- NP : mug:d : 16 : 19.999812967537817
]
Second parse time: 0.006 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.19401327598320822
the robot  :- NP : robot:p : 1 : 20.000051228387758
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 2.1251131761058155
grasping  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsGrasping:t $4 ($2 $3)))))))) : 1030 : 0.004861686478888296
the mug  :- NP : mug:d : 16 : 19.999812967537817
]
Scale: 0.9963831292408557
Update:
{LHT:0:object:t:e=0.003118579001631325, LHH:0:object:t:var=0.003118579001631325, LHT:1:object:t:p=0.0031185790016312145, LHH:1:object:t:robot:p=0.0031185790016312145, LHT:0:object:t:p=-0.003118579001631174, LHH:0:object:t:robot:p=-0.003118579001631174, LHT:1:object:t:e=-0.003118579001631174, LHH:1:object:t:var=-0.003118579001631174, LEX:884=2.866106556068774E-4, LEX:1014=-6.307216656335584E-5, LEX:1018=-2.2277542552177668E-4, LEX:1029=-0.0021722603439987337, LEX:1030=0.0018856496861694302}
28: =========== r:0.9642857142857143 p:0.9642857142857143 (epoch:8 file:0 0)
if the robot is near the refrigerator
(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 refrigerator:f)))))
MakeLex parse time: 0.008 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
the refrigerator  :- NP : refrigerator:f : 0.0
the robot  :- NP : robot:p : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
near  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 0.0
Lex Size: 1203
First parse time: 0.009 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 refrigerator:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.19401327598320822
the robot  :- NP : robot:p : 1 : 20.000051228387758
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 2.1248904006802936
near  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 1108 : 0.40556219384886555
the refrigerator  :- NP : refrigerator:f : 75 : 20.000040717840758
]
Second parse time: 0.009 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.19401327598320822
the robot  :- NP : robot:p : 1 : 20.000051228387758
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 2.1248904006802936
near  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 1108 : 0.40556219384886555
the refrigerator  :- NP : refrigerator:f : 75 : 20.000040717840758
]
Scale: 0.9963732015463711
Update:
{BB:IsNear:t:object:t=0.011156723694329462, LHT:0:object:t:e=6.530477549258748E-4, LHH:0:object:t:var=6.530477549258748E-4, LHT:1:object:t:p=6.528552435549555E-4, LHH:1:object:t:robot:p=6.528552435549555E-4, LHT:0:IsNear:t:e=0.011156723694329462, LHH:0:IsNear:t:var=0.011156723694329462, LHT:1:IsNear:t:e=0.011156723694329462, LHH:1:IsNear:t:the=0.011156723694329462, BB:On:t:object:t=-0.011156723694329521, LHT:0:On:t:e=-0.011156723694329521, LHH:0:On:t:var=-0.011156723694329521, LHT:1:On:t:e=-0.011156723694329521, LHH:1:On:t:the=-0.011156723694329521, LHT:1:object:t:e=-6.530510581124369E-4, LHH:1:object:t:var=-6.530510581124369E-4, LHT:0:object:t:p=-6.528552435548611E-4, LHH:0:object:t:robot:p=-6.528552435548611E-4, LEX:885=0.0019355293268617515, LEX:123=-0.002177040610128157, LEX:875=0.002178023001130521, LEX:1012=-0.003923384521694302, LEX:1014=-5.10207363505564E-4, LEX:1016=-0.005055024350751946, LEX:1018=0.009406423698520116, LEX:1020=3.2226709395438984E-5, LEX:1031=8.625765202167573E-5, LEX:1033=2.0649366515610777E-4, LEX:1166=-0.0021783148218832787, LEX:1032=-0.006049268821448149, LEX:1034=-0.004814703555703591, LEX:1108=0.008928443044409916}
29: =========== r:0.9655172413793104 p:0.9655172413793104 (epoch:8 file:0 0)
if the robot is close to the stove
(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
MakeLex parse time: 0.014 sec.
Adding:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 0.0
the stove  :- NP : stove:f : 0.0
the robot  :- NP : robot:p : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
close to  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 0.0
Lex Size: 1203
First parse time: 0.018 sec.
CORRECT:(exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 stove:f)))))
Using:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.19619129898433874
the robot  :- NP : robot:p : 1 : 20.000051228387758
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 2.1342968243788136
close to  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 1099 : 0.04657669853396998
the stove  :- NP : stove:f : 76 : 19.002074115758518
]
Second parse time: 0.013 sec.
Best LexEntries:
[LexEntries and scores:
if  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 875 : 0.19619129898433874
the robot  :- NP : robot:p : 1 : 20.000051228387758
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 2.1342968243788136
close to  :- S/NP\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 e (exists $4 (and ($0 $1 $4) (IsNear:t $4 ($2 $3)))))))) : 1099 : 0.04657669853396998
the stove  :- NP : stove:f : 76 : 19.002074115758518
]
Scale: 0.9963632740497186
Update:
{BB:IsNear:t:object:t=0.11322411685959267, LHT:0:object:t:e=0.0018562767556490585, LHH:0:object:t:var=0.0018562767556490585, LHT:1:object:t:p=0.0018560432025331005, LHH:1:object:t:robot:p=0.0018560432025331005, LHT:0:IsNear:t:e=0.11322411685959267, LHH:0:IsNear:t:var=0.11322411685959267, LHT:1:IsNear:t:e=0.11322411685959267, LHH:1:IsNear:t:the=0.11322411685959267, BB:On:t:object:t=-0.11322411685959294, LHT:0:On:t:e=-0.11322411685959294, LHH:0:On:t:var=-0.11322411685959294, LHT:1:On:t:e=-0.11322411685959294, LHH:1:On:t:the=-0.11322411685959294, LHT:1:object:t:e=-0.00185631007301273, LHH:1:object:t:var=-0.00185631007301273, LHT:0:object:t:p=-0.0018560432025330927, LHH:0:object:t:robot:p=-0.0018560432025330927, LEX:886=0.006877637685876794, LEX:509=-1.3472669411520772E-5, LEX:1=1.1374014583926318E-5, LEX:1035=-0.007207541215580713, LEX:1036=-0.00246846765206343, LEX:1099=0.05954210788829151, LEX:123=-0.022998334382653928, LEX:875=0.02300874761765027, LEX:0=-1.1374067262805973E-5, LEX:1012=-0.041543518422278984, LEX:1014=-2.927589793705056E-4, LEX:1016=-0.048668774726566374, LEX:1018=0.05963247033664584, LEX:1020=2.0239653101623563E-4, LEX:1031=0.015509040596837097, LEX:1033=0.03129533063590866, LEX:1166=-0.023011823710747555, LEX:1049=-0.018801168742223887, LEX:1051=-0.009570699637377656, LEX:1053=-0.018801168742223887, LEX:1055=-0.009570699637377656, LEX:1050=-0.018801168742223873, LEX:1052=-0.009570699637377656, LEX:1054=-0.018801168742223873, LEX:1056=-0.009570699637377656}
30: =========== r:0.9666666666666667 p:0.9666666666666667 (epoch:8 file:0 0)
if the microwave is on and the robot is close to the microwave
(and (exists $0 (and (object:t $0 microwave:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 microwave:f))))))
MakeLex parse time: 0.063 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the microwave  :- NP : microwave:f : 0.0
on  :- NP : IsOn:s : 0.0
the microwave  :- NP : microwave:f : 0.0
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 1.2756999999999998
the robot  :- NP : robot:p : 0.0
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
close to  :- S/NP\S\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 t (lambda $4 e (and $3 (exists $5 (and ($0 $1 $5) (IsNear:t $5 ($2 $4)))))))))) : 0.0
Lex Size: 1203
First parse time: 0.393 sec.
CORRECT:(and (exists $0 (and (object:t $0 microwave:f) (state:t $0 IsOn:s))) (exists $0 (and (object:t $0 robot:p) (IsNear:t $0 (the $1 (object:t $1 microwave:f))))))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.7079180524617072
the microwave  :- NP : microwave:f : 77 : 19.9999581459028
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.3421022561747944
on  :- NP : IsOn:s : 57 : 8.572932661906185
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 2.1325419505321195
the robot  :- NP : robot:p : 1 : 20.00006260240234
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 2.1939292947154594
close to  :- S/NP\S\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 t (lambda $4 e (and $3 (exists $5 (and ($0 $1 $5) (IsNear:t $5 ($2 $4)))))))))) : 1057 : -0.005229722545171017
]
Second parse time: 0.066 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.7079180524617072
the microwave  :- NP : microwave:f : 77 : 19.9999581459028
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.3421022561747944
on  :- NP : IsOn:s : 57 : 8.572932661906185
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 2.1325419505321195
the robot  :- NP : robot:p : 1 : 20.00006260240234
is  :- S|NP|NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1018 : 2.1939292947154594
close to  :- S/NP\S\(NP|NP)\NP\(S|NP|NP) : (lambda $0 <e,<e,t>> (lambda $1 e (lambda $2 <e,e> (lambda $3 t (lambda $4 e (and $3 (exists $5 (and ($0 $1 $5) (IsNear:t $5 ($2 $4)))))))))) : 1057 : -0.005229722545171017
]
Scale: 0.9963533467508917
Update:
{BB:exists:exists=-0.4378067623430169, BB:object:t:state:t=-0.0016647906107169787, LHT:0:object:t:e=-0.09652313254130294, LHH:0:object:t:var=-0.09652313254130294, LHT:0:state:t:e=-0.0016846012411545995, LHH:0:state:t:var=-0.0016846012411545995, LHT:1:state:t:s=-0.00166481866597383, LHH:1:state:t:IsOn:s=7.257990876304432E-4, BB:IsNear:t:object:t=9.227929713407589E-5, LHT:1:object:t:p=-0.010084726097578845, LHH:1:object:t:robot:p=5.292527287392751E-4, LHT:0:IsNear:t:e=9.227929713407589E-5, LHH:0:IsNear:t:var=9.227929713407589E-5, LHT:1:IsNear:t:e=9.229649078315362E-5, LHH:1:IsNear:t:the=9.227929713407589E-5, LHT:0:object:t:p=-5.292527287395129E-4, LHH:0:object:t:robot:p=-5.292527287395129E-4, LHT:1:object:t:e=-5.4238863602612E-4, LHH:1:object:t:var=-5.4238863602612E-4, BB:exists:forall=-1.1304861460572E-4, BB:On:t:object:t=-1.0535642954942442E-4, LHT:0:On:t:e=-1.0555013928908289E-4, LHH:0:On:t:var=-1.0555013928908289E-4, LHT:1:On:t:e=-1.0555013928908289E-4, LHH:1:On:t:the=-1.0555013928908289E-4, LHH:1:state:t:var=-1.981696247926392E-5, BB:exists:object:t=-0.020183253732227822, BB:exists:state:t=-1.974845110096504E-5, LHT:1:state:t:e=-1.9799768830163116E-5, LHH:1:object:t:you:p=-0.010613978826318303, LHH:1:state:t:yellow:s=-0.0023906005599549653, LHT:1:object:t:d=-0.08713797328185553, LHH:1:object:t:bowl:d=-0.0023914229464412, LHH:1:object:t:cups:d=-0.08474619590654488, LHT:0:object:t:s=-7.126706374859262E-4, LHH:0:object:t:IsOn:s=-7.126706374859262E-4, LEX:1037=6.275217316308386E-5, LEX:561=2.1291049917977307E-5, LEX:77=-3.625543980129019E-5, LEX:1035=-1.3716467992643906E-5, LEX:1057=2.9527123824866383E-5, LEX:123=0.003911437534582434, LEX:131=0.04056469057604016, LEX:151=-1.0633031273217709E-5, LEX:172=-0.0023905383806181605, LEX:311=-0.004709029635396491, LEX:365=-0.005904829505433811, LEX:373=-0.08003609217656918, LEX:547=0.01726798386571941, LEX:559=0.03127449639613722, LEX:72=3.625543980083292E-5, LEX:518=0.03131373546960558, LEX:558=-1.7948023550381637E-5, LEX:570=0.039289686301404586, LEX:977=-0.08713566019258384, LEX:1014=-5.292527287395129E-4, LEX:1018=5.569984417236309E-4, LEX:1020=0.016565096306109185, LEX:1166=-1.0535642954942448E-4, LEX:57=1.3128450144354768E-5, LEX:1013=-1.1856293418551872E-5, LEX:887=9.229649076578668E-5, LEX:918=-9.207393670451053E-5, LEX:1049=-2.5867636491674E-5, LEX:1051=-1.3413220758955958E-5, LEX:1053=-2.5867636491674E-5, LEX:1055=-1.3413220758955958E-5, LEX:1050=-2.5867636491674004E-5, LEX:1052=-1.3413220758955958E-5, LEX:1054=-2.5867636491674004E-5, LEX:1056=-1.3413220758955958E-5}
31: =========== r:0.967741935483871 p:0.967741935483871 (epoch:8 file:0 0)
if the stove is not on and the mug contains coffee
(and (exists $0 (and (object:t $0 stove:f) (not (state:t $0 IsOn:s)))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coffee:q))))))
MakeLex parse time: 0.018 sec.
Adding:
if  :- S/S/(S|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (lambda $2 t (and (exists $3 (and ($0 $3) ($1 $3))) $2)))) : 0.0
not  :- S|NP/NP : (lambda $0 e (lambda $1 e (not (state:t $1 $0)))) : 3.333333333333333
on  :- NP : IsOn:s : 0.0
coffee  :- NP : coffee:q : 0.0
the stove  :- NP : stove:f : 0.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
not  :- S|NP/NP : (lambda $0 e (lambda $1 e (not (state:t $1 $0)))) : 3.333333333333333
on  :- NP : IsOn:s : 0.0
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 1.2756999999999998
coffee  :- NP : coffee:q : 0.0
the mug  :- NP : mug:d : 0.0
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 0.0
Lex Size: 1203
First parse time: 0.071 sec.
CORRECT:(and (exists $0 (and (object:t $0 stove:f) (not (state:t $0 IsOn:s)))) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 coffee:q))))))
Using:
[LexEntries and scores:
if  :- S/S/(S|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (lambda $2 t (and (exists $3 (and ($0 $3) ($1 $3))) $2)))) : 1101 : 0.009703411464307676
the stove  :- NP : stove:f : 76 : 19.002074115758518
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.5346623937730692
not  :- S|NP/NP : (lambda $0 e (lambda $1 e (not (state:t $1 $0)))) : 1063 : 3.607494051500218
on  :- NP : IsOn:s : 57 : 8.572945790356329
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 2.132634247022885
the mug  :- NP : mug:d : 16 : 19.999812967537817
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 2.0173002900978485
coffee  :- NP : coffee:q : 35 : 10.0
]
Second parse time: 0.02 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S/(S|NP)/(S|NP) : (lambda $0 <e,t> (lambda $1 <e,t> (lambda $2 t (and (exists $3 (and ($0 $3) ($1 $3))) $2)))) : 1101 : 0.009703411464307676
the stove  :- NP : stove:f : 76 : 19.002074115758518
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.5346623937730692
not  :- S|NP/NP : (lambda $0 e (lambda $1 e (not (state:t $1 $0)))) : 1063 : 3.607494051500218
on  :- NP : IsOn:s : 57 : 8.572945790356329
and  :- NP|NP : (lambda $0 e (the $1 (object:t $1 $0))) : 887 : 2.132634247022885
the mug  :- NP : mug:d : 16 : 19.999812967537817
contains  :- S/NP\(NP|NP)\NP : (lambda $0 e (lambda $1 <e,e> (lambda $2 e (exists $3 (and (object:t $3 $0) (has:t $3 ($1 $2))))))) : 874 : 2.0173002900978485
coffee  :- NP : coffee:q : 35 : 10.0
]
Scale: 0.9963434196498848
Update:
{BB:exists:exists=0.00751418284504277, BB:not:object:t=0.008091387206962366, LHT:0:state:t:e=-4.896534792701492E-4, LHH:0:state:t:var=-4.896534792701492E-4, LHT:1:state:t:s=-5.634096882337645E-4, LHH:1:state:t:IsOn:s=9.104316101573315E-5, LHT:0:has:t:e=-7.391906461889369E-5, LHH:0:has:t:var=-7.391906461889369E-5, LHT:1:has:t:e=-7.391906461889369E-5, LHH:1:has:t:the=-7.391906461889369E-5, BB:forall:state:t=-5.662866043724131E-4, BB:On:t:object:t=-0.008080462852834414, LHT:0:On:t:e=-0.008080462912425063, LHH:0:On:t:var=-0.008080462912425063, LHT:1:On:t:e=-0.007426010063175519, LHH:1:On:t:the=-0.008080462912425063, LHT:1:state:t:e=-1.728241147712383E-5, LHH:1:state:t:var=-6.682429254151869E-4, LHT:1:On:t:s=-6.544528492495405E-4, BB:exists:not=-1.0924294537763403E-5, BB:object:t:state:t=-1.443891438746929E-5, BB:exists:forall=-0.007514182848453603, LHT:0:state:t:s=-9.103856085068483E-5, LHH:0:state:t:IsOn:s=-9.103856085068483E-5, LEX:509=-1.2150349599875464E-5, LEX:76=1.3631755582652581E-5, LEX:123=-0.007502072108975546, LEX:547=-5.657147175043566E-4, LEX:1100=0.0036675990959163652, LEX:1101=0.004412861185884341, LEX:71=-1.363438620715832E-5, LEX:570=-1.091976672651526E-5, LEX:1020=0.008091380048527106, LEX:1166=-0.008080462852834418, LEX:1059=-0.007428309686060331, LEX:1061=0.001205325520013965, LEX:1063=0.006222943010361528, LEX:858=-0.008076970517639791, LEX:887=0.008080462912424424, LEX:454=-7.741139992992507E-5, LEX:502=-0.007999559177180107, LEX:874=0.008080462912424424}
32: =========== r:0.96875 p:0.96875 (epoch:8 file:0 0)
if the mug is green and the TV is on
(and (exists $0 (and (object:t $0 mug:d) (state:t $0 green:s))) (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s))))
MakeLex parse time: 0.068 sec.
Adding:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 0.0
the mug  :- NP : mug:d : 0.0
green  :- NP : green:s : 0.0
on  :- NP : IsOn:s : 0.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 0.0
the TV  :- NP : tv:f : 0.0
Lex Size: 1203
First parse time: 0.211 sec.
CORRECT:(and (exists $0 (and (object:t $0 mug:d) (state:t $0 green:s))) (exists $0 (and (object:t $0 tv:f) (state:t $0 IsOn:s))))
Using:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.67664355606557
the mug  :- NP : mug:d : 16 : 19.999812967537817
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.3107885207051888
green  :- NP : green:s : 51 : 10.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 966 : 0.4541503038902113
the TV  :- NP : tv:f : 79 : 20.0
is  :- S/NP\S\(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 901 : 0.19872891441565121
on  :- NP : IsOn:s : 57 : 8.572945790356329
]
Second parse time: 0.048 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP/NP : (lambda $0 e (lambda $1 e (exists $2 (and (object:t $2 $0) (state:t $2 $1))))) : 559 : -2.67664355606557
the mug  :- NP : mug:d : 16 : 19.999812967537817
is  :- S/NP\(S|NP) : (lambda $0 <e,t> (lambda $1 e ($0 $1))) : 518 : -1.3107885207051888
green  :- NP : green:s : 51 : 10.0
and  :- S/NP\S/NP : (lambda $0 e (lambda $1 t (lambda $2 e (and $1 (exists $3 (and (object:t $3 $0) (state:t $3 $2))))))) : 966 : 0.4541503038902113
the TV  :- NP : tv:f : 79 : 20.0
is  :- S/NP\S\(S|NP|S) : (lambda $0 <t,<e,t>> (lambda $1 t (lambda $2 e ($0 $1 $2)))) : 901 : 0.19872891441565121
on  :- NP : IsOn:s : 57 : 8.572945790356329
]
Scale: 0.9963334927466923
Update:
{BB:exists:exists=-0.8293684904186892, BB:object:t:state:t=0.004131535062911673, LHT:0:object:t:e=-0.2929349073376371, LHH:0:object:t:var=-0.2929349073376371, LHT:1:object:t:d=-0.28445459778003573, LHT:0:state:t:e=-0.001655685734364967, LHH:0:state:t:var=-0.001655685734364967, LHT:1:state:t:s=-0.0016152360211405625, LHH:1:state:t:green:s=9.563148606485679E-4, BB:has:t:object:t=-0.006392447928480824, LHT:0:has:t:e=-0.006392447928480824, LHH:0:has:t:var=-0.006392447928480824, LHT:1:has:t:e=-0.006392447928480824, LHH:1:has:t:the=-0.006392447928480824, LHH:1:object:t:cup:d=-0.12277479110250065, LHT:1:state:t:e=-4.04497320944954E-5, LHH:1:state:t:var=-4.044974307082011E-5, BB:exists:object:t=-0.13535738278279574, LHT:0:object:t:s=-9.615933131076258E-4, BB:exists:state:t=-9.473115174355947E-5, LHH:1:state:t:yellow:s=-0.0025768408498682213, LHH:1:object:t:bowl:d=-0.0015308309904480033, LHH:1:object:t:cups:d=-0.1601489730304921, LHT:1:object:t:p=-0.009442260336556993, LHH:1:object:t:you:p=-0.009442260336556993, LHH:0:object:t:green:s=-9.563063792146022E-4, BB:In:t:state:t=-2.2006848564205033E-4, LHT:0:In:t:e=-1.1003424282102517E-4, LHH:0:In:t:var=-1.1003424282102517E-4, BB:In:t:object:t=-2.200269422438386E-4, LHT:1:In:t:f=-1.1001209335735893E-4, LHH:1:In:t:tv:f=-1.1001209335735893E-4, LEX:519=1.006167559894113E-5, LEX:561=3.659036301117275E-5, LEX:16=-6.347609146730381E-5, LEX:123=0.0077817940144127495, LEX:131=0.07678621727438012, LEX:172=-0.0015306021873518882, LEX:218=-0.0010462175176802358, LEX:311=-0.0022573094805940198, LEX:349=-0.11831102484703532, LEX:365=-0.0042888645690391655, LEX:373=-0.03958038283953583, LEX:397=-0.0028960531245140657, LEX:547=0.029957572060331755, LEX:559=0.05543790024923442, LEX:1028=-1.1003424282102517E-4, LEX:10=6.347609146743997E-5, LEX:518=0.09483202505970108, LEX:522=-0.12225329572397621, LEX:546=-5.213927279645014E-4, LEX:558=-3.0439774664504867E-5, LEX:570=0.08087858242127564, LEX:600=-0.00587557200537952, LEX:901=0.0817917739324645, LEX:929=-0.12263919181094299, LEX:977=-0.03550892671547201, LEX:1020=0.02932909868149844, LEX:858=-0.006392447928480823, LEX:890=0.007585431778610647, LEX:918=1.513756238092755E-5, LEX:954=4.2913486016629286E-4, LEX:966=-0.001522635764596354, LEX:972=-1.1001265890016893E-4}
33: =========== r:0.9696969696969697 p:0.9696969696969697 (epoch:8 file:0 0)
if there exists a mug and the mug contains sugar
(and (exists $0 (object:t $0 mug:d)) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 sugar:q))))))
MakeLex parse time: 0.046 sec.
Adding:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 0.0
a mug  :- NP : mug:d : 0.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 0.5467285714285715
the mug  :- NP : mug:d : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
sugar  :- NP : sugar:q : 0.0
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
sugar  :- NP : sugar:q : 0.0
Lex Size: 1203
First parse time: 0.064 sec.
CORRECT:(and (exists $0 (object:t $0 mug:d)) (exists $0 (and (object:t $0 mug:d) (has:t $0 (the $1 (object:t $1 sugar:q))))))
Using:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.29848642034577727
a mug  :- NP : mug:d : 22 : 20.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : -1.0596586115370894
the mug  :- NP : mug:d : 16 : 19.99974949144635
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.438623429965523
sugar  :- NP : sugar:q : 30 : 10.0
]
Second parse time: 0.05 sec.
Best LexEntries:
[LexEntries and scores:
if there exists  :- S/NP : (lambda $0 e (exists $1 (object:t $1 $0))) : 122 : 0.29848642034577727
a mug  :- NP : mug:d : 22 : 20.0
and  :- S\S/(S|NP)/NP : (lambda $0 e (lambda $1 <e,t> (lambda $2 t (and $2 (exists $3 (and (object:t $3 $0) (has:t $3 (the $4 ($1 $4))))))))) : 858 : -1.0596586115370894
the mug  :- NP : mug:d : 16 : 19.99974949144635
contains  :- S|NP/NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 502 : 1.438623429965523
sugar  :- NP : sugar:q : 30 : 10.0
]
Scale: 0.9963235660413076
Update:
{BB:exists:exists=2.5648791946208538E-5, LHT:0:object:t:e=-0.0027146583649583908, LHH:0:object:t:var=-0.0027146583649583908, LHT:1:object:t:d=-0.00238409461282205, LHH:1:object:t:mug:d=1.6699209378066303E-4, BB:has:t:object:t=5.329711010998365E-4, LHT:0:has:t:e=-0.008842809083757171, LHH:0:has:t:var=-0.008842809083757171, LHT:1:has:t:e=-0.008842810754875058, LHH:1:has:t:the=-0.008842809105239099, LHT:0:object:t:d=-1.6612855453181243E-4, LHH:0:object:t:mug:d=-1.6612855453181243E-4, LHT:1:state:t:e=-5.333974161319709E-4, BB:object:t:state:t=-8.614583056800232E-4, LHT:0:state:t:e=-8.614565966616404E-4, LHH:0:state:t:var=-8.614565966616404E-4, LHH:1:state:t:the=-5.329938478039509E-4, BB:exists:object:t=-0.0020228438231958074, LHT:1:object:t:p=-4.926779491586868E-4, LHH:1:object:t:you:p=-4.926779491586868E-4, LHT:1:state:t:s=-3.2892195013312976E-4, LHH:1:state:t:yellow:s=-3.2892194886357113E-4, BB:object:t:object:t=-0.0014316741172646999, LHH:1:object:t:bowl:d=-9.856452130961627E-4, LHH:1:object:t:cups:d=-9.722388337544303E-4, LHH:1:object:t:cup:d=-5.932026597514851E-4, LEX:122=5.714161425037804E-4, LEX:125=2.9222994193782784E-4, LEX:129=4.88963140500527E-5, LEX:133=5.340040557325768E-4, LEX:137=8.165712528307744E-5, LEX:141=1.4043878257069783E-4, LEX:145=3.5403075399578093E-4, LEX:149=1.4023848745810675E-4, LEX:153=7.5972007267866E-5, LEX:200=-1.4459228007863325E-4, LEX:220=-1.0114211014522838E-4, LEX:240=-6.782707274676502E-4, LEX:423=-1.232287128238537E-4, LEX:124=1.9542251170111755E-5, LEX:128=-7.601256749993347E-4, LEX:132=-1.2980216822222376E-4, LEX:136=-1.1267496785178148E-4, LEX:140=3.433785844837838E-4, LEX:144=-1.0972407379895834E-4, LEX:148=3.413073486768115E-4, LEX:152=-5.05616796670117E-4, LEX:123=3.6168451070878975E-5, LEX:127=2.783944025218234E-5, LEX:131=2.2542712180123711E-4, LEX:135=4.9266139997631806E-5, LEX:139=3.4340829280624167E-4, LEX:143=7.21292235969217E-5, LEX:147=3.414533433046735E-4, LEX:151=3.8257818523003794E-5, LEX:198=-6.314113797399913E-5, LEX:208=-1.5531677464222623E-5, LEX:218=-1.946091927501658E-5, LEX:238=-2.878635486006885E-4, LEX:333=-2.554828771385918E-4, LEX:349=-7.036698162114042E-4, LEX:365=-4.104301133550707E-4, LEX:381=-5.0685923025489354E-5, LEX:389=-1.2992584439811583E-5, LEX:397=-2.9591143627146026E-5, LEX:571=-1.6197351514683582E-4, LEX:583=-2.0799579578673842E-4, LEX:595=-9.524543597761207E-5, LEX:419=-2.622129434294817E-4, LEX:859=-1.0948145548467864E-5, LEX:126=1.745535058518214E-4, LEX:130=-1.79712133189135E-4, LEX:134=6.241734055240908E-4, LEX:138=7.135349691042529E-5, LEX:142=1.4033211882097515E-4, LEX:146=3.160535024206774E-4, LEX:150=1.401308441708041E-4, LEX:154=-9.442641230143646E-4, LEX:858=5.329938450592091E-4, LEX:966=-5.329784511331813E-4, LEX:454=-0.009375744695126996, LEX:472=-5.329938475091261E-4, LEX:502=0.009908738544168473}
34: =========== r:0.9705882352941176 p:0.9705882352941176 (epoch:8 file:0 0)
if the television is on
(exists $0 (and (object:t $0 television:f) (state:t $0 IsOn:s)))
MakeLex parse time: 0.004 sec.
Adding:
if  :- S/S : (lambda $0 t $0) : 0.0
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 0.0
if  :- S/S : (lambda $0 t $0) : 0.0
on  :- NP : IsOn:s : 0.0
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 0.0
on  :- NP : IsOn:s : 0.0
Lex Size: 1203
First parse time: 0.007 sec.
CORRECT:(exists $0 (and (object:t $0 television:f) (state:t $0 IsOn:s)))
Using:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.9826926834406416
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 845 : 4.379408648782878
on  :- NP : IsOn:s : 57 : 8.572945790356329
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/S : (lambda $0 t $0) : 131 : -0.9826926834406416
the television is  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 television:f) (state:t $1 $0)))) : 845 : 4.379408648782878
on  :- NP : IsOn:s : 57 : 8.572945790356329
]
Scale: 0.9963136395337252
Update:
{BB:object:t:state:t=5.0143571553284773E-5, LHT:0:object:t:e=-0.005702021862554485, LHH:0:object:t:var=-0.005702021862554485, LHH:1:object:t:television:f=0.041270432104172285, LHT:0:state:t:e=4.197610481028543E-5, LHH:0:state:t:var=4.197610481028543E-5, LHT:1:state:t:s=5.0142253904384444E-5, LHH:1:state:t:IsOn:s=8.15323783857089E-5, LHH:1:object:t:tv:f=-0.04127043210417252, LHH:1:state:t:yellow:s=-3.139012448114137E-5, LHT:1:object:t:d=-8.03339512159776E-4, LHH:1:object:t:bowl:d=-3.1394774283911676E-5, LHH:1:object:t:cups:d=-7.719426137293193E-4, BB:exists:object:t=-0.004979723007502587, LHT:1:object:t:p=-0.004979723007502587, LHH:1:object:t:you:p=-0.004979723007502587, LHT:0:object:t:s=-8.128651774702962E-5, LHH:0:object:t:IsOn:s=-8.128651774702962E-5, BB:exists:exists=-8.033257258997626E-4, LEX:304=0.0012472044316246564, LEX:845=0.040023098540075616, LEX:78=-0.04127043210417251, LEX:123=0.0028353088211835282, LEX:131=0.028722186610875087, LEX:172=-3.138880683238031E-5, LEX:311=-2.1635759492204298E-5, LEX:365=-0.004958086115317548, LEX:373=-7.503011595751781E-4, LEX:547=-0.008937820479815626, LEX:559=-0.018105350814484087, LEX:518=-0.01810440958349178, LEX:570=-0.013349627623688931, LEX:977=-8.033257258997628E-4, LEX:1020=-0.009011882079460978}
35: =========== r:0.9714285714285714 p:0.9714285714285714 (epoch:8 file:0 0)
if you find any cups
(exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d))))
MakeLex parse time: 0.005 sec.
Adding:
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 0.0
you  :- NP : you:p : 0.0
find any cups  :- S\S : (lambda $0 t $0) : 0.0
Lex Size: 1203
First parse time: 0.006 sec.
CORRECT:(exists $0 (and (object:t $0 you:p) (exists $1 (object:t $1 cups:d))))
Using:
[LexEntries and scores:
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 349 : 1.0089951617729416
you  :- NP : you:p : 2 : 10.949111523382541
find any cups  :- S\S : (lambda $0 t $0) : 314 : 0.2363990185293501
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
if  :- S/NP : (lambda $0 e (exists $1 (and (object:t $1 $0) (exists $2 (object:t $2 cups:d))))) : 349 : 1.0089951617729416
you  :- NP : you:p : 2 : 10.949111523382541
find any cups  :- S\S : (lambda $0 t $0) : 314 : 0.2363990185293501
]
Scale: 0.9963037132239391
Update:
{BB:exists:object:t=0.02517471960897366, LHT:0:object:t:e=0.025189452634188064, LHH:0:object:t:var=0.025189452634188064, LHT:1:object:t:p=-0.0019390842527683303, LHH:1:object:t:you:p=-0.0019390842527683303, LHT:1:object:t:d=0.027133450112707604, LHH:1:object:t:cups:d=0.06296816077660856, BB:object:t:state:t=-0.018449736131384897, LHH:1:object:t:bowl:d=-6.251233396867223E-4, LHT:0:state:t:e=-0.018490825042661835, LHH:0:state:t:var=-0.018490825042661835, LHT:1:state:t:s=-0.01848336839341203, LHH:1:state:t:yellow:s=-0.01848336839341203, BB:object:t:object:t=-2.5738918722700736E-5, LHH:1:object:t:cup:d=-0.03520958732421435, LEX:309=-6.148714672649491E-4, LEX:323=-7.129922534882951E-4, LEX:339=-2.3833371368531752E-5, LEX:347=-1.0223114874506866E-4, LEX:355=-0.027936500140408955, LEX:379=-6.148714672649491E-4, LEX:395=-6.34917541267325E-4, LEX:403=-0.0071126098454712995, LEX:411=-2.3785925174043614E-5, LEX:312=-1.1337559594285987E-4, LEX:326=-0.0012786414339211254, LEX:334=-1.0973186742597583E-4, LEX:342=-4.2837498213952735E-5, LEX:358=-5.442260564777282E-5, LEX:366=-2.3789858195246626E-4, LEX:382=-6.8133100093994E-4, LEX:398=-6.014607897914142E-5, LEX:307=-6.148714672649491E-4, LEX:321=-7.129922534882951E-4, LEX:337=-2.3833371368531752E-5, LEX:345=-1.0223110371419715E-4, LEX:353=-2.386986408485859E-5, LEX:377=-6.148714672649491E-4, LEX:393=-6.349172622081282E-4, LEX:409=-2.3785925174043614E-5, LEX:314=0.02967167262705173, LEX:328=-7.123590638478432E-4, LEX:336=-1.0223098928682634E-4, LEX:344=-2.3972251566366514E-5, LEX:360=0.02677564854150055, LEX:368=-6.148714672649491E-4, LEX:376=-0.002361029482972069, LEX:384=-6.349165528611502E-4, LEX:400=-2.378592529584297E-5, LEX:408=-0.008971886587399351, LEX:305=-6.148714672649491E-4, LEX:319=-7.131777520012492E-4, LEX:335=-2.3839595275967723E-5, LEX:343=-1.0113848757059823E-4, LEX:351=-2.38689665566221E-5, LEX:375=-7.790723444680712E-4, LEX:391=-6.281495362405235E-4, LEX:407=-7.101916502384994E-5, LEX:316=-6.148714672649491E-4, LEX:330=-7.129922534882951E-4, LEX:338=-1.0223110371419715E-4, LEX:346=-2.3833371368531752E-5, LEX:362=-2.386986408485859E-5, LEX:370=-6.148714672649491E-4, LEX:386=-6.349172622081282E-4, LEX:402=-2.3785925174043614E-5, LEX:131=0.01901589595943983, LEX:151=-7.395071996421864E-4, LEX:208=-5.696343606899273E-4, LEX:218=-0.018428609258114802, LEX:228=-2.7219574045857136E-5, LEX:238=-1.898448082555162E-5, LEX:248=-4.1243430041497344E-5, LEX:333=-1.8103233623511456E-5, LEX:341=-6.838657750262118E-5, LEX:349=0.0737735614294592, LEX:365=-0.0013796007866875976, LEX:373=-1.065111969962816E-4, LEX:389=-4.761663182970507E-4, LEX:397=-0.027315679231595523, LEX:405=-2.3781848376720998E-5, LEX:553=-1.6185510560668431E-4, LEX:2=0.045955996130183835, LEX:25=-0.03503389459290216, LEX:318=-6.148714672649491E-4, LEX:332=-7.129502931367597E-4, LEX:340=-1.0223110371419715E-4, LEX:348=-2.3831960070736167E-5, LEX:364=-2.386986408485859E-5, LEX:372=-6.148714672649491E-4, LEX:388=-6.349172622081282E-4, LEX:404=-1.3064049821275913E-5, LEX:350=1.0083813787636883E-5}
36: =========== r:0.9722222222222222 p:0.9722222222222222 (epoch:8 file:0 0)
When the water is boiling
(exists $0 (and (object:t $0 water:q) (state:t $0 IsBoiling:s)))
MakeLex parse time: 0.002 sec.
Adding:
boiling  :- NP : IsBoiling:s : 0.0
water  :- NP : water:q : 0.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
Lex Size: 1203
First parse time: 0.002 sec.
CORRECT:(exists $0 (and (object:t $0 water:q) (state:t $0 IsBoiling:s)))
Using:
[LexEntries and scores:
When  :- S/NP/(S|NP)/(S|NP|(S|NP)) : (lambda $0 <<e,t>,<e,t>> (lambda $1 <e,t> (lambda $2 e ($0 $1 $2)))) : 1064 : 0.013898531091644316
the  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 1069 : 0.020439671088205463
water  :- NP : water:q : 32 : 10.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.506253797122505
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Second parse time: 0.003 sec.
Best LexEntries:
[LexEntries and scores:
When  :- S/NP/(S|NP)/(S|NP|(S|NP)) : (lambda $0 <<e,t>,<e,t>> (lambda $1 <e,t> (lambda $2 e ($0 $1 $2)))) : 1064 : 0.013898531091644316
the  :- S|NP/(S|NP) : (lambda $0 <e,t> (lambda $1 e (exists $2 (and ($0 $2) (state:t $2 $1))))) : 1069 : 0.020439671088205463
water  :- NP : water:q : 32 : 10.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.506253797122505
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Scale: 0.9962937871119436
Update:
{BB:object:t:state:t=0.017560772962035055, LHT:0:object:t:e=0.017560772962035055, LHH:0:object:t:var=0.017560772962035055, LHT:0:state:t:e=0.017559695239908128, LHH:0:state:t:var=0.017559695239908128, LHT:1:state:t:s=0.01756904128865596, LHH:1:state:t:IsBoiling:s=0.01756904128865596, LHT:1:state:t:e=-1.7614375368881046E-5, LHH:1:state:t:var=-1.7614375368881046E-5, LHT:0:object:t:s=-0.017560772962035075, LHH:0:object:t:IsBoiling:s=-0.017560772962035075, LEX:846=0.001621140967909313, LEX:1039=0.0012842439273971394, LEX:1064=0.0026224423357002315, LEX:1066=0.001181747344082107, LEX:1068=-0.014462109972637397, LEX:1070=0.0012932762500000002, LEX:1072=0.0012932762500000002, LEX:1074=0.001290839564666039, LEX:1076=0.0012911929030181176, LEX:1078=0.001290826564010127, LEX:1080=0.0012911929030181176, LEX:1065=0.0013023651378527117, LEX:1067=-0.015692909770227092, LEX:1069=0.0037326243395193496, LEX:1071=0.0012932762500000002, LEX:1073=0.0012932762500000002, LEX:1075=0.0012908395439689552, LEX:1077=0.0012911929030181176, LEX:1079=0.0012908265847071554, LEX:1081=0.0012911929030181176, LEX:570=0.00229791076688721, LEX:1020=-0.002299841729723193}
37: =========== r:0.972972972972973 p:0.972972972972973 (epoch:8 file:0 0)
when the water in the pot is boiling
(exists $0 (and (object:t $0 water:q) (In:t $0 (the $1 (object:t $1 pot:d))) (state:t $0 IsBoiling:s)))
MakeLex parse time: 0.005 sec.
Adding:
when  :- NP|(S|NP)/(NP|(S|NP)) : (lambda $0 <<e,t>,e> (lambda $1 <e,t> ($0 $1))) : 0.0
the  :- NP|(S|NP) : (lambda $0 <e,t> (the $1 ($0 $1))) : 0.820255
when  :- S/S : (lambda $0 t $0) : 0.0
when  :- S/S : (lambda $0 t $0) : 0.0
boiling  :- NP : IsBoiling:s : 0.0
the  :- NP|(S|NP) : (lambda $0 <e,t> (the $1 ($0 $1))) : 0.820255
boiling  :- NP : IsBoiling:s : 0.0
water  :- NP : water:q : 0.0
in  :- S/NP/(S|NP)\(NP|(S|NP))\NP : (lambda $0 e (lambda $1 <<e,t>,e> (lambda $2 <e,t> (lambda $3 e (exists $4 (and (In:t $4 ($1 $2)) (object:t $4 $0) (state:t $4 $3))))))) : 0.0
the pot  :- NP : pot:d : 0.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 0.0
Lex Size: 1203
First parse time: 0.005 sec.
CORRECT:(exists $0 (and (object:t $0 water:q) (In:t $0 (the $1 (object:t $1 pot:d))) (state:t $0 IsBoiling:s)))
Using:
[LexEntries and scores:
when  :- NP|(S|NP)/(NP|(S|NP)) : (lambda $0 <<e,t>,e> (lambda $1 <e,t> ($0 $1))) : 1109 : 0.0
when  :- S/S : (lambda $0 t $0) : 1197 : 0.0
the  :- NP|(S|NP) : (lambda $0 <e,t> (the $1 ($0 $1))) : 1110 : 0.820255
water  :- NP : water:q : 32 : 10.0
in  :- S/NP/(S|NP)\(NP|(S|NP))\NP : (lambda $0 e (lambda $1 <<e,t>,e> (lambda $2 <e,t> (lambda $3 e (exists $4 (and (In:t $4 ($1 $2)) (object:t $4 $0) (state:t $4 $3))))))) : 1102 : 0.0
the pot  :- NP : pot:d : 19 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.508553638852228
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Second parse time: 0.005 sec.
Best LexEntries:
[LexEntries and scores:
when  :- NP|(S|NP)/(NP|(S|NP)) : (lambda $0 <<e,t>,e> (lambda $1 <e,t> ($0 $1))) : 1109 : 0.0
when  :- S/S : (lambda $0 t $0) : 1197 : 0.0
the  :- NP|(S|NP) : (lambda $0 <e,t> (the $1 ($0 $1))) : 1110 : 0.820255
water  :- NP : water:q : 32 : 10.0
in  :- S/NP/(S|NP)\(NP|(S|NP))\NP : (lambda $0 e (lambda $1 <<e,t>,e> (lambda $2 <e,t> (lambda $3 e (exists $4 (and (In:t $4 ($1 $2)) (object:t $4 $0) (state:t $4 $3))))))) : 1102 : 0.0
the pot  :- NP : pot:d : 19 : 20.0
is  :- S|NP\NP : (lambda $0 e (lambda $1 e (object:t $1 $0))) : 1020 : -3.508553638852228
boiling  :- NP : IsBoiling:s : 58 : 10.0
]
Scale: 0.9962838611977325
Update:
{BB:object:t:state:t=-0.0037964623564276266, LHT:1:In:t:e=0.0037964623564274054, LHT:0:state:t:e=-0.0037964623628042775, LHH:0:state:t:var=-0.0037964623628042775, LHT:1:state:t:s=-0.0037964623564276266, LHT:1:In:t:s=-0.0037964623564274687, LHH:1:state:t:var=-0.0037964623628042567, LEX:570=-0.0037959048650447465, LEX:1020=0.00379590482648482}
38: =========== r:0.9736842105263158 p:0.9736842105263158 (epoch:8 file:0 0)
if there exists a cup and there exists a cup and there exists a cup and there exists a cup and there exists a cup
(and (exists $0 (object:t $0 cup:d)))
MakeLex parse time: 0.256 sec.
Adding:
if there exists a cup and there exists a cup  :- S : (and (exists $0 (object:t $0 cup:d))) : 0.048352000000000006
and there exists a cup and there exists a cup and there exists a cup  :- S\S : (lambda $0 t $0) : 0.0
Lex Size: 1203
First