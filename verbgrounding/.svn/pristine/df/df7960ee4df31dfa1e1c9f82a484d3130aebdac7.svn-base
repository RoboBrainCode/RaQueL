/* Tell Me Dave 2013-14, Robot-Language Learning Project
 * Code developed by - Dipendra Misra (dkm@cs.cornell.edu)
 * working in Cornell Personal Robotics Lab.
 * 
 * More details - http://tellmedave.cs.cornell.edu
 * This is Version 2.0 - it supports data version 1.1, 1.2, 1.3
 */

/*  Notes for future Developers - 
 *    <no - note >
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Xml;

namespace ProjectCompton
{
    class Instruction
    {
        /*Class Description : Defines properties of an elementary instruction.*/

        private String instructName = null;
        private String controllerInstruction = null;
        private List<String> description = new List<string>();
        private List<String> oldDescription = new List<string>();

        public Instruction()
        {
            //Constructor Definition: Creates an unitialized object
        }

        public Instruction(String controllerInstruction, List<String> description)
        {
            /* Constructor Description: Given controllerInstruction and description, 
             * intialize the variables */
            this.controllerInstruction = controllerInstruction;
            this.description = description;
        }

        public String getName()
        {
            /*Function Description : Returns name*/
            //if (instructName == null)
            //    return " NULL ";
            String name = this.controllerInstruction;
            foreach (String dscp in this.description)
                name = name + " " + dscp;
            return name;
        }

        public void setNameDescription(String ctrlFunc, List<String> descp)
        {
            this.instructName = ctrlFunc;
            foreach(String tmp in descp)
            {
                this.instructName = this.instructName + " " + tmp;
            }
            this.controllerInstruction = ctrlFunc;
            this.description = descp;
        }

        public Instruction makeCopy()
        {
            /*Function Description : Makes a copy*/
            Instruction newCopy = new Instruction();
            newCopy.description = this.description.ToList();
            newCopy.oldDescription = this.oldDescription.ToList(); //this.description.ToList();
            newCopy.controllerInstruction = this.controllerInstruction;
            newCopy.instructName = this.instructName;
            return newCopy;
        }

        public Instruction makeCopyAndRevert()
        {
            /*Function Description : Makes and reverts the description*/
            Instruction newCopy = new Instruction();
            newCopy.description = this.oldDescription.ToList();
            newCopy.oldDescription = this.oldDescription.ToList();
            newCopy.controllerInstruction = this.controllerInstruction;
            return newCopy;
        }

        public String getControllerFunction()
        {
            /*Function Description : Returns the function name*/
            return this.controllerInstruction;
        }

        public double norm()
        {
            /*Function Description : Returns the norm or description length of this instruction*/ 
            return 1+this.description.Count();
        }

        public Instruction makeCopyAndInstantiate(List<Tuple<String, String>> matching)
        {
            /* Function Description : Make a new copy and instantiate it using the 
             * matching. */

            Instruction inst = new Instruction();
            inst.controllerInstruction = this.controllerInstruction;
            for (int i = 0; i < this.description.Count(); i++)
            {
                String original = this.oldDescription[i];
                foreach (Tuple<String, String> tmp in matching)
                {
                    if (tmp.Item1.Equals(original, StringComparison.OrdinalIgnoreCase))
                        inst.description.Add(tmp.Item2);
                }
            }
            return inst;
        }

        public Instruction makeCopyAndInstantiateTemplate(List<Tuple<String, String>> matching)
        {
            /* Function Description : Make a new copy and instantiate it using the 
             * matching for the template alg.*/

            Instruction inst = new Instruction();
            inst.controllerInstruction = this.controllerInstruction;
            for (int i = 0; i < this.description.Count(); i++)
            {
                String original = this.description[i];
                bool added = false;
                foreach (Tuple<String, String> tmp in matching)
                {
                    if (tmp.Item1.Equals(original, StringComparison.OrdinalIgnoreCase))
                    {
                        added = true;
                        inst.description.Add(tmp.Item2);
                    }
                }
                if (!added)
                    inst.description.Add(original);
            }
            return inst;
        }

        public List<String> getDescription()
        {
            /*Function Description : Returns the function description*/
            return this.description;
        }

        public void parse(String instruction, Logger lg)
        {
            /*Function Descrption : Parses a string into
             * instruction based on specifications in 
             * ControllerInstructions.xml
             */
            String[] words = instruction.Split(new char[]{' '});
            int len = words.Length;
            if(len == 0)
            {
                lg.writeToErrFile("Null Instruction exist "+instruction);
                return;
            }

            //if (words[0].Equals("Time",StringComparison.OrdinalIgnoreCase) || words[0].Equals("Drop",StringComparison.OrdinalIgnoreCase) || words[0].Equals("Store",StringComparison.OrdinalIgnoreCase) || words[0].Equals("Respawn",StringComparison.OrdinalIgnoreCase))
            //    return; //meta-instructions. Ignoring for the time.
            
			bool matched = false, found = false;
			int numParam = 0;
            XmlTextReader reader = new XmlTextReader(Constants.rootPath+"VEIL500/ControllerInstructions.xml");
            while (reader.Read())
            {
                switch (reader.NodeType)
                {
                    case XmlNodeType.Element: // The node is an element.
                        if (reader.Name.Equals("Name"))
                        {
                            reader.Read();
							if (reader.Value.Equals (words [0], StringComparison.OrdinalIgnoreCase))
								matched = true;
							else matched = false;
							numParam = 0;
						}
                        if (reader.Name.Equals("Parameter"))
                        {
                            reader.Read();
							numParam++;
                        }
                        break;
                    case XmlNodeType.EndElement: //Display the end of the element.
                        if (reader.Name.Equals("Instruction"))
                        {
                            if (matched && numParam==len-1) //parsing matched
                            {
                                this.instructName = instruction;
                                this.controllerInstruction = words[0].ToLower();
                                for (int i = 1; i < len; i++)
									this.description.Add(Global.standardize(Global.firstCharToUpper(words[i]))); //object-name is always capitalized
                                this.oldDescription = this.description.ToList();
								found = true;
                            } //else index=0 and next instruction pattern shall be tried
                        }
                        break;
                }
                if (found)
                    break;
            }
			reader.Close ();

			if (!found) 
			{
				throw new ApplicationException ("Don't know how to parse " + instruction);
			}
        }

        public void changeParam(int whichParam, String newParamVal)
        {
            /* Function Description : Replace the whichParam parameter by
             * newParamVal */
            this.description[whichParam] = newParamVal;
        }

        public int generalizeRemaining(Clause cl, int wcount)
        {
            /* Function Description : Generalizes all remaining instances by 
             * variables $w's*/
            for (int i = 0; i < description.Count(); i++)
            {
                if (description[i][0] != '$') //does not start with $ 
                {
                    //check if oldDescription[i] already exists in the clause as a noun object
                    String n=cl.isExist(oldDescription[i]);
                    if (n == null)
                    {
                        //does not exist, so add it 
                        SyntacticTree newW = new SyntacticTree();
                        newW.dummyNode("$w" + wcount);
                        description[i] = "$w" + wcount;
                        wcount++;

                        SyntacticTree grounding = new SyntacticTree();
                        grounding.dummyNode(oldDescription[i]);

                        cl.addNoun(newW);
                        cl.addOriginalCopy(grounding);
                    }
                    //else it already exists so need to do anything
                    //generalize the description in either case
                    else description[i] = n;
                }
            }
            return wcount + 1;
        }

        public void instantiation(String variable, String instance)
        {
            /* Function Description : Instantiates the instruction
             * by replacing variables with instants. Example 
             * Find $v1                to          Find Table
             * Move $v1 $v2            to          Move Cup Table
             */
            /*Regex regEx = new Regex(variable, RegexOptions.IgnoreCase | RegexOptions.Multiline);
            this.instructName = regEx.Replace(this.instructName, instance);*/

            for (int i = 0; i < this.description.Count(); i++)
            {
                if (this.description[i].Equals(variable, StringComparison.OrdinalIgnoreCase))
                {
                    this.description[i] = instance;
                }
            }
        }

        public void priorInstantiation()
        {
            /* Function Description : checks if any description is still of $ form and if yes
             * then it initializes it using the prior instantiation*/
            for (int i = 0; i < description.Count(); i++)
            {
                if (description[i].StartsWith("$"))
                {
                    description[i] = oldDescription[i];
                }
            }
        }

        public void dummyPriorInstantiation(List<Tuple<String,String>> matching, List<string> matchedObjects)
        {
            /* Function Description : finds if $vi exists and if it does then adds
             * the (oldDescription,oldDescription) to matching*/
            for (int i = 0; i < description.Count(); i++)
            {
                if (!Global.isPresent(matchedObjects,oldDescription[i])) //if $v2 belongs to machtedObjects then don't change
                {
                    matching.Add(new Tuple<string, string>(oldDescription[i], oldDescription[i]));
                    matchedObjects.Add(oldDescription[i]);
                }
            }
        }

        public bool compare(Instruction inst)
        {
            /*Function Description : Compares the inst instruction with this instruction.
             * Returns true if equal else false*/

            if (!this.controllerInstruction.Equals(inst.controllerInstruction, StringComparison.OrdinalIgnoreCase))
            {
                return false;
            }

            if (this.description.Count() != inst.description.Count())
            {
                return false;
            }

            for (int i = 0; i < this.description.Count();i++)
            {
                if (!this.description[i].Equals(inst.description[i], StringComparison.OrdinalIgnoreCase))
                {
                    if (this.description[i].StartsWith("stove_1Knob") && inst.description[i].StartsWith("stove_1Knob")
                      || this.description[i].StartsWith("stove_1Burner") && inst.description[i].StartsWith("stove_1Burner"))
                    {
                        continue;
                    }
                    return false;
                }
            }
            return true;
        }

        public List<String> returnObject()
        {
            // Function Description: Return those parameters which are objects
            
			//hack designed for current set of functions
			switch (this.description.Count ()) 
			{
				case 0:  return this.description;
				case 1:  return this.description;
				case 2:  return this.description;
				case 3:  return new List<String>(){this.description[0],this.description[2]};
				default: throw new ApplicationException ("What new devilry is this");
			}
        }

        #region deprecated
        public List<String> possibleObject(String var, Environment env)
        {
            /* Function Description : Returns the set of objects from env that 
             * satisfy the constraints of the given object. If it returns null
             * if var is a not in description */

            return null;
        }
        #endregion

        public void display(Logger lg)
        {
            /*Function Description : Display the instruction*/
            String write = "<span style='color:red'>" + this.controllerInstruction + "</span>";
            foreach (String s in this.description)
                write = write + " " + s;
            lg.writeToFile(write+"<br/>");
        }

        public void displayInterpolation(Logger lg)
        {
            /*Function Description : Display the instruction*/
            String write = "<span style='color:blue'>" + this.controllerInstruction + "</span>";
            foreach (String s in this.description)
                write = write + " " + s;
            lg.writeToFile(write + "<br/>");
        }

    }
}
