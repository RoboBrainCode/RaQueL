/* Tell Me Dave 2013-14, Robot-Language Learning Project
 * Code developed by - Dipendra Misra (dkm@cs.cornell.edu)
 * working in Cornell Personal Robotics Lab.
 * 
 * More details - http://tellmedave.cs.cornell.edu
 * This is Version 2.0 - it supports data version 1.1, 1.2, 1.3
 */

/*  Notes for future Developers - 
 *    <no - note > */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;

namespace ProjectCompton
{
    class Features
    {
        /* Class Description : This class defines function which compute feature vectors
         * for different algorithm used in this software */

        Logger lg = null;
        public int numFeature = 9; //Number of Features to be used by the algorithm
        private Parser obj = null;
        private Simulator sml = null;

        //Instruction Prior Feature - (Instruction, Prior)
        public List<Tuple<Instruction, double>> instructionPrior { get; private set; } //prior of every instruction

        //Verb-Correlation Feature - Controller-Function, Grounding, Position, Probability
        public List<Tuple<String, String, int, double>> verbCorrelation { get; private set; }//correlation of a description at particular point with the instruction

		//Predicate Confidence - list of predicates that have been seen along with their frequency
		private Dictionary<String,int> predicateFreq = null;
		public int zPredFreq { get; private set;} //normalization factor for predicate frequencies

		//Giza-pp probabilities containing
		public List<Tuple<String,String,double>> gizaProbabilities { get; private set; }

		//transition between state Probability
		public List<Tuple<String,String,double>> transitionProbability{ get; private set; }

		//End-State Probability
		public Dictionary<String,double> endProbability{ get; private set; }

        // Data-structures used by the baseline algorithm 
        public List<Template> templates = new List<Template>();    //List of templates
        static public List<Tuple<String, String, int>> treeExp = new List<Tuple<String, String, int>>(); //Bag-of-word probability table - I apologize for being too lazy to not make it an object variable
        static public List<Tuple<Instruction, Instruction, int>> dependent = new List<Tuple<Instruction, Instruction, int>>(); //P(I1,I2), I1 comes given I2 as the last instruction

		public static List<List<String>> featureNames {get; private set; }

        public Features(Logger lg, Parser obj, Simulator sml)
        {
            this.lg = lg;
            this.obj = obj;
            this.sml = sml;
            this.instructionPrior = new List<Tuple<Instruction,double>>();
            this.verbCorrelation = new List<Tuple<string, string, int, double>>();
			this.predicateFreq = new Dictionary<string, int> ();
			this.zPredFreq = 0;
			this.gizaProbabilities = new List<Tuple<string, string, double>> (); //giza probabilities

			Features.featureNames = new List<List<string>> ();
			Features.featureNames.Add (new List<String>()); //Method 0
			Features.featureNames.Add (new List<String>()); //Method 1
			Features.featureNames.Add (new List<String>()); //Method 2
			Features.featureNames.Add (new List<String>()); //Method 3
			Features.featureNames.Add( new List<String> () { "w_ipr", "w_vc", "w_dscp", "w_ll", "w_le", "w_ee", "w_sl", "w_se", "w_trim" }); //Method 4
			Features.featureNames.Add( new List<String> () { "w_ipr", "w_vc", "w_dscp", "w_ll", "w_le", "w_ee", "w_sl", "w_se", "w_trim" }); //Method 5
			Features.featureNames.Add( new List<String> () { "w_ipr", "w_vc", "w_dscp", "w_ll", "w_le", "w_ee", "w_sl", "w_se", "w_trim" }); //Method 6
			Features.featureNames.Add( new List<String> () { "w_ipr", "w_vc", "w_dscp", "w_ll", "w_le", "w_ee", "w_sl", "w_se", "w_trim" }); //Method 7
        }

        public void destroyer()
        {
            /* Function Description : Destroys and clears the data structures */
            this.instructionPrior.Clear();
            this.verbCorrelation.Clear();
			this.predicateFreq.Clear ();
			this.templates.Clear ();
			this.predicateFreq.Clear ();
			this.gizaProbabilities.Clear ();
        }

        public void init(List<int> train, List<Boolean> methodFlag, List<VerbProgram> veil, List<Environment> envList)
        {
            /* Function Description : Given a training data initialize data structures which will be used
             * to find features during inference */
			this.buildInstructionPrior(train);         //build  instruction prior data
			this.buildObjectPrior(train);              //build object prior data
			if (methodFlag[3])
				this.buildBagOfWordRelation(train);

            if (methodFlag[2])
                buildTemplate(); //build template for manual template baseline
			this.buildPredicateFrequency (veil);
			this.buildGizaProbabilities (train);
			this.buildEndStateProbabilities(envList);
        }

        public void buildTemplate()
        {
            /* Function Description : Reads file and creates the templates
             * verb-name1
             * parameters : x1 x2 ...
             * relationship : r12 x1 x2 ......
             * instruction1
             * instruction2
             * ..... */

            String[] lines = System.IO.File.ReadAllLines(Constants.rootPath + @"Data\Templates.txt");
            int start = 0, end = 0;
            for (int i = 0; i < lines.Count(); i++)
            {
                if (Global.isEmpty(lines[i]))
                {
                    end = i - 1;
                    Template newTmp = new Template();
                    newTmp.parse(lines, start, end, this.lg);
                    start = i + 1;
                    this.templates.Add(newTmp);
                }
            }
        }

        /* Methods for computing Instruction Prior */
        public void buildInstructionPrior(List<int> train)
        {
            /* Function Description : Builds instruction prior table
             * ex: ("Grasp Cup",20) represents that it appeared 20 times */

            int numInst = 0;
            List<Tuple<Tuple<int, int>, Clause, List<Instruction>, List<Clause>>> datas = this.obj.returnAllData();

            foreach (int point in train)
            {
                Tuple<Tuple<int, int>, Clause, List<Instruction>, List<Clause>> info = datas[point];
                foreach (Instruction inst in info.Item3)
                {
                    bool added = false;
                    for (int i = 0; i < this.instructionPrior.Count(); i++)
                    {
                        Tuple<Instruction, double> insta = this.instructionPrior[i];
                        if (inst.compare(insta.Item1)) //earlier we were just seeing if name of the function is same
                        {
                            added = true;
                            this.instructionPrior[i] = new Tuple<Instruction, double>(insta.Item1, insta.Item2 + 1);
                        }
                    }
                    if (!added)
                        this.instructionPrior.Add(new Tuple<Instruction, double>(inst, 1));
                    numInst++;
                }
            }

            //normalize the instruction prior
            for (int i = 0; i < this.instructionPrior.Count(); i++)
            {
                Tuple<Instruction, double> insta = this.instructionPrior[i];
                this.instructionPrior[i] = new Tuple<Instruction, double>(insta.Item1, insta.Item2 / numInst);
            }
        }

        public double getInstructionPrior(Instruction inst)
        {
            /* Function Description : Return instruction prior of the given instruction */
            foreach (Tuple<Instruction, double> tmp in this.instructionPrior)
            {
                if (tmp.Item1.compare(inst))
                    return tmp.Item2;
            }
            return 0;
        }

        /* Method for computing Verb-Correlation Prior*/
        public void buildObjectPrior(List<int> train)
        {
            /*Function Description : Given an object as a descriptor in a particular point for
             * an instruction, it returns the frequency with which it has been in that place before*/

            List<Tuple<String, int, int>> countList = new List<Tuple<string, int, int>>();
            List<Tuple<Tuple<int, int>, Clause, List<Instruction>, List<Clause>>> datas = this.obj.returnAllData();

            foreach (int entry in train)
            {
                Tuple<Tuple<int, int>, Clause, List<Instruction>, List<Clause>> info = datas[entry];
                foreach (Instruction inst in info.Item3)
                {
                    String controllerFunction = inst.getControllerFunction();
                    List<String> args = inst.getDescription();
                    for (int padding = 0; padding < args.Count(); padding++) //for every description of s
                    {
                        bool added = false;
                        for (int iter = 0; iter < this.verbCorrelation.Count(); iter++)
                        {
                            Tuple<String, String, int, double> tmp = this.verbCorrelation[iter];
                            if (tmp.Item1.Equals(controllerFunction, StringComparison.OrdinalIgnoreCase)
                                && tmp.Item2.Equals(args[padding], StringComparison.OrdinalIgnoreCase)
                                && tmp.Item3 == padding)
                            {
                                this.verbCorrelation[iter] = new Tuple<string, string, int, double>(tmp.Item1, tmp.Item2, tmp.Item3, tmp.Item4 + 1);
                                Global.increment(countList, controllerFunction, padding);
                                added = true;
                            }
                        }
                        if (!added)
                        {
                            this.verbCorrelation.Add(new Tuple<string, string, int, double>(controllerFunction, args[padding], padding, 1));
                            Global.increment(countList, controllerFunction, padding);
                        }
                    }
                }
            }

            //normalize verb-correlation score
            for (int i = 0; i < this.verbCorrelation.Count(); i++)
            {
                Tuple<String, String, int, double> tmp = this.verbCorrelation[i];
                int counter = Global.getCount(countList, tmp.Item1, tmp.Item3);
                this.verbCorrelation[i] = new Tuple<String, String, int, double>(tmp.Item1, tmp.Item2, tmp.Item3, (tmp.Item4 / counter));
            }
        }

        public double getVerbCorrelation(String controllerFunction, String descp, int padding)
        {
            /*Function Description : Return instruction prior of the given instruction*/
            foreach (Tuple<String, String, int, double> tmp in this.verbCorrelation)
            {
                if (tmp.Item1.Equals(controllerFunction, StringComparison.OrdinalIgnoreCase)
                    && tmp.Item2.Equals(descp, StringComparison.OrdinalIgnoreCase)
                    && tmp.Item3 == padding)
                    return tmp.Item4;
            }
            return 0; //no correlation
        }

        public double getAvgVerbCorrelation(List<Instruction> inst)
        {
            /* Function Description: Find average verb correlation score for a sequence */
            int num = 0;
            double score = 0;
            for (int i = 0; i < inst.Count(); i++)
            {
                List<String> description = inst[i].getDescription();
                for (int j = 0; j < description.Count(); j++)
                {
                    score = score + this.getVerbCorrelation(inst[i].getControllerFunction(), description[j], j);
                    num++;
                }
            }
            return score / (num + Constants.epsilon);
        }

        public double giveInterpolationScore(List<Instruction> instructionSeq, double[] weights)
        {
            /* Function Description : Returns the score for the given instructinSeq - consists of 
             * 
             * 1. Instruction Prior
             * 2. Verb Correlation Score
             * 3. Description Length
             * 
             * Convention : weights used by interpolation scores are always counted from the end - thus 
             * weight for instruction Prior is given by - testObj.weights[length-3],
             *                                            testObj.weights[length-2],
             *                                            testObj.weights[length-1]
             */

            double instPrior = 0.0, vcorrScore = 0.0, descpL = 0.0;
            int numCorr = 0;

            foreach (Instruction inst in instructionSeq)
            {
                //compute instruction prior
                instPrior = instPrior + this.getInstructionPrior(inst);
                //compute verb-correlation prior
                List<String> args = inst.getDescription();
                for (int i = 0; i < args.Count(); i++)
                {
                    vcorrScore = vcorrScore + this.getVerbCorrelation(inst.getControllerFunction(), args[i], i);
                    numCorr++;
                }
                //compute description length
                descpL = descpL + inst.norm();
            }

            if (instructionSeq.Count() == 0)
                instPrior = 0;
            else instPrior = instPrior / (double)(instructionSeq.Count());

            if (numCorr == 0)
                vcorrScore = 0;
            else vcorrScore = vcorrScore / (double)(numCorr);

            return weights[this.numFeature - 3] * instPrior + weights[this.numFeature - 2] * vcorrScore + weights[this.numFeature - 1] * descpL;
        }

        public Tuple<double, List<Tuple<String, String>>> getAccumulatedScore(VeilTemplate eq, Clause cl, Environment clEnv, List<Tuple<Object, String, String, int>> tableOfStates, String instanceNumber, Inference inf)
        {
            /*  Function Description : Computes accumulated score*/

            List<Tuple<string, string>> matching = inf.mapping(eq, cl);

            /* Compute Feature-Score 
             * 1.  Jump Operator Consistency Feature 
             * 2.  Object Distance
             * 3.  Intruction Prior
             * 4.  Description Length
             * 5.  Verb Correlation Score
             * 6.  Variability or Post Condition Satisfaction Score
             * 7.  Linguistic Similarity Score
             * 8.  Clausal Cover Score
             * 9.  Bag of Word
             */
            double objDist = 0.0, instPrior = 0.0, descpL = 0.0, vcorrScore = 0.0, numCorr = 0, variability = 0.0, jumpScore = 0, linguisticScore = 1, clausalScore = 0, bagOfWord = 0;

            /* Computing Variability Feature */
            //compute the last environment
            Environment last = eq.env_.makeCopy();
            foreach (Instruction inst in eq.inst_)
            {
                Instruction instOld = inst.makeCopyAndRevert();
                last = this.sml.execute(instOld, last);
            }//we now have the final environment in last

            //compute average probability
            int counter = 0;
            foreach (Tuple<String, String> tmp in matching)
            {
                if (cl.ifExists(tmp.Item2)) //tmp.Item2 has to be from cl to continue
                {
                    Object obj1 = clEnv.findObject(tmp.Item2);
                    Object obj2 = last.findObject(tmp.Item1);//search for tmp.Item1 in last
                    /* iterate over states of obj and store it in the table if they are 
                       also states of obj1*/
                    List<Tuple<String, String>> newlyFoundStateList = obj2.getState();
                    foreach (Tuple<String, String> single in newlyFoundStateList)
                    {
                        if (obj1.getStateValue(single.Item1).Count() > 0)
                        {
                            //get the value of the [Obj1,single.Item1,single.Item2] from the table
                            variability = variability + getStateValueFrequency(tableOfStates, obj1.getName(), single.Item1, single.Item2);
                            counter++;
                        }
                    }
                }
            }
            if (counter > 0)
                variability = variability / counter;

            //object distance
            Tuple<double, string> objDistAndLog = this.getObjectDistance(eq, cl, clEnv, instanceNumber, matching, true, inf);
            objDist = objDistAndLog.Item1;
            List<Instruction> newCopy = inf.instantiate(eq, cl, matching);

            foreach (Instruction inst in newCopy)
            {
                //compute instruction prior
                instPrior = instPrior + this.getInstructionPrior(inst);
                //compute verb-correlation prior
                List<String> args = inst.getDescription();
                for (int i = 0; i < args.Count(); i++)
                {
                    vcorrScore = vcorrScore + this.getVerbCorrelation(inst.getControllerFunction(), args[i], i);
                    numCorr++;
                }
                //compute description length
                descpL = descpL + inst.norm();
            }

            if (newCopy.Count() == 0)
                instPrior = 0;
            else instPrior = instPrior / newCopy.Count();

            if (numCorr == 0)
                vcorrScore = 0;
            else vcorrScore = vcorrScore / numCorr;

            /* Compute Temporal Discontinuity Feature */
            Environment iterEnv = clEnv.makeCopy();
            string jumpScoreLog = "";
            foreach (Instruction insta in newCopy)
            {
                Tuple<double, string, string> ans = this.sml.satSyntConstraints(insta, iterEnv);
                jumpScoreLog = ans.Item2;
                double singleStepJump = ans.Item1;
                if (singleStepJump == 1)
                {
                    jumpScore = 1;
                    break;
                }
                else
                {
                    iterEnv = this.sml.execute(insta, iterEnv);
                }
            }

            /*   Linguistic Similarity Score 
             * 
             *   Clause C = {c_1,c_2,... } and var = { x_i }_i
             *   define Matching M = [(x_i,y_i)] 
             *   
             *   Linguistic Score is defined as - 1/|M| sum_i H(x_i,y_i)
             * */
            foreach (Tuple<String, String> match in matching)
            {
                if (!match.Item1.Equals(match.Item2, StringComparison.OrdinalIgnoreCase))
                {
                    linguisticScore = linguisticScore + 1;
                }
            }
            if (matching.Count() != 0)
                linguisticScore = linguisticScore / (double)matching.Count();


            /* Clausal Score
             * 
             * Clause C = {c_1,c_2.... }
             * number of clauses covered/total number of clauses
             */

            /*List<SyntacticTree> objList=new List<SyntacticTree>();
            foreach (SyntacticTree n in objList)
            {
                //search if n was covered by the objList
                String nName=n.getName();
                foreach (Tuple<String, String> t in matching)
                {
                    if (!t.Item2.Equals(nName, StringComparison.OrdinalIgnoreCase))
                    {
                        clausalScore = clausalScore + 1;
                    }
                }
            }
            if(objList.Count()!=0)
                clausalScore = clausalScore / objList.Count();*/

			if (eq.cls_.returnOriginalNum() != cl.returnNounList().Count)
            {
                clausalScore = 1;
            }

            List<String> xs = new List<string>();
            List<String> ys = new List<string>();
            List<SyntacticTree> xs_ = eq.cls_.returnOriginalCopy();
            List<SyntacticTree> ys_ = cl.returnNounList();

            for (int i = 0; i < eq.cls_.returnOriginalNum(); i++)
                xs.Add(xs_[i].getName());

            foreach (SyntacticTree s in ys_)
                ys.Add(s.getName());

            Tuple<double, string> bagOfWordRes = Global.jaccardIndex(xs, ys);
			bagOfWordRes = new Tuple<double,String> (1-bagOfWordRes.Item1,bagOfWordRes.Item2);
            bagOfWord = bagOfWordRes.Item1;

            String data = "<div> <button onclick='show(this)'>Instance " + instanceNumber + "</button> <div style='display:none;'> <table>"
                        + "<tr><td>Temporal Distance</td><td>" + jumpScore + "(" + jumpScoreLog + ") </td></tr>"
                        + "<tr><td>Object Distance</td><td>" + objDist + "(" + objDistAndLog.Item2 + " ) </td></tr>"
                        + "<tr><td>Instruction Prior</td><td>" + instPrior + "</td></tr>"
                        + "<tr><td>Description Length</td><td>" + descpL + "</td></tr>"
                        + "<tr><td>Verb Correlation Score</td><td>" + vcorrScore + "</td></tr>"
                        + "<tr><td>Variability Score</td><td>" + variability + "</td></tr>"
                        + "<tr><td>Linguistic Score </td><td>" + linguisticScore + "</td></tr>"
				+ "<tr><td>Clausal Cover Score </td><td>" + clausalScore + "( " + eq.cls_.returnOriginalNum() + " and " + cl.returnNounList().Count + ") </td></tr>"
                        + "<tr><td>Bag of Word Score </td><td>" + bagOfWordRes.Item1 + " ( Log " + bagOfWordRes.Item2 + "</td></tr>"
                        + "</table></div></div>";

            this.lg.setLowPriority();
            this.lg.writeToFile(data);
            this.lg.setHighPriority();

            /*if (jumpScore == 1)
                jumps = true;
            else jumps = false;*/

			double[] weights = null;//inf.setGetWeights_opt;
            double score = weights[0] * jumpScore + weights[1] * objDist + weights[2] * instPrior + weights[3] * descpL + weights[4] * vcorrScore +
                           weights[5] * variability + weights[6] * linguisticScore + weights[7] * clausalScore + weights[8] * bagOfWord; //every value is bounded by 0-1
            return new Tuple<double, List<Tuple<string, string>>>(score, matching);
        }

        public Tuple<double, string> getObjectDistance(VeilTemplate eq, Clause cl, Environment clEnv, String scn, List<Tuple<string, string>> matching, bool show, Inference inf)
        {
            /* Function Description : Finds distance between used objects in the given
             * clause and the one used before. 
             * Object Pairing :  eq.Item1 objects and cl objects
             * But we first need some matching between them usign the instantiation algorithm
             */
            String log = "";
            if (matching == null)
                matching = inf.mapping(eq, cl);

            #region debugOnly
            this.lg.setLowPriority();
            if (show)
            {
                String data = "<div> <button onclick='show(this)'>Nearest Object Distance" + scn + "</button> <div style='display:none;'>";
                foreach (Tuple<string, string> mtc in matching)
                {
                    data = data + mtc.Item1 + " Matched To " + mtc.Item2 + "<br/>";
                }
                data = data + "</div></div>";
                this.lg.writeToFile(data);
            }
            this.lg.setHighPriority();
            #endregion

            double sum = 0;
            int dummy = 0;
            for (int i = 0; i < matching.Count(); i++)
            {
                Object obj1 = eq.env_.findObject(Global.temporaryHack(matching[i].Item1));
                Object obj2 = clEnv.findObject(Global.temporaryHack(matching[i].Item2));
                bool alreadySeen = false;
                for (int j = 0; j < i; j++)
                {
                    if (Global.temporaryHack(matching[j].Item1).Equals(Global.temporaryHack(matching[i].Item1), StringComparison.OrdinalIgnoreCase)
                       && Global.temporaryHack(matching[j].Item2).Equals(Global.temporaryHack(matching[i].Item2), StringComparison.OrdinalIgnoreCase))
                    {
                        alreadySeen = true;
                        break;
                    }
                }
                //check if anyone of the object is dummy if yes then ignore
                if (alreadySeen || obj1.isDummy() || obj2.isDummy())
                    dummy++;
                else
                {
                    Tuple<double, string> result = obj1.findDistance(obj2.getState());
                    double newDist = result.Item1;
                    sum = sum + newDist;
                    log = log + "| D(" + obj1.getName() + " , " + obj2.getName() + " ) = " + newDist + " Info : " + result.Item2;
                }
            }
            if (matching.Count() - dummy == 0)
                return new Tuple<double, string>(1, " All Dummy ");
            else return new Tuple<double, string>(sum / (double)(matching.Count() - dummy), log);
        }

        public void buildBagOfWordRelation(List<int> trainData)
        {
            /* Function Description : Builds the bag of word relation */
            treeExp.Clear();
            dependent.Clear();
            #region commented
            /*List<Tuple<Tuple<int, int>, Clause, List<Instruction>, List<Clause>>> datas = this.obj.returnAllData();
            foreach (int train in trainData)
            {
                Tuple<Tuple<int, int>, Clause, List<Instruction>, List<Clause>> utmp = datas[train];

                foreach (Clause lng in utmp.Item4)
                {
                    List<String> clsW = new List<string>();
                    List<String> instW = new List<String>();
                    int start = lng.start_, end = lng.end_;

                    List<Clause> cls = lng.rootClause();
                    if (cls.Count() == 0)
                        continue;
                    clsW.Add(cls[0].returnVerb().getName());
                    List<SyntacticTree> sns = cls[0].returnNounList();
                    foreach (SyntacticTree sn in sns)
                        clsW.Add(sn.getName());

                    for (int i = start; i < end; i++)
                    {
                        Instruction inst = utmp.Item3[i];
                        instW.Add(inst.getControllerFunction());
                        foreach (String descp in inst.getDescription())
                            instW.Add(descp);
                    }

                    foreach (String w1 in clsW)
                    {
                        foreach (String w2 in instW)
                            this.incrementBOW(w1, w2);
                    }
                }

                for (int i = 0; i < utmp.Item3.Count() - 1; i++)
                    this.incrementDependent(utmp.Item3[i + 1], utmp.Item3[i]);
            }*/
            #endregion
        }

        public void incrementBOW(String clsW, String instW)
        {
            /* Function Description : Increment the count of this word */
            bool added = false;
            Tuple<String, String, int> res = null;
            foreach (Tuple<String, String, int> tmp in Features.treeExp)
            {
                if (tmp.Item1.Equals(clsW, StringComparison.OrdinalIgnoreCase) && tmp.Item2.Equals(instW, StringComparison.OrdinalIgnoreCase))
                {
                    res = tmp;
                    added = true;
                }
            }

            if (added)
            {
                Features.treeExp.Add(new Tuple<string, string, int>(clsW, instW, res.Item3 + 1));
                Features.treeExp.Remove(res);
            }
            else
            {
                Features.treeExp.Add(new Tuple<string, string, int>(clsW, instW, 1));
            }
        }

        public void incrementDependent(Instruction i1, Instruction i2)
        {
            /* Function Description : Increment the count of this word */
            bool added = false;
            Tuple<Instruction, Instruction, int> res = null;
            foreach (Tuple<Instruction, Instruction, int> tmp in Features.dependent)
            {
                if (tmp.Item1.compare(i1) && tmp.Item2.Equals(i2))
                {
                    res = tmp;
                    added = true;
                }
            }

            if (added)
            {
                Features.dependent.Add(new Tuple<Instruction, Instruction, int>(i1, i2, res.Item3 + 1));
                Features.dependent.Remove(res);
            }
            else
            {
                Features.dependent.Add(new Tuple<Instruction, Instruction, int>(i1, i2, 1));
            }
        }

        public double getStateValueFrequency(List<Tuple<Object, String, String, int>> tableName, String objName, String stateName, String valueName)
        {
            /* Function Description : For the table [a,b,c,d] return D/E where 
             *  D = { d | such that a.objName = objName, b=stateName, c=valueName } 
             *  E = | { a.objName = objName, b=stateName} |
             */
            double D = 0.0, E = 0.0;
            foreach (Tuple<Object, String, String, int> tmp in tableName)
            {
                if (tmp.Item1.getName().Equals(objName, StringComparison.OrdinalIgnoreCase) &&
                    tmp.Item2.Equals(stateName, StringComparison.OrdinalIgnoreCase))
                {
                    E = E + 1;
                    if (tmp.Item3.Equals(valueName, StringComparison.OrdinalIgnoreCase))
                    {
                        D = tmp.Item4;
                    }
                }
            }
            if (E == 0)
                return 0; //no evidence
            return D / E; //else return prior probability 
        }

		/*public double freqFeature(String constraints, VerbProgram v)
		{
			/* Function Description: Given a constraints in q1^q2^...q^k form
			 * return 1/k avg{freq(q_i,v)} */
		/*	String[] cstr = constraints.Split(new char[] { '^' });
			double score = 0;
			int z = v.totalFrequency ();
			for (int i=0; i<cstr.Length; i++) 
				score = score + v.fetchFrequency (cstr [i]);
			score = score / (cstr.Length*z + Constants.epsilon);
			return score;
		}*/

		private void buildPredicateFrequency(List<VerbProgram> veil)
		{
			/* Function Description: Given the veil library. Build a 
			 * table consisting of seen predicates along with their numbers.
			 * Since this is potentially exponential in number of objects 2^O(polynomial(objects)),
			 * we should try to get rid of this in the future. For now, its okay.
			 * This table can be used to judge the confidence of a predicate.
			 * e.g. whether (on coke_1 beer_1) makes sense or not. Technically it can but
			 * it may not appear in the training data at all hence of little semantic sense */

			foreach(VerbProgram vp in veil)
			{
				List<VeilTemplate> vt = vp.getProgram ();
				foreach (VeilTemplate vt_ in vt) 
				{
					foreach (String pred in vt_.predicatesPostOld) 
					{
						this.zPredFreq++;
						if (!this.predicateFreq.ContainsKey (pred))
							this.predicateFreq.Add (pred, 1);
						else
							this.predicateFreq [pred]++;
					}
				}
			}
		}

		public int getPredicateFreq(String cstr)
		{
			//Function Desription: Returns the frequency of cstr
			if (this.predicateFreq.ContainsKey (cstr)) 
			{
				int val = this.predicateFreq [cstr];
				return val;
			}
			else
				return 0;
		}

		public int getBaseFormPredicateFreq(String cstr)
		{
			/* Function Desription: Returns the base form frequency.
			 * E.g., (On Pillow_2 Loveseat_1) may not be seen but
			 * (On Pillow_1 Loveseat_1) might be. In which case, we can
			 * use the base-form frequency. Also (On $ Loveseat_1) will match anything at $ */

			int freq = 0;
			Tuple<bool,string> atom = Global.getAtomic (cstr);
			String[] words1 = atom.Item2.Split (new char[] {' '});
			for (int i=0; i<this.predicateFreq.Count(); i++) 
			{
				Tuple<bool,string> res = Global.getAtomic (this.predicateFreq.ElementAt(i).Key);
				bool same = true;
				if (atom.Item1 == res.Item1) 
				{
					String[] words2 = res.Item2.Split (new char[] { ' ' });
					if (words1.Length != words2.Length) 
						continue;
					for (int j=0; j<words1.Length; j++) 
					{
						if (!Global.base_ (words1 [j]).Equals (Global.base_ (words2 [j])) && 
						    !words1[j].Equals("$")) 
							same = false;
					}
				}
				else same = false;
				if (same)
					freq = freq + this.predicateFreq.ElementAt (i).Value;
			}
			return freq;
		}

		public void buildEndStateProbabilities(List<Environment> envList)
		{
			/* Function Description: Given the data, build a table P
			 * e.g., P(In(x,y)) gives the probability of an object
			 * being inside another object. Can be used to show that
			 * e.g., P(Grasping(x,y)) never occurs or is too unlikely. */

			List<Tuple<Tuple<int,int>, Clause, List<Instruction>, List<Clause>>> datas = this.obj.returnAllData ();

			foreach(Tuple<Tuple<int,int>, Clause, List<Instruction>, List<Clause>> data in datas)
			{
				Environment final = this.sml.executeList (data.Item3, envList [data.Item1.Item1 - 1]);
				List<String> difference = final.difference (envList [data.Item1.Item1 - 1]);
				foreach(String predicate in difference)
				{
					/* Given a predicate such as (not (state Cup1 IceCream)) we generalize
					 * it in two ways by replacing only the objects and then by replacing 
					 * both the objects and the state */
					if (this.endProbability.ContainsKey (predicate))
						this.endProbability [predicate] = this.endProbability [predicate] + 1;
					else this.endProbability.Add(predicate,1);
				}
			}
			//Dump it in a file for debugging
		}

		public void buildGizaProbabilities(List<int> train)
		{
			/* Function Description: Builds Giza probability tables for */

			#region create_the_files
			List<Tuple<Tuple<int,int>, Clause, List<Instruction>, List<Clause>>> datas = this.obj.returnAllData ();
			List<List<Tuple<int,int>>> alignment = this.obj.returnAllAlignment ();
			System.IO.StreamWriter english = new System.IO.StreamWriter (Constants.rootPath+@"Alignments/english.txt");
			System.IO.StreamWriter code = new System.IO.StreamWriter (Constants.rootPath+@"Alignments/code.txt");
			foreach(int tr in train)
			{
				for (int cls = 0; cls < datas[tr].Item4.Count(); cls++) 
				{
					String sentence = datas [tr].Item4 [cls].sentence;
					if (sentence == null || alignment[tr][cls].Item1 > alignment[tr][cls].Item2)
						continue;

					sentence = sentence.Replace("\n","").Trim();
					english.WriteLine (sentence.ToLower());

					List<String> objNames = new List<String> ();
					for (int iter = alignment[tr][cls].Item1; iter <= alignment[tr][cls].Item2; iter++) 
						objNames = objNames.Union(datas [tr].Item3 [iter].returnObject ()).ToList();
					objNames = objNames.Select (x => x.ToLower ()).ToList();

					code.WriteLine (String.Join (" ", objNames));
				}
			}
			english.Flush ();
			english.Close ();
			code.Flush (); 
			code.Close ();
			#endregion

			#region call_the_gizapp file
			Process proc = new Process();
			proc.StartInfo.WorkingDirectory = Constants.rootPath + @"Alignments/";
			proc.StartInfo.FileName = "/bin/sh";//Constants.rootPath + @"Alignments/createGizaFiles.sh";
			proc.StartInfo.RedirectStandardError = true;
			proc.StartInfo.RedirectStandardOutput = true;
			proc.StartInfo.UseShellExecute = false;
			proc.StartInfo.CreateNoWindow = true;
			proc.StartInfo.Arguments = string.Format(Constants.rootPath + @"Alignments/createGizaFiles.sh");
			proc.Start();
			proc.WaitForExit();
			#endregion

			#region generate_the_tables
			//Read the code file
			Dictionary<int,string> engVocab = new Dictionary<int,string>();
			Dictionary<int,string> codeVocab = new Dictionary<int,string>();

			engVocab.Add(0,"Null");
			codeVocab.Add(0,"Null");
			String[] engVocabLines = System.IO.File.ReadAllLines(Constants.rootPath+ @"Alignments/english.vcb");
			for(int i=0; i<engVocabLines.Length;i++)
			{
				String[] words = engVocabLines[i].Split(new char[]{' '}).Select(x=>x.Trim()).ToArray();
				engVocab.Add(Int32.Parse(words[0]),words[1]);
			}

			String[] codeVocabLines = System.IO.File.ReadAllLines(Constants.rootPath+ @"Alignments/code.vcb");
			for(int i=0; i<codeVocabLines.Length;i++)
			{
				String[] words = codeVocabLines[i].Split(new char[]{' '}).Select(x=>x.Trim()).ToArray();
				codeVocab.Add(Int32.Parse(words[0]),words[1]);
			}

			//Read the file ending with t3.final
			String[] files = System.IO.Directory.GetFiles(Constants.rootPath+@"Alignments/", "*.t3.final");
			if(files.Length!=1)
				throw new ApplicationException("There should be exactly one t3.final file");

			String[] values = System.IO.File.ReadAllLines(files[0]);
			for(int i=0; i<values.Length;i++)
			{
				String[] words = values[i].Split(new char[]{' '}).Select(x=>x.Trim()).ToArray();
				double probability = Double.Parse(words[2]);
				if(probability < Constants.epsilon)
					continue;
				this.gizaProbabilities.Add(new Tuple<string, string, double>(engVocab[Int32.Parse(words[0])],
				                           codeVocab[Int32.Parse(words[1])], probability));
			}

			//Delete all file except createGizeFile.sh
			String[] allfile = System.IO.Directory.GetFiles(Constants.rootPath+@"Alignments/");
			for(int tmp = 0; tmp<allfile.Length;tmp++)
			{
				if(allfile[tmp].Equals(Constants.rootPath+@"Alignments/createGizaFiles.sh"))
					continue;
				System.IO.File.Delete(allfile[tmp]);
			}
			#endregion
		}

    }
}
