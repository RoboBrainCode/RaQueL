using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;

namespace ProjectCompton
{
    class NoiseRemoval
    {
        /* Class Description : Provides tool for removing and cleaning the dataset */

        private static void addMissingObjects()
        {
            /* Function Description: Certains objects like buttons on tv_remote are missing in some
             * environment files. This class adds objects to the */

            foreach (String e in Constants.scenarios)
            {
                for (int i = 1; i <= 10; i++)
                {
                    StringBuilder entireFile = new StringBuilder();
                    StringBuilder addNew = new StringBuilder();
                    XmlTextReader reader = new XmlTextReader(Constants.rootPath + "VEIL500/Environment/" + e + @"/" + e + i.ToString() + ".xml");

                    while (reader.Read())
                    {
                        switch (reader.NodeType)
                        {
                            case XmlNodeType.Element: // The node is an element.
                                String name = "";
                                if (reader.Name.Equals("object"))
                                {
                                    XmlTextReader xm_ = reader;
                                    String innerXML = reader.ReadInnerXml();
                                    int start = innerXML.IndexOf("<name>");
                                    innerXML = innerXML.Substring(start);
                                    int index = innerXML.IndexOf("</name>");
                                    name = innerXML.Substring(6, index - 6);
                                    entireFile.Append("<object>" + innerXML + "</object>\n");
                                    reader = xm_;
                                }

                                #region describe_added_objects

                                if (name.Equals("--write-the-name-", StringComparison.OrdinalIgnoreCase))
                                {
									;//define a new object
								}
                                #endregion

                                break;
                        }
                    }

                    reader.Close();

                    System.IO.StreamWriter sw = new System.IO.StreamWriter(Constants.rootPath + "VEIL500/Environment/" + e + @"/" + e + i.ToString() + ".xml");
                    sw.WriteLine("<environment>");
                    sw.WriteLine(entireFile.ToString());
                    sw.WriteLine(addNew.ToString());
                    sw.WriteLine("</environment>");
                    sw.Flush();
                    sw.Close();
                }
            }
        }

        private static void deleteInstruction(Tuple<Tuple<int, int>, Clause, List<Instruction>, List<Clause>> data, List<List<Tuple<int, int>>> alignment, int i, List<int> removedInstructions)
        {
            /* Fuction Descriptin: Delete the which instruction from data and returns the new alignmen*/
            //Remove Instructions
            removedInstructions.Sort();
            for (int j = 0; j < removedInstructions.Count(); j++)
                data.Item3.RemoveAt(removedInstructions[j] - j); //this assumes removedInstructions is sorted in ascending order

            /* Adjust the allignments
             * [i1 j1] [i2 j2] [i3 j3] [i4 j4] ...... [ik jk]
             *  - to remove {z1, z2, z3, .... zl}
             *  - iterator over zi 
             *     -   for-all [ir jr] while ir, jr < zi replace [ir-pad jr-pad]
             *     -   for ir <= zi <= jr we replace it by [ir jr-1] 
             *            - increment pad by 1 and remve zi.
             *  - add the remaining alignments
             * */

            List<Tuple<int, int>> alignmentNew = new List<Tuple<int, int>>();
            int pad = 0, which = 0;

            for (int k = 0; k < alignment[i].Count(); k++)
            {
                while (which < removedInstructions.Count() && alignment[i][k].Item1 <= removedInstructions[which]
                             && removedInstructions[which] <= alignment[i][k].Item2)
                    which++;
                alignmentNew.Add(new Tuple<int, int>(alignment[i][k].Item1 - pad, alignment[i][k].Item2 - which));
                pad = which;
            }

            alignment[i] = alignmentNew;
        }

		public static void instSeqCleaning(List<Instruction> insts, Environment env, Simulator sml)
		{
			/* Function Description: Cleans the instruction sequence inst using following 
             * rules - 
             *      1. invariant removal  - if E -> inst -> E and inst != wait then remove inst
             *      2. repetition removal - for window in [1 ... max]
             *                                   for pad in [1...|I|]; j=pad;
             *                                          while ( I[pad+1...pad+i] = I[j+1...j+i] & \forall k in [0..i] E[pad+k] = E[j+k]) j += pad;
             *                                          remove I[pad+i+1.....j+i+1] */                                         

			Environment iterator = env.makeCopy();
			List<Environment> envSequence = new List<Environment>() { env };

			#region remove_invariant_insructions
			//Find all indices of removed instructions
			List<int> removedInstructions = new List<int>(); //index of instructions that are removed
			for (int j = 0; j < insts.Count(); j++)
			{
				Instruction inst_ = insts[j];
				if (inst_.getControllerFunction().Equals("wait"))
					continue;
				Environment tmp = sml.execute(inst_, envSequence[envSequence.Count()-1], true,true);
				envSequence.Add(tmp);
				if (iterator.isSame(tmp).Item1)  //redundant
					removedInstructions.Add(j);
				iterator = tmp;
			}
			for(int j=0; j<removedInstructions.Count();j++)
				insts.RemoveAt(removedInstructions[j]-j);
			#endregion

			#region repetition_removal
			removedInstructions.Clear();
			for (int win = 1; win <= 2; win++)
			{
				for (int pad = 0; pad <= insts.Count() - win; pad++)
				{
					int j = pad + win;
					while (true)
					{
						if (j + win > insts.Count())
							break;
						bool condition = true;
						//Check if instruction sequence is syntactically same
						for (int it = 0; it < win; it++)
						{
							if (!insts[pad + it].compare(insts[j + it]))
							{
								condition = false;
								break;
							}
						}

						if (!condition)
							break;

						//Check if environments are also same
						/*for (int it = 0; it <= win; it++)
                        {
                            if (!envSequence[pad + it].isSame(envSequence[j + it]))
                            {
                                condition = false;
                                break;
                            }
                        }

                        if (!condition)
                            break;*/

						j = j + win;
					}

					//remove all elements from I[pad+win ...... j-1], sanity check with j=pad+win
					for (int k = pad + win; k < j; k++)
						removedInstructions.Add(k);
				}
			}

			removedInstructions = removedInstructions.Distinct().ToList();
			for(int j=0; j<removedInstructions.Count();j++)
				insts.RemoveAt(removedInstructions[j]-j);
			#endregion
		}

		private static void instSeqCleaning(Parser prs, Simulator sml, List<Environment> envList)
        {
            /* Function Description: Cleans the instruction sequence inst using following 
             * rules - 
             *      1. invariant removal  - if E -> inst -> E and inst != wait then remove inst
             *      2. repetition removal - for window in [1 ... max]
             *                                   for pad in [1...|I|]; j=pad;
             *                                          while ( I[pad+1...pad+i] = I[j+1...j+i] & \forall k in [0..i] E[pad+k] = E[j+k]) j += pad;
             *                                          remove I[pad+i+1.....j+i+1] */                                         

            List<Tuple<Tuple<int, int>, Clause, List<Instruction>, List<Clause>>> parsedSentence = prs.returnAllData();
            List<List<Tuple<int, int>>> alignment = prs.returnAllAlignment();

            if (alignment.Count() != parsedSentence.Count())
                throw new ApplicationException("Error: Not all parsed Sentences are aligned");

			System.IO.StreamWriter swr = new System.IO.StreamWriter (Constants.rootPath+"stream.txt");

            for (int i = 0; i < parsedSentence.Count(); i++)
            {
                List<Instruction> inst = parsedSentence[i].Item3;
                Environment env = envList[parsedSentence[i].Item1.Item1 - 1], iterator = env.makeCopy();
                List<Environment> envSequence = new List<Environment>() { env };

                #region remove_invariant_insructions
                //Find all indices of removed instructions
                List<int> removedInstructions = new List<int>(); //index of instructions that are removed
                for (int j = 0; j < inst.Count(); j++)
                {
                    Instruction inst_ = inst[j];
                    if (inst_.getControllerFunction().Equals("wait"))
                        continue;
					Environment tmp = sml.execute(inst_, envSequence[envSequence.Count()-1], true,true);
					iterator = envSequence[envSequence.Count()-1];
                    envSequence.Add(tmp);
                    if (iterator.isSame(tmp).Item1)  //redundant
					{
                        removedInstructions.Add(j);
					}
                    iterator = tmp;
                }
                NoiseRemoval.deleteInstruction(parsedSentence[i],alignment,i,removedInstructions);
                #endregion

                #region repetition_removal
                removedInstructions.Clear();
                for (int win = 1; win <= 2; win++)
                {
                    for (int pad = 0; pad <= inst.Count() - win; pad++)
                    {
                        int j = pad + win;
                        while (true)
                        {
                            if (j + win > inst.Count())
                                break;
                            bool condition = true;
                            //Check if instruction sequence is syntactically same
                            for (int it = 0; it < win; it++)
                            {
                                if (!inst[pad + it].compare(inst[j + it]))
                                {
                                    condition = false;
                                    break;
                                }
                            }

                            if (!condition)
                                break;

                            //Check if environments are also same
                            /*for (int it = 0; it <= win; it++)
                            {
                                if (!envSequence[pad + it].isSame(envSequence[j + it]))
                                {
                                    condition = false;
                                    break;
                                }
                            }

                            if (!condition)
                                break;*/

                            j = j + win;
                        }

                        //remove all elements from I[pad+win ...... j-1], sanity check with j=pad+win
                        for (int k = pad + win; k < j; k++)
                            removedInstructions.Add(k);
                    }
                }

                removedInstructions = removedInstructions.Distinct().ToList();
                NoiseRemoval.deleteInstruction(parsedSentence[i], alignment, i, removedInstructions);
                #endregion

				#region special_sequence
				//remove release x; moveto x; grasp x; sequence
				removedInstructions.Clear();
				for (int j = 0; j < inst.Count()-2; j = j + 3)
				{
					if(inst[j].getControllerFunction().Equals("release") && inst[j+1].getControllerFunction().Equals("moveto")
					   && inst[j+2].getControllerFunction().Equals("grasp") && inst[j].getDescription()[0].Equals(inst[j+1].getDescription()[0])
					   && inst[j].getDescription()[0].Equals(inst[j+2].getDescription()[0]))
					{
						removedInstructions.Add(j);
						removedInstructions.Add(j+1);
						removedInstructions.Add(j+2);
					}
				}
				NoiseRemoval.deleteInstruction(parsedSentence[i],alignment,i,removedInstructions);
				#endregion
            }
			swr.Flush ();
			swr.Close ();
        }

        private static void removeDeadObjects(List<Environment> envList)
        {
            /* Function Description: Lots of error and complextiy of some function 
             * depends upon number of objects in environments. This noise removal function
             * removes dead objects like - KitchenCeiling, MicrowaveFloor etc.
             * Where are these objects coming from? They are coming from coppercube simulator
             * which needs to create some non-interative objects.
             *  At this point I am simply hardcoding the objects for VEIL-1000. In future,
             * I want to remove those objects which can never occur in argument.
			 */

			List<String> deadObjects = new List<string> () {"FridgeSeparator", "FridgeWater", "FridgeCeiling", "FridgeFloor",
				"FridgeLeft", "FridgeRight", "MicrowaveBack", "MicrowaveCeiling", "MicrowaveWall", "MicrowaveFloor", "Camera1","KitchenCeiling", "StoveTop",
				"flower1", "Kitchen", "skybox", "livingRoom", "livingRoomCeiling", "camera_1"};

            foreach (Environment env in envList)
            {
                foreach (String objname in deadObjects)
					env.removeObjects(objname); //Remove objects from the list
            }
        }

		private static void removeTrivia(Parser prs, List<List<Environment>> env)
		{
			/* Function Description: Removes trivial errors like datapoints with
			 * no instruction sequence. This follows from the argument that tasks
			 * are never constructed to be trivial.*/

			List<Tuple<Tuple<int, int>, Clause, List<Instruction>, List<Clause>>> parsedSentence = prs.returnAllData();
			List<List<Tuple<int, int>>> alignment = prs.returnAllAlignment ();
			List<int> toRemove = new List<int> ();

			for(int i=0; i<parsedSentence.Count();i++) 
			{
				if (parsedSentence [i].Item3.Count () == 0)
					toRemove.Add (i);
			}

			for (int j=0; j<toRemove.Count(); j++) 
			{
				parsedSentence.RemoveAt (toRemove [j] - j);
				alignment.RemoveAt (toRemove [j] - j);
				env.RemoveAt (toRemove [j] - j);
			}
		}

		public static void checkConsistency(Parser prs, List<Environment> envList,Tester tester)
		{
			/* Function Description: Some Instruction are Not Executeable so the algorithm finds instructions
			 * to make it executable. */

			List<Tuple<Tuple<int, int>, Clause, List<Instruction>, List<Clause>>> parsedSentence = prs.returnAllData ();
			List<List<Tuple<int,int>>> alignment = prs.returnAllAlignment ();
			Simulator sml = tester.sml;
			SymbolicPlanner symp = tester.symp;

			for (int i=0; i<parsedSentence.Count(); i++) 
			{
				Environment iterator = envList [parsedSentence [i].Item1.Item1 - 1].makeCopy ();
				List<List<Instruction>> missing = new List<List<Instruction>> ();
				List<int> missingIndices = new List<int> ();

				List<Instruction> newInstruction = new List<Instruction> ();
				bool changed = false;
				for (int j=0; j<parsedSentence[i].Item3.Count(); j++) 
				{
					Instruction inst = parsedSentence [i].Item3[j];
					Tuple<Double, String, String> result = sml.satSyntConstraints(inst, iterator);
					if (result.Item3 == null) 
						throw new ApplicationException ("Syntactically Impossible Statements Occuring");

					if (result.Item3.Length != 0)  //unexectuable instructions
					{
						String constraint = String.Join("^",result.Item3.Split(new char[]{'^'}).Select(acc=> "("+acc+")"));
						bool edgeCase = false;
						if (inst.getControllerFunction ().Equals ("grasp")) 
						{
							String word = inst.getDescription () [0];
							if (constraint.Equals ("(Near Robot " + word + ")^(not (Grasping Robot " + word + "))")) {
								Console.WriteLine ("Edge Case with " + constraint);
								edgeCase = true;
							}
						}

						if(!edgeCase)
						{
							List<Instruction> missingInstruction = symp.satisfyConstraints (iterator, constraint);
							missing.Add (missingInstruction);
							missingIndices.Add (j);
							newInstruction = newInstruction.Concat (missingInstruction).ToList ();
							changed = true;
						}
					} 
					iterator = sml.execute (inst, iterator, true, true); //forcefully execute the instruction anyway
					newInstruction.Add (inst);
				}

				if (changed) 
					parsedSentence [i] = new Tuple<Tuple<int, int>, Clause, List<Instruction>, List<Clause>> (parsedSentence [i].Item1, parsedSentence [i].Item2
				                                                                                         , newInstruction, parsedSentence [i].Item4);

				//add the missing instructions and adjust the alignment
				int k = 0, pad = 0, missingiter=0;
				for (k=0; k<alignment[i].Count(); k++) 
				{
					if (missingiter >= missingIndices.Count ())
						break;
					int j = missingIndices [missingiter];
					if (alignment [i] [k].Item1 <= j && j <= alignment [i] [k].Item2) 
					{
						alignment [i] [k] = new Tuple<int,int> (alignment [i] [k].Item1 + pad, alignment [i] [k].Item2 + pad + missing[missingiter].Count ());
						pad = pad + missing[missingiter].Count();
						missingiter++;
					}
					else if (alignment [i] [k].Item2 < j)
						alignment [i] [k] = new Tuple<int,int> (alignment [i] [k].Item1 + pad, alignment [i] [k].Item2 + pad);
				}

				while (k<alignment[i].Count()) 
				{
					alignment [i] [k] = new Tuple<int,int> (alignment [i] [k].Item1 + pad, alignment [i] [k].Item2 + pad);
					k++;
				}
			}
		}

		public static void cleanData(Tester tester)
		{
			/* Function Description: Calls functions for cleaning the data*/
			//NoiseRemoval.addMissingObjects ();
			NoiseRemoval.checkConsistency(tester.obj, tester.envList, tester);
			NoiseRemoval.instSeqCleaning (tester.obj, tester.sml, tester.envList);
			NoiseRemoval.removeDeadObjects (tester.envList);
			NoiseRemoval.removeTrivia(tester.obj, tester.listOfAllEnv);
			Console.WriteLine ("Done with Noise Removal Total Points :- "+tester.obj.returnAllData().Count());
		}
    }
}