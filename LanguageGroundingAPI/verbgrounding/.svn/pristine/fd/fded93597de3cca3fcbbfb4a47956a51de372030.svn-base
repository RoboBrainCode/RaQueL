using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectCompton
{
    class Expression
    {
        /* Class  Description: Represents PDDL expressions and provides
         * functionality for using them */


        private nodeType type; //Is either of type - and, for, when, not or null (leaf)
        private List<Expression> arguments = new List<Expression>(); /* Syntax - 
                                                      (and arg1 arg2 arg3 ....)
                                                      (for arg1[condition] arg2) 
                                                      (when arg1[condition] arg2) 
                                                      (not arg1) */
        private String exp; //Null except for leaves

        public enum nodeType
        {
            And,
            For,
            When,
            Not,
            Null
        }

        public Expression(String parse)
        {
            /* Constructor Description: Create the expression out of the string 
             * Expression : (and (Expression1) (Expression2) ..... (ExpressionN)) -- And type
             * Expression : (forall (Expression) (Expression)) -- for
             * Expression : (when (Expression) (Expression)) -- when
             * Expression : (not (Expression)) -- not
             * Expression : (predicate) -- base case
             */

			String orig = parse.ToString ();
            parse = parse.Replace('\t', ' ');
            parse = parse.Replace('\n', ' ');
            int paren = parse.IndexOf('(');
            parse = parse.Substring(paren + 1);
            if (parse.StartsWith("and") || parse.StartsWith("forall") || parse.StartsWith("when") || parse.StartsWith("not"))
            {
                if (parse.StartsWith("and"))
                    this.type = nodeType.And;
                else if (parse.StartsWith("forall"))
                    this.type = nodeType.For;
                else if (parse.StartsWith("when"))
                    this.type = nodeType.When;
                else if (parse.StartsWith("not"))
                    this.type = nodeType.Not;

                int j = 0;
                while (j < parse.Count())
                {
                    if (parse[j] == '(')
                    {
                        //create a new expression
                        String exp_ = this.nextBracket(parse, j);
                        j = j + exp_.Count() - 1;
						Expression exp1 = new Expression(exp_);
                        this.arguments.Add(exp1);
                    }
                    j++;
                }
            }
            else //leaf
            {
                this.type = nodeType.Null;
                if (parse[parse.Count() - 1] == ')')
                    parse = parse.Substring(0, parse.Count() - 1);
                //effect can have extra closing parethesis so we check for it
                int open_ = 0, close_ = 0, index = -1;
                for (int i = 0; i < parse.Length; i++)
                {
                    if (parse[i] == '(')
                        open_++;
                    else if (parse[i] == ')')
                    {
                        close_++;
                        index = i;
                    }
                }

                if (open_ != close_ && index != -1)
                    parse = parse.Substring(0,index) + parse.Substring(index+1);
                this.exp = parse.Trim();
            }
        }

        private String nextBracket(String exp, int start)
        {
            /* Function Description : Given the start character as (, return 
             * the index of the blanaced closing ) or -1 if none exist */
            
            if (exp[start] != '(')
                throw new ApplicationException("Next Bracket: String must start with (");
            int balance = 1;
            String ret = "(";
            for (int i = start+1; i < exp.Count(); i++)
            {
                ret = ret + exp[i];
                if (exp[i] == '(')
                    balance++;
                if (exp[i] == ')')
                {
                    balance--;
                    if (balance == 0)
                        return ret;
                }
            }
            return null;
        }

        public String instantiate(String expression, List<Tuple<String, String>> map)
        {
            /* Function Description: Instantiate the expression, the variables in 
             * expression are instantiated using the map. The expression is of the form - 
             * state object-name state-name 
             * affordance-type object-name
             * relation object-name object-name
             */

            String exp_ = expression.ToString(), ret = "";
            String[] words = exp_.Split(new char[] {' '}); //split into words
            ret = words[0].Trim();

            for (int i = 1; i < words.Length; i++)
            {
                words[i] = words[i].Trim();
                bool added = false;
                foreach (Tuple<String, String> map_ in map)
                {
                    if (map_.Item1.Equals(words[i]))
                    {
                        added = true;
                        ret = ret + " " + map_.Item2;
                    }
                }
                if (!added)
                    ret = ret + " " + words[i];
            }

            return ret;
        }

        public String evaluate(Environment env, List<Tuple<String,String>> map)
        {
            /* Function Description : Evaluate the expression on the given environment 
             * for the given variable mapping. Returns the string of expression that needs
             * to be satisfied (when satisfiable) else returns null */

            if (type == nodeType.Null) //leaf-type
            {
                //convert this.exp using map
                String instant = this.instantiate(this.exp, map);
				if (instant.Length == 0)//"" represents True
					return ""; 
                int code = env.isSastified(instant);
                if (code == -1) //unsatisfiable
                    return null;
                else if (code == 0) //satisfiable but not satisfied
                    return instant;
                else if (code == 1)//satisfiable and satisfied
                    return "";
            }
            else if (type == nodeType.And) //and-type
            {
                String ans = "";
                foreach (Expression exp in this.arguments)
                {
                    String ret = exp.evaluate(env, map);
					if (ret == null)
						return null;
					else if (ret.Count () > 0) 
					{
						if (ans.Length == 0)
							ans = ret;
						else ans = ans + "^" + ret;
					}
                }
                return ans;
            }
            else if (type == nodeType.For)
            {
                //only for condition that we are handling is =?o ?otherobj
				List<Object> objL = env.objects;
                String resOuter = "";
                foreach (Object obj in objL)
                {
                    map.Add(new Tuple<string, string>("?otherobj", obj.uniqueName));
                    String resInner = this.arguments[1].evaluate(env, map);
                    map.RemoveAt(map.Count() - 1);

                    if (resInner == null)
                        return null;
                    if (!resInner.Equals(""))
                    {
						if (resInner.Count () > 0) 
						{
							if(resOuter.Length==0)
								resOuter = resInner;
							else resOuter = resOuter + "^" + resInner;
						}
                    }
                }
                return resOuter;
            }
            else if (type == nodeType.When)
            {
                String condnEval = this.arguments[0].evaluate(env, map);
                if (condnEval == null)
                    return null;

                if (!condnEval.Equals("")) //if the condition is false we are true
                    return "";

                return this.arguments[1].evaluate(env, map);
            }
            else if (type == nodeType.Not)
            {
                String res = this.arguments[0].evaluate(env, map);
                if (res == null)
                    return null;
                if (res.Equals(""))
					return "not (" + this.instantiate(this.arguments[0].exp, map) + ")";
                else return "";
            }
            else throw new ApplicationException("Unknown PDDL syntax "+this.exp);

            return null;
        }

		public void modify(Environment env, List<Tuple<String,String>> map)
		{
			/* Function Description : Modifies the given environment
			 * according to this expression and map. That is if the
			 * expression is (IsGrasping Robot ?x) and map is ?x->cup
			 * then make the robot grasp the cup */

			if (type == nodeType.Null) //leaf-type
			{
				String instant = this.instantiate(this.exp, map); //convert this.exp using map
				if (!instant.Equals ("")) 
					env.modify (instant, true);
			}
			else if (type == nodeType.And) //and-type
			{
				/* Handling if-else - a common scenario occurs as 
				*  (and (when (C) (not C)) (when (not C) (C)))
				*  (and (when (not C) (C)) (when (C) (not C)))
				*  in this case due to sequential evaluation on C (not C resp.) we end up going back to C (not C resp.)
				*  to solve this we constraint that all if-else occur at same level and must be placed
				*  one after the other. */

				List<int> allowed = new List<int> ();
				for (int i=0; i<this.arguments.Count(); i++) 
				{
					if(this.arguments[i].type == nodeType.When)
					{
						//evaluate the when condition on the current environment
						String ans = this.arguments [i].arguments [0].evaluate (env, map);
						if (ans != null && ans.Equals (""))
							allowed.Add(i);
					}
					else allowed.Add(i);
				}

				for(int i=0;i<allowed.Count();i++) 
				{
					Expression exp = this.arguments[allowed[i]];
					exp.modify (env, map);

					/*if (exp.type == nodeType.When && exp.arguments [0].type == nodeType.Null) //condition C 
					{
						if (i + 1 < this.arguments.Count () && this.arguments [i + 1].type == nodeType.When
						    && this.arguments[i+1].arguments[0].type == nodeType.Not)  //when (not ..) (...)
						{
							//Check if the two conditions are same or not 
							String c1 = exp.arguments [0].exp;
							String c2 = this.arguments [i + 1].arguments [0].arguments [0].exp;
							if (c1 == null || c2 == null)
								continue;
							//don't evalute if the two conditions are of form C and not C and first one has been evaluated to be true
							String ans = exp.arguments [0].evaluate (env, map);
							if (c1.Equals (c2))  
								allowed = false;
						}
					}
					else if(exp.type == nodeType.When && exp.arguments[0].type == nodeType.Not) //condition not C
					{
						if (i + 1 < this.arguments.Count () && this.arguments [i + 1].type == nodeType.When) //when (..) (...)
						{
							//Check if the two conditions are same or not 
							String c1 = exp.arguments [0].arguments[0].exp;
							String c2 = this.arguments [i + 1].arguments [0].exp;
							if (c1 == null || c2 == null)
								continue;
							//don't evalute if the two conditions are of form not C and C and first one has been evaluated to be true
							if (c1.Equals (c2))
								allowed = false;
						}
					}*/
				}
			}
			else if (type == nodeType.For)
			{
				//only for condition that we are handling is =?o ?otherobj
				List<Object> objL = env.objects;
				foreach (Object obj in objL)
				{
					map.Add(new Tuple<string, string>("?otherobj", obj.uniqueName));
					this.arguments[1].modify(env, map);
					map.RemoveAt (map.Count () - 1);
				}
			}
			else if (type == nodeType.When)
			{
				String condnEval = this.arguments[0].evaluate(env, map);
				if (condnEval!=null && condnEval.Equals (""))  //if condition is true then modify the inner stuff
					this.arguments[1].modify(env, map);
			}
			else if (type == nodeType.Not)
			{
				/* if not is used as not (rel1 and rel2) then we
				 * will not know which one to change. Infact in effect,
				 * this condition is undesirable. This is telling us that
				 * we should not have not(p and q) are true. But we can then
				 * replace it simply by not p and q as even then we will not have
				 * p and q as true. */

				Expression innerAtom = this.arguments [0];
				if (innerAtom.type != nodeType.Null) //it has to not p where p is atom
					throw new ApplicationException("Non-deterministic Effect Not (P and Q) ");
				//make it false
				String instant = this.instantiate(innerAtom.exp, map);
				if (instant.Equals ("")) 
					throw new ApplicationException ("");
				env.modify (instant,false);
			}
			else throw new ApplicationException("Unknown PDDL syntax "+this.exp);
		}

		public List<String> getExpressionCover(String var)
		{
			/* Function Description: Returns those predicates rooted at this expression
			 * that concerns the given variable */

			List<String> res = new List<String> ();
			if (this.exp != null) 
			{
				String[] wordify = this.exp.Split (new char[]{' '});
				for (int wi=0; wi<wordify.Length; wi++) 
				{
					if (wordify[wi].Equals (var)) 
						return new List<String> () { this.exp };
				}
				return res;
			}

			foreach (Expression arg in this.arguments) 
				res = res.Concat (arg.getExpressionCover(var)).ToList();
			return res;
		}
    }
}
